"use strict";(self.webpackChunkBloodAndBullets=self.webpackChunkBloodAndBullets||[]).push([[813],{"./src/components/HudPanel/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{q:()=>HudPanel_HudPanel});var react=__webpack_require__("./node_modules/react/index.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");class HudPanel_HudPanel extends react.Component{render(){return(0,jsx_runtime.jsxs)("div",{className:"hud-panel",children:[(0,jsx_runtime.jsx)("div",{className:"hud-panel__title",children:this.props.title}),(0,jsx_runtime.jsx)("div",{className:"hud-panel__content",children:this.props.children})]})}}try{HudPanel_HudPanel.displayName="HudPanel",HudPanel_HudPanel.__docgenInfo={description:"",displayName:"HudPanel",props:{title:{defaultValue:null,description:"",name:"title",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/HudPanel/HudPanel.tsx#HudPanel"]={docgenInfo:HudPanel_HudPanel.__docgenInfo,name:"HudPanel",path:"src/components/HudPanel/HudPanel.tsx#HudPanel"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/InfoPanel/InfoPanel.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{V:()=>InfoPanel_InfoPanel}),__webpack_require__("./node_modules/react/index.js");var HudPanel=__webpack_require__("./src/components/HudPanel/index.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function InfoPanel_InfoPanel(_ref){let{title,className,item,onClose}=_ref,finalClassName="\n    ".concat("info-panel"," \n    ").concat(className||"","\n  ");return(0,jsx_runtime.jsxs)("div",{className:finalClassName,children:[(0,jsx_runtime.jsxs)("div",{className:"info-panel__title",title:title,children:[title," ",title&&(null==item?void 0:item.name)&&"-"," ",null==item?void 0:item.name]}),(0,jsx_runtime.jsx)("button",{className:"info-panel__close-button",onClick:onClose,children:"X"}),(0,jsx_runtime.jsxs)("div",{className:"info-panel__content",children:[(null==item?void 0:item.description)&&(0,jsx_runtime.jsx)(HudPanel.q,{title:"Description",children:(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:null==item?void 0:item.description})}),(null==item?void 0:item.manufacturer)&&(0,jsx_runtime.jsx)(HudPanel.q,{title:"Manufacturer",children:(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:null==item?void 0:item.manufacturer})}),(null==item?void 0:item.previousOwners)&&(0,jsx_runtime.jsx)(HudPanel.q,{title:"Previous owners",children:(0,jsx_runtime.jsx)("ul",{children:null==item?void 0:item.previousOwners.map(item=>(0,jsx_runtime.jsx)("li",{children:item},item))})}),item&&(0,jsx_runtime.jsx)(HudPanel.q,{title:"Stats",children:(0,jsx_runtime.jsx)("ul",{children:Object.entries(item).filter(entry=>"number"==typeof entry[1]).sort((entryA,entryB)=>entryA[0].localeCompare(entryB[0])).map(entry=>(0,jsx_runtime.jsx)("li",{children:entry[0]+": "+entry[1]},entry[0]))})})]})]})}try{InfoPanel_InfoPanel.displayName="InfoPanel",InfoPanel_InfoPanel.__docgenInfo={description:"A panel that slides in from the right",displayName:"InfoPanel",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},title:{defaultValue:null,description:"",name:"title",required:!1,type:{name:"string"}},item:{defaultValue:null,description:"",name:"item",required:!0,type:{name:"Item"}},onClose:{defaultValue:null,description:"",name:"onClose",required:!1,type:{name:"() => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/InfoPanel/InfoPanel.tsx#InfoPanel"]={docgenInfo:InfoPanel_InfoPanel.__docgenInfo,name:"InfoPanel",path:"src/components/InfoPanel/InfoPanel.tsx#InfoPanel"})}catch(__react_docgen_typescript_loader_error){}},"./src/helpers/Helpers.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function resetGivenFieldsOnACollection(collection){for(var _len=arguments.length,fieldNames=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)fieldNames[_key-1]=arguments[_key];collection.forEach(item=>{fieldNames.forEach(fieldName=>{item&&(item[fieldName]=void 0)})})}function getNumberWithinBoundaries(value,min,max){return value<min&&(value=min),value>max&&(value=max),value}function getRandomIntInclusive(min,max){return Math.floor(Math.random()*(max-min+1))+min}function calculateAngle(x,y){let angle;return y>=0?angle=-(180/Math.PI*Math.atan(x/y)):y<0&&(angle=180/Math.PI*(Math.atan(-(x/y))+Math.PI)),angle}function calculateDistance(x,y){return Math.sqrt(Math.pow(x,2)+Math.pow(y,2))}function applyMixins(derivedCtor,baseCtors){baseCtors.forEach(baseCtor=>{Object.getOwnPropertyNames(baseCtor.prototype).forEach(name=>{Object.defineProperty(derivedCtor.prototype,name,Object.getOwnPropertyDescriptor(baseCtor.prototype,name))})})}function isSelectedTargeted(selected,targeted){return!!selected&&!!targeted&&!!targeted.entity&&selected.name===targeted.entity.name}function turnFlagsIntoClasses(flags,classNameBase){if(!flags)return"";let flagsToClassess={active:"active",isAvailableDestination:"is-available-destination",isChosenDestination:"is-chosen-destination",isBreathing:"breathing",isDead:"dead",isShooting:"shooting",isTargeted:"targeted",isAttacked:"attacked",isLit:"is-lit",isInTwilightZone:"is-in-twilight-zone"},className="";return classNameBase?classNameBase+="--":classNameBase="",Object.keys(flagsToClassess).forEach(key=>{flags[key]&&(className+=" ".concat(classNameBase).concat(flagsToClassess[key]))}),className}function newCopyOfArray(array){return[].concat(array)}function getCssClassesForAGivenSquare(square){if(!square)return;let squareClassNameBase="square",squareClassName="".concat(squareClassNameBase," ").concat(square&&square.squareType);return squareClassName+=turnFlagsIntoClasses(square,squareClassNameBase),square.entity&&(squareClassName+=turnFlagsIntoClasses(square.entity,squareClassNameBase)),squareClassName}__webpack_require__.d(__webpack_exports__,{Mk:()=>getCssClassesForAGivenSquare,QN:()=>calculateAngle,UC:()=>isSelectedTargeted,cL:()=>calculateDistance,ef:()=>applyMixins,l$:()=>turnFlagsIntoClasses,mn:()=>newCopyOfArray,n0:()=>resetGivenFieldsOnACollection,tT:()=>getRandomIntInclusive,yu:()=>getNumberWithinBoundaries})},"./src/resources/CharacterDefinitions.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{qm:()=>characterDefinitions});var _ItemDefinitions__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/resources/ItemDefinitions.ts"),services__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/services/index.ts");let entitiesInitialValues=[{name:"Lazer Blady",rank:"Sergeant",description:"He's here to kick ass and chew bubble gum, and he's all out of gum.",hp:75,maxHp:100,icon:"üßë‚ÄçüöÄ",isFriendly:!0,position:{x:6,y:8},inventory:[new _ItemDefinitions__WEBPACK_IMPORTED_MODULE_0__.UY],equipment:{hands:new _ItemDefinitions__WEBPACK_IMPORTED_MODULE_0__.qC},actionPoints:10,maxActionPoints:10},{name:"John Doe",rank:"Corporal",description:"Tough as nails. Been to many wars. He has seen things you wouldn't believe.",hp:90,maxHp:100,icon:"üßë",isFriendly:!0,bleedingReductionPerTurn:3,position:{x:8,y:9},inventory:[new _ItemDefinitions__WEBPACK_IMPORTED_MODULE_0__.UY],equipment:{hands:new _ItemDefinitions__WEBPACK_IMPORTED_MODULE_0__.vE},actionPoints:6,maxActionPoints:6},{name:"Robot",rank:"Asset",description:"DST-7 Security Droid. Powered by an Energy Cell, it can stay in suspended animation for years and activate at a moment's notice to battle the intruders. Armed and armored.",hp:50,maxHp:50,icon:"ü§ñ",isFriendly:!0,isBreathing:!1,position:{x:2,y:5},equipment:{hands:new _ItemDefinitions__WEBPACK_IMPORTED_MODULE_0__.UT},inventory:[new _ItemDefinitions__WEBPACK_IMPORTED_MODULE_0__.UY],bleedingReductionPerTurn:50},{name:"Octo",description:"Octopii are long lived and tough, but they suffer outside fluid environment and are vulnerable to bleeding.",hp:200,maxHp:200,icon:"üêô",position:{x:8,y:2},bleedingReductionPerTurn:0,bleeding:1,equipment:{hands:new _ItemDefinitions__WEBPACK_IMPORTED_MODULE_0__.qC}},{name:"Squid",description:"Squids possess camouflage capabilities that allow them to blend with the environment and become unnoticable.They are not as strong as Octopii, but they are fast and they can handle heavy weapons with ease thanks to their strong tentacles.",hp:100,maxActionPoints:5,maxHp:100,icon:"ü¶ë",position:{x:4,y:2},equipment:{hands:new _ItemDefinitions__WEBPACK_IMPORTED_MODULE_0__.vE}},{name:"Ant",description:"Formids are countless like grains of sand. Do not let them get out of control on your ship.",hp:45,maxHp:50,icon:"üêú",isBreathing:!0,position:{x:7,y:5},equipment:{hands:new _ItemDefinitions__WEBPACK_IMPORTED_MODULE_0__.LQ}},{name:"Henry The Spider",description:"Friendly eight-eyed creature, helping to keep the ship bug-free. Spacers say it's bad luck to kill a spider. Better keep it alive.",hp:100,maxHp:150,maxActionPoints:3,icon:"üï∑Ô∏è",position:{x:9,y:3},equipment:{hands:new _ItemDefinitions__WEBPACK_IMPORTED_MODULE_0__.UT}},{name:"Mosquito",description:"This blood sucking creature isn't very fast, but it can sustain itself on any blood it can find. It's also efficient at stopping it's own bleeding. ",hp:12,maxHp:20,icon:"ü¶ü",position:{x:0,y:7},equipment:{hands:new _ItemDefinitions__WEBPACK_IMPORTED_MODULE_0__.LQ},actionPoints:1,maxActionPoints:1,bleedingReductionPerTurn:5},{name:"Microbe",description:"Space-bourne pathogens can be dangerous. Luckily, they're also easily dispatched, at least in most cases. This specimen is enormous for a Microbe, but it is also very weak. ",hp:1,maxHp:5,icon:"ü¶†",position:{x:3,y:8},equipment:{hands:new _ItemDefinitions__WEBPACK_IMPORTED_MODULE_0__.qC}}],characterDefinitions=services__WEBPACK_IMPORTED_MODULE_1__.gB.changeEntitiesIntoFullBlownObjects(entitiesInitialValues)},"./src/resources/ItemDefinitions.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{LQ:()=>M16,UT:()=>R40,UY:()=>G17,qC:()=>L30,vE:()=>M40,wI:()=>M37});var services__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/services/index.ts");class G17 extends services__WEBPACK_IMPORTED_MODULE_0__.uN{constructor(){super(),this.properties={name:"G17",description:"High capacity semi-automatic pistol, mass-produced on Old Terra. Still millions of them are in use today. Cheap and reliable. Fires the ever-popular 9mm Parabellum bullet.",manufacturer:"Glock Ges.m.b.H.",charges:17,maxCharges:17,reloadCostInAP:1,damage:2,range:4,mass:1},Object.assign(this,this.properties)}}class M16 extends services__WEBPACK_IMPORTED_MODULE_0__.uN{constructor(){super(),this.properties={name:"M16",description:"Ancient combat rifle from Old Terra. Relatively light. Fires 5.56mm FMJ rounds.",manufacturer:"Colt's Manufacturing Company",charges:20,maxCharges:20,reloadCostInAP:4,damage:3,range:8,mass:3},Object.assign(this,this.properties)}}class M40 extends services__WEBPACK_IMPORTED_MODULE_0__.uN{constructor(){super(),this.properties={name:"M41A Pulse Rifle",description:"Heavy but effective long range kinetic weapon. Fires 10 millimeter explosive-tip caseless. Standard light armor-piercing round. Excells at neutralizing alien threats. ",manufacturer:"Armat Battlefield Systems",charges:10,maxCharges:10,reloadCostInAP:4,damage:5,range:10,mass:4},Object.assign(this,this.properties)}}class M37 extends services__WEBPACK_IMPORTED_MODULE_0__.uN{constructor(){super(),this.properties={name:"Ithaca 37 Shotgun",description:"Good to keep it handy for close encounters. Better than harsh language.",manufacturer:"Ithaca Gun Company",charges:6,maxCharges:6,reloadCostInAP:4,damage:15,range:3,mass:3,causesBleeding:10},this.causedKnockback=3,Object.assign(this,this.properties)}}class L30 extends services__WEBPACK_IMPORTED_MODULE_0__.sM{constructor(){super(),this.properties={name:"L30 Beam Laser",description:"Portable 30kW Energy beam weapon. Fed by energy magazines.",manufacturer:"Amaar Industries",previousOwners:["Amaar Industries Factory"],charges:5,maxCharges:5,reloadCostInAP:2,damage:7,range:10,mass:2},Object.assign(this,this.properties)}}class R40 extends services__WEBPACK_IMPORTED_MODULE_0__.qS{constructor(){super(),this.properties={name:"R40 Rechargable Laser",charges:1,maxCharges:3,damage:7,range:10,mass:2,description:"Portable 40kW Energy beam weapon. Charged over time by an onboard micro-reactor. Gains one charge per turn.",manufacturer:"Amaar Industries",previousOwners:["Intaki Syndicate","Amaar Industries Factory"]},Object.assign(this,this.properties)}}},"./src/resources/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{qC:()=>ItemDefinitions.qC,LQ:()=>ItemDefinitions.LQ,wI:()=>ItemDefinitions.wI,vE:()=>ItemDefinitions.vE,UT:()=>ItemDefinitions.UT,qm:()=>CharacterDefinitions.qm,Qp:()=>structures});var CharacterDefinitions=__webpack_require__("./src/resources/CharacterDefinitions.ts");let structures={box:{name:"box",icon:"üì¶",hp:50,maxHp:70,isBreathing:!1,isPassable:!1,position:{x:4,y:5}},redBarrel:{name:"redBarrel",icon:"üõ¢Ô∏è",hp:50,maxHp:70,isBreathing:!1,isPassable:!0,position:{x:4,y:5}}};var ItemDefinitions=__webpack_require__("./src/resources/ItemDefinitions.ts")},"./src/services/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{sM:()=>EnergyWeapon,gB:()=>EntitiesService,JH:()=>Entity,NR:()=>GameActionsClassForGameComponent,bt:()=>GameLogic,i4:()=>GameModel,D2:()=>GameState,ck:()=>Item,P7:()=>MessageLevel,ez:()=>MessageService,uN:()=>ProjectileWeapon,mq:()=>RangedWeapon,qS:()=>RechargableEnergyWeapon,fi:()=>SquaresService,LW:()=>Weapon,vD:()=>WeaponType});class Identifiable{constructor(){this.id=void 0,this.name="",this.description="",this.icon=" "}}class Positionable{constructor(){this.position={x:void 0,y:void 0},this.isPassable=!1}get isBlocking(){return!this.isPassable}get square(){return SquaresService.getSquareFromPosition(this.position.x,this.position.y)}}class Mortal extends Positionable{constructor(){super(...arguments),this.hp=100,this.maxHp=100}get isDead(){return!this.isAlive}get isAlive(){return this.hp>0}}class HavingInventory extends Identifiable{constructor(){super(...arguments),this.inventory=void 0}takeFromInventory(itemName){this.inventory||(this.inventory=[]);let actualItemIndex=this.inventory.findIndex(item=>item.name===itemName);return -1===actualItemIndex?null:this.inventory.splice(actualItemIndex,1)[0]}addToInventory(item){this.inventory||(this.inventory=[]),this.inventory.push(item)}}var Helpers=__webpack_require__("./src/helpers/Helpers.ts");class Entity{constructor(){this.isFriendly=void 0,this.active=void 0;for(var _len=arguments.length,props=Array(_len),_key=0;_key<_len;_key++)props[_key]=arguments[_key];Object.assign(this,...props),this.id=crypto.randomUUID()}}(0,Helpers.ef)(Entity,[Identifiable,class{constructor(){this.rank=void 0}},Positionable,Mortal,class extends Mortal{constructor(){super(...arguments),this.bleeding=0,this.bleedingReductionPerTurn=1}bleed(){let bloodReleased=0;return this.bleeding&&this.isAlive&&(bloodReleased=this.bleeding,this.hp-=bloodReleased,this.bleeding-=this.bleedingReductionPerTurn,this.bleeding<0&&(this.bleeding=0)),bloodReleased}bleedExternally(){if(!this.bleeding)return;let bloodReleased=this.bleed(),square=SquaresService.getSquareFromPosition(this.position.x,this.position.y);SquaresService.addBloodToSquare(square,bloodReleased)}},class extends Identifiable{constructor(){super(...arguments),this.moveDestination=void 0}setMoveDestinationSquareByNumber(squareIndex){this.setMoveDestinationPosition(SquaresService.getSquarePositionFromIndex(squareIndex))}setMoveDestinationPosition(targetPosition){let targetSquare=SquaresService.getSquareFromPosition(targetPosition.x,targetPosition.y),targetSquareNumber=SquaresService.getSquareIndexFromPosition(targetPosition.x,targetPosition.y);SquaresService.isTargetSquareEnterable(targetSquare)?(this.moveDestination=targetPosition,SquaresService.markSquareAtIndexAsChosenDestination(targetSquareNumber)):MessageService.send("".concat(this.name," can't move into square (").concat(targetPosition.x,", ").concat(targetPosition.y,")"))}},class extends Mortal{constructor(){super(...arguments),this.isSupposedToBeBreathing=void 0}get isBreathing(){return this.isAlive&&this.isSupposedToBeBreathing}set isBreathing(value){this.isSupposedToBeBreathing=value}},class extends Identifiable{constructor(){super(...arguments),this.targetPosition=void 0,this.isShooting=void 0,this.ceaseFire=void 0,this.hasWeapon=void 0,this.attackNumber=void 0}attackPosition(targetedSquarePosition){this.hasWeapon?(this.targetPosition=targetedSquarePosition,this.ceaseFire=!1,this.attackNumber?this.attackNumber++:this.attackNumber=1,console.log(this.attackNumber)):(MessageService.send("".concat(this.name," can't shoot - no weapon equipped")),MessageService.setCursorMessage("No Weapon Equipped")),MessageService.send("".concat(this.name," is attacking square ").concat(targetedSquarePosition.x,",").concat(targetedSquarePosition.y),MessageLevel.debug),console.log(this.name,"is attacking",targetedSquarePosition,this)}},HavingInventory,class extends HavingInventory{constructor(){super(...arguments),this.equipment=void 0,this.hasWeapon=void 0}equipInHands(itemName){this.unEquipFromHands();let item=this.takeFromInventory(itemName);this.equipment.hands=item,item instanceof Weapon?this.hasWeapon=!0:this.hasWeapon=!1}unEquipFromHands(){this.equipment.hands&&(this.addToInventory(this.equipment.hands),this.equipment.hands=null,this.hasWeapon=!1)}},class{constructor(){this.actionPoints=2,this.maxActionPoints=2}}]);class Square extends HavingInventory{constructor(squareIndex){super(),this.squareType="nothing",this.entities=[],this.id=squareIndex,this.entities=[]}addItem(item){this.addToInventory(item)}get items(){return this.inventory}}let MessageLevel=function(MessageLevel){return MessageLevel.log="log",MessageLevel.warning="warning",MessageLevel.debug="debug",MessageLevel}({}),MessageService=new class{constructor(){this.messages=[],this.cursorMessage="",this.cursorMessageNumber=0}send(message){let level=arguments.length>1&&void 0!==arguments[1]?arguments[1]:MessageLevel.log,timestamp=new Date().toISOString().substring(11,23);this.messages.push({message,timestamp,level})}setCursorMessage(messageText){this.cursorMessage=messageText,this.cursorMessageNumber++}},SquaresService=new class{constructor(){this.arenaSize=10,this.squares=[],this.isSquareEnterableByFriendlyUnits=square=>["floor","monster-filter"].includes(square.squareType);let i=this.arenaSize*this.arenaSize;for(;0!=i--;)this.initializeSquareAtIndexIfEmpty(i)}getSquareFromPosition(x,y){return this.squares[this.getSquareIndexFromPosition(x,y)]}setSquareValueAtPosition(x,y,value){this.squares[this.getSquareIndexFromPosition(x,y)]=value}getSquareIndexFromPosition(x,y){return y*this.arenaSize+x}getSquarePositionFromIndex(squareIndex){let y=Math.floor(squareIndex/this.arenaSize);return{x:squareIndex%this.arenaSize,y}}setEntityWithinApropriateSquare(entity){this.setEntityWithinASquareAtPosition(entity.position.x,entity.position.y,entity)}setEntityWithinASquareAtPosition(x,y,entity){let squareIndex=this.getSquareIndexFromPosition(x,y);this.initializeSquareAtIndexIfEmpty(squareIndex),this.squares[squareIndex].entities||(this.squares[squareIndex].entities=[]),Array.isArray(this.squares[squareIndex].entities)||(this.squares[squareIndex].entities=[]),this.squares[squareIndex].entities.push(entity)}addBloodToSquare(square,amount){square.blood?square.blood+=amount:square.blood=amount}markSquareAtIndexAsTargeted(squareIndex){Helpers.n0(this.squares,"isTargeted"),this.initializeSquareAtIndexIfEmpty(squareIndex),this.squares[squareIndex].isTargeted=!0;let squareCoords=this.getSquarePositionFromIndex(squareIndex);MessageService.send("Targetting square #".concat(squareIndex," at ").concat(squareCoords.x,",").concat(squareCoords.y),MessageLevel.debug)}markSquareAtIndexAsAttacked(squareIndex){Helpers.n0(this.squares,"isAttacked"),this.initializeSquareAtIndexIfEmpty(squareIndex),this.squares[squareIndex].isAttacked=!0;let squareCoords=this.getSquarePositionFromIndex(squareIndex);MessageService.send("Marking square #".concat(squareIndex," at ").concat(squareCoords.x,",").concat(squareCoords.y," as attacked"),MessageLevel.debug)}markSquareAtIndexAsChosenDestination(squareIndex){Helpers.n0(this.squares,"isChosenDestination"),this.initializeSquareAtIndexIfEmpty(squareIndex),this.squares[squareIndex].isChosenDestination=!0;let squareCoords=this.getSquarePositionFromIndex(squareIndex);MessageService.send("Marking square #".concat(squareIndex," at ").concat(squareCoords.x,",").concat(squareCoords.y," as chosen destination"),MessageLevel.debug)}initializeSquareAtIndexIfEmpty(squareIndex){this.squares[squareIndex]||(this.squares[squareIndex]=new Square(squareIndex),this.squares[squareIndex].position=this.getSquarePositionFromIndex(squareIndex))}markAvailableDestinationsForSelectedEntity(entity){if(entity.active){let{x,y}=entity.position;Helpers.n0(this.squares,"isAvailableDestination");for(let j=y-1;j<=y+1;j++)if(!(j<0)&&!(j>=this.arenaSize))for(let i=x-1;i<=x+1;i++){if(i<0||i>=this.arenaSize||i===x&&j===y)continue;let square=this.getSquareFromPosition(i,j);this.isSquareEnterableByFriendlyUnits(square)&&(square.isAvailableDestination=!0),this.setSquareValueAtPosition(i,j,square)}}}isTargetSquareEnterable(targetSquare){let unpassableEntitiesInThisSquare=targetSquare.entities&&targetSquare.entities.filter(entity=>!entity.isPassable&&entity.isAlive);return!(unpassableEntitiesInThisSquare&&unpassableEntitiesInThisSquare.length)}lightAllSquares(){this.squares.forEach(square=>square.isLit=!0)}castLightsFromFriendlyEntity(entity){if(entity.isFriendly){let{x,y}=entity.position;for(let j=y-2;j<=y+2;j++)if(!(j<0)&&!(j>=this.arenaSize))for(let i=x-2;i<=x+2;i++){if(i<0||i>=this.arenaSize)continue;let square=this.getSquareFromPosition(i,j);square.isInTwilightZone=!0,this.setSquareValueAtPosition(i,j,square)}for(let j=y-1;j<=y+1;j++)if(!(j<0)&&!(j>=this.arenaSize))for(let i=x-1;i<=x+1;i++){if(i<0||i>=this.arenaSize)continue;let square=this.getSquareFromPosition(i,j);square.isLit=!0,this.setSquareValueAtPosition(i,j,square)}}}};class Item{constructor(){this.id=void 0,this.name="",this.description="",this.manufacturer="",this.previousOwners=void 0,this.mass=0,this.id=crypto.randomUUID()}}class Weapon extends Item{constructor(){super(...arguments),this.type=void 0,this.range=0,this.damage=0,this.causesBleeding=0,this.causesBurning=0}}class RangedWeapon extends Weapon{constructor(){super(...arguments),this.charges=0,this.maxCharges=5,this.reloadCostInAP=1,this.dischargeRatePerShot=1}fire(){return this.charges--,console.log("Firing ranged weapon. Damage: ",this.damage),this.damage}get isAbleToFire(){return this.charges>0}reload(){this.charges=this.maxCharges}}let WeaponType=function(WeaponType){return WeaponType.projectile="projectile",WeaponType.energy="energy",WeaponType}({});class ProjectileWeapon extends RangedWeapon{constructor(){super(...arguments),this.type=WeaponType.projectile,this.causesBleeding=5,this.causesBurning=1}}class EnergyWeapon extends RangedWeapon{constructor(){super(...arguments),this.type=WeaponType.energy,this.causesBleeding=0,this.causesBurning=6}}class RechargableEnergyWeapon extends EnergyWeapon{constructor(){super(...arguments),this.chargingPerTurn=1,this.reloadCostInAP=0}reload(){MessageService.send("Rechargable weapons can't be reloaded manually.")}recharge(){this.charges<this.maxCharges&&(this.charges+=this.chargingPerTurn)}}let defaultEntityValues={bleedingReductionPerTurn:1,isBreathing:!0,isPassable:!1,actionPoints:2,maxActionPoints:2,hasWeapon:!0},EntitiesService=new class{constructor(){this.entities=void 0,this.selected=void 0,this.shouldEntityStopShooting=entity=>entity.ceaseFire||entity.isDead,this.stopShooting=entity=>{entity.isShooting=!1,entity.ceaseFire=!1},this.stopShootingWhenForbidden=entity=>{this.shouldEntityStopShooting(entity)&&this.stopShooting(entity)}}getEntityId(entity){return entity.name}findEntityById(id){return this.entities.filter(entity=>this.getEntityId(entity)===id)[0]}removeEntity(entity){this.removeEntityFromListOfEntities(this.entities,entity)}removeEntityFromListOfEntities(entities,entity){let indexOfEntityToRemove=entities.findIndex(currentEntity=>(currentEntity&&currentEntity.name)===(entity&&entity.name));return -1===indexOfEntityToRemove?-1:(entities.splice(indexOfEntityToRemove,1),0)}addEntity(entity){this.entities.push(entity)}addEntityToDefaultValues(entity){return Object.assign({...defaultEntityValues},entity)}changeEntitiesIntoFullBlownObjects(entitiesInitialValues){return entitiesInitialValues.map(entity=>this.addEntityToDefaultValues(entity)).map(entity=>new Entity(entity))}findItemOnEntity(entity,id){return entity.inventory.filter(item=>this.getEntityId(entity)===id)[0]}moveEntityRandomly(entity){if(entity.isDead||entity.isFriendly)return;let oldPositionX=entity.position.x,oldPositionY=entity.position.y,deltaX=Helpers.tT(-1,1),deltaY=Helpers.tT(-1,1);entity.actionPoints||(deltaX=0,deltaY=0),(deltaX||deltaY)&&entity.actionPoints--,entity.position.x=entity.position.x+deltaX,entity.position.y=entity.position.y+deltaY,entity.position.x=Helpers.yu(entity.position.x,0,9),entity.position.y=Helpers.yu(entity.position.y,0,9);let newSquare=SquaresService.getSquareFromPosition(entity.position.x,entity.position.y);(newSquare&&newSquare.entity||newSquare&&"floor"!==newSquare.squareType)&&(entity.position.x=oldPositionX,entity.position.y=oldPositionY)}stopBreathingForKilledEntity(entity){return entity.isDead&&(entity.isBreathing=!1,this.stopShooting(entity),entity.hp=0),entity}getEntitiesAtGivenPosition(targetPosition){return this.entities.filter(potentialTargetEntity=>potentialTargetEntity.position.x===targetPosition.x&&potentialTargetEntity.position.y===targetPosition.y)}getEntitiesAtGivenPositionThatAreAlive(targetPosition){return this.getEntitiesAtGivenPosition(targetPosition).filter(entity=>entity.isAlive)}selectEntityFromGivenSquare(selected,targeted){let newlySelected;return selected&&targeted&&targeted.entities.length&&(selected.active=!1),targeted&&targeted.entities.length&&((newlySelected=targeted.entities[0]).active=!0),newlySelected}setSelected(givenEntity){return this.selected=givenEntity,this.selected.active=!0,this.selected}setDeselected(selected){return this.selected=null,selected.active=!1,console.log("Deselected:",selected),selected}checkAmmoAndCalculateDamageApplied(entity){let damageApplied=0,equippedWeapon=entity.equipment&&entity.equipment.hands;return equippedWeapon instanceof RangedWeapon?equippedWeapon.isAbleToFire?(damageApplied=equippedWeapon.fire(),entity.isShooting=!0,entity.actionPoints--,damageApplied):(equippedWeapon.charges="empty",this.stopShooting(entity),MessageService.setCursorMessage("NO AMMO"),MessageService.send("".concat(entity.name," can't shoot, as they have no ammunition loaded.")),0):0}fireAShot(entity){if(!entity.actionPoints||entity.isDead)return;let damageApplied=this.checkAmmoAndCalculateDamageApplied(entity);this.getEntitiesAtGivenPosition(entity.targetPosition).forEach(targetEntity=>{this.applyDamageToTargetEntity(targetEntity,damageApplied)})}reloadWeapon(entity,weapon){let equippedWeapon=entity.equipment&&entity.equipment.hands;if(!(equippedWeapon instanceof RangedWeapon))return 0;if(weapon=equippedWeapon,entity.equipment.hands&&entity.equipment.hands===weapon&&this.stopShooting(entity),weapon.charges===weapon.maxCharges){MessageService.send("".concat(weapon.name," already fully loaded"));return}entity.actionPoints>=weapon.reloadCostInAP?(entity.actionPoints-=weapon.reloadCostInAP,weapon.reload()):(MessageService.send("".concat(entity.name," has not enough AP to reload ").concat(weapon.name)),MessageService.setCursorMessage("NO AP"))}applyDamageToTargetEntity(targetEntity,damage){damage&&(targetEntity.hp-=damage,targetEntity.bleeding=5)}ceaseFireNextTickIfNoAliveTargets(entity){entity.targetPosition&&(EntitiesService.getEntitiesAtGivenPositionThatAreAlive(entity.targetPosition).length||(entity.ceaseFire=!0))}isEntityTargettingSomethingAlive(entity){let areThereAliveTargetEntities=entity.targetPosition&&!!EntitiesService.getEntitiesAtGivenPositionThatAreAlive(entity.targetPosition).length;return entity.targetPosition&&(entity.targetPosition.x!==entity.position.x||entity.targetPosition.y!==entity.position.y)&&areThereAliveTargetEntities}applyEffectsOfBleeding(entity){return entity.bleedExternally(),entity}moveEntityIntoChosenDestination(entity){if(!entity.actionPoints)return entity;if(!entity.isDead&&entity.moveDestination){let chosenDestinationSquare=SquaresService.getSquareFromPosition(entity.moveDestination.x,entity.moveDestination.y);entity.position=entity.moveDestination,delete entity.moveDestination,chosenDestinationSquare.isChosenDestination=void 0,entity.actionPoints--}return entity}setMoveDestinationOnASelectedEntity(selected,targetedSquarePosition){selected.moveDestination=targetedSquarePosition}moveEntities(){this.entities.filter(entity=>!entity.isFriendly).forEach(entity=>{this.moveEntityRandomly(entity)})}refillActionPointsForAllEntities(){this.entities.forEach(entity=>{entity.actionPoints=entity.maxActionPoints})}rechargeWeaponsForAllEntities(){this.entities.forEach(entity=>{var _entity$inventory;let equippedWeapon=entity.equipment.hands;equippedWeapon instanceof RechargableEnergyWeapon&&(equippedWeapon.recharge(),console.log("Recharging weapon ".concat(equippedWeapon.name," in ").concat(entity.name," hands."))),null==entity||null===(_entity$inventory=entity.inventory)||void 0===_entity$inventory||_entity$inventory.forEach(inventoryItem=>{inventoryItem instanceof RechargableEnergyWeapon&&(inventoryItem.recharge(),console.log("Recharging weapon ".concat(inventoryItem.name," in ").concat(entity.name," hands.")))})})}};var CharacterDefinitions=__webpack_require__("./src/resources/CharacterDefinitions.ts");let intro_namespaceObject=JSON.parse('[{"id":0,"name":"","squareType":"floor","position":{"x":0,"y":0}},{"id":1,"name":"","squareType":"floor","position":{"x":1,"y":0}},{"id":2,"name":"","squareType":"floor","position":{"x":2,"y":0}},{"id":3,"name":"","squareType":"floor","position":{"x":3,"y":0}},{"id":4,"name":"","squareType":"floor","position":{"x":4,"y":0}},{"id":5,"name":"","squareType":"floor","position":{"x":5,"y":0}},{"id":6,"name":"","squareType":"floor","position":{"x":6,"y":0}},{"id":7,"name":"","squareType":"floor","position":{"x":7,"y":0}},{"id":8,"name":"","squareType":"floor","position":{"x":8,"y":0}},{"id":9,"name":"","squareType":"floor","position":{"x":9,"y":0}},{"id":10,"name":"Teleport to SW Corner","description":"Moves you to 0,9","icon":"‚¨áÔ∏è","squareType":"floor","position":{"x":0,"y":1}},{"id":11,"name":"","squareType":"wall","position":{"x":1,"y":1}},{"id":12,"name":"","squareType":"wall","position":{"x":2,"y":1}},{"id":13,"name":"","squareType":"wall","position":{"x":3,"y":1}},{"id":14,"name":"","squareType":"floor","position":{"x":4,"y":1}},{"id":15,"name":"","squareType":"wall","position":{"x":5,"y":1}},{"id":16,"name":"","squareType":"wall","position":{"x":6,"y":1}},{"id":17,"name":"","squareType":"floor","position":{"x":7,"y":1}},{"id":18,"name":"","squareType":"floor","position":{"x":8,"y":1}},{"id":19,"name":"","squareType":"floor","position":{"x":9,"y":1}},{"id":20,"name":"","squareType":"wall","position":{"x":0,"y":2}},{"id":21,"name":"","squareType":"wall","position":{"x":1,"y":2}},{"id":22,"name":"","squareType":"floor","position":{"x":2,"y":2}},{"id":23,"name":"","squareType":"wall","position":{"x":3,"y":2}},{"id":24,"name":"","squareType":"floor","position":{"x":4,"y":2}},{"id":25,"name":"","squareType":"wall","position":{"x":5,"y":2}},{"id":26,"name":"","squareType":"floor","position":{"x":6,"y":2}},{"id":27,"name":"","squareType":"floor","position":{"x":7,"y":2}},{"id":28,"name":"","squareType":"floor","position":{"x":8,"y":2},"entity":{"bleedingReductionPerTurn":0,"isSupposedToBeBreathing":true,"isPassable":false,"actionPoints":2,"maxActionPoints":2,"hasWeapon":true,"name":"Octo","hp":200,"maxHp":200,"icon":"üêô","position":{"x":8,"y":2},"bleeding":1,"equipment":{"hands":{"name":"Assault Lazer Cannon","causesBleeding":0,"range":6,"damage":3,"rounds":30,"maxRounds":30,"type":"lazer"}}},"entities":[{"bleedingReductionPerTurn":0,"isSupposedToBeBreathing":true,"isPassable":false,"actionPoints":2,"maxActionPoints":2,"hasWeapon":true,"name":"Octo","hp":200,"maxHp":200,"icon":"üêô","position":{"x":8,"y":2},"bleeding":1,"equipment":{"hands":{"name":"Assault Lazer Cannon","causesBleeding":0,"range":6,"damage":3,"rounds":30,"maxRounds":30,"type":"lazer"}}}]},{"id":29,"name":"","squareType":"floor","position":{"x":9,"y":2}},{"id":30,"name":"","squareType":"floor","position":{"x":0,"y":3}},{"id":31,"name":"","squareType":"floor","position":{"x":1,"y":3}},{"id":32,"name":"","squareType":"floor","position":{"x":2,"y":3}},{"id":33,"name":"","squareType":"floor","position":{"x":3,"y":3}},{"id":34,"name":"","squareType":"floor","position":{"x":4,"y":3}},{"id":35,"name":"","squareType":"wall","position":{"x":5,"y":3}},{"id":36,"name":"","squareType":"floor","position":{"x":6,"y":3}},{"id":37,"name":"","squareType":"floor","position":{"x":7,"y":3}},{"id":38,"name":"","squareType":"floor","position":{"x":8,"y":3}},{"id":39,"name":"","squareType":"floor","position":{"x":9,"y":3},"entity":{"bleedingReductionPerTurn":1,"isSupposedToBeBreathing":true,"isPassable":false,"actionPoints":2,"maxActionPoints":2,"hasWeapon":true,"name":"Henry The Spider","hp":100,"maxHp":150,"icon":"üï∑Ô∏è","position":{"x":9,"y":3},"equipment":{"hands":{"name":"Assault Lazer Cannon","causesBleeding":0,"range":6,"damage":3,"rounds":30,"maxRounds":30,"type":"lazer"}}},"entities":[{"bleedingReductionPerTurn":1,"isSupposedToBeBreathing":true,"isPassable":false,"actionPoints":2,"maxActionPoints":2,"hasWeapon":true,"name":"Henry The Spider","hp":100,"maxHp":150,"icon":"üï∑Ô∏è","position":{"x":9,"y":3},"equipment":{"hands":{"name":"Assault Lazer Cannon","causesBleeding":0,"range":6,"damage":3,"rounds":30,"maxRounds":30,"type":"lazer"}}}]},{"id":40,"name":"","squareType":"floor","position":{"x":0,"y":4}},{"id":41,"name":"","squareType":"wall","position":{"x":1,"y":4}},{"id":42,"name":"","squareType":"wall","position":{"x":2,"y":4}},{"id":43,"name":"","squareType":"floor","position":{"x":3,"y":4}},{"id":44,"name":"","squareType":"floor","position":{"x":4,"y":4}},{"id":45,"name":"","squareType":"wall","position":{"x":5,"y":4}},{"id":46,"name":"","squareType":"floor","position":{"x":6,"y":4},"entity":{"bleedingReductionPerTurn":1,"isSupposedToBeBreathing":true,"isPassable":false,"actionPoints":0,"maxActionPoints":2,"hasWeapon":true,"name":"Squid","hp":100,"maxHp":100,"icon":"ü¶ë","position":{"x":6,"y":4},"equipment":{"hands":{"name":"M41A Pulse Rifle","causesBleeding":2,"range":4,"damage":1,"rounds":40,"maxRounds":40,"type":"projectile"}}},"entities":[{"bleedingReductionPerTurn":1,"isSupposedToBeBreathing":true,"isPassable":false,"actionPoints":0,"maxActionPoints":2,"hasWeapon":true,"name":"Squid","hp":100,"maxHp":100,"icon":"ü¶ë","position":{"x":6,"y":4},"equipment":{"hands":{"name":"M41A Pulse Rifle","causesBleeding":2,"range":4,"damage":1,"rounds":40,"maxRounds":40,"type":"projectile"}}}]},{"id":47,"name":"","squareType":"floor","position":{"x":7,"y":4}},{"id":48,"name":"","squareType":"floor","position":{"x":8,"y":4}},{"id":49,"name":"","squareType":"floor","position":{"x":9,"y":4}},{"id":50,"name":"","squareType":"floor","position":{"x":0,"y":5}},{"id":51,"name":"","squareType":"wall","position":{"x":1,"y":5}},{"id":52,"name":"","squareType":"floor","position":{"x":2,"y":5}},{"id":53,"name":"","squareType":"floor","position":{"x":3,"y":5},"entity":{"isFriendly":true,"bleedingReductionPerTurn":50,"isSupposedToBeBreathing":false,"isPassable":false,"actionPoints":2,"maxActionPoints":2,"hasWeapon":true,"name":"Robot","age":1,"hp":50,"maxHp":50,"icon":"ü§ñ","position":{"x":3,"y":5},"equipment":{"hands":{"name":"Assault Lazer Cannon","causesBleeding":0,"range":6,"damage":3,"rounds":30,"maxRounds":30,"type":"lazer"}}},"entities":[{"isFriendly":true,"bleedingReductionPerTurn":50,"isSupposedToBeBreathing":false,"isPassable":false,"actionPoints":2,"maxActionPoints":2,"hasWeapon":true,"name":"Robot","age":1,"hp":50,"maxHp":50,"icon":"ü§ñ","position":{"x":3,"y":5},"equipment":{"hands":{"name":"Assault Lazer Cannon","causesBleeding":0,"range":6,"damage":3,"rounds":30,"maxRounds":30,"type":"lazer"}}}]},{"id":54,"name":"","squareType":"floor","position":{"x":4,"y":5}},{"id":55,"name":"","squareType":"wall","position":{"x":5,"y":5}},{"id":56,"name":"","squareType":"floor","position":{"x":6,"y":5}},{"id":57,"name":"","squareType":"floor","position":{"x":7,"y":5}},{"id":58,"name":"","squareType":"wall","position":{"x":8,"y":5}},{"id":59,"name":"","squareType":"wall","position":{"x":9,"y":5}},{"id":60,"name":"","squareType":"floor","position":{"x":0,"y":6}},{"id":61,"name":"","squareType":"wall","position":{"x":1,"y":6}},{"id":62,"name":"","squareType":"wall","position":{"x":2,"y":6}},{"id":63,"name":"","squareType":"wall","position":{"x":3,"y":6}},{"id":64,"name":"","squareType":"wall","position":{"x":4,"y":6}},{"id":65,"name":"","squareType":"wall","position":{"x":5,"y":6}},{"id":66,"name":"","squareType":"floor","position":{"x":6,"y":6}},{"id":67,"name":"","squareType":"wall","position":{"x":7,"y":6}},{"id":68,"name":"","squareType":"wall","position":{"x":8,"y":6}},{"id":69,"name":"","squareType":"nothing","position":{"x":9,"y":6}},{"id":70,"name":"","squareType":"floor","position":{"x":0,"y":7}},{"id":71,"name":"","squareType":"floor","position":{"x":1,"y":7}},{"id":72,"name":"","squareType":"floor","position":{"x":2,"y":7},"entity":{"bleedingReductionPerTurn":1,"isSupposedToBeBreathing":true,"isPassable":false,"actionPoints":1,"maxActionPoints":1,"hasWeapon":true,"name":"Mosquito","hp":12,"maxHp":20,"icon":"ü¶ü","position":{"x":2,"y":7},"equipment":{"hands":{"name":"M16","causesBleeding":2,"range":4,"damage":2,"rounds":15,"maxRounds":20,"type":"projectile"}}},"entities":[{"bleedingReductionPerTurn":1,"isSupposedToBeBreathing":true,"isPassable":false,"actionPoints":1,"maxActionPoints":1,"hasWeapon":true,"name":"Mosquito","hp":12,"maxHp":20,"icon":"ü¶ü","position":{"x":2,"y":7},"equipment":{"hands":{"name":"M16","causesBleeding":2,"range":4,"damage":2,"rounds":15,"maxRounds":20,"type":"projectile"}}}]},{"id":73,"name":"","squareType":"floor","position":{"x":3,"y":7}},{"id":74,"name":"","squareType":"floor","position":{"x":4,"y":7}},{"id":75,"name":"","squareType":"wall","position":{"x":5,"y":7}},{"id":76,"name":"","squareType":"floor","position":{"x":6,"y":7}},{"id":77,"name":"","squareType":"wall","position":{"x":7,"y":7}},{"id":78,"name":"","squareType":"floor","position":{"x":8,"y":7},"entity":{"bleedingReductionPerTurn":1,"isSupposedToBeBreathing":true,"isPassable":false,"actionPoints":0,"maxActionPoints":2,"hasWeapon":true,"name":"Ant","age":1,"hp":45,"maxHp":50,"icon":"üêú","position":{"x":8,"y":7},"equipment":{"hands":{"name":"M41A Pulse Rifle","causesBleeding":2,"range":4,"damage":1,"rounds":40,"maxRounds":40,"type":"projectile"}}},"entities":[{"bleedingReductionPerTurn":1,"isSupposedToBeBreathing":true,"isPassable":false,"actionPoints":0,"maxActionPoints":2,"hasWeapon":true,"name":"Ant","age":1,"hp":45,"maxHp":50,"icon":"üêú","position":{"x":8,"y":7},"equipment":{"hands":{"name":"M41A Pulse Rifle","causesBleeding":2,"range":4,"damage":1,"rounds":40,"maxRounds":40,"type":"projectile"}}}]},{"id":79,"name":"","squareType":"floor","position":{"x":9,"y":7}},{"id":80,"name":"","squareType":"floor","position":{"x":0,"y":8}},{"id":81,"name":"","squareType":"floor","position":{"x":1,"y":8}},{"id":82,"name":"","squareType":"floor","position":{"x":2,"y":8}},{"id":83,"name":"","squareType":"floor","position":{"x":3,"y":8},"entity":{"bleedingReductionPerTurn":1,"isSupposedToBeBreathing":true,"isPassable":false,"actionPoints":2,"maxActionPoints":2,"hasWeapon":true,"name":"Microbe","hp":1,"maxHp":5,"icon":"ü¶†","position":{"x":3,"y":8},"equipment":{"hands":{"name":"Assault Lazer Cannon","causesBleeding":0,"range":6,"damage":3,"rounds":30,"maxRounds":30,"type":"lazer"}}},"entities":[{"bleedingReductionPerTurn":1,"isSupposedToBeBreathing":true,"isPassable":false,"actionPoints":2,"maxActionPoints":2,"hasWeapon":true,"name":"Microbe","hp":1,"maxHp":5,"icon":"ü¶†","position":{"x":3,"y":8},"equipment":{"hands":{"name":"Assault Lazer Cannon","causesBleeding":0,"range":6,"damage":3,"rounds":30,"maxRounds":30,"type":"lazer"}}}]},{"id":84,"name":"","squareType":"floor","position":{"x":4,"y":8}},{"id":85,"name":"Teleport to NW Corner","description":"Moves you to 0,0","icon":"‚ÜñÔ∏è","squareType":"floor","position":{"x":5,"y":8}},{"id":86,"name":"","squareType":"floor","position":{"x":6,"y":8},"isTargeted":true,"entity":{"isFriendly":true,"bleedingReductionPerTurn":1,"isSupposedToBeBreathing":true,"isPassable":false,"actionPoints":2,"maxActionPoints":2,"hasWeapon":true,"name":"Lazer Blady","hp":75,"maxHp":100,"icon":"üßë‚ÄçüöÄ","position":{"x":6,"y":8},"inventory":[{"name":"M16","causesBleeding":2,"range":4,"damage":2,"rounds":15,"maxRounds":20,"type":"projectile"}],"equipment":{"hands":{"name":"Assault Lazer Cannon","causesBleeding":0,"range":6,"damage":3,"rounds":30,"maxRounds":30,"type":"lazer"}}},"entities":[{"isFriendly":true,"bleedingReductionPerTurn":1,"isSupposedToBeBreathing":true,"isPassable":false,"actionPoints":2,"maxActionPoints":2,"hasWeapon":true,"name":"Lazer Blady","hp":75,"maxHp":100,"icon":"üßë‚ÄçüöÄ","position":{"x":6,"y":8},"inventory":[{"name":"M16","causesBleeding":2,"range":4,"damage":2,"rounds":15,"maxRounds":20,"type":"projectile"}],"equipment":{"hands":{"name":"Assault Lazer Cannon","causesBleeding":0,"range":6,"damage":3,"rounds":30,"maxRounds":30,"type":"lazer"}}}]},{"id":87,"name":"","squareType":"floor","position":{"x":7,"y":8}},{"id":88,"name":"EXIT","description":"Reach this place to win The Game","icon":"üö™","squareType":"floor","position":{"x":8,"y":8}},{"id":89,"name":"","squareType":"floor","position":{"x":9,"y":8}},{"id":90,"name":"","squareType":"floor","position":{"x":0,"y":9}},{"id":91,"name":"","squareType":"floor","position":{"x":1,"y":9}},{"id":92,"name":"","squareType":"floor","position":{"x":2,"y":9}},{"id":93,"name":"","squareType":"floor","position":{"x":3,"y":9}},{"id":94,"name":"Healing Station","icon":"üè•","description":"This advanced healing station repairs all damage done to a given entity","squareType":"floor","position":{"x":4,"y":9}},{"id":95,"name":"","squareType":"wall","position":{"x":5,"y":9}},{"id":96,"name":"","squareType":"floor","position":{"x":6,"y":9}},{"id":97,"name":"","squareType":"wall","position":{"x":7,"y":9}},{"id":98,"name":"","squareType":"floor","position":{"x":8,"y":9}},{"id":99,"name":"","squareType":"floor","position":{"x":9,"y":9}}]');var resources=__webpack_require__("./src/resources/index.ts");let GameModel=new class{constructor(){this.generatedEntities=void 0,this.generatedEntitiesJSON=void 0,this.entities=void 0,this.squares=void 0,this.saveMap=()=>{console.log("Alive suares:",SquaresService.squares);let squaresStringified=JSON.stringify(JSON.parse(JSON.stringify(SquaresService.squares)).map(square=>square));console.log(squaresStringified);let result=window.prompt("Enter the name of saved map.","map00");localStorage[result]=squaresStringified,window.prompt("Saved the following map as "+result,squaresStringified)},this.loadMap=GameActions=>{let mapNames=Object.keys(localStorage),message="Enter the name of map to load.\n"+"Maps available in localStorage: ".concat(mapNames,"\n")+"Be aware item processing is not working fully yet.";console.log(mapNames);let result=window.prompt(message,mapNames);if(!result)return;let squaresStringified=localStorage[result];if(!squaresStringified)return;console.log(squaresStringified);let squaresLoaded=JSON.parse(squaresStringified);this.loadSquaresIntoService(squaresLoaded);let loadedGeneratedEntities=JSON.parse(this.generatedEntitiesJSON);function processEquipmentForEntityOrEntityRecord(entity){return entity.equipment&&entity.equipment.hands&&(entity.equipment.hands=(entity.equipment.hands,new resources.qC)),entity.inventory&&(entity.inventory=entity.inventory.map(itemRecord=>new resources.qC)),entity}this.loadGeneratedEntitiesIntoService(loadedGeneratedEntities),console.log(EntitiesService.entities),EntitiesService.setSelected(EntitiesService.findEntityById("Lazer Blady G")),GameActions.setSelectedInStateAccordingToSelectedInEntitiesService();let entitiesProcessed=EntitiesService.entities.map(entity=>processEquipmentForEntityOrEntityRecord(entity));console.log("ALIVE ENTITIES?",entitiesProcessed),this.loadEntitiesIntoService(entitiesProcessed),GameActions.setSquaresAccordingToEntities(),GameActions.processInterface()},this.loadSquaresIntoService=squaresLoaded=>{SquaresService.squares.forEach((square,index)=>{let sourceSquare=squaresLoaded[index];square.squareType=sourceSquare&&sourceSquare.squareType||"floor",square.icon=sourceSquare&&sourceSquare.icon||"",square.name=sourceSquare&&sourceSquare.name||"",square.description=sourceSquare&&sourceSquare.description||""})},this.loadEntitiesIntoService=entities=>{EntitiesService.entities=entities},this.loadGeneratedEntitiesIntoService=generatedEntities=>{EntitiesService.entities=EntitiesService.changeEntitiesIntoFullBlownObjects(generatedEntities)},this.loadBuiltInMap=()=>{this.loadSquaresIntoService(intro_namespaceObject)},this.loadPredefinedEntitities=()=>{console.log(CharacterDefinitions.qm),this.loadEntitiesIntoService(CharacterDefinitions.qm)},this.loadGeneratedEntitities=()=>{this.loadGeneratedEntitiesIntoService(this.generatedEntitiesJSON)},this.generateMAP=()=>{function randomizeSquareTypeNumber(min,max){return parseInt(Math.random()*(max-min)+min)}let arrMap=[],squares=[...Array(100).keys()],squareType="wall",id=0,idx=0,idy=0;squares.forEach(square=>{let ent={bleedingReductionPerTurn:1,isSupposedToBeBreathing:!0,isPassable:!1,actionPoints:1,maxActionPoints:1,hasWeapon:!1,name:"Mosquito_".concat(id),hp:12,maxHp:20,icon:"ü¶ü",position:{x:idx,y:idy}};if("wall"==squareType||"nothing"==squareType)switch(randomizeSquareTypeNumber(0,4)){case 3:case 2:case 0:squareType="floor";break;case 1:squareType="wall"}else switch(randomizeSquareTypeNumber(0,4)){case 3:case 2:squareType="floor";break;case 1:squareType="wall";break;case 0:squareType="nothing"}let newSquare={id:id,name:"",icon:"",squareType:squareType,entities:[],position:{x:idx,y:idy},description:""};"floor"==squareType?arrMap.length>1&&(0!=arrMap[arrMap.length-1].entities.length||0!=arrMap[arrMap.length-2].entities.length)?arrMap.push(newSquare):(newSquare.entities.push(ent),console.log("adding  entitty to map",squareType,newSquare,ent),arrMap.push(newSquare),this.generatedEntities.push(ent)):arrMap.push(newSquare),0!=++id&&id%SquaresService.arenaSize==0?(idx=0,idy++):idx++});let lazerBlady={isFriendly:!0,bleedingReductionPerTurn:1,isSupposedToBeBreathing:!0,isPassable:!1,actionPoints:6,maxActionPoints:10,hasWeapon:!0,name:"Lazer Blady G",hp:75,maxHp:100,icon:"üßë‚ÄçüöÄ",position:{x:6,y:8},inventory:[new resources.LQ],equipment:{hands:new resources.qC}};this.generatedEntities.push(lazerBlady),arrMap[SquaresService.getSquareIndexFromPosition(lazerBlady.position.x,lazerBlady.position.y)].entities.push(lazerBlady),console.log(arrMap,this.generatedEntities,"dupa blady"),this.generatedEntitiesJSON=JSON.stringify(this.generatedEntities);let jsonMap=JSON.stringify(arrMap);localStorage.setItem("autoGenMap",jsonMap),this.generatedEntities=[]},this.entities=EntitiesService.entities,this.squares=SquaresService.squares,this.generatedEntities=[],this.generatedEntitiesJSON={}}};var scriptTypes=function(scriptTypes){return scriptTypes.entityPresent="entity-present",scriptTypes.allEntitiesDead="all-entities-dead",scriptTypes}(scriptTypes||{});let ScriptsService=new class{constructor(){this.scripts=[{what:scriptTypes.entityPresent,where:{x:8,y:8},who:"Lazer Blady",condition:"alive",params:[],result:{action:"message",params:["You have reached the exit. You have won the game."]}},{what:scriptTypes.entityPresent,where:{x:6,y:8},who:"Lazer Blady",condition:"alive",params:[],result:{action:"load-map",params:["A2"]}},{what:scriptTypes.entityPresent,where:{x:4,y:9},condition:"alive",params:[],result:{action:"heal",params:[]}},{what:scriptTypes.entityPresent,where:{x:5,y:8},condition:"alive",params:[],result:{action:"move",params:[{x:0,y:0}]}},{what:scriptTypes.entityPresent,where:{x:0,y:1},result:{action:"move",params:[{x:0,y:9}]}}],this.runScripts=param=>{this.scripts.forEach(script=>this.runScript(script))},console.debug(JSON.stringify(this.scripts))}runScript(script){console.log("Running script.",script),this.isConditionFullfilled(script)&&this.executeResult(script)}isConditionFullfilled(script){switch(script.what){case scriptTypes.entityPresent:if(!script.where)break;let entitiesFoundAtLocationGiven=EntitiesService.getEntitiesAtGivenPosition(script.where);console.log("There are ".concat(entitiesFoundAtLocationGiven.length," entities at ").concat(script.where.x,", ").concat(script.where.y));let isAnyEntityPresentAtGivenLocation=entitiesFoundAtLocationGiven.length>0;if(!script.who)return isAnyEntityPresentAtGivenLocation;{let isGivenEntityFoundAtGivenLocation=!1;return entitiesFoundAtLocationGiven.forEach(entityAtLocation=>{entityAtLocation.name===script.who&&(isGivenEntityFoundAtGivenLocation=!0)}),isGivenEntityFoundAtGivenLocation}}return!1}executeResult(script){switch(script.result.action){case"message":MessageService.send(script.result.params[0]);break;case"load-map":console.log("Going to loadMap",script.result.params[0]);break;case"heal":console.log("Going to heal ".concat(script.where.x,",").concat(script.where.y)),EntitiesService.getEntitiesAtGivenPosition(script.where).forEach(entityAtLocation=>{MessageService.send("Healing ".concat(entityAtLocation.name," from ").concat(entityAtLocation.hp," to ").concat(entityAtLocation.maxHp)),entityAtLocation.hp=entityAtLocation.maxHp});break;case"move":console.log("Going to heal ".concat(script.where.x,",").concat(script.where.y)),EntitiesService.getEntitiesAtGivenPosition(script.where).forEach(entityAtLocation=>{let targetDestination=script.result.params[0];MessageService.send("Moving ".concat(entityAtLocation.name," from ").concat(entityAtLocation.position.x,", ").concat(entityAtLocation.position.y," to\n          ").concat(targetDestination.x,",").concat(targetDestination.y)),entityAtLocation.position.x=targetDestination.x,entityAtLocation.position.y=targetDestination.y})}}},GameLogic=new class{constructor(){this.model=void 0,this.run=()=>{console.log("Running Game Logic"),console.log(GameModel.entities)},this.calculateNextInterfaceState=previousState=>{let{entities,selected}=previousState;return entities.forEach(entity=>{entity===selected&&SquaresService.markAvailableDestinationsForSelectedEntity(selected)}),previousState},this.syncSquaresWithEntities=previousState=>{let squares=Helpers.mn(previousState.squares);SquaresService.squares=squares;let entities=EntitiesService.entities;return entities.length&&Helpers.n0(squares,"entity","entities"),entities.forEach(entity=>{SquaresService.setEntityWithinApropriateSquare(entity)}),{squares,entities}},this.deselectAllEntities=()=>{Helpers.n0(EntitiesService.entities,"active"),Helpers.n0(SquaresService.squares,"isChosenDestination","isAvailableDestination")},this.ceaseFire=()=>{Helpers.n0(GameModel.entities,"isShooting")},this.model=GameModel}calculateNextGameStateAfterProcessingAGivenEntity(previousState,givenEntity){if(0===givenEntity.actionPoints)return MessageService.send("".concat(givenEntity.name," has not enough AP to execute this action")),MessageService.setCursorMessage("NO AP"),previousState;let{entities}=previousState;return this.processAnEntity(givenEntity),previousState.enemiesAlive=this.calculateNumberOfAliveEnemies(entities),previousState.friendsAlive=this.calculateNumberOfAliveFriends(entities),ScriptsService.runScripts(givenEntity),previousState}processAnEntity(entity){console.log("start procesing",entity),EntitiesService.moveEntityRandomly(entity),EntitiesService.moveEntityIntoChosenDestination(entity),EntitiesService.stopShootingWhenForbidden(entity),EntitiesService.isEntityTargettingSomethingAlive(entity)&&EntitiesService.fireAShot(entity),EntitiesService.ceaseFireNextTickIfNoAliveTargets(entity),entity.bleedExternally(),EntitiesService.stopBreathingForKilledEntity(entity),SquaresService.markAvailableDestinationsForSelectedEntity(entity),console.log("end procesing",entity)}calculateNumberOfAliveFriends(entities){return entities.filter(entity=>entity.isFriendly&&entity.isAlive).length}calculateNumberOfAliveEnemies(entities){let amountOfAliveEnemies=0;return entities.forEach(entity=>{!entity.isFriendly&&entity.isAlive&&amountOfAliveEnemies++}),amountOfAliveEnemies}};class GameState{constructor(){Object.assign(this,{entities:EntitiesService.entities,squares:SquaresService.squares,selected:EntitiesService.selected,targeted:null,targetedSquareNumber:null,arenaSize:10,squareSize:40,enemiesAlive:GameLogic.calculateNumberOfAliveEnemies(EntitiesService.entities),friendsAlive:GameLogic.calculateNumberOfAliveFriends(EntitiesService.entities),isAutoLoopOn:!1,isBoardRotated:!1,isEditorOn:!1})}}let gameComponent=null;class GameActionsClassForGameComponent{constructor(that){this.entitiesProcessingLoopIntervalHandle=null,this.playerActionTime=1e3,this.toggleEditorMode=()=>{gameComponent.state.isEditorOn?gameComponent.setState(prevState=>({squares:SquaresService.squares,entities:EntitiesService.entities,isEditorOn:!1})):(Helpers.n0(gameComponent.state.squares,"blood","entity"),gameComponent.setState(prevState=>({entities:[],isEditorOn:!0})))},this.loop=()=>{if(console.debug("Attempting loop"),this.isTurnInProgress){setTimeout(this.loop,1e3);return}console.debug("Executing nextStep"),this.nextTurn(),gameComponent.state.isAutoLoopOn&&(console.debug("Scheduling next loop step in 1s"),setTimeout(this.loop,1e3))},this.endTurn=()=>{gameComponent.setState({isAutoLoopOn:!1}),this.nextTurn()},this.executeActions=()=>{MessageService.send("Executing actions",MessageLevel.debug),gameComponent.setState(prevState=>GameLogic.calculateNextGameStateAfterProcessingAGivenEntity(prevState,EntitiesService.selected),()=>this.afterExecuteActions()),this.processInterface()},this.afterExecuteActions=()=>{this.setSquaresAccordingToEntities()},this.handleKeyPress=param=>{console.log(param),"space"===param&&this.executeActions()},this.handleClickV2=squareIndex=>{gameComponent.setState(state=>{let{selected,targeted,targetedSquareNumber:selectedSquareNumber}=state,{squares,entities,isEditorOn}=state,previousTargeted=targeted;if(targeted=squares[squareIndex],selectedSquareNumber=squareIndex,SquaresService.markSquareAtIndexAsTargeted(squareIndex),selected&&(selected.isShooting=!1),isEditorOn){let squareCoords=targeted.position;switch(MessageService.send("Editing square #".concat(squareIndex," at ").concat(squareCoords.x,",").concat(squareCoords.y),MessageLevel.debug),targeted.squareType){case"floor":targeted.squareType="wall";break;case"wall":targeted.squareType="nothing";break;case"nothing":targeted.squareType="monster-filter";break;case"monster-filter":targeted.squareType="floor"}}if(previousTargeted===targeted&&selected&&doesSquareHaveAliveEntities(targeted)){let targetSquarePosition=SquaresService.getSquarePositionFromIndex(squareIndex);selected.attackPosition(targetSquarePosition),SquaresService.markSquareAtIndexAsAttacked(squareIndex),delete selected.moveDestination,delete selected.isShooting,Helpers.n0(squares,"isChosenDestination"),this.executeActions()}else previousTargeted===targeted&&targeted.isAvailableDestination&&(selected.setMoveDestinationSquareByNumber(squareIndex),delete selected.targetPosition,delete selected.isShooting,Helpers.n0(squares,"isAttacked"),this.executeActions());if(previousTargeted===targeted){var _targeted,_targeted$entities,_targeted2;let targetEntity=(null===(_targeted=targeted)||void 0===_targeted?void 0:null===(_targeted$entities=_targeted.entities)||void 0===_targeted$entities?void 0:_targeted$entities.length)&&(null===(_targeted2=targeted)||void 0===_targeted2?void 0:_targeted2.entities[0]);!selected&&null!=targetEntity&&targetEntity.isAlive&&null!=targetEntity&&targetEntity.isFriendly?(selected=EntitiesService.selectEntityFromGivenSquare(selected,targeted),MessageService.send("Selecting an entity ".concat(selected.name," at ").concat(selected.position.x,",").concat(selected.position.y),MessageLevel.debug),EntitiesService.setSelected(selected),this.setSelectedInStateAccordingToSelectedInEntitiesService()):Helpers.UC(selected,targeted)}function doesSquareHaveAliveEntities(square){return!!(square.entities&&square.entities.find(entity=>entity.isAlive))}return{squares,entities,selected,targeted,targetedSquareNumber:selectedSquareNumber}},()=>this.processInterface())},this.aggro=entity=>{let position=entity.position,entitiesToAttack=this.findEntitiesThatAreClose(position).filter(closeEntity=>closeEntity.hp>0);if(entitiesToAttack.length){let firstAmongThem=entitiesToAttack[0];entity.attackPosition(firstAmongThem.position)}},this.nuke=dmg=>{gameComponent.setState(state=>{let{entities}=state;return entities.forEach(entity=>{entity.hp=entity.hp-dmg}),{entities}},()=>{this.processEntities()})},this.toggleRotateBoard=()=>{gameComponent.setState({isBoardRotated:!gameComponent.state.isBoardRotated})},this.switchAutoLoop=()=>{gameComponent.setState(previousState=>{let isAutoLoopOn=!previousState.isAutoLoopOn;return console.info("Switching auto loop to",isAutoLoopOn),{isAutoLoopOn}},()=>{gameComponent.state.isAutoLoopOn&&this.loop()})},this.onInventoryClick=(entity,itemName)=>{gameComponent.setState(prevState=>{let entities=[].concat(prevState.entities);EntitiesService.entities=entities;let entityId=EntitiesService.getEntityId(entity),actualEntity=EntitiesService.findEntityById(entityId);return actualEntity.equipment.hands&&actualEntity.equipment.hands.name===itemName?actualEntity.unEquipFromHands():actualEntity.equipInHands(itemName),actualEntity.isShooting=!1,{entities}}),console.log(entity,itemName)},this.handleDeselectAllEntities=()=>{gameComponent.setState(state=>{let{selected}=state,{squares,entities}=state;return GameLogic.deselectAllEntities(),{squares,entities,selected:void 0}},()=>{})},this.ceaseFire=()=>{Helpers.n0(EntitiesService.entities,"isShooting"),this.processInterface()},this.startUpdatingClickPositionCssVariables=()=>{let updateClickPositionCssVariables=(x,y)=>{console.debug("CLICK EVENT AT:",x,y),document.documentElement.style.setProperty("--mouse-click-position-x",x+"px"),document.documentElement.style.setProperty("--mouse-click-position-y",y+"px")};document.addEventListener("click",event=>updateClickPositionCssVariables(event.clientX,event.clientY))},gameComponent=that}zoomIn(){gameComponent.setState(prevState=>({squareSize:prevState.squareSize+5}))}zoomOut(){gameComponent.setState(prevState=>({squareSize:prevState.squareSize-5}))}get isTurnInProgress(){return this.entitiesProcessingLoopIntervalHandle}nextTurn(){gameComponent.turnNumber++,console.info("Starting processing turn #",gameComponent.turnNumber),EntitiesService.refillActionPointsForAllEntities(),EntitiesService.rechargeWeaponsForAllEntities(),Helpers.n0(EntitiesService.entities,"targetPosition","isShooting"),Helpers.n0(SquaresService.squares,"isAttacked"),this.processEntities()}processEntities(){this.drawAggro(),this.entitiesProcessingLoopIntervalHandle=setInterval(()=>this.processNextUnprocessedEntity(),100)}processNextUnprocessedEntity(){let entitiesForProcessing=EntitiesService.entities.filter(entity=>!entity.isFriendly&&entity.isAlive&&entity.actionPoints>0);if(entitiesForProcessing.length){let entityForThisTurn=entitiesForProcessing[0];this.setNewStateAfterProcessingChosenEntity(entityForThisTurn)}else clearInterval(this.entitiesProcessingLoopIntervalHandle),this.entitiesProcessingLoopIntervalHandle=null,console.log("All entities processed.")}setNewStateAfterProcessingChosenEntity(entity){gameComponent.setState(prevState=>GameLogic.calculateNextGameStateAfterProcessingAGivenEntity(prevState,entity),()=>this.setSquaresAccordingToEntities()),this.processInterface()}processInterface(){gameComponent.setState(prevState=>GameLogic.calculateNextInterfaceState(prevState),()=>this.setSquaresAccordingToEntities())}setSelectedInStateAccordingToSelectedInEntitiesService(){gameComponent.setState(prevState=>({selected:EntitiesService.selected}))}setSquaresAccordingToEntities(){gameComponent.setState(prevState=>GameLogic.syncSquaresWithEntities(prevState))}drawAggro(){EntitiesService.entities.forEach(entity=>{entity.isFriendly||(entity.isShooting=!1,this.aggro(entity))})}findEntitiesThatAreClose(position){let{x,y}=position,entities=[];for(let j=y-1;j<=y+1;j++)if(!(j<0)&&!(j>=SquaresService.arenaSize))for(let i=x-1;i<=x+1;i++){if(i<0||i>=SquaresService.arenaSize||i===x&&j===y)continue;let newlyFoundEntities=EntitiesService.getEntitiesAtGivenPosition({x:i,y:j});entities=entities.concat(newlyFoundEntities)}return entities}}}}]);