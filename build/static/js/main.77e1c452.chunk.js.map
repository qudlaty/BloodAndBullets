{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/EntityView/EntityView.js","components/EntitiesList/EntitiesList.js","components/Game/Game.js","index.js"],"names":["Square","console","log","className","this","props","active","isBreathing","randomTime","Math","random","toFixed","animationBreathing","onClick","squareId","style","animation","value","React","PureComponent","Board","renderCounter","handleClick","bind","i","rowId","colId","squares","key","rowNumber","colNumber","cellId","rows","Array","size","fill","map","row","number","cells","cell","renderSquare","EntityView","renderCount","entity","title","position","x","y","name","age","hp","maxHp","max","percent","Component","ListOfEntities","entities","obj","Game","stepNumber","state","arenaSize","inventory","equipment","head","loop","getSquare","setSquare","setSquaresAccordingToPositions","forEach","targetSquareIndex","slice","JR","floor","setState","setTimeout","selected","dmg","localCopyOfEntities","JSON","parse","stringify","handleBoardClick","nuke","render","document","getElementById"],"mappings":"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","file":"static/js/main.77e1c452.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Square.css\";\n\nclass Square extends React.PureComponent {\n  /*\n    We use PureComponent, so it compares new props with previous props,\n    and only re-renders when props changed.\n   */\n  render() {\n    console.log(\"Rendering Square\");\n    let className = \"square\";\n    if(this.props.active) {\n      className += \" active\";\n    }\n    if(this.props.isBreathing) {\n      className += \" breathing\";\n    }\n    let randomTime = `${(Math.random()+0.5).toFixed(2)}s`\n    let animationBreathing = `breathing ${randomTime} alternate infinite`;\n\n    return (\n      <button className={className} onClick={() => this.props.onClick(this.props.squareId)}>\n        <div className=\"content\" style={{\n          animation: animationBreathing\n        }}>{this.props.value}</div>\n      </button>\n    );\n  }\n}\n\nexport default Square;\n","import React from 'react';\nimport Square from '../Square';\nimport './Board.css';\n\nexport default class Board extends React.PureComponent {\n  renderCounter = 0\n\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(i) {\n    console.log(\"Handles Click on Board\", i);\n    this.props.onClick(i);\n  }\n\n  renderSquare(i, rowId, colId) {\n    /*\n    We pass one and the same function to all the Squares when rendering,\n    so they do not detect getting a new fat-arrow function as a change of props.\n\n    This is CRUCIAL to only rerender squares with changed values.\n\n     */\n\n    return (\n      <Square\n        squareId={i}\n        value={this.props.squares[i] && this.props.squares[i].value}\n        active={this.props.squares[i] && this.props.squares[i].active}\n        onClick={this.handleClick}\n\n        key={i}\n\n        rowNumber={rowId}\n        colNumber={colId}\n      />\n    );\n  }\n\n  render() {\n    console.log(\"Rendering Board. #\", this.renderCounter++);\n\n    // Initial values for the Board\n    let cellId=0;\n    let rowId=0;\n    let colId;\n\n    let rows = Array(this.props.size).fill(null).map((row, number) => {\n      colId = 0;\n      let cells = Array(this.props.size).fill(null).map((cell, number) => {\n        return this.renderSquare(cellId++, rowId, colId++);\n      });\n      return (\n        <div key={rowId++} className=\"board-row\">\n          {cells}\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"board\">\n        {rows}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './EntityView.css';\n\nclass EntityView extends React.Component {\n  renderCount = 0\n\n  render() {\n    console.log(\"Rendering EntityView. #\", this.renderCount++);\n\n    /*\n      FIXME: Below should be separated into several sub-components\n      Each sub-component should receive flat data (position, hp, ...)\n     */\n    let className = \"entity\";\n    if(this.props.entity.active) {\n      className+=\" active\";\n    }\n\n    return (\n      <div className={className}>\n        <div className=\"position\" title=\"Position\">\n          <span>[{this.props.entity.position.x}, {this.props.entity.position.y}]</span>\n        </div>\n        <div className=\"portrait\">\n          {this.props.entity.value}\n        </div>\n        <strong title=\"Name\">{this.props.entity.name}</strong>\n        <em title=\"Age\"> ({this.props.entity.age})</em><br />\n        <span>HP: {this.props.entity.hp}/{this.props.entity.maxHp}</span>\n        <progress\n          title=\"HP\"\n          max={this.props.entity.maxHp}\n          value={this.props.entity.hp}\n          percent={~~(this.props.entity.hp * 100 / this.props.entity.maxHp)}\n        >\n        </progress>\n      </div>\n    );\n  }\n}\n\nexport default EntityView;\n","import React from 'react';\nimport EntityView from '../EntityView';\nimport './EntitiesList.css';\n\nexport default class ListOfEntities extends React.Component {\n  renderCounter = 0\n  render() {\n    console.log(\"Rendering EntitiesList #\", this.renderCounter++);\n    var entities = this.props.entities.map(obj => {\n      return (\n        <EntityView entity={obj} key={obj.name}/>\n      )\n    });\n    return (\n      <div className=\"listOfEntities\">\n        List of Entities: {entities}\n      </div>\n    );\n  }\n}\n","import React from 'react';\r\nimport Board from '../Board';\r\nimport EntitiesList from '../EntitiesList';\r\nimport './Game.css';\r\n\r\nexport default class Game extends React.PureComponent {\r\n\r\n  renderCounter = 0\r\n  stepNumber = 0\r\n  squares = Array(5*5).fill(null)\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      arenaSize: 10,\r\n      entities: [\r\n        {position: {x:0, y:0}, value: \"😠\", name: \"John Rambo\", age: 40, hp: 95, maxHp: 100, inventory: ['KA-BAR', 'M16'], equipment: {head: 'Red Bandana'},isBreathing: true,},\r\n        {position: {x:0, y:1}, value: \"👩\", name: \"Ellen Ripley\", age: 30, hp: 50, maxHp: 65, inventory: ['Motion Detector'], equipment: {head: 'Afro'}, isBreathing: true,},\r\n        {position: {x:8, y:8}, value: \"🐙\", name: \"Octo\", age: 8, hp: 88, maxHp: 100, inventory: [], equipment: {}, isBreathing: true,},\r\n        {position: {x:5, y:5}, value: \"🦑\", name: \"Squid\", age: 5, hp: 55, maxHp: 100, inventory: [], equipment: {}, isBreathing: true,},\r\n      ],\r\n    }\r\n\r\n    this.loop = this.loop.bind(this);\r\n    this.getSquare = this.getSquare.bind(this);\r\n    this.setSquare = this.setSquare.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.setSquaresAccordingToPositions();\r\n    this.loop();\r\n  }\r\n\r\n  setSquaresAccordingToPositions() {\r\n    this.squares = Array(5*5).fill(null);// DRY\r\n    this.state.entities.forEach((entity)=>{\r\n      this.setSquare(entity.position.x, entity.position.y, entity);\r\n    });\r\n    //console.log(\"New Squares:\", this.squares)\r\n  }\r\n\r\n  getSquare(x, y) {\r\n    return this.squares[x * this.state.arenaSize + y];\r\n  }\r\n\r\n  setSquare(x, y, value) {\r\n    let targetSquareIndex = y* this.state.arenaSize + x;\r\n    //console.log(\"Setting square #\",targetSquareIndex, \"as\", square);\r\n    this.squares[targetSquareIndex] = value;\r\n    //console.log(\"this.squares:\", this.squares);\r\n  }\r\n\r\n  loop() {\r\n    this.stepNumber++;\r\n\r\n    var entities = this.state.entities.slice();\r\n    var JR = entities[0];\r\n\r\n    //John Rambo AI\r\n    JR.position.x = JR.position.x +\r\n      1 * (Math.floor(Math.random()*2)) -\r\n      1 * (Math.floor(Math.random()*2));\r\n    JR.position.y = JR.position.y +\r\n      1 * (Math.floor(Math.random()*2)) -\r\n      1 * (Math.floor(Math.random()*2));\r\n\r\n    if(JR.position.y < 0) JR.position.y = 0;\r\n    if(JR.position.x < 0) JR.position.x = 0;\r\n\r\n    if(JR.position.y > this.state.arenaSize - 1) JR.position.y = 4;\r\n    if(JR.position.x > this.state.arenaSize - 1) JR.position.x = 4;\r\n\r\n    this.setState({entities: entities});\r\n\r\n    this.setSquaresAccordingToPositions();\r\n    //console.log(\"---\");\r\n    //console.log(this.state);\r\n    setTimeout(this.loop, 1000);\r\n  }\r\n\r\n  handleBoardClick(i) {\r\n    console.log(\"CLICKED \", i);\r\n    var entities = this.state.entities.slice();\r\n    entities.forEach((entity) => {\r\n      entity.active = false;\r\n    })\r\n    if(this.squares[i]) {\r\n      console.log(\"Clicked:\", this.squares[i]);\r\n      this.selected = this.squares[i];\r\n      this.selected.active = true;\r\n    } else {\r\n      this.selected = this.squares[i];\r\n    }\r\n\r\n\r\n\r\n    this.setState({entities: entities});\r\n  }\r\n\r\n  nuke(dmg){\r\n    let localCopyOfEntities = JSON.parse(JSON.stringify(this.state.entities));\r\n    localCopyOfEntities.forEach(entity => {\r\n      console.log(\"hi \" + entity.hp);\r\n      entity.hp = entity.hp - dmg;\r\n    });\r\n    this.setState({entities: localCopyOfEntities});\r\n  }\r\n\r\n  render() {\r\n    console.log(\"Rendering Game. #\", this.renderCounter++);\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={this.squares}\r\n            onClick={(i) => this.handleBoardClick(i)}\r\n            size={this.state.arenaSize}\r\n          />\r\n          <EntitiesList\r\n            entities={this.state.entities}\r\n          />\r\n          <div className=\"step-counter\">{this.stepNumber}</div>\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <span className=\"selected\">Selected: {this.selected && this.selected.name}</span>\r\n          <button\r\n            onClick={\r\n              ()=>{\r\n                this.nuke(40);\r\n              }\r\n            }\r\n            className=\"button-nuke\"\r\n          >Nuke All</button>\r\n          <ul>\r\n            <li>Add an actual TODO list here.</li>\r\n            <li>Make characters selectable</li>\r\n            <li>Make selected characters movable</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\nimport { render } from 'react-dom';\nimport Game from './components/Game';\n\nimport './style.css';\n\nrender(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}