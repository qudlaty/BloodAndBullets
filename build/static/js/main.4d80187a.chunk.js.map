{"version":3,"sources":["components/Game/Game.module.scss","components/Board/Board.module.scss","helpers/Helpers.ts","components/Board/Board.tsx","components/EntitiesList/EntitiesList.tsx","services/EntitiesService/EntityFeatures.ts","services/EntitiesService/EntityClass.ts","services/SquaresService/SquareClass.ts","services/SquaresService/SquaresService.ts","services/EntitiesService/EntitiesService.ts","services/ItemService/ItemClasses.ts","services/MessageService/MessageService.ts","resources/ItemDefinitions.ts","resources/CharacterDefinitions.ts","services/ScriptsService/ScriptsService.ts","resources/StructureDefinitions.ts","services/GameModelService/GameModelService.ts","services/GameLogicService/GameLogicService.ts","services/GameLogicService/GameState.tsx","services/GameActionsService/GameActionsService.tsx","components/EntityCard/EntityCard.tsx","components/EntityPawn/EntityPawn.tsx","components/EmojiMapper/EmojiMapper.tsx","components/Game/TargetedSquareInfo.tsx","components/Game/SelectedEntityInfo.tsx","components/Game/Game.tsx","components/Square/Blood.tsx","components/Square/Items.tsx","components/Square/Square.tsx","components/LinearDisplay/LinearDisplay.tsx","components/HudPanel/HudPanel.tsx","components/Grid/Cell.tsx","components/Grid/Grid.tsx","components/Controls/Controls.tsx","components/MessageBox/MessageBox.tsx","components/InventoryItem/InventoryItem.tsx","components/InventoryList/InventoryList.tsx","components/HpBar/HpBar.tsx","components/ShootingVisualization/ShootingVisualization.tsx","components/DragScrollArea/DragScrollArea.tsx","screens/BlastZone/BlastZone.tsx","screens/ShowRoom/ShowRoom.tsx","App.tsx","index.js"],"names":["module","exports","resetGivenFieldsOnACollection","collection","fieldNames","forEach","item","fieldName","undefined","getNumberWithinBoundaries","value","min","max","getRandomIntInclusive","Math","floor","random","calculateAngle","x","y","angle","atan","PI","calculateDistance","sqrt","pow","turnFlagsIntoClasses","flags","classNameBase","flagsToClassess","active","isAvailableDestination","isChosenDestination","isBreathing","isDead","isShooting","isTargeted","isAttacked","isLit","isInTwilightZone","className","Object","keys","key","getCssClassesForAGivenSquare","square","squareClassName","squareType","entity","derivedCtor","Board","handleClick","i","console","log","props","onClick","EntityPawns","entities","map","name","BoardSquares","colId","cellId","rowId","Array","size","fill","row","number","cells","cell","renderSquare","styles","this","squares","squareId","Helpers","blood","items","itemsNumber","length","board","isRotated","style","React","Component","Identifiable","id","icon","Positionable","position","isPassable","SquaresService","getSquareFromPosition","Movable","moveDestination","squareIndex","setMoveDestinationPosition","getSquarePositionFromIndex","targetPosition","targetSquare","targetSquareNumber","getSquareIndexFromPosition","isTargetSquareEnterable","markSquareAtIndexAsChosenDestination","MessageService","send","Mortal","hp","maxHp","isAlive","Bleedable","bleeding","bleedingReductionPerTurn","bloodReleased","bleed","addBloodToSquare","Breathing","isSupposedToBeBreathing","Combative","ceaseFire","hasWeapon","targetedSquarePosition","HavingInventory","inventory","itemName","actualItemIndex","findIndex","splice","push","Entity","isFriendly","assign","equipment","unEquipFromHands","takeFromInventory","hands","Weapon","addToInventory","actionPoints","maxActionPoints","baseCtor","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","Square","arenaSize","isSquareEnterableByFriendlyUnits","includes","initializeSquareAtIndexIfEmpty","setEntityWithinASquareAtPosition","isArray","amount","j","setSquareValueAtPosition","unpassableEntitiesInThisSquare","filter","EntitiesService","selected","shouldEntityStopShooting","stopShooting","stopShootingWhenForbidden","getEntityId","removeEntityFromListOfEntities","indexOfEntityToRemove","currentEntity","oldPositionX","oldPositionY","deltaX","deltaY","newSquare","potentialTargetEntity","getEntitiesAtGivenPosition","targeted","damageApplied","weapon","equippedWeapon","RangedWeapon","isAbleToFire","fire","rounds","checkAmmoAndCalculateDamageApplied","targetEntity","applyDamageToTargetEntity","damage","getEntitiesAtGivenPositionThatAreAlive","areThereAliveTargetEntities","bleedExternally","chosenDestinationSquare","moveEntityRandomly","Item","causesBleeding","range","maxRounds","Rifle","type","Lazer","messages","message","newMessageRecord","timestamp","Date","toISOString","substring","M16","M40","L30","description","manufacturer","previousOwners","scriptTypes","entitiesInitialValues","age","defaultValues","addEntityToDefaultValues","characterDefinitions","entry","structures","box","redBarrel","GameModel","saveMap","squaresProcessedForSave","JSON","parse","stringify","squaresStringified","result","window","prompt","localStorage","loadMap","GameActions","mapNames","squaresLoaded","loadSquaresIntoService","entitiesWithinTheMap","makeInstanceOfAWeapon","weaponRecord","entitiesProcessed","entityRecord","itemRecord","loadEntitiesIntoService","setSquaresAccordingToEntities","processInterface","index","sourceSquare","loadBuiltInMap","intro","loadPredefinedEntitities","ScriptsService","scripts","what","entityPresent","where","who","condition","params","action","runScripts","param","script","runScript","debug","isConditionFullfilled","executeResult","entitiesFoundAtLocationGiven","isAnyEntityPresentAtGivenLocation","isGivenEntityFoundAtGivenLocation","entityAtLocation","e","targetDestination","GameLogic","model","run","calculateNextInterfaceState","previousState","nextState","markAvailableDestinationsForSelectedEntity","syncSquaresWithEntities","array","concat","setEntityWithinApropriateSquare","deselectAllEntities","givenEntity","processAnEntity","enemiesAlive","calculateNumberOfAliveEnemies","friendsAlive","calculateNumberOfAliveFriends","moveEntityIntoChosenDestination","isEntityTargettingSomethingAlive","fireAShot","ceaseFireNextTickIfNoAliveTargets","stopBreathingForKilledEntity","amountOfAliveEnemies","GameState","targetedSquareNumber","squareSize","isAutoLoopOn","isBoardRotated","isEditorOn","component","GameActionsClassForGameComponent","that","entitiesProcessingLoopIntervalHandle","playerActionTime","toggleEditorMode","state","setState","prevState","loop","isTurnInProgress","setTimeout","nextStep","nextTick","executeActions","calculeteNextGameStateAfterProcessingAGivenEntity","afterExecuteActions","handleKeyPress","handleClickV2","selectedSquareNumber","previousTargeted","doubleClick","markSquareAtIndexAsTargeted","setMoveDestinationSquareByNumber","selectEntityFromGivenSquare","find","targetSquarePosition","attackPosition","markSquareAtIndexAsAttacked","aggro","entitiesToAttack","findEntitiesThatAreClose","closeEntity","firstAmongThem","nuke","dmg","processEntities","toggleRotateBoard","switchAutoLoop","info","onInventoryClick","entityId","actualEntity","findEntityById","equipInHands","handleDeselectAllEntities","stepNumber","refillActionPointsForAllEntities","drawAggro","setInterval","processNextUnprocessedEntity","entitiesForProcessing","entityForThisTurn","setNewStateAfterProcessingChosenEntity","clearInterval","newlyFoundEntities","EntityCard","renderCount","handleInventoryClick","onDrop","addItem","addEntity","onReload","bleedingText","bleedingReductionText","inHands","inHandsArray","onEntityClick","title","label","current","hidden","distanceToTarget","Number","toFixed","EntityPawn","randomTime","classessFromFlags","fof","color","zIndex","animationBreathing","left","boardPadding","top","animation","emoji","ShootingVisualization","EmojiMapper","emojiMap","emojiMappedTo","output","TargetedSquareInfo","boxSerialNumber","onItemClick","squareNumber","removeEntity","targetedSquare","structureType","newStructure","distanceInfo","positionInfo","bloodInfo","entityInfo","availableActions","editorButtons","onAddStructureClick","GameStyles","button","distanceToSelected","onMoveClick","onAttackClick","targeted__label","SelectedEntityInfo","selected__label","Game","renderCounter","setSelected","startIfAutoLoopIsOn","reduce","previousValue","game","game__board","fontSize","onKeyPress","game__info","actions","action_row","zoomIn","zoomOut","execute_actions","checked","onChange","next_tick","calculateFriendlyActionPoints","PureComponent","Blood","bloodAmount","bloodDrops","background","error","Items","itemsIcons","SquareComponent","classPrefix","cuboidFaces","cuboid","LinearDisplay","percentage","overload","negative","progressStyle","width","divider","progressGridStyle","backgroundSize","backgroundImage","HudPanel","children","Cell","Grid","rows","height","sourceY","startAt","currentRow","sourceX","currentCell","renderGrid","Controls","w","s","a","d","space","document","addEventListener","onKeyDown","onKeyUp","event","keyCode","preventDefault","MessageBox","messageNumber","renderMessage","messageRecord","slice","RenderedMessages","requestAnimationFrame","element","getElementById","scrollTop","scrollHeight","scrollElement","InventoryItem","reloadButton","dropButton","ammoCounter","reload","InventoryList","inventoryItems","HpBar","backgroundColor","calcNewAangle","targetCoords","projectileNumber","projectiles","localId","uniqueShootingAnimationId","customStyle","commonStyles","distanceToTargetXInUnits","distanceToTargetYInUnits","actualDistanceInUnits","weaponType","projectile","finalClassName","DragScrollArea","areaReference","scroll","onMouseDown","onMouseUp","onMouseMove","scrollRelativeXY","movementX","movementY","removeEventListener","createRef","executeScroll","ref","onContextMenu","BlastZone","gridX","gridY","controls","onControlPress","statusIndicators","noop","ShowRoom","showRoomList","content","theListToRender","availableScreenNames","App","sceneComponents","SelectedSceneComponent","handleChange","nameOfSelectedScene","target","activeSceneName","SelectedScene","availableScreenSwitchOptions","stringToOption","render"],"mappings":"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","file":"static/js/main.4d80187a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"Game_game__2e1tZ\",\"game__board\":\"Game_game__board__2b1Rt\",\"game__list\":\"Game_game__list__2-C7B\",\"button\":\"Game_button__2MRC8\",\"actions\":\"Game_actions__29FzY\",\"auto-cycle\":\"Game_auto-cycle__3hEnr\",\"next_tick\":\"Game_next_tick__3-mpF\",\"execute_actions\":\"Game_execute_actions__2p58f\",\"nuke\":\"Game_nuke__18mKE\",\"game__info\":\"Game_game__info__1Gsde\",\"action_row\":\"Game_action_row__A5h5q\",\"interaction-container\":\"Game_interaction-container__116xl\",\"selected\":\"Game_selected__Eijr8\",\"targeted\":\"Game_targeted__12v-L\",\"selected__label\":\"Game_selected__label__bRkUK\",\"targeted__label\":\"Game_targeted__label__SO4x_\",\"step-counter\":\"Game_step-counter__1cGmE\",\"status\":\"Game_status__UtpI1\",\"kbd-navigation\":\"Game_kbd-navigation__3qtbh\",\"square\":\"Game_square__2dkO9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__1OUGF\",\"board__row\":\"Board_board__row__pOB9m\",\"board--rotated\":\"Board_board--rotated__12CR7\"};","import { Entity } from \"services/EntitiesService\";\nimport { Square } from \"services/SquaresService\";\n\n/** @description\n * Takes a collection and a list of strings describing object keys.\n * Sets all given fields on a collection to `undefined`\n */\nexport function resetGivenFieldsOnACollection(collection, ...fieldNames) {\n  collection.forEach((item) => {\n    fieldNames.forEach((fieldName) => {\n      item && (item[fieldName] = undefined);\n    });\n  });\n}\n\n/** @description Takes a number and fits it within given boundaries, then returns it */\nexport function getNumberWithinBoundaries(value: number, min: number, max: number): number {\n  if (value < min) value = min;\n  if (value > max) value = max;\n  return value;\n}\n\n/** @description Returns a random integer between min and max */\nexport function getRandomIntInclusive(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/** @description Returns angle (in degrees) of a given vector */\nexport function calculateAngle(x: number, y: number): number {\n  let angle: number;\n  if (y >= 0) {\n    angle = -Math.atan(x / y) * (180 / Math.PI);\n  } else if (y < 0) {\n    angle = (180 / Math.PI) * (Math.atan(x / -y) + Math.PI);\n  }\n  return angle;\n}\n\n/** @description Pitagorean distance between 0,0 and given coords */\nexport function calculateDistance(x: number, y: number): number {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n}\n\n/** @description Mixing classess together */\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  // see https://www.typescriptlang.org/docs/handbook/mixins.html\n  baseCtors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));\n    });\n  });\n}\n\n/** @description Checking if selected entity is on a targeted square */\nexport function isSelectedTargeted(selected: Entity, targeted: Square): boolean {\n  if (selected && targeted && targeted.entity && selected.name === targeted.entity.name) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * @description\n * Adding classess apropriate to the flags passed in by props\n * @param classNameBase - if given, it is added in front of the classname with \"--\"\n * Eg: classNameBase--class-from-flag\n */\nexport function turnFlagsIntoClasses(flags: object, classNameBase?: string) {\n  if(!flags) return '';\n  const flagsToClassess = {\n    active: \"active\",\n    isAvailableDestination: \"is-available-destination\",\n    isChosenDestination: \"is-chosen-destination\",\n    isBreathing: \"breathing\",\n    isDead: \"dead\",\n    isShooting: \"shooting\",\n    isTargeted: \"targeted\",\n    isAttacked: \"attacked\",\n    isLit: \"is-lit\",\n    isInTwilightZone: \"is-in-twilight-zone\",\n  };\n\n  let className = \"\";\n\n  if (classNameBase) {\n    classNameBase += \"--\";\n  } else {\n    classNameBase = \"\";\n  }\n\n  Object.keys(flagsToClassess).forEach((key) => {\n    if (flags[key]) {\n      className += ` ${classNameBase}${flagsToClassess[key]}`;\n    }\n  });\n  return className;\n}\n\n/**\n * @description\n * Creates a new array containing all the elements from a given array\n * @param array array to shallow-copy\n * @yields a new copy of the array\n */\nexport function newCopyOfArray(array: any[]) {\n  return [].concat(array);\n}\n\n/**\n * @description\n * Returns a string with set of CSS classes\n * based on the flags found in the given square.\n * @param square a square to style\n * @yields string with all classess applicable for the given square\n */\nexport function getCssClassesForAGivenSquare(square: Square): string {\n  if(!square) return;\n  let squareClassNameBase = \"square\";\n  let squareClassName = `${squareClassNameBase} ${square && square.squareType}`;\n  squareClassName += turnFlagsIntoClasses(square, squareClassNameBase);\n  if (square.entity) {\n    squareClassName += turnFlagsIntoClasses(square.entity, squareClassNameBase);\n  }\n  return squareClassName;\n}\n","import React, { ReactElement } from \"react\";\nimport { SquareComponent, EntityPawn } from \"components\";\nimport { Entity, Square } from \"services\";\nimport * as Helpers from \"helpers\";\n\nimport styles from \"./Board.module.scss\";\n\ninterface BoardProps {\n  onClick(i: number): void;\n  squares: Square[]; // updated every tick\n  entities: Entity[]; // updated every tick\n  size: number;\n  isRotated: boolean;\n  style: any;\n}\n/**\n * @description Board component renders Squares and EntityPawns\n */\nexport class Board extends React.Component<BoardProps> {\n  handleClick = (i: number) => {\n    console.log(\"Handles Click on Board\", i);\n    this.props.onClick(i);\n  };\n\n  renderSquare(i: number, rowId: number, colId: number) {\n    let square = this.props.squares[i];\n\n    return (\n      <SquareComponent // is a pureComponent\n        key={`r${rowId}_c${i}`}\n        squareId={i}\n        className={Helpers.getCssClassesForAGivenSquare(square)}\n        onClick={this.handleClick}\n        blood={square && square.blood} // number\n        items={square && square.items} // list of objects\n        itemsNumber={square && square.items && square.items.length}\n      ></SquareComponent>\n    );\n  }\n\n  EntityPawns = (): ReactElement[] => this.props.entities.map((entity) => <EntityPawn key={entity.name} entity={entity} />);\n\n  BoardSquares = () => {\n    let cellId: number = 0;\n    let rowId: number = 0;\n    let colId: number;\n\n    let rowsOfSquares = Array(this.props.size)\n      .fill(null)\n      .map((row, number) => {\n        colId = 0;\n        let cells = Array(this.props.size)\n          .fill(null)\n          .map((cell, number) => {\n            return this.renderSquare(cellId++, rowId, colId++);\n          });\n        return (\n          <div key={rowId++} className={styles[\"board__row\"]}>\n            {cells}\n          </div>\n        );\n      });\n\n    return rowsOfSquares;\n  }; // Board Squares\n\n  render() {\n    let className: string = styles.board;\n    if (this.props.isRotated) {\n      className += ` ${styles[\"board--rotated\"]} board--rotated`;\n    }\n    return (\n      <div className={className} style={this.props.style}>\n        {this.BoardSquares()}\n        {this.EntityPawns()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { EntityCard } from \"components\";\nimport { Entity } from \"services\";\n\nimport \"./EntitiesList.scss\";\n\n\ninterface ListOfEntitiesProps {\n  entities: Entity[];\n  onInventoryClick: any;\n  processInterface: Function;\n}\n\nexport default class ListOfEntities extends React.Component<ListOfEntitiesProps> {\n  render() {\n    let entitiesFriendly = this.props.entities\n      .filter((entity) => entity.isFriendly)\n      .map((obj) => {\n        return (\n          <EntityCard\n            key={obj.name}\n            entity={obj}\n            onInventoryClick={this.props.onInventoryClick}\n            processInterface={() => this.props.processInterface()}\n          />\n        );\n      });\n\n    let entitiesUnfriendly = this.props.entities\n      .filter((entity) => !entity.isFriendly)\n      .map((obj) => {\n        return <EntityCard key={obj.name} entity={obj} processInterface={() => this.props.processInterface()} />;\n      });\n\n    return (\n      <>\n        <h4 className=\"entities-list__header\">List of Entities:</h4>\n        <div className=\"entities-list\">{entitiesFriendly}</div>\n        <div className=\"entities-list\">{entitiesUnfriendly}</div>\n      </>\n    );\n  }\n}\n","import { Item, Weapon, Square } from \"services\";\nimport { SquaresService, MessageService } from \"services\";\nimport { Entity } from \"./EntityClass\";\n\n/** Position on a grid */\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport class Identifiable {\n  id: number | string;\n  name: string = \"\";\n  icon: string = \" \";\n}\n\nexport class Actor {// one who acts\n  actionPoints: number = 2;\n  maxActionPoints: number = 2;\n}\n\nexport class Positionable {\n  position: Position = { x: undefined, y: undefined };\n  isPassable: boolean = false;\n  get isBlocking(): boolean { return !this.isPassable }\n  get square(): Square {\n    let square: Square = SquaresService.getSquareFromPosition(this.position.x, this.position.y);\n    return square;\n  }\n}\n\nexport class Movable extends Identifiable {\n  moveDestination: Position;\n  // TODO: are these methods really appropriate for this context?\n\n  setMoveDestinationSquareByNumber(squareIndex: number) {\n    this.setMoveDestinationPosition(SquaresService.getSquarePositionFromIndex(squareIndex));\n  }\n\n  setMoveDestinationPosition(targetPosition: Position) {\n    let targetSquare: Square = SquaresService.getSquareFromPosition(targetPosition.x, targetPosition.y);\n    let targetSquareNumber: number = SquaresService.getSquareIndexFromPosition(targetPosition.x, targetPosition.y)\n    if (SquaresService.isTargetSquareEnterable(targetSquare)) {\n      this.moveDestination = targetPosition;\n      SquaresService.markSquareAtIndexAsChosenDestination(targetSquareNumber);\n    } else {\n      MessageService.send(`${this.name} can't move into square (${targetPosition.x}, ${targetPosition.y})`);\n    }\n  }\n}\n\nexport class Mortal extends Positionable {\n  hp: number = 100;\n  maxHp: number = 100;\n  get isDead(): boolean {\n    return !this.isAlive;\n  }\n  get isAlive(): boolean {\n    return this.hp > 0;\n  }\n}\n\nexport class Bleedable extends Mortal {\n  public bleeding: number = 0;\n  public bleedingReductionPerTurn: number = 1;\n  bleed(): number {\n    let entity = this;\n    let bloodReleased = 0;\n    if (entity.bleeding && entity.isAlive) {\n      bloodReleased = entity.bleeding;\n      entity.hp -= bloodReleased;\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n      if(entity.bleeding < 0) entity.bleeding = 0;\n    }\n    return bloodReleased;\n  }\n\n  bleedExternally() {\n    if (!this.bleeding) return;\n    let entity = this;\n    let bloodReleased = this.bleed();\n    let square: Square = SquaresService.getSquareFromPosition(entity.position.x, entity.position.y);\n    SquaresService.addBloodToSquare(square, bloodReleased);\n  }\n}\n\nexport class Breathing extends Mortal {\n  isSupposedToBeBreathing: boolean = undefined;\n  get isBreathing(): boolean {\n    return this.isAlive && this.isSupposedToBeBreathing;\n  }\n  set isBreathing(value: boolean) {\n    this.isSupposedToBeBreathing = value;\n  }\n}\n\nexport class Combative extends Identifiable {\n  targetPosition: Position;\n  isShooting?: boolean;// TODO: refactor to not be optional maybe?\n  ceaseFire?: boolean;\n  hasWeapon?: boolean;\n  attackPosition(targetedSquarePosition: Position) {\n    if (this.hasWeapon) {\n      this.targetPosition = targetedSquarePosition;\n      //this.isShooting = true;\n      this.ceaseFire = false;\n    } else {\n      MessageService.send(`${this.name} can't shoot - no weapon equipped`);\n    }\n    console.log(this.name, 'is attacking', targetedSquarePosition, this);\n  }\n}\n\nexport type InventoryItem = Item|Entity;\nexport class HavingInventory extends Identifiable {\n\n  inventory: Array<InventoryItem>;\n  takeFromInventory(itemName: string): InventoryItem {\n    if (!this.inventory) {\n      this.inventory = [];\n    }\n    let actualItemIndex: number = this.inventory.findIndex((item) => item.name === itemName);\n    if(actualItemIndex === -1) return null;\n    let actualItem: InventoryItem = this.inventory.splice(actualItemIndex, 1)[0];\n\n    return actualItem;\n  }\n  addToInventory(item: InventoryItem) {\n    if (!this.inventory) {\n      this.inventory = [];\n    }\n    this.inventory.push(item);\n  }\n}\n\nexport class HavingEquipment extends HavingInventory {\n  equipment: {hands: Item};\n  hasWeapon?: boolean;\n\n  equipInHands(itemName: string) {\n    this.unEquipFromHands();\n    let item: Item = this.takeFromInventory(itemName);\n    this.equipment.hands = item;\n    if (item instanceof Weapon) {\n      this.hasWeapon = true;\n    } else {\n      this.hasWeapon = false;\n    }\n  }\n\n  unEquipFromHands() {\n    if (this.equipment.hands) {\n      this.addToInventory(this.equipment.hands);\n      this.equipment.hands = null;\n      this.hasWeapon = false;\n    }\n  }\n}\n","import { applyMixins } from \"helpers\";\nimport {\n  Identifiable,\n  Positionable,\n  Mortal,\n  Bleedable,\n  Movable,\n  Breathing,\n  Combative,\n  HavingInventory,\n  HavingEquipment,\n  Actor,\n} from \".\";\n\n/**\n * @description The base class for Entities on the board\n */\nexport class Entity {\n  // Extended by mixins below\n  constructor(...props) {\n    Object.assign(this, ...props);\n  }\n  isFriendly?: boolean;\n  active?: boolean;\n}\n\n/************************************************************/\n/* Always update both lists */\n\nexport interface Entity\n  extends\n    Identifiable,\n    Positionable,\n    Mortal,\n    Bleedable,\n    Movable,\n    Breathing,\n    Combative,\n    HavingInventory,\n    HavingEquipment,\n    Actor\n{} applyMixins(Entity, [\n    Identifiable,\n    Positionable,\n    Mortal,\n    Bleedable,\n    Movable,\n    Breathing,\n    Combative,\n    HavingInventory,\n    HavingEquipment,\n    Actor,\n]);\n\n/************************************************************/\n","import { Item } from \"services/ItemService\";\nimport { Entity, HavingInventory, Position } from \"services/EntitiesService\";\n\nexport interface Square {\n  position?: Position;\n  description?: string;\n  entities: Entity[];\n  entity?: Entity;\n  blood?: number;\n  squareType: string;\n  isAvailableDestination?: boolean;\n  isChosenDestination?: boolean;\n  isTargeted?: boolean;\n  isAttacked?: boolean;\n  isLit?: boolean;\n  isInTwilightZone?: boolean;\n  addItem(item: Item): void;\n}\n\nexport class Square extends HavingInventory implements Square {\n  public squareType: string = \"nothing\";\n  entities: Entity[] = [];\n  constructor(squareIndex){\n    super();\n    this.id = squareIndex;\n    this.entities = [];\n  }\n  addItem(item: Item) {\n    this.addToInventory(item);\n  }\n  get items() {\n    return this.inventory;\n  }\n}\n","import * as Helpers from \"helpers\";\nimport { Square } from \"./SquareClass\";\nimport { Entity, Position } from \"services/EntitiesService\";\n\nclass SquaresServiceClass {\n  arenaSize: number = 10; // TODO: This should be defined ELSEWHERE\n\n  squares: Square[] = [];\n\n  constructor() {\n    let i = this.arenaSize * this.arenaSize;\n    while (i-- !== 0) {\n      this.initializeSquareAtIndexIfEmpty(i);\n    }\n  }\n\n  getSquareFromPosition(x: number, y: number): Square {\n    return this.squares[this.getSquareIndexFromPosition(x, y)];\n  }\n\n  setSquareValueAtPosition(x: number, y: number, value): void {\n    this.squares[this.getSquareIndexFromPosition(x, y)] = value;\n  }\n\n  getSquareIndexFromPosition(x: number, y: number): number {\n    return y * this.arenaSize + x;\n  }\n\n  getSquarePositionFromIndex(squareIndex: number): Position {\n    let x: number, y: number;\n    y = Math.floor(squareIndex / this.arenaSize);\n    x = squareIndex % this.arenaSize;\n    return { x, y };\n  }\n\n  setEntityWithinApropriateSquare(entity: Entity): void {\n    this.setEntityWithinASquareAtPosition(entity.position.x, entity.position.y, entity);\n  }\n\n  setEntityWithinASquareAtPosition(x: number, y: number, entity: Entity) {\n    let squareIndex: number = this.getSquareIndexFromPosition(x, y);\n    this.initializeSquareAtIndexIfEmpty(squareIndex);\n    // this.squares[squareIndex].entity = entity;\n    if(!this.squares[squareIndex].entities) {\n      this.squares[squareIndex].entities = [];\n    }\n\n    if(!Array.isArray(this.squares[squareIndex].entities)){\n      this.squares[squareIndex].entities = [];\n    }\n    this.squares[squareIndex].entities.push(entity);\n  }\n\n  addBloodToSquare(square: Square, amount: number) {\n    if (!square.blood) {\n      square.blood = amount;\n    } else {\n      square.blood += amount;\n    }\n  }\n\n  markSquareAtIndexAsTargeted(squareIndex: number): void {\n    Helpers.resetGivenFieldsOnACollection(this.squares, \"isTargeted\");\n    this.initializeSquareAtIndexIfEmpty(squareIndex);\n    this.squares[squareIndex].isTargeted = true;\n  }\n\n  markSquareAtIndexAsAttacked(squareIndex: number): void {\n    Helpers.resetGivenFieldsOnACollection(this.squares, \"isAttacked\");\n    this.initializeSquareAtIndexIfEmpty(squareIndex);\n    this.squares[squareIndex].isAttacked = true;\n  }\n\n  markSquareAtIndexAsChosenDestination(squareIndex: number): void {\n    Helpers.resetGivenFieldsOnACollection(this.squares, \"isChosenDestination\");\n    this.initializeSquareAtIndexIfEmpty(squareIndex);\n    this.squares[squareIndex].isChosenDestination = true;\n  }\n\n\n  initializeSquareAtIndexIfEmpty(squareIndex: number) {\n    if (!this.squares[squareIndex]) {\n      this.squares[squareIndex] = new Square(squareIndex);\n      this.squares[squareIndex].position = this.getSquarePositionFromIndex(squareIndex);\n    }\n  }\n\n  markAvailableDestinationsForSelectedEntity(entity: Entity): void {\n    if (entity.active) {\n      let { x, y } = entity.position;\n\n      Helpers.resetGivenFieldsOnACollection(this.squares, \"isAvailableDestination\");\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize || (i === x && j === y)) {\n            continue;\n          }\n\n          let square: Square = this.getSquareFromPosition(i, j);\n          if (this.isSquareEnterableByFriendlyUnits(square)) {\n            square.isAvailableDestination = true;\n          }\n\n          this.setSquareValueAtPosition(i, j, square);\n        }\n      }\n    }\n  }\n\n  isTargetSquareEnterable(targetSquare: Square): boolean {\n    let unpassableEntitiesInThisSquare = targetSquare.entities &&\n      targetSquare.entities.filter(\n        entity => !entity.isPassable && entity.isAlive\n      );\n    return  !(unpassableEntitiesInThisSquare && unpassableEntitiesInThisSquare.length);\n  }\n\n  isSquareEnterableByFriendlyUnits = square => [\n    'floor',\n    'monster-filter',\n  ].includes(square.squareType);\n\n  lightAllSquares(): void {\n    this.squares.forEach((square) => (square.isLit = true));\n  }\n  castLightsFromFriendlyEntity(entity: Entity): void {\n    if (entity.isFriendly) {\n      let { x, y } = entity.position;\n\n      for (let j = y - 2; j <= y + 2; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 2; i <= x + 2; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquareFromPosition(i, j);\n\n          square.isInTwilightZone = true;\n          this.setSquareValueAtPosition(i, j, square);\n        }\n      }\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquareFromPosition(i, j);\n\n          square.isLit = true;\n          this.setSquareValueAtPosition(i, j, square);\n        }\n      }\n    }\n  }\n}\n\nexport const SquaresService = new SquaresServiceClass();\n","import { Entity, Position, HavingInventory } from \".\";\nimport { SquaresService, Square } from \"services/SquaresService\";\nimport * as Helpers from \"helpers\";\nimport { RangedWeapon } from \"services\";\nimport { Identifiable } from \"./EntityFeatures\";\nimport { Item } from \"services/ItemService\";\nconst arenaSize: number = 10;\n\n/**\n * @description Set of functions to interact with Entities\n */\nclass EntitiesServiceClass {\n  entities: Entity[];\n  selected: Entity;\n\n  getEntityId(entity: Identifiable): string {\n    return entity.name;\n  }\n\n  findEntityById(id: string): Entity {\n    let result: Entity = this.entities.filter(entity => this.getEntityId(entity) === id)[0];\n    return result;\n  }\n\n  removeEntity(entity: Entity) {\n    this.removeEntityFromListOfEntities(this.entities, entity);\n  }\n\n  removeEntityFromListOfEntities(entities: Entity[], entity: Entity) {\n    let indexOfEntityToRemove = entities.findIndex(currentEntity => (currentEntity && currentEntity.name) === (entity && entity.name));\n    if(indexOfEntityToRemove === -1) return -1;\n    entities.splice(indexOfEntityToRemove,1);\n    return 0;\n  }\n\n  addEntity(entity: Entity) {\n    this.entities.push(entity);\n  }\n\n  findItemOnEntity(entity: HavingInventory, id: string) {\n    let result = entity.inventory.filter(item => this.getEntityId(entity) === id)[0];\n    return result;\n  }\n\n  moveEntityRandomly(entity: Entity) {\n    if (entity.isDead || entity.isFriendly) return;\n\n    let oldPositionX = entity.position.x;\n    let oldPositionY = entity.position.y;\n\n    let deltaX = Helpers.getRandomIntInclusive(-1, 1);\n    let deltaY = Helpers.getRandomIntInclusive(-1, 1);\n\n    if(!entity.actionPoints) {\n      deltaX = 0;\n      deltaY = 0;\n    }\n    if(deltaX || deltaY) { // non-zero move\n      entity.actionPoints--;\n    } else {// zero ==> no move\n    }\n\n    entity.position.x = entity.position.x + deltaX;\n    entity.position.y = entity.position.y + deltaY;\n\n    entity.position.x = Helpers.getNumberWithinBoundaries(entity.position.x, 0, arenaSize - 1);\n    entity.position.y = Helpers.getNumberWithinBoundaries(entity.position.y, 0, arenaSize - 1);\n\n    let newSquare = SquaresService.getSquareFromPosition(entity.position.x, entity.position.y);\n\n    if ((newSquare && newSquare.entity) || (newSquare && newSquare.squareType !== \"floor\")) {\n      // if square occupiec, reverse the move\n      entity.position.x = oldPositionX;\n      entity.position.y = oldPositionY;\n    }\n  }\n\n  stopBreathingForKilledEntity(entity: Entity): Entity {\n    if (entity.isDead) {\n      entity.isBreathing = false;\n      this.stopShooting(entity);\n      entity.hp = 0;\n    }\n    return entity;\n  }\n\n  getEntitiesAtGivenPosition(targetPosition: Position): Entity[] {\n    return this.entities.filter((potentialTargetEntity: Entity): boolean => {\n      return (\n        potentialTargetEntity.position.x === targetPosition.x &&\n        potentialTargetEntity.position.y === targetPosition.y\n      );\n    });\n  }\n\n  getEntitiesAtGivenPositionThatAreAlive(targetPosition: Position): Entity[] {\n    const entitiesAtTargetSquare = this.getEntitiesAtGivenPosition(targetPosition);\n    const aliveEntitiesAtTargetSquare = entitiesAtTargetSquare.filter(entity => entity.isAlive);\n    return aliveEntitiesAtTargetSquare;\n  }\n\n  selectEntityFromGivenSquare(selected: Entity, targeted: Square): Entity {\n    if (selected && targeted && targeted.entity) {\n      selected.active = false;\n    }\n    if (targeted && targeted.entity) {\n      selected = targeted.entity;\n      selected.active = true;\n    }\n\n    return selected;\n  }\n\n  setSelected(selected: Entity, value: boolean): Entity {\n    this.selected = selected;\n    selected.active = value;\n    if (!value) {\n      this.selected = null;\n      console.log(\"Deselected:\", selected);\n    }\n    return selected;\n  }\n\n  checkAmmoAndCalculateDamageApplied(entity: Entity): number {\n    let damageApplied: number = 0;\n    let weapon: RangedWeapon = undefined;\n    let equippedWeapon: Item = entity.equipment && entity.equipment.hands;\n    if(!(equippedWeapon instanceof RangedWeapon)){\n      return 0;\n    } else {\n      weapon = equippedWeapon;\n    }\n\n    if (weapon.isAbleToFire) {\n      damageApplied = weapon.fire();\n      entity.isShooting = true;\n      entity.actionPoints--;\n    } else {\n      weapon.rounds = \"empty\";\n      this.stopShooting(entity);\n      return 0;\n    }\n\n    return damageApplied;\n  }\n\n  shouldEntityStopShooting = entity => entity.ceaseFire || entity.isDead;\n  stopShooting = entity => {entity.isShooting = false; entity.ceaseFire = false};\n  stopShootingWhenForbidden = entity => {\n    if (this.shouldEntityStopShooting(entity)) {\n      this.stopShooting(entity);\n    }\n  }\n\n  fireAShot(entity: Entity) {\n    if(!entity.actionPoints || entity.isDead) return;\n    let damageApplied = this.checkAmmoAndCalculateDamageApplied(entity);\n    let targetEntities = this.getEntitiesAtGivenPosition(entity.targetPosition);\n    targetEntities.forEach(targetEntity => {\n      this.applyDamageToTargetEntity(targetEntity, damageApplied);\n    });\n  }\n\n  applyDamageToTargetEntity(targetEntity: Entity, damage: number) {\n    if (damage) {\n      targetEntity.hp -= damage; // TODO: This should go through a method to calc armor in\n      targetEntity.bleeding = 5; // TODO: This should be defined elsewhere (on a weapon)\n    }\n  }\n\n  ceaseFireNextTickIfNoAliveTargets(entity: Entity): void {\n    if(!entity.targetPosition) return;\n    const areThereAliveTargetEntities = !!EntitiesService.getEntitiesAtGivenPositionThatAreAlive(entity.targetPosition).length;\n    if (!areThereAliveTargetEntities) {\n      entity.ceaseFire = true;\n    }\n  }\n\n  isEntityTargettingSomethingAlive(entity: Entity): boolean {\n    const areThereAliveTargetEntities: boolean = entity.targetPosition && !!EntitiesService.getEntitiesAtGivenPositionThatAreAlive(entity.targetPosition).length;\n\n    return (\n      entity.targetPosition &&\n      (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y) &&\n      areThereAliveTargetEntities\n    );\n  }\n\n  applyEffectsOfBleeding(entity: Entity): Entity {\n    // TODO: move to a \"bleed\" method\n    entity.bleedExternally();\n    return entity;\n  }\n\n  moveEntityIntoChosenDestination(entity: Entity): Entity {\n    if (!entity.actionPoints) return entity;\n    if (!entity.isDead && entity.moveDestination) {\n      let chosenDestinationSquare: Square = SquaresService.getSquareFromPosition(\n        entity.moveDestination.x,\n        entity.moveDestination.y\n      );\n\n      entity.position = entity.moveDestination;\n      delete entity.moveDestination;\n      chosenDestinationSquare.isChosenDestination = undefined;\n      entity.actionPoints--;\n    }\n    return entity;\n  }\n\n  setMoveDestinationOnASelectedEntity(selected: Entity, targetedSquarePosition: Position): void {\n    selected.moveDestination = targetedSquarePosition;\n  }\n\n  moveEntities(): void {\n    // this.entities.forEach((entity) => this.moveEntityIntoChosenDestination(entity));\n    // let OP: Entity = this.findEntityById(\"Squid\");\n    // let OC: Entity = this.findEntityById(\"Octo\");\n    // //this.moveEntityRandomly(JR);\n    // this.moveEntityRandomly(OP);\n    // this.moveEntityRandomly(OC);\n    this.entities.filter(entity => !entity.isFriendly).forEach((entity) => {\n      this.moveEntityRandomly(entity);\n    });\n  }\n\n  refillActionPointsForAllEntities() {\n    this.entities.forEach(entity => {entity.actionPoints = entity.maxActionPoints})\n  }\n}\n\nexport const EntitiesService = new EntitiesServiceClass();\n","export class Item {\n  name: string = \"\";\n}\n\nexport class Weapon extends Item {\n  causesBleeding = 0;\n  range = 0;\n  damage = 0;\n}\n\nexport class RangedWeapon extends Weapon {\n  rounds: number | any = 0;\n  maxRounds = 5;\n\n  fire() {\n    this.rounds--;\n    console.log(\"Firing ranged weapon. Damage: \", this.damage);\n    return this.damage;\n  }\n\n  get isAbleToFire() {\n    return this.rounds > 0;\n  }\n\n  reload() {\n    this.rounds = this.maxRounds;\n  }\n}\n\n// TODO: Should add kinetic/thermal damage\nexport class Rifle extends RangedWeapon {\n  type = \"projectile\";\n  range = 4;\n  damage = 1;\n  causesBleeding = 2;\n}\n\nexport class Lazer extends RangedWeapon {\n  type = \"lazer\";\n  range = 6;\n  damage = 5;\n  causesBleeding = 0;\n}\n","export type MessageRecord = {\n  message: string,\n  timestamp: string,\n  type?: string,\n}\n\nexport class MessageServiceClass {\n  messages: MessageRecord[] = [];\n  send(message: string) {\n    const timestamp = new Date().toISOString().substring(11,23);\n    const newMessageRecord: MessageRecord = {\n      message,\n      timestamp\n    }\n    this.messages.push(newMessageRecord);\n  }\n}\n\nexport const MessageService = new MessageServiceClass();\n","import { Rifle, Lazer } from \"services\";\n\nexport class M16 extends Rifle {\n  name = \"M16\";\n  rounds = 30;\n  maxRounds = 30;\n  damage = 3;\n}\n\nexport class M40 extends Rifle {\n  name = \"M41A Pulse Rifle\";\n  rounds = 10;\n  maxRounds = 10;\n  damage = 5;\n}\n\nexport class L30 extends Lazer {\n  name = \"Assault Lazer Cannon\";\n  rounds = 1;\n  maxRounds = 1;\n  damage = 10;\n  description: \"Portable 30kW Energy beam weapon\";\n  manufacturer: \"Amaar Industries\";\n  previousOwners: ['Amaar Industries Factory'];\n}\n","import { M16, M40, L30 } from \"./ItemDefinitions\";\nimport { Entity } from \"services\";\n\nexport const entitiesInitialValues = [\n  {\n    name: \"Lazer Blady\",\n    hp: 75,\n    maxHp: 100,\n    icon: \"🧑‍🚀\",\n    isFriendly: true,\n    position: { x: 6, y: 8 },\n    inventory: [new M16()],\n    equipment: {hands: new L30()},\n    actionPoints: 10,\n    maxActionPoints: 10\n  },\n  {\n    name: \"Robot\",\n    age: 1,\n    hp: 50,\n    maxHp: 50,\n    icon: \"🤖\",\n    isFriendly: true,\n    isBreathing: false,\n    position: { x: 3, y: 5 },\n    equipment: {hands: new L30()},\n    bleedingReductionPerTurn: 50,\n  },\n  {\n    name: \"Octo\",\n    hp: 200,\n    maxHp: 200,\n    icon: \"🐙\",\n    position: { x: 8, y: 2 },\n    bleedingReductionPerTurn: 0,\n    bleeding: 1,\n    equipment: {hands: new L30()},\n  },\n  {\n    name: \"Squid\",\n    hp: 100,\n    maxHp: 100,\n    icon: \"🦑\",\n    position: { x: 5, y: 5 },\n    equipment: {hands: new M40()},\n  },\n  {\n    name: \"Ant\",\n    age: 1,\n    hp: 45,\n    maxHp: 50,\n    icon: \"🐜\",\n    isBreathing: true,\n    position: { x: 7, y: 6 },\n    equipment: {hands: new M40()},\n  },\n  {\n    name: \"Henry The Spider\",\n    hp: 100,\n    maxHp: 150,\n    icon: \"🕷️\",\n    position: { x: 9, y: 3 },\n    equipment: {hands: new L30()},\n  },\n  {\n    name: \"Mosquito\",\n    hp: 12,\n    maxHp: 20,\n    icon: \"🦟\",\n    position: { x: 2, y: 7 },\n    equipment: {hands: new M16()},\n    actionPoints: 1,\n    maxActionPoints: 1\n  },\n  {\n    name: \"Microbe\",\n    hp: 1,\n    maxHp: 5,\n    icon: \"🦠\",\n    position: { x: 3, y: 8 },\n    equipment: {hands: new L30()},\n  },\n];\n\nlet defaultValues = {\n  bleedingReductionPerTurn: 1,\n  isBreathing: true,\n  isPassable: false,\n  actionPoints: 2,\n  maxActionPoints: 2,\n  hasWeapon: true,\n}\n\nlet addEntityToDefaultValues = entity => Object.assign({...defaultValues}, entity);\n\nexport const characterDefinitions = entitiesInitialValues\n  .map(entity => addEntityToDefaultValues(entity))\n  .map(entry => new Entity(entry));\nexport default characterDefinitions;\n","import { EntitiesService, Entity } from \"services/EntitiesService\";\nimport { MessageService } from \"services/MessageService\";\n\nenum scriptTypes {\n  entityPresent = 'entity-present',\n  allEntitiesDead = 'all-entities-dead',\n}\n\nclass ScriptsServiceClass {\n  scripts = [\n    {\n      what: scriptTypes.entityPresent,\n      where: {x: 8, y: 8},\n      who: 'Lazer Blady',\n      condition: 'alive', // dead, hpGreaterThan, hpLessThan, havingEquipment\n      params: [],//\n\n      result: {\n        action: 'message',// 'switch power', 'open', 'spawn'\n        params: ['You have reached the exit. You have won the game.']\n      }\n    },\n    {\n      what: scriptTypes.entityPresent,\n      where: {x: 6, y: 8},\n      who: 'Lazer Blady',\n      condition: 'alive', // dead, hpGreaterThan, hpLessThan, havingEquipment\n      params: [],//\n\n      result: {\n        action: 'load-map',// 'switch power', 'open', 'spawn'\n        params: ['A2']\n      }\n    },\n    {\n      what: scriptTypes.entityPresent,\n      where: {x: 4, y: 9},\n      condition: 'alive', // dead, hpGreaterThan, hpLessThan, havingEquipment\n      params: [],//\n\n      result: {\n        action: 'heal',// 'switch power', 'open', 'spawn'\n        params: []\n      }\n    },\n    {\n      what: scriptTypes.entityPresent,\n      where: {x: 5, y: 8},\n      condition: 'alive', // dead, hpGreaterThan, hpLessThan, havingEquipment\n      params: [],//\n\n      result: {\n        action: 'move',// 'switch power', 'open', 'spawn'\n        params: [{x: 0, y:0}],\n      }\n    },\n    {\n      what: scriptTypes.entityPresent,\n      where: {x: 0, y: 1},\n      result: {\n        action: 'move',\n        params: [{x: 0, y:9}],\n      }\n    }\n\n  ];\n  constructor() {\n    console.debug(JSON.stringify(this.scripts))\n  }\n\n  runScripts = (param) => {\n    this.scripts.forEach((script) => this.runScript(script));\n  }\n\n  runScript(script) {\n    //runnning a script\n    console.log('Running script.', script);\n\n    if(this.isConditionFullfilled(script)) {\n      this.executeResult(script);\n    }\n  }\n\n  isConditionFullfilled(script): boolean {\n    switch (script.what) {\n      case scriptTypes.entityPresent:\n        if(!script.where) break;// unless we're talking \"everywhere\"\n        let entitiesFoundAtLocationGiven = EntitiesService.getEntitiesAtGivenPosition(script.where);\n        console.log(`There are ${entitiesFoundAtLocationGiven.length} entities at ${script.where.x}, ${script.where.y}`);\n        let isAnyEntityPresentAtGivenLocation = entitiesFoundAtLocationGiven.length > 0;\n        if(!script.who) {\n          return isAnyEntityPresentAtGivenLocation;\n        } else {// we have \"who\"\n          let isGivenEntityFoundAtGivenLocation = false;\n          entitiesFoundAtLocationGiven.forEach((entityAtLocation) => {\n            if(entityAtLocation.name === script.who)  {\n              isGivenEntityFoundAtGivenLocation = true;\n            }\n          });\n\n          return isGivenEntityFoundAtGivenLocation\n        }\n      default:\n    }\n\n    return false;\n  }\n\n  executeResult(script) {\n    switch (script.result.action) {\n      case 'message':\n        MessageService.send(script.result.params[0]);\n        break;\n      case 'load-map':\n        console.log('Going to loadMap', script.result.params[0])\n        // TODO: GameModel.loadMapByName(script.result.params[0]);\n        break;\n      case 'heal':\n        console.log(`Going to heal ${script.where.x},${script.where.y}`)\n        let entitiesFoundAtLocationGiven = EntitiesService.getEntitiesAtGivenPosition(script.where);\n        entitiesFoundAtLocationGiven.forEach((entityAtLocation: Entity) => {\n          let entity = entityAtLocation;\n          MessageService.send(`Healing ${entity.name} from ${entity.hp} to ${entity.maxHp}`)\n\n          entityAtLocation.hp = entityAtLocation.maxHp;\n        });\n        break;\n      case 'move':{\n        console.log(`Going to heal ${script.where.x},${script.where.y}`)\n        let entitiesFoundAtLocationGiven = EntitiesService.getEntitiesAtGivenPosition(script.where);\n        entitiesFoundAtLocationGiven.forEach((entityAtLocation: Entity) => {\n          let entity = entityAtLocation;\n          let e = entity;\n          let targetDestination = script.result.params[0];\n          MessageService.send(`Moving ${entity.name} from ${e.position.x}, ${e.position.y} to\n          ${targetDestination.x},${targetDestination.y}`)\n\n          //entityAtLocation.hp = entityAtLocation.maxHp;\n          entity.position.x = targetDestination.x;\n          entity.position.y = targetDestination.y;\n        });\n        break;\n      }\n      default:\n    }\n  }\n\n}\n\nexport const ScriptsService = new ScriptsServiceClass();\nexport default ScriptsService;","export const structures = {\n  box: {\n    name: \"box\",\n    icon: \"📦\",\n    hp: 50,\n    maxHp: 70,\n    isBreathing: false,\n    isPassable: false,\n    position: { x: 4, y: 5 },\n  },\n  redBarrel: {\n    name: \"redBarrel\",\n    icon: \"🛢️\",\n    hp: 50,\n    maxHp: 70,\n    isBreathing: false,\n    isPassable: true,\n    position: { x: 4, y: 5 },\n  },\n};\n","import { SquaresService, Square } from \"services/SquaresService\";\nimport { EntitiesService, Entity } from \"services/EntitiesService\";\n\nimport { characterDefinitions } from \"resources/CharacterDefinitions\";\nimport intro from \"resources/maps/intro.json\";\nimport { GameActionsClassForGameComponent } from \"services/GameActionsService\";\nimport { L30 } from \"resources\";\nimport { Item } from \"services/ItemService\";\n\n\n/**\n * @description Handles loading and saving of the map and entities\n */\nexport class GameModelClass {\n  entities;\n  squares;\n  selected;\n\n  constructor() {\n    this.entities = EntitiesService.entities;\n    this.squares = SquaresService.squares;\n  }\n\n  saveMap = () => {\n    console.log('Alive suares:', SquaresService.squares);\n    let squares: Square[] = JSON.parse(JSON.stringify(SquaresService.squares));\n    let squaresProcessedForSave = squares.map((square) => {\n      //let newSquare = { squareType: square.squareType, entity: square.entity };\n\n      return square;\n    });\n    let squaresStringified = JSON.stringify(squaresProcessedForSave);\n    console.log(squaresStringified);\n    let message = \"Enter the name of saved map.\";\n    let mapName = \"map00\";\n\n    let result = window.prompt(message, mapName);\n    localStorage[result] = squaresStringified;\n    window.prompt(\"Saved the following map as \" + result, squaresStringified);\n  };\n\n  loadMap = (GameActions: GameActionsClassForGameComponent) => {\n    let mapNames: any = Object.keys(localStorage);\n    let message = `Enter the name of map to load.\\n`+\n    `Maps available in localStorage: ${mapNames}\\n`+\n    `Be aware item processing is not working fully yet.`;\n    console.log(mapNames);\n    let result = window.prompt(message, mapNames);\n    let squaresStringified = localStorage[result];\n\n    console.log(squaresStringified);\n    let squaresLoaded = JSON.parse(squaresStringified);\n    this.loadSquaresIntoService(squaresLoaded);\n\n    let entitiesWithinTheMap = squaresLoaded.filter(square => square.entity).map(square => square.entity);\n    console.log('Entities Within The Map:', entitiesWithinTheMap);\n\n    function makeInstanceOfAWeapon(weaponRecord): Item {\n      return new L30();\n    }\n\n    function processEquipmentForEntityRecord(entityRecord): any {\n      if(entityRecord.equipment && entityRecord.equipment.hands) {\n        entityRecord.equipment.hands = makeInstanceOfAWeapon(entityRecord.equipment.hands)\n      }\n      if(entityRecord.inventory) {\n        entityRecord.inventory.map(itemRecord => makeInstanceOfAWeapon(itemRecord));\n      }\n      return entityRecord;\n    }\n\n    let entitiesProcessed = entitiesWithinTheMap\n          .map(entity => processEquipmentForEntityRecord(entity))\n          .map(entityRecord => new Entity(entityRecord));\n\n    console.log('ALIVE ENTITIES?', entitiesProcessed)\n    this.loadEntitiesIntoService(entitiesProcessed);///\n    GameActions.setSquaresAccordingToEntities();\n    GameActions.processInterface();\n  };\n\n  loadSquaresIntoService = (squaresLoaded) => {\n    SquaresService.squares.forEach((square, index) => {\n      let targetSquare = square;\n      let sourceSquare = squaresLoaded[index];\n      targetSquare.squareType = (sourceSquare && sourceSquare.squareType) || 'floor';\n      targetSquare.icon = (sourceSquare && sourceSquare.icon) || ' ';\n      targetSquare.name = (sourceSquare && sourceSquare.name) || ' ';\n      targetSquare.description = (sourceSquare && sourceSquare.description) || ' ';\n    });\n  };\n\n  loadEntitiesIntoService = (entities: Entity[]) => {\n    EntitiesService.entities = entities;\n  };\n\n  loadBuiltInMap = () => {\n    this.loadSquaresIntoService(intro);\n  };\n\n  loadPredefinedEntitities = () => {// TODO: Save and load entities together with the map?\n    this.loadEntitiesIntoService(characterDefinitions);\n  };\n}\n\nexport const GameModel = new GameModelClass();\n","import { GameModel, GameModelClass } from \"services/GameModelService\";\nimport { GameState } from \"./GameState\";\n\nimport { SquaresService, Square } from \"services/SquaresService\";\nimport { EntitiesService, Entity } from \"services/EntitiesService\";\nimport * as Helpers from \"helpers\";\nimport { ScriptsService } from \"services/ScriptsService\";\n\n/**\n * @description Assorted methods required to run the game logic\n */\nclass GameLogicClass {\n  model: GameModelClass;\n\n  constructor() {\n    this.model = GameModel;\n  }\n\n  run = () => {\n    console.log(\"Running Game Logic\");\n    console.log(GameModel.entities);\n  };\n\n  calculateNextInterfaceState = (previousState: GameState) => {\n    let nextState = previousState;\n    let { entities, selected } = nextState;\n    entities.forEach((entity) => {\n      if (entity === selected) SquaresService.markAvailableDestinationsForSelectedEntity(selected);\n    });\n\n    return nextState;\n  };\n\n  /**\n   * Calculate WHAT EXACTLY? This should probably go into GameLogic\n   * @param previousState\n   */\n\n  calculeteNextGameStateAfterProcessingAGivenEntity(\n      previousState: GameState,\n      givenEntity: Entity\n    ): GameState{\n    if(givenEntity.actionPoints === 0) return previousState;\n    let nextState: GameState = previousState;\n    let { entities } = nextState;\n    this.processAnEntity(givenEntity);\n    nextState.enemiesAlive = this.calculateNumberOfAliveEnemies(entities);\n    nextState.friendsAlive = this.calculateNumberOfAliveFriends(entities);\n    ScriptsService.runScripts(givenEntity);\n    return nextState;\n  }\n\n  processAnEntity(entity) { // Entity processing function\n    console.log('start procesing', entity);\n    EntitiesService.moveEntityRandomly(entity);\n    EntitiesService.moveEntityIntoChosenDestination(entity);\n    EntitiesService.stopShootingWhenForbidden(entity);\n    if (EntitiesService.isEntityTargettingSomethingAlive(entity)) {\n      EntitiesService.fireAShot(entity);\n    }\n    EntitiesService.ceaseFireNextTickIfNoAliveTargets(entity);\n\n    entity.bleedExternally();\n\n    EntitiesService.stopBreathingForKilledEntity(entity);\n\n    SquaresService.markAvailableDestinationsForSelectedEntity(entity);\n    console.log('end procesing', entity)\n    // SquaresService.castLightsFromFriendlyEntity(entity);\n  }\n\n  calculateNumberOfAliveFriends(entities: Entity[]):number {\n    return entities.filter(entity => entity.isFriendly && entity.isAlive).length;\n  }\n\n  calculateNumberOfAliveEnemies(entities: Entity[]):number {\n    let amountOfAliveEnemies = 0;\n    entities.forEach((entity) => {\n      if(entity.isFriendly) {\n        return;\n      } else if(entity.isAlive) {\n        amountOfAliveEnemies++;\n      }\n    });\n\n    return amountOfAliveEnemies;\n  }\n\n  syncSquaresWithEntities = (previousState) => {\n    let squares: Square[] = Helpers.newCopyOfArray(previousState.squares);\n    /*\n    Reattach new squares array to the SquaresService\n    This might actually be not-needed, as elements of that array are objects\n    and are referenced in both arrays, so unless we're adding new squares,\n    everything should work without re-attaching\n    */\n    SquaresService.squares = squares;\n    let entities: Entity[] = EntitiesService.entities;\n    if (entities.length) {\n      Helpers.resetGivenFieldsOnACollection(squares, \"entity\", \"entities\");\n    }\n    entities.forEach((entity) => {\n      SquaresService.setEntityWithinApropriateSquare(entity);\n    });\n\n    return { squares, entities };\n  };\n\n  deselectAllEntities = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"active\");\n    Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\", \"isAvailableDestination\");\n  };\n\n  ceaseFire = () => {\n    Helpers.resetGivenFieldsOnACollection(GameModel.entities, \"isShooting\");\n  };\n}\n\nexport const GameLogic = new GameLogicClass();\nexport default GameLogic;\n","import { Entity, Square, EntitiesService, SquaresService } from \"services\";\nimport GameLogic from \"./GameLogicService\";\n\n/**\n * @description Interface of GameState used in Game Component as state\n *\n */\nexport interface GameState {\n  entities: Entity[];\n  squares: Square[];\n  selected: Entity;\n  targeted: Square;\n  targetedSquareNumber: number;\n\n  arenaSize: number;\n  squareSize: number;\n  enemiesAlive: number;\n  friendsAlive: number;\n\n  isAutoLoopOn: boolean;\n  isBoardRotated: boolean;\n  isEditorOn: boolean;\n}\n\nexport class GameState implements GameState{\n  constructor() {\n    Object.assign(this,\n      {\n        entities: EntitiesService.entities,\n        squares: SquaresService.squares,\n        selected: EntitiesService.selected,\n        targeted: null,\n        targetedSquareNumber: null,\n\n        arenaSize: 10,\n        squareSize: 40,\n        enemiesAlive: GameLogic.calculateNumberOfAliveEnemies(EntitiesService.entities),\n        friendsAlive: GameLogic.calculateNumberOfAliveFriends(EntitiesService.entities),\n\n        isAutoLoopOn: false,\n        isBoardRotated: false,\n        isEditorOn: false,\n      }\n    );\n  }\n}\n","/** This file contains most of the click-handling logic for the Game */\n/* Handling of particular events is delegated to proper services */\n\nimport * as Helpers from \"helpers\";\nimport { Entity, EntitiesService, SquaresService, GameLogic, Position } from \"services\";\nimport { GameState } from \"services/GameLogicService\";\nimport { Square } from \"services/SquaresService\";\n\nlet component = null;\n/**\n * @description Class with methods designed to operate on Game Component state.\n * @requires Game component to be passed to constructor.\n * @example let gameActions = new GameActionsClass(this); // run inside the GameComponent\n */\nexport class GameActionsClassForGameComponent {\n  constructor(that) {\n    component = that;\n  }\n\n  entitiesProcessingLoopIntervalHandle = null;\n  playerActionTime: number = 1000; //in milliseconds\n\n  toggleEditorMode = () => {\n    if (!component.state.isEditorOn) {\n      Helpers.resetGivenFieldsOnACollection(component.state.squares, \"blood\", \"entity\");\n      component.setState((prevState) => {\n        return { entities: [], isEditorOn: true };\n      });\n    } else {\n      component.setState((prevState) => {\n        return { squares: SquaresService.squares, entities: EntitiesService.entities, isEditorOn: false };\n      });\n    }\n  };\n\n  zoomIn() {\n    component.setState((prevState) => {\n      return { squareSize: prevState.squareSize + 5 };\n    });\n  }\n\n  zoomOut() {\n    component.setState((prevState) => {\n      return { squareSize: prevState.squareSize - 5 };\n    });\n  }\n\n  get isTurnInProgress() {return this.entitiesProcessingLoopIntervalHandle};\n\n  loop = () => {\n    console.debug('Attempting loop')\n    if(this.isTurnInProgress) {\n      setTimeout(this.loop, 1000);\n      return;\n    };\n    console.debug('Executing nextStep')\n    this.nextStep();\n    if (component.state.isAutoLoopOn) {\n      console.debug('Scheduling next loop step in 1s');\n      setTimeout(this.loop, 1000);\n    }\n  };\n\n  nextTick = () => {\n    component.setState({ isAutoLoopOn: false });\n    this.nextStep();// TODO should not be run if processing loop is in progress\n  };\n\n  nextStep() {\n    component.stepNumber++;\n    console.info('Starting processing turn #', component.stepNumber)\n    EntitiesService.refillActionPointsForAllEntities();\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, 'targetPosition', 'isShooting');\n    Helpers.resetGivenFieldsOnACollection(SquaresService.squares, 'isAttacked');\n    this.processEntities();\n  }\n\n  processEntities() {\n    this.drawAggro();\n    // EntitiesService.moveEntities();\n    this.entitiesProcessingLoopIntervalHandle = setInterval(\n      () => this.processNextUnprocessedEntity(),\n      100\n    );\n  }\n\n  processNextUnprocessedEntity() {\n    let entitiesForProcessing = EntitiesService.entities.filter(\n      entity =>\n        (!entity.isFriendly && entity.isAlive) &&\n        (entity.actionPoints > 0)\n    );\n    if(entitiesForProcessing.length) {\n      let entityForThisTurn = entitiesForProcessing[0];\n      this.setNewStateAfterProcessingChosenEntity(entityForThisTurn)\n    } else {// all are processed\n      clearInterval(this.entitiesProcessingLoopIntervalHandle);\n      this.entitiesProcessingLoopIntervalHandle = null;\n      console.log('All entities processed.')\n    }\n  }\n\n  setNewStateAfterProcessingChosenEntity(entity) {\n    component.setState(\n      (prevState) => GameLogic.calculeteNextGameStateAfterProcessingAGivenEntity(prevState, entity),\n      () => this.setSquaresAccordingToEntities()\n    );\n    this.processInterface();\n  }\n\n  executeActions = () => {\n    component.setState(\n      (prevState) => GameLogic.calculeteNextGameStateAfterProcessingAGivenEntity(prevState, prevState.selected),\n      () => this.afterExecuteActions()\n    );\n    this.processInterface();\n  }\n\n  afterExecuteActions = () => {\n    // setTimeout(() => {\n    //   delete state.selected.targetPosition;\n    //   this.processInterface();\n    // },this.playerActionTime);\n    // Helpers.resetGivenFieldsOnACollection(squares,'isAttacked');\n\n    this.setSquaresAccordingToEntities();\n  }\n\n  processInterface() {\n    component.setState(\n      (prevState) => GameLogic.calculateNextInterfaceState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  /** Sets entities within apropriate squares, based on the value of their `position` field\n   * This might actually be not-needed, if movement of entities is reflected in their respectable squares\n   * Also: entities are no longer rendered within `Square` component\n   */\n  setSquaresAccordingToEntities() {\n    component.setState((prevState) => GameLogic.syncSquaresWithEntities(prevState));\n  }\n\n  handleKeyPress = (param) => {\n    console.log(param);\n    switch (param){\n      case \"space\":\n        this.executeActions();\n        break;\n      default:\n\n    }\n  }\n\n  handleClickV2 = (squareIndex: number) => {\n    component.setState(\n      (state: GameState) => {\n        let { squares, entities, selected, targeted, isEditorOn, targetedSquareNumber: selectedSquareNumber } = state;\n        let previousTargeted = targeted;\n        targeted = squares[squareIndex];\n        selectedSquareNumber = squareIndex;\n        const doubleClick = () => previousTargeted === targeted;\n        SquaresService.markSquareAtIndexAsTargeted(squareIndex);\n\n        if (isEditorOn) {\n          switch (targeted.squareType) {\n            case \"floor\":\n              targeted.squareType = \"wall\";\n              break;\n            case \"wall\":\n              targeted.squareType = \"nothing\";\n              break;\n            case \"nothing\":\n              targeted.squareType = \"monster-filter\";\n              break;\n            case \"monster-filter\":\n              targeted.squareType = \"floor\";\n              break;\n          }\n        }\n\n        /** Setting move destination while clicking on empty square */\n        if (doubleClick() && targeted.isAvailableDestination) {\n          selected.setMoveDestinationSquareByNumber(squareIndex);\n          delete selected.targetPosition;\n          delete selected.isShooting;\n          Helpers.resetGivenFieldsOnACollection(squares,'isAttacked');\n          this.executeActions();\n        }\n\n        if (doubleClick()) {\n          if (!selected && targeted.entity &&  targeted.entity.isAlive) {\n            // Selecting\n            selected = EntitiesService.selectEntityFromGivenSquare(selected, targeted);\n            //targeted = undefined;\n          } else if (Helpers.isSelectedTargeted(selected, targeted)) {\n            // Deselecting if not selecting\n            //* // DISABLE DOUBLECLICK DESELECT\n            // GameLogic.deselectAllEntities();\n            // selected = undefined;\n            // */\n          }\n        }\n\n        function doesSquareHaveAliveEntities(square: Square): boolean {\n          return !!(square.entities && square.entities.find(entity => entity.isAlive));\n        }\n        // setting attack\n        if (doubleClick() && selected && doesSquareHaveAliveEntities(targeted) && selected !== targeted.entity) {\n          let targetSquarePosition = SquaresService.getSquarePositionFromIndex(squareIndex);\n          selected.attackPosition(targetSquarePosition);\n          SquaresService.markSquareAtIndexAsAttacked(squareIndex);\n          delete selected.moveDestination;\n          delete selected.isShooting;\n          Helpers.resetGivenFieldsOnACollection(squares, 'isChosenDestination');\n          this.executeActions();\n        }\n\n        return { squares, entities, selected, targeted, targetedSquareNumber: selectedSquareNumber };\n      },\n      () => this.processInterface()\n    );\n  };\n\n  drawAggro() {\n    EntitiesService.entities.forEach((entity)=>{\n      if(entity.isFriendly) return;\n      entity.isShooting = false;\n      this.aggro(entity);\n    })\n  }\n\n  aggro = (entity: Entity) => {\n    // let actor = EntitiesService.findEntityById(name);\n    let position = entity.position;\n    let closeEntities = this.findEntitiesThatAreClose(position);\n    let entitiesToAttack = closeEntities.filter(closeEntity => closeEntity.hp > 0);\n    if(entitiesToAttack.length) {\n      let firstAmongThem = entitiesToAttack[0];\n      entity.attackPosition(firstAmongThem.position);\n    }\n  }\n\n  findEntitiesThatAreClose(position: Position){\n    let {x, y} = position;\n    let entities: Entity[] = [];\n    for (let j = y - 1; j <= y + 1; j++) {\n      if (j < 0 || j >= SquaresService.arenaSize) {\n        continue;\n      }\n      for (let i = x - 1; i <= x + 1; i++) {\n        if (i < 0 || i >= SquaresService.arenaSize || (i === x && j === y)) {\n          continue;\n        }\n        let newlyFoundEntities = EntitiesService.getEntitiesAtGivenPosition({x: i, y: j})\n        entities = entities.concat(newlyFoundEntities);\n      }\n    }\n\n    return entities;\n  }\n\n  nuke = (dmg: number) => {\n    component.setState(\n      (state) => {\n        let { entities } = state;\n\n        entities.forEach((entity) => {\n          entity.hp = entity.hp - dmg;\n        });\n\n        return { entities };\n      },\n      () => {\n        this.processEntities();\n      }\n    );\n  };\n\n  toggleRotateBoard = () => {\n    component.setState({ isBoardRotated: !component.state.isBoardRotated });\n  };\n\n  switchAutoLoop = () => {\n    component.setState(\n      (previousState: GameState) => {\n        let isAutoLoopOn = !previousState.isAutoLoopOn\n        console.info('Switching auto loop to', isAutoLoopOn);\n        return { isAutoLoopOn };\n      },\n      () => {\n        if (component.state.isAutoLoopOn) {\n          this.loop();\n        }\n      }\n    );\n  };\n\n  onInventoryClick = (entity: Entity, itemName: string) => {\n    component.setState((prevState) => {\n      let entities = [].concat(prevState.entities);\n      EntitiesService.entities = entities;\n      let entityId = EntitiesService.getEntityId(entity);\n      let actualEntity = EntitiesService.findEntityById(entityId);\n      //let actualItem = EntitiesService.findItemOnEntity(actualEntity, itemName);\n\n      if (actualEntity.equipment.hands && actualEntity.equipment.hands.name === itemName) {\n        actualEntity.unEquipFromHands();\n      } else {\n        actualEntity.equipInHands(itemName);\n      }\n\n      return { entities };\n    });\n    console.log(entity, itemName);\n  };\n\n  handleDeselectAllEntities = () => {\n    component.setState(\n      (state) => {\n        let { squares, entities, selected } = state;\n\n        GameLogic.deselectAllEntities();\n        selected = undefined;\n\n        return { squares, entities, selected };\n      },\n      () => {\n        //this.processEntities();\n      }\n    );\n  };\n\n  ceaseFire = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"isShooting\");\n    this.processInterface();\n  };\n}\n","import React from \"react\";\nimport { LinearDisplay, InventoryList } from \"components\";\nimport { Entity, Item, InventoryItem, EntitiesService } from \"services\";\nimport * as Helpers from \"helpers\";\nimport \"./EntityCard.scss\";\n\ninterface EntityCardProps {\n  entity: Entity;\n  onInventoryClick?(entity: Entity, itemName: string);\n  onEntityClick?(entityName: string);\n  processInterface?: Function;\n}\n\nexport class EntityCard extends React.Component<EntityCardProps> {\n  renderCount = 0;\n  handleInventoryClick = (itemName: string): void => {\n    this.props.onInventoryClick(this.props.entity, itemName);\n  };\n\n  onDrop = (itemName: string) => {//TODO: Take this outside of the component, duuuh.\n    let { entity } = this.props;\n    if (entity.equipment.hands && entity.equipment.hands.name === itemName) {\n      entity.unEquipFromHands();\n      entity.isShooting = false;\n    }\n    let item: InventoryItem = entity.takeFromInventory(itemName);\n    if(item instanceof Item){\n      console.log(\"Dropping Item\")\n      entity.square.addItem(item);\n    } else if (item instanceof Entity){\n      console.log(\"Dropping Entity\")\n      EntitiesService.addEntity(item);\n      entity.square.entity = item;\n      entity.square.entities.push(item);\n      item.position = {...entity.position};\n    }\n\n    this.props.processInterface();\n  };\n\n  onReload = (itemName: string) => {\n    let { entity } = this.props;\n    if (entity.equipment.hands && entity.equipment.hands.name === itemName) {\n      entity.isShooting = false;\n    }\n    this.props.processInterface();\n  };\n\n  get distanceToTarget(): number {\n    let { entity } = this.props;\n    if (!entity.targetPosition) return null;\n    return Number(\n      Helpers.calculateDistance(\n        entity.targetPosition.x - entity.position.x,\n        entity.targetPosition.y - entity.position.y\n      ).toFixed(2)\n    );\n  };\n\n  render() {\n    let { entity } = this.props;\n    if (!entity) return null;\n    // FIXME: Below should be separated into several sub-components\n    // Each sub-component should receive flat data (position, hp, ...)\n\n    let className = \"entity-card\";\n    if (entity.active) {\n      className += \" entity-card--active\";\n    }\n\n    if (entity.isFriendly) {\n      className += \" entity-card--friendly\";\n    }\n\n    if (entity.isDead) {\n      className += \" entity-card--dead\";\n    }\n\n    let inHands = entity.equipment && entity.equipment.hands;\n    let inHandsArray = inHands && [inHands];\n    let bleedingText\n    let bleedingReductionText;\n    if(entity.bleedingReductionPerTurn) {\n      bleedingReductionText = <span className=\"bleeding-info__reduction\">(-{entity.bleedingReductionPerTurn}<small className=\"bleeding-info__reduction__unit\">/Turn</small>)</span>;\n    }\n    if(entity.bleeding) {\n      bleedingText = <span className=\"bleeding-info\">Bleeding: {entity.bleeding} {bleedingReductionText}</span>\n    }\n\n    return (\n      <div className={className}>\n\n        <button\n          className=\"inventory-list__drop-button\"\n          onClick={() => this.props.onEntityClick(entity.name)}\n        >\n          Pick up\n        </button>\n\n        <div>\n          <div className=\"entity-card__portrait\">{entity.icon}</div>\n        </div>\n        <strong title=\"Name\">{entity.name}</strong>\n        <br />\n        <small className=\"entity-data__rank\">Private</small>\n        <div>\n          <LinearDisplay className=\"full\" label=\"AP\" current={entity.actionPoints} max={entity.maxActionPoints} />\n          <LinearDisplay className =\"full\" label=\"HP\" current={entity.hp} max={entity.maxHp} />\n          {bleedingText}\n          <br/>\n          <br />\n          <span title=\"Location\" className=\"entity-data__location\">\n            LOC: {entity.position.x}, {entity.position.y}\n          </span>\n          <span title=\"Distance to target\" hidden={!entity.targetPosition} className=\"entity-data__distance-to-target\">\n            DIST: { this.distanceToTarget }\n          </span>\n          <span title=\"Target location\" hidden={!entity.targetPosition} className=\"entity-data__target-position\">\n            TRGT: {entity.targetPosition && entity.targetPosition.x}, {entity.targetPosition && entity.targetPosition.y}\n          </span>\n          <br />\n        </div>\n        <InventoryList\n          label=\"Equipped\"\n          title=\"In hands\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          onReload={this.onReload}\n          inventory={inHandsArray}\n          processInterface={() => this.props.processInterface()}\n        />\n        <InventoryList\n          label=\"Inventory\"\n          title=\"In backpack\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          onReload={this.onReload}\n          inventory={entity.inventory}\n          processInterface={() => this.props.processInterface()}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { SquaresService, Entity } from \"services\";\nimport { HpBar, ShootingVisualization, EmojiMapper } from \"components\";\nimport * as Helpers from \"helpers\";\nimport \"./EntityPawn.scss\";\n\ninterface EntityPawnProps {\n  entity: Entity;\n}\n\nexport class EntityPawn extends React.Component<EntityPawnProps> {\n  randomTime = `${(Math.random() + 0.5).toFixed(2)}s`;\n\n  render() {\n    let { entity } = this.props;\n    let square = SquaresService.getSquareFromPosition(entity.position.x, entity.position.y);\n\n    let classNameBase = \"entity-pawn__icon\";\n    let className = `${classNameBase}`;\n    let classessFromFlags = Helpers.turnFlagsIntoClasses(entity, classNameBase);\n    classessFromFlags += Helpers.turnFlagsIntoClasses(square, classNameBase);\n    className += ` ${classessFromFlags} `;\n    let fof = entity.isFriendly ? 'friendly' : 'hostile';\n    let color = entity.isFriendly ? 'green' : 'red';\n    let zIndex = entity.isShooting ? 5 : 1;\n    let animationBreathing = entity.isBreathing ? `breathing ${this.randomTime} alternate infinite linear` : \"none\";\n\n    let boardPadding = 10;\n    let squareMargin = 2;\n    return (\n      <div\n        className={`entity-pawn ${entity.isDead ? 'entity-pawn--dead' : ''}`}\n        key={entity.name}\n        style={{\n          left: `calc(${boardPadding + 3}px + ${entity.position.x * squareMargin * 2}px + ${entity.position.x}em)`,\n          top: `calc(${boardPadding + 3}px + ${entity.position.y * squareMargin * 2}px + ${entity.position.y}em)`,\n          zIndex: zIndex,\n        }}\n      >\n        <div\n          className={`entity-pawn__health-display ` + fof}\n        >\n\n          <HpBar\n            current={entity.hp}\n            max={entity.maxHp}\n            color={color}\n          />\n        </div>\n\n        <div\n          className={className}\n          style={{\n            animation: animationBreathing,\n          }}\n        >\n          <EmojiMapper emoji={entity.icon} />\n        </div>\n        <ShootingVisualization entity={entity} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./EmojiMapper.scss\";\n\ninterface EmojiMapperProps {\n  emoji: string;\n}\n\n/**\n * @description Maps emojis to pictures with pre-picked versions of them\n */\nexport class EmojiMapper extends React.Component<EmojiMapperProps> {\n\n  emojiMap = {\n    \"🐙\": \"octopus\",\n    \"🦑\": \"squid\",\n    \"🕷️\": \"spider\",\n    \"🦟\": \"mosquito\",\n    \"🐜\": \"ant\",\n    \"🦠\": \"microbe\",\n    \"🧑‍🚀\": \"astronaut\",\n    \"🤖\": \"robot\",\n    \"🛢️\": \"oildrum\"\n  }\n\n\n  render() {\n    let { emoji } = this.props;\n    let emojiMappedTo = this.emojiMap[emoji];\n    let output = <></>;\n    if(emojiMappedTo){\n      output = <div className={\"emoji emoji-\"+ emojiMappedTo}></div>\n    } else {\n      output = <div>{emoji}.</div>\n    }\n\n    return (\n      <>{output}</>\n    );\n  }\n}\n","import React from \"react\";\n// services\nimport { SquaresService, EntitiesService } from \"services\";\nimport { Entity, Square, Position } from \"services\";\n// components\nimport { EntityCard, InventoryList } from \"components\";\n// others\nimport { structures } from \"resources\";\nimport * as Helpers from \"helpers\";\nimport GameStyles from \"./Game.module.scss\";\n\ninterface TargetedSquareInfoProps {\n  className: string;\n  squareNumber: number;\n  squares: Square[];\n  selected: Entity;\n  targeted: Square;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  processInterface: Function;\n}\n\n// TODO: Refactor, does it really need all this logic.\nexport default class TargetedSquareInfo extends React.Component<TargetedSquareInfoProps> {\n  boxSerialNumber: number = 0;\n\n  onItemClick = (itemName: string): void => {\n    let { selected, targeted, squareNumber } = this.props;\n    let targetedSquarePosition = SquaresService.getSquarePositionFromIndex(squareNumber);\n    if (selected && targeted &&\n      selected.position.x === targetedSquarePosition.x &&\n      selected.position.y === targetedSquarePosition.y\n      ) {\n      let item = targeted.takeFromInventory(itemName);\n      if (!item) {// We aren't picking up an item, we are picking up an Entity.\n\n        item = targeted.entities.find(entity => entity.name === itemName);\n\n        let square = SquaresService.getSquareFromPosition(targetedSquarePosition.x, targetedSquarePosition.y);\n        //square.entity = null;\n        EntitiesService.removeEntityFromListOfEntities(square.entities, item as Entity);\n        EntitiesService.removeEntity(item as Entity);// TODO: Take this out of the component\n      }\n      selected.addToInventory(item);\n    }\n    this.props.processInterface();\n  };\n\n  onMoveClick(selected: Entity, targetedSquarePosition: Position): void {\n    let targetedSquare: Square = SquaresService.getSquareFromPosition(targetedSquarePosition.x, targetedSquarePosition.y);\n    selected.setMoveDestinationPosition(targetedSquarePosition);\n    targetedSquare.isChosenDestination = true;\n    this.props.processInterface();\n  }\n\n  onAttackClick(selected: Entity, targetedSquarePosition: Position): void {\n    selected.attackPosition(targetedSquarePosition);\n    this.props.processInterface();\n  }\n\n  onAddStructureClick(targetedSquarePosition: Position, structureType: string): void {\n    let box = Object.assign({}, structures[structureType]);\n    let targetPosition = Object.assign({}, targetedSquarePosition);\n    box.position = targetPosition;\n    box.name += this.boxSerialNumber++;\n    let square = SquaresService.getSquareFromPosition(targetedSquarePosition.x, targetedSquarePosition.y);\n\n    let newStructure = new Entity(box);\n\n    // TODO: FIXME: Stop forcing types, make a new list for scenery items.\n    //square.entity = newStructure;\n    square.entities.push(newStructure);\n    EntitiesService.entities.push(newStructure);\n\n    //square.addToInventory(newStructure as Item);\n\n\n    this.props.processInterface();\n  }\n\n  render() {\n    let { targeted, selected, squareNumber } = this.props;\n\n    if (!targeted) {\n      return null;\n    }\n\n    let targetedSquarePosition = SquaresService.getSquarePositionFromIndex(squareNumber);\n\n    let entityInfo = [];\n    let distanceInfo;\n    let positionInfo;\n    let bloodInfo;\n    let availableActions = [];\n    let items;\n\n    let editorButtons = (\n      <div>\n        <button onClick={() => this.onAddStructureClick(targetedSquarePosition, \"box\")} className={GameStyles.button}>\n          Add box\n        </button>\n        <button\n          onClick={() => this.onAddStructureClick(targetedSquarePosition, \"redBarrel\")}\n          className={GameStyles.button}\n        >\n          Add barrel\n        </button>\n      </div>\n    );\n\n    if (targeted.entities && targeted.entities.length){\n      targeted.entities.forEach(i => {\n        if (selected !== i) {\n          entityInfo.push(\n            <EntityCard\n              key={i.name}\n              onEntityClick={this.onItemClick}\n              onInventoryClick={this.props.onInventoryClick}\n              entity={i}\n              processInterface={() => this.props.processInterface()}\n            />\n          );\n        }\n      });\n    }\n\n\n    if (targeted.items) {\n      items = (\n        <InventoryList\n          label=\"Items in this location\"\n          title=\"On the floor\"\n          onClick={this.onItemClick}\n          onDrop={null}\n          onReload={null}\n          inventory={targeted.items}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (selected) {\n      let distanceToSelected = Helpers.calculateDistance(\n        targetedSquarePosition.x - selected.position.x,\n        targetedSquarePosition.y - selected.position.y\n      );\n\n      distanceInfo = <li>Distance to selected: {distanceToSelected.toFixed(2)}</li>;\n\n      if (distanceToSelected !== 0) {\n        if (targeted.isAvailableDestination) {\n          availableActions[0] = (\n            <button key=\"move\" onClick={() => this.onMoveClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Move\n            </button>\n          );\n        }\n        if (targeted.entity) {\n          availableActions[1] = (\n            <button key=\"attack\" onClick={() => this.onAttackClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Attack\n            </button>\n          );\n        }\n      }\n    }\n\n    if (targetedSquarePosition) {\n      positionInfo = (\n        <li>\n          Position: [ {targetedSquarePosition.x}, {targetedSquarePosition.y} ]{\" \"}\n        </li>\n      );\n    }\n\n    if (targeted.blood) {\n      bloodInfo = <li>Blood amount: {targeted.blood}</li>;\n    }\n\n    let square = SquaresService.getSquareFromPosition(targetedSquarePosition.x, targetedSquarePosition.y);\n\n    return (\n      <div className={this.props.className}>\n        <strong className={GameStyles.targeted__label}>Target square Info</strong>\n        <code>{square.icon} {square.name}</code>\n        <p>{square.description}</p>\n        <div>{entityInfo}</div>\n        <div>{availableActions}</div>\n        <ul>\n          {positionInfo}\n          {distanceInfo}\n          {bloodInfo}\n          {items}\n          {editorButtons}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { ReactElement } from \"react\";\n// services\nimport { Entity } from \"services\";\n// components\nimport { EntityCard } from \"components/EntityCard\";\n// others\nimport GameStyles from \"./Game.module.scss\";\n\ninterface SelectedEntityInfoProperties {\n  selected: Entity;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  handleDeselectAllEntities: () => void;\n  processInterface: Function;\n}\n\n// TODO: Change this into HOC, as it doesn't really need half of it's props for itself\nexport default class SelectedEntityInfo extends React.Component<SelectedEntityInfoProperties> {\n  render(): ReactElement {\n    if (!this.props.selected) {\n      return null;\n    }\n\n    return (\n      <div className={GameStyles.selected}>\n        <strong className={GameStyles.selected__label}>Active entity </strong>\n        <div>\n          <EntityCard\n            onInventoryClick={this.props.onInventoryClick}\n            entity={this.props.selected}\n            processInterface={() => this.props.processInterface()}\n          />\n        </div>\n        <button onClick={this.props.handleDeselectAllEntities} className={GameStyles.button}>\n          {\" \"}\n          Deselect\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\n// services\nimport { EntitiesService, GameModel, GameActionsClassForGameComponent, GameState, Entity } from \"services\";\n\n// components\nimport { Board, MessageBox, Controls } from \"components\";\nimport TargetedSquareInfo from \"./TargetedSquareInfo\";\nimport SelectedEntityInfo from \"./SelectedEntityInfo\";\n\n// others\nimport styles from \"./Game.module.scss\";\n\nlet GameActions = null;\n\n/** Game composes all the parts of the interface together */\nexport class Game extends React.PureComponent<void, GameState> {\n  renderCounter: number = 0;\n  stepNumber: number = 0;\n\n  constructor(props: void) {\n    super(props);\n\n    GameModel.loadBuiltInMap();\n    GameModel.loadPredefinedEntitities();\n    EntitiesService.setSelected(EntitiesService.findEntityById(\"Lazer Blady\"), true);\n\n    this.state = new GameState();\n\n    GameActions = new GameActionsClassForGameComponent(this);\n    console.log('Initial state dump:', this.state);\n  }\n\n  componentDidMount() {\n    this.startIfAutoLoopIsOn();\n  }\n\n  startIfAutoLoopIsOn(){\n    if(this.state.isAutoLoopOn){\n      GameActions.loop();\n    }\n  }\n\n  calculateFriendlyActionPoints(): number{\n    let startValue = 0;\n    let apAdder = (previousValue: number, entity: Entity): number => {\n      let result = previousValue + entity.actionPoints;\n      return result;\n    };\n    return EntitiesService.entities.filter(entity => entity.isFriendly).reduce(\n      apAdder, // takes a previous value and an array element (entity), returns number (next value)\n      startValue // start value for only the first iteration\n    );\n  }\n\n  render() {\n    // console.log(\"Rendering Game. #\", this.renderCounter++);\n    return (\n      <div className={styles.game}>\n        <div className={styles.game__board}>\n          <Board\n            squares={this.state.squares}\n            entities={this.state.entities}\n            onClick={(i) => GameActions.handleClickV2(i)}\n            size={this.state.arenaSize}\n            isRotated={this.state.isBoardRotated}\n            style={{fontSize: `${this.state.squareSize}px`}}\n          />\n          <Controls\n            keys={['W', 'S', 'A', 'D', 'space']}// TODO: implement using this.\n            onKeyPress={GameActions.handleKeyPress}\n          ></Controls>\n        </div>\n\n        <div className={styles.game__info}>\n          <div className={styles.actions}>\n            <div className={styles.action_row}>\n              <button onClick={GameActions.toggleEditorMode}>\n                Editor Mode\n              </button>\n              <button onClick={GameModel.saveMap}>\n                Save Map\n              </button>\n              <button onClick={()=> GameModel.loadMap(GameActions)}>\n                Load Map\n              </button>\n            </div>\n\n            <div className={styles.action_row}>\n              <button onClick={GameActions.toggleRotateBoard}>\n                Rotate Board\n              </button>\n              <button onClick={GameActions.zoomIn}>\n                Zoom In (+)\n              </button>\n              <button onClick={GameActions.zoomOut}>\n                Zoom Out (-)\n              </button>\n            </div>\n            <div className={styles.action_row}>\n              <button onClick={() => GameActions.nuke(40)} className={styles[\"button-nuke\"]}>\n                Nuke All\n              </button>\n              <button onClick={GameActions.ceaseFire}>\n                Cease Fire\n              </button>\n              <button onClick={GameActions.executeActions} className={styles.execute_actions}>\n                Execute Actions\n              </button>\n            </div>\n\n            <div className={styles.action_row}>\n              <span className={styles[\"step-counter\"]}>Tick: {this.stepNumber}</span>\n\n              <label className={` ${styles.button} ${styles[\"auto-cycle\"]}`}>\n                <input type=\"checkbox\" checked={this.state.isAutoLoopOn} onChange={GameActions.switchAutoLoop} />\n                <span>Auto Cycle</span>\n              </label>\n\n              <button onClick={GameActions.nextTick} className={styles.button + ' '+ styles.next_tick}>\n                Next Tick\n              </button>\n\n            </div>\n\n            <div className={styles.action_row}>\n            <span>\n                Enemies alive: {this.state.enemiesAlive} <br/>\n                Friends alive: {this.state.friendsAlive} <br/>\n                {this.state.enemiesAlive && !this.state.friendsAlive ? 'YOU LOST':'' }\n                {this.state.friendsAlive && !this.state.enemiesAlive ? 'YOU WON':'' }\n              </span>\n              &nbsp;\n              <p className=\"instructions\">\n\n              </p>\n              <span>Friends actions points: {this.calculateFriendlyActionPoints()} </span>\n\n            </div>\n          </div>\n          <div className={styles[\"interaction-container\"]}>\n            <SelectedEntityInfo\n              selected={this.state.selected}\n              handleDeselectAllEntities={GameActions.handleDeselectAllEntities}\n              onInventoryClick={GameActions.onInventoryClick}\n              processInterface={() => GameActions.processInterface()}\n            />\n\n            <TargetedSquareInfo\n              className={styles.targeted}\n              squareNumber={this.state.targetedSquareNumber}\n              squares={this.state.squares}\n              selected={this.state.selected}\n              targeted={this.state.targeted}\n              onInventoryClick={GameActions.onInventoryClick}\n              processInterface={() => GameActions.processInterface()}\n            />\n            <div></div>\n          </div>\n          <MessageBox />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\n\ninterface BloodProps {\n  bloodAmount: number; // receives amount of blood ONLY\n}\n\n/**\n * @description\n * Visualises blood by adding red background\n * and a little number in the corner.\n *\n * @param bloodAmount - number representing the amount of blood.\n */\nclass Blood extends React.PureComponent<BloodProps> {\n  render() {\n    let { bloodAmount } = this.props;\n    if(bloodAmount < 0) {\n      console.error('Blood amount negative.');\n      return;\n    }\n\n    let bloodDrops = [];\n    let i = bloodAmount;\n    let marginForDropsInPercent = 0;\n    let mfd = marginForDropsInPercent;\n    let dropSizeVariance = 3;\n    let dsv = dropSizeVariance;\n\n\n    while(i--) {\n      bloodDrops.push(\n        <span className=\"blood__drop\" style={{\n          position: 'absolute',\n          fontSize: `${1 + Math.random() * dsv}em`,\n          left: `calc(${mfd + Math.random() * (100-2*mfd)}% - 0.4em)`,\n          top: `calc(${mfd + Math.random() * (100-2*mfd)}% - 0.5em)`,\n        }}\n        key={i}\n        >o</span>\n      );\n    }\n\n    return (\n      <div\n        className=\"square__blood\"\n        style={{\n          background: `rgba(255, 0, 0, 0)`,//${(bloodAmount / 50).toFixed(2)})`,\n          //position: 'relative'\n        }}\n      >\n        {bloodDrops}\n        <span className=\"blood__text\">\n          {bloodAmount}\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default Blood;\n","import React from \"react\";\nimport { Entity, Item } from \"services\";\n\ninterface ItemsProps {\n  items: Item[];\n  itemsNumber: number; // here to trigger update when list length changes\n}\n// FIXME: I have a strange feeling this doesn't update when contents of items list change but not the number of elements\n/**\n * @description\n * Displays icons of items on the square, as well as little number in the corner.\n * @param itemsNumber - number of items on the square\n * @param items - array of items on the square\n */\nclass Items extends React.PureComponent<ItemsProps> {\n  itemsIcons = [];\n\n  render() {\n    let { items, itemsNumber } = this.props;\n\n    if (!items) return null;\n\n    items.forEach((item) => {\n      let entity = item as Entity;\n      if (entity.icon) {\n        this.itemsIcons.push(<div className=\"square__item-icon\">{entity.icon}</div>);\n      }\n    });\n\n    return (\n      <div className=\"square__items\">\n        <div className=\"square__items-icons\">{this.itemsIcons}</div>\n        <div className=\"square__items-number\">{itemsNumber}</div>\n      </div>\n    );\n  }\n}\n\nexport default Items;\n","import React, { ReactElement } from \"react\";\n// services\nimport { Item, SquaresService } from \"services\";\n// components\nimport Blood from \"./Blood\";\nimport Items from \"./Items\";\n// others\nimport \"./Square.scss\";\n\n// TODO: This should really take less props\ninterface SquareProps {\n  squareId: number;\n  className?: string;\n  onClick: (squareIndex: number) => void;\n  blood: number;\n  items: Item[]; // collection of objects\n  itemsNumber: number; // here to trigger update when list length changes\n}\n\n/**\n * @description Displays a square with blood and items on it.\n * @param squareId - unique numerical id\n * @param className - string with CSS clasess\n * @param onClick - callback to call when square is clicked\n * @param blood - amount of blood\n * @param items - array of items\n * @param itemsNumber - numberof items\n */\nexport class SquareComponent extends React.PureComponent<SquareProps> {\n  onClick = () => {\n    this.props.onClick(this.props.squareId);\n  };\n\n  render() {\n    // console.log(\"Render Square\", this.props.squareId);\n    // TODO: Extract into separate component\n    function cuboid(classPrefix:string):ReactElement {\n      let i = 6;\n      let cuboidFaces: ReactElement[] = [];\n\n      while(i--){\n        cuboidFaces.push(<div key={i} className={`${classPrefix}__cuboid-face`}></div>);\n      }\n\n      return <div className={`${classPrefix}__cuboid`}>\n        {cuboidFaces}\n      </div>\n    }\n\n    let squareModel = SquaresService.squares[this.props.squareId]\n    let icon = squareModel.icon;\n\n    return (\n      <button className={'square ' + this.props.className} onClick={this.onClick}>\n        <div className=\"square__content\">{icon}</div>\n        <Blood bloodAmount={this.props.blood} />\n        <Items items={this.props.items} itemsNumber={this.props.itemsNumber} />\n        {cuboid('square')}\n      </button>\n    );\n  }\n}\n\n","import React from \"react\";\nimport \"./LinearDisplay.scss\";\n\ninterface LinearDisplayProps {\n  className?: string;\n  current: number;\n  max: number;\n  title?: string;\n  label?: string;\n}\n\nexport function LinearDisplay(props: LinearDisplayProps) {\n  let className = `linear-display ${props.className || \"\"}`;\n  let percentage = ~~((props.current * 100) / props.max);\n  let overload = percentage > 100;\n  let negative = percentage < 0;\n  if (overload) {\n    percentage = 100;\n    className += \" linear-display--overloaded\";\n  }\n  if (negative) {\n    percentage = 0;\n  }\n  let progressStyle = {\n    width: `${percentage}%`,\n  };\n  let title = props.title || `${props.current}/${props.max}`;\n\n  let amount = props.current;\n\n  let divider = 1;\n  if (props.max >= 40 && props.max < 100) {\n    divider = 5;\n  } else if (props.max >= 100) {\n    divider = 10;\n  }\n\n  amount = amount / divider;\n\n  let gridSize = 100 / amount;\n\n  let color = `rgba(200,200,200,0.4)`;\n  color = `black`;\n  let progressGridStyle = {\n    backgroundSize: `${gridSize}% 100%`,\n    backgroundImage: `\n      linear-gradient(to left, ${color} 1px, transparent 1px)\n    `,\n  };\n\n  Object.assign(progressStyle, progressGridStyle);\n\n  return (\n    <div className={className}>\n      <div className=\"linear-display__label\">{props.label}{props.label ? ':' : ''}&nbsp;</div>\n      <div className=\"linear-display__bar-container\" title={title}>\n        <div className=\"linear-display__bar-progress\" style={progressStyle}>\n          <span className=\"linear-display__bar-progress-text\">\n            {props.current}\n            {overload ? \"/\" + props.max : \"\"}&nbsp;\n          </span>\n        </div>\n      </div>\n      <div>&nbsp;</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./HudPanel.scss\";\n\ninterface HudPanelProps {\n  title: string;\n  children: JSX.Element;\n}\n\nexport class HudPanel extends React.Component<HudPanelProps> {\n\n    render() {\n        return <div className=\"hud-panel\">\n            <div className=\"hud-panel__title\">{this.props.title}</div>\n            <div className=\"hud-panel__content\">{this.props.children}</div>\n        </div>;\n    }\n}","import React from \"react\";\n//import \"./Cell.scss\";\n\ninterface CellProps {\n}\n\ninterface CellState {\n}\n\nexport class Cell extends React.PureComponent<CellProps, CellState> {\n\n  state = {}\n\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //   }\n  // }\n\n  render() {\n    //console.log(`Rendering [${this.props.children}]`);\n    return <div className=\"cell\">{this.props.children}</div>\n  }\n}","import React from \"react\";\nimport { Cell } from \"./Cell\";\nimport \"./Grid.scss\";\n\ninterface GridProps {\n  width: number;\n  height: number;\n  startAt: [number, number];\n}\n\ninterface GridState {\n}\n\nexport class Grid extends React.Component<GridProps, GridState> {\n\n  renderGrid() {\n    let rows = [];\n    for(let y = 0; y <= this.props.height; y++) {\n      let sourceY = this.props.startAt[1] + y;\n      let currentRow = [];\n\n      for(let x = 0; x <= this.props.width; x++) {\n        let sourceX = this.props.startAt[0] + x;\n        let currentCell = <Cell key={`$key_${sourceX}_${sourceY}`}>{sourceX}, {sourceY}</Cell>\n        currentRow.push(currentCell);\n      }\n      rows.push(<div className=\"row\"  key={`$key_X_${sourceY}`}>{currentRow}</div>);\n    }\n    return <div className=\"grid\">\n      {rows}\n    </div>;\n  }\n\n  render() {\n    return this.renderGrid();\n  }\n}","import React from \"react\";\nimport \"./Controls.scss\";\n\ninterface ControlsProps {\n    keys: string[],\n    onKeyPress: Function,\n}\n\ninterface ControlsState {\n    w: boolean,\n    s: boolean,\n    a: boolean,\n    d: boolean,\n    space: boolean,\n}\n\nexport class Controls extends React.Component<ControlsProps, ControlsState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            w: false,\n            s: false,\n            a: false,\n            d: false,\n            space: false,\n        }\n    }\n\n    componentDidMount(){\n        document.addEventListener(\"keydown\", (e) => this.onKeyDown(e), false);\n        document.addEventListener(\"keyup\", (e) => this.onKeyUp(e), false);\n    }\n\n    onKeyDown(event) {\n        console.log(event)\n        switch(event.keyCode) {\n            case 87: // W\n                this.setState({w: true});\n                this.props.onKeyPress('w');\n                break;\n            case 83: // S\n                this.setState({s: true});\n                this.props.onKeyPress('s');\n                break;\n            case 65: // A\n                this.setState({a: true});\n                this.props.onKeyPress('a');\n                break;\n            case 68: // D\n                this.setState({d: true});\n                this.props.onKeyPress('d');\n                break;\n            case 32: // space\n                this.setState({space: true});\n                this.props.onKeyPress('space');\n                break;\n        }\n        event.preventDefault();\n    }\n\n    onKeyUp(event) {\n        console.log(event)\n        switch(event.keyCode) {\n            case 87: // W\n                this.setState({w: false});\n                break;\n            case 83: // S\n                this.setState({s: false});\n                break;\n            case 65: // A\n                this.setState({a: false});\n                break;\n            case 68: // D\n                this.setState({d: false});\n                break;\n            case 32: // space\n                this.setState({space: false});\n                break;\n        }\n    }\n\n    render() {\n        return <div className=\"controls\">\n            [<span className={`${this.state.w ? 'pressed' : ''} key` }>W</span>]\n            [<span className={`${this.state.s ? 'pressed' : ''} key` }>S</span>]\n            [<span className={`${this.state.a ? 'pressed' : ''} key` }>A</span>]\n            [<span className={`${this.state.d ? 'pressed' : ''} key` }>D</span>]\n            &nbsp;\n            [<span className={`${this.state.space ? 'pressed' : ''} key` }>space</span>]\n\n        </div>;\n    }\n}","import React from \"react\";\n// services\nimport \"./MessageBox.scss\";\nimport { MessageRecord, MessageService } from \"services\";\n\nexport class MessageBox extends React.Component {\n  messages = MessageService.messages;\n  messageNumber;\n\n  shouldComponentUpdate() {\n    // don't update if there are no new messages since last render\n    return this.messages.length !== this.messageNumber;\n  }\n\n  renderMessage = (messageRecord: MessageRecord, number: number) => {\n    const messageNumber = `000${number}`.slice(-3);\n    return (\n      <li key={`msg${number}`}>\n        <span className=\"message-number\">\n          {messageNumber + ` `}\n        </span>\n        <span className=\"message-timestamp\">\n          {messageRecord.timestamp + ` `}\n        </span>\n        <span className=\"message-text\">\n          {messageRecord.message}\n        </span>\n      </li>\n    );\n  };\n\n  render() {\n    if (!this.messages.length) return null;\n    let RenderedMessages = this.messages.map((message, number) => this.renderMessage(message, number));\n    // remember the number of messages rendered\n    this.messageNumber = this.messages.length;\n    return (\n      <ul className=\"messages\" id=\"messages\">\n        {RenderedMessages}\n      </ul>\n    );\n  }\n\n  scrollElement() {\n    window.requestAnimationFrame(() => {\n      var element = document.getElementById(\"messages\");\n      element.scrollTop = element.scrollHeight;\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.messages.length) this.scrollElement();\n  }\n}\n","import React from \"react\";\nimport { Item, RangedWeapon } from \"services\";\nimport { LinearDisplay } from \"components/LinearDisplay\";\n\ninterface InventoryItemProps {\n  item: Item;\n  onDrop(itemName: string);\n  onReload(itemName: string);\n  onClick(itemName: string);\n  processInterface: Function;\n}\n\nexport function InventoryItem(props: InventoryItemProps) {\n  let { item } = props;\n  let reloadButton;\n  let dropButton;\n  let ammoCounter;\n\n  if (props.onDrop) {\n    dropButton = (\n      <button\n        className=\"inventory-list__drop-button\"\n        onClick={() => {\n          props.onDrop(item.name);\n        }}\n      >\n        Drop\n      </button>\n    );\n  }\n\n  if (item instanceof RangedWeapon) {\n    let weapon = item as RangedWeapon;\n\n    if (weapon.reload) {\n      // has reload capability\n      let className = \" inventory-list__reload-button \";\n\n      if (weapon.rounds === 0 || weapon.rounds === \"empty\") {\n        className += \" inventory-list__reload-button--empty \";\n      } else if (weapon.rounds < weapon.maxRounds) {\n        className += \" inventory-list__reload-button--partial \";\n      }\n      reloadButton = (\n        <button\n          className={className}\n          onClick={() => {\n            weapon.reload();\n            props.onReload && props.onReload(item.name);\n            props.processInterface();\n          }}\n        >\n          Reload\n        </button>\n      );\n    } else {\n      reloadButton = null;\n    }\n\n    ammoCounter = weapon.reload ? (\n      <LinearDisplay className=\"full\" label=\"Rounds\" current={weapon.rounds} max={weapon.maxRounds} />\n    ) : null;\n  }\n\n  return (\n    <div key={item.name}>\n      <div onClick={() => props.onClick(item.name)} key={item.name} className=\"inventory-list__item\">\n        <span>{item.name}</span>\n        <div>{ammoCounter}</div>\n      </div>\n      {reloadButton}\n      {dropButton}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./InventoryList.scss\";\nimport { Item } from \"services\";\nimport { InventoryItem } from \"components/InventoryItem\";\n\ninterface InventoryListProps {\n  className?: string;\n  label: string;\n  title: string;\n  onClick(itemName: string);\n  onDrop(itemName: string);\n  onReload(itemName: string);\n  inventory: Item[]; //\n  processInterface: Function;\n}\n\nexport function InventoryList(props: InventoryListProps) {\n  const className = `inventory-list ${props.className || \"\"}`;\n\n  if (!props.inventory) {\n    return null;\n  }\n\n  const inventoryItems = props.inventory.map((item) => (\n    <InventoryItem\n      key={`i${item.name}`}\n      item={item}\n      onClick={props.onClick}\n      onDrop={props.onDrop}\n      onReload={props.onReload}\n      processInterface={props.processInterface}\n    />\n  ));\n\n  return (\n    <div className={className}>\n      <div className=\"inventory-list__label\">\n        {props.label}\n        :&nbsp;\n      </div>\n      <div className=\"inventory-list__items\" title={props.title}>\n        {inventoryItems}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./HpBar.scss\";\n\ninterface HpBarProps {\n    current: number;\n    max: number;\n    color: string;\n}\n\nexport class HpBar extends React.Component<HpBarProps> {\n\n    render() {\n        if(this.props.current <= 0) return null;\n        let percentage = ~~((this.props.current * 100) / this.props.max);\n        let progressStyle = {\n            width: `${percentage}%`,\n            backgroundColor: this.props.color\n        };\n        return(\n            <div className=\"hpbar\">\n                <div className=\"hpbar__indicator\" style={progressStyle}>\n\n                </div>\n                <span className=\"hpbar__text\">\n                        {this.props.current}\n                </span>\n            </div>\n        );\n    }\n}","import * as Helpers from \"helpers\";\nimport React, { ReactElement } from \"react\";\n\nexport function ShootingVisualization(props): ReactElement {\n  let { entity } = props;\n\n  let calcNewAangle = Helpers.calculateAngle;\n  let targetCoords = entity.targetPosition;\n  let projectileNumber = 5;\n  let projectiles = [];\n  let localId = `Entity${entity.icon}`;\n  let uniqueShootingAnimationId = `shooting-animation-${localId}-ap-${entity.actionPoints}`;\n  let customStyle = \"\";\n  let commonStyles = \"\";\n\n  if (\n    targetCoords &&\n    entity.position &&\n    entity.hasWeapon &&\n    entity.isShooting &&\n    (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\n  ) {\n    if (targetCoords) {\n      let distanceToTargetXInUnits = (targetCoords.x - entity.position.x);\n      let distanceToTargetYInUnits = (targetCoords.y - entity.position.y);\n\n      let actualDistanceInUnits = Helpers.calculateDistance(distanceToTargetXInUnits, distanceToTargetYInUnits);\n      let weaponType = entity && entity.equipment && entity.equipment.hands && entity.equipment.hands.type;\n      let angle = calcNewAangle(distanceToTargetXInUnits, distanceToTargetYInUnits);\n      commonStyles = `\n      @keyframes fading${uniqueShootingAnimationId} {\n        0%  {opacity: 1;}\n        95% {opacity: 1;}\n        100%  {opacity: 0;}\n      }\n\n      .fading-after-1s-for-${uniqueShootingAnimationId} {\n        animation: fading${uniqueShootingAnimationId} 1s linear normal forwards 1;\n      }\n      `;\n\n      if (weaponType === \"lazer\") {\n        // TODO: perhaps call to `visualizeShooting(from,to,weaponType)`\n        let className = `projectile${localId}_beam`;\n        let projectile = \"\";\n        const distanceWhereBeamBegins = 20;//in pixels\n        //actualDistance = actualDistance - distanceWhereBeamBegins;\n        // do above within template\n        customStyle = `\n          @keyframes pulsing${localId} {\n            0%  {opacity: 0.1;}\n            100%  {opacity: 1;}\n          }\n\n          @keyframes elongating${localId} {\n            0%  { width: calc(${actualDistanceInUnits}em + ${actualDistanceInUnits} * 4px - 20px); }\n            100%  {width: calc(${actualDistanceInUnits}em + ${actualDistanceInUnits} * 4px - 20px); }\n          }\n\n          @keyframes swiping${localId} {\n            0%  {transform: rotate(${angle + 90 -1}deg) translateX(${distanceWhereBeamBegins}px);}\n            50%  {transform: rotate(${angle + 90 + 1}deg) translateX(${distanceWhereBeamBegins}px);}\n            100%  {transform: rotate(${angle + 90 - 1}deg) translateX(${distanceWhereBeamBegins}px);}\n          }\n\n          .${className} {\n            width: ${actualDistanceInUnits}em;\n            height: 3px;\n            border-radius: 5px;\n            background: #F00;\n            position: absolute;\n            top: 0.5em;\n            left: 0.5em;\n            transform: rotate(${angle + 90}deg);/* overriden by swiping keyframes */\n            transform-origin: left 0px;\n            animation: pulsing${localId} 0.1s ease infinite,\n            elongating${localId} 0.7s ease alternate infinite,\n            swiping${localId} 1s ease alternate infinite;\n            box-shadow: 0 0 5px 5px white;\n            z-index: 10;\n          }\n          `;\n        projectiles.push(\n          <div key={className} className={className}>\n            {projectile}\n          </div>\n        );\n      } else {\n        customStyle = `\n          @keyframes shooting${localId} {\n            0%   {transform: translate(0,0) rotate(${angle}deg) scaleY(0.3)}\n            100% {transform: translate(\n              ${36 * (targetCoords.x - entity.position.x)}px,\n              ${36 * (targetCoords.y - entity.position.y)}px\n            ) rotate(${angle}deg) scaleY(2)}\n          }\n          `;\n\n        while (projectileNumber--) {\n          customStyle += `\n          .projectile${localId}_${projectileNumber} {\n            transform: rotate(${angle}deg);\n            animation: shooting${localId} 0.8s linear infinite;\n            animation-delay: ${projectileNumber - 1 * 0.3}s;\n          }`;\n        }\n        let projectile = entity.isShooting ? \"|\" : \"\";\n\n        projectileNumber = 3;\n\n        while (projectileNumber--) {\n          let className = `projectile projectile${localId}_${projectileNumber}`;\n          projectiles.push(\n            <div key={className} className={className}>\n              {projectile}\n            </div>\n          );\n        }\n      }\n    }\n  }\n  let finalClassName = `shooting-visualization fading-after-1s-for-${uniqueShootingAnimationId}`;\n  return (\n    <div className={finalClassName}>\n      <style>{customStyle + commonStyles}</style>\n      {projectiles}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./DragScrollArea.scss\";\n\ninterface DragScrollAreaProps {\n  children: JSX.Element;\n}\n\ninterface DragScrollAreaState {}\n\nexport class DragScrollArea extends\n  React.Component<DragScrollAreaProps, DragScrollAreaState> {\n  areaReference;\n  scroll = {\n    x: 0,\n    y: 0,\n  }\n\n  constructor(props) {\n    super(props);\n    this.areaReference = React.createRef();\n  }\n\n  scrollRelativeXY(deltaX: number, deltaY: number) {\n    this.scroll.x -= deltaX;\n    this.scroll.y -= deltaY;\n\n    if(this.scroll.x <= 0) {\n      this.scroll.x = 0;\n    }\n    if(this.scroll.y <= 0) {\n      this.scroll.y = 0;\n    }\n\n    this.executeScroll();\n  }\n\n  onMouseDown = (e) => {\n    if(e.button === 2) {\n      document.addEventListener('mouseup', this.onMouseUp);\n      document.addEventListener('mousemove', this.onMouseMove);\n      e.preventDefault();\n    }\n  }\n\n  onMouseMove = (e) => {\n    this.scrollRelativeXY(e.movementX, e.movementY);\n  }\n\n  onMouseUp = (e) => {\n    document.removeEventListener('mouseup', this.onMouseUp);\n    document.removeEventListener('mousemove', this.onMouseMove);\n    e.preventDefault();\n  }\n\n  executeScroll() {\n    this.areaReference.current.scroll({\n      top: this.scroll.y,\n      left: this.scroll.x,\n    });\n  }\n\n  render() {\n    return <div\n      className=\"drag-scroll-area drag-scroll-area-external\"\n      ref={this.areaReference}\n      onMouseDown={(e) => this.onMouseDown(e)}\n      onContextMenu={(e) => e.preventDefault()}\n    >\n      <div className=\"drag-scroll-area drag-scroll-area-internal\">\n        {\n          this.props.children\n        }\n      </div>\n    </div>;\n  }\n}","import React from \"react\";\nimport { HudPanel, Grid, Controls } from \"components\";\nimport \"./BlastZone.scss\";\nimport { DragScrollArea } from \"components/DragScrollArea\";\n\ninterface BlastZoneState {\n  gridX: number,\n  gridY: number,\n}\nexport class BlastZone extends React.Component<void, BlastZoneState> {\n  constructor(props: void) {\n    super(props);\n    this.state = {\n      gridX: 0,\n      gridY: 0,\n    }\n  }\n  componentDidMount() {\n  }\n\n  onControlPress(key) {\n    let deltaX = 0;\n    let deltaY = 0;\n    switch(key) {\n      case \"w\":\n        deltaY = -1;\n        break;\n      case \"s\":\n        deltaY = 1;\n        break;\n\n      case \"a\":\n        deltaX = -1;\n        break;\n      case \"d\":\n        deltaX = 1;\n        break;\n    }\n\n    console.log(key);\n    this.setState(prevState => {\n      return {\n        gridX: prevState.gridX + deltaX,\n        gridY: prevState.gridY + deltaY\n      };\n    })\n  }\n\n  render() {\n\n    const controls = <Controls\n      keys={['W', 'S', 'A', 'D']}\n      onKeyPress={(e) => this.onControlPress(e)}\n      ></Controls>\n    const console = <></>;\n    const statusIndicators = <></>;\n\n    return <div className=\"blast-zone\">\n      <div className=\"top-row\">\n        <HudPanel title=\"Controls\">\n          {controls}\n        </HudPanel>\n        <HudPanel title=\"Console\">\n          {console}\n        </HudPanel>\n        <HudPanel title=\"Status Indicators\">\n          {statusIndicators}\n        </HudPanel>\n      </div>\n      <div className=\"mid-row\">\n        <HudPanel title=\"Tactical Grid\">\n          <DragScrollArea>\n            <Grid width={100} height={100} startAt={[this.state.gridX,this.state.gridY]}></Grid>\n          </DragScrollArea>\n        </HudPanel>\n      </div>\n\n      <div className=\"bottom-row\">\n        <HudPanel title=\"OhWell\">\n          <span>:)</span>\n        </HudPanel>\n      </div>\n    </div>;\n  }\n}","import React from \"react\";\nimport { Controls, EmojiMapper, HpBar, InventoryItem, LinearDisplay, SquareComponent, Cell } from \"components\";\nimport \"./ShowRoom.scss\";\nimport { M16 } from \"resources\";\n\nconst noop = ()=>{}\n\nexport class ShowRoom extends React.Component<void, void> {\n\n  showRoomList = [\n    { name: \"Square\",\n      content: <SquareComponent squareId={1} onClick={noop} blood={7} items={[]} itemsNumber={3}>T</SquareComponent>\n    },\n    { name: \"Cell\",\n      content: <Cell>H</Cell>\n    },\n    { name: \"Controls\",\n      content: <Controls keys={[\"q\",\"e\"]} onKeyPress={(e)=>{console.log('ehlo', e)}}></Controls>\n    },\n    { name: \"EmojiMapper\",\n      content: <> 🛢️ ={\">\"} <EmojiMapper emoji=\"🛢️\"/>, 🕷️ ={\">\"} <EmojiMapper emoji=\"🕷️\"/> </>\n    },\n    { name: \"HpBar 66/100\",\n      content: <HpBar current={66} max={100} color=\"green\"></HpBar>\n    },\n    { name: \"HpBar 80/100 white\",\n      content: <HpBar current={80} max={100} color=\"white\"></HpBar>\n    },\n\n    { name: \"HpBar 0/100\",\n      content: <HpBar current={0} max={100} color=\"green\"></HpBar>\n    },\n    { name: \"HpBar -20/100\",\n      content: <HpBar current={-20} max={100} color=\"green\"></HpBar>\n    },\n    { name: \"HpBar 150/100\",\n      content: <HpBar current={150} max={100} color=\"green\"></HpBar>\n    },\n\n    { name: \"InventoryItem\",\n      content: <InventoryItem item={ new M16()} onDrop={noop} onReload={noop} onClick={noop} processInterface={noop}/>\n    },\n    { name: \"LinearDisplay 66/100\",\n      content: <LinearDisplay title=\"Title\" label=\"Label\" current={66} max={100}></LinearDisplay>\n    },\n    { name: \"LinearDisplay 0/10\",\n      content: <LinearDisplay title=\"Title\" label=\"Label\" current={0} max={10}></LinearDisplay>\n    },\n    { name: \"LinearDisplay 20/25\",\n      content: <LinearDisplay title=\"Title\" label=\"Label\" current={20} max={25}></LinearDisplay>\n    },\n    { name: \"LinearDisplay 30/25\",\n      content: <LinearDisplay title=\"Title\" label=\"Label\" current={30} max={25}></LinearDisplay>\n    },\n    { name: \"LinearDisplay -3/25\",\n      content: <LinearDisplay title=\"Title\" label=\"Label\" current={-3} max={25}></LinearDisplay>\n    },\n    { name: \"LinearDisplay with no label\",\n      content: <LinearDisplay current={13} max={20}></LinearDisplay>\n    },\n\n\n  ];\n\n\n\n  render() {\n    const theListToRender = this.showRoomList.map(\n      (item, index) => item.name ?\n        <li key={index}>\n          <span className=\"description\">\n            {item.name}\n          </span>\n          <div className=\"content\">\n            {item.content}\n          </div>\n        </li>\n        : null\n    );\n    return <div className=\"show-room\">\n      <div>\n      Show Room to present some of our components.\n      <p>Be aware than this exposed some problems with the components working in isolation from the context they were designed for. A great opportunity for improvements.</p>\n      </div>\n      <ul>\n        {theListToRender}\n      </ul>\n   </div>;\n  }\n}","import React, { ReactElement } from \"react\";\nimport { Game } from \"./components\";\nimport { BlastZone }  from \"screens/BlastZone\";\nimport { ShowRoom } from \"screens/ShowRoom\";\n\nimport \"App.scss\";\n\ninterface AppState {\n  activeSceneName: string\n}\n\nconst availableScreenNames = [\n  'Game',\n  'BlastZone',\n  'ShowRoom',\n]\n\nexport default class App extends React.Component<void, AppState> {\n\n  sceneComponents:{} = {\n    Game,\n    BlastZone,\n    ShowRoom,\n  }\n\n  SelectedSceneComponent = null;\n\n  constructor(props: void) {\n    super(props);\n    this.state = {\n      activeSceneName: 'Game'\n    }\n  }\n\n  componentDidMount() {\n  }\n\n  handleChange = (e) => {\n    const nameOfSelectedScene = e.target.value;\n    this.setState(prevState => { return { activeSceneName: nameOfSelectedScene }});\n  }\n\n\n\n  render() {\n    let SelectedScene = this.sceneComponents[this.state.activeSceneName];\n\n    const availableScreenSwitchOptions = availableScreenNames.map(\n      stringToOption\n    );\n    return <div className=\"app\">\n\n      <div className=\"meta-bar\">\n\n        <div className=\"app-name\">\n          <span className=\"be\">B</span>lood and <span className=\"be\">B</span>u<span className=\"el\">ll</span>ets\n        </div>\n\n        <div className=\"screen-switch\">\n          <span>Select screen: </span>\n          <select value={this.state.activeSceneName} onChange={this.handleChange}>\n            {availableScreenSwitchOptions}\n          </select>\n        </div>\n\n      </div>\n\n      <SelectedScene/>\n\n    </div>\n  }\n}\n\n/**\n * @description\n * Makes a dropdown option out of a given string\n * @param item a string to put into value and innerText\n * @returns an option element with given value and text\n */\nexport const stringToOption = (item: string): ReactElement => <option value={item}>{item}</option>","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App.tsx\";\n\nimport \"./style.scss\";\n\n// Rendering the top-level App component\n// eslint-disable-next-line no-undef\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}