{"version":3,"sources":["helpers/Helpers.ts","components/Square/Square.js","components/Board/Board.js","components/EntityCard/LinearDisplay.js","components/EntityCard/InventoryList.js","components/EntityCard/EntityCard.js","components/EntitiesList/EntitiesList.js","services/SquaresService.ts","services/index.js","services/EntitiesService.ts","components/Game/TargetedSquareInfo.tsx","services/EntitiesValues.ts","services/GameModelService.js","components/Game/Game.tsx","index.js"],"names":["resetGivenFieldsOnACollection","collection","fieldNames","forEach","item","fieldName","undefined","getNumberWithinBoundaries","value","min","max","getRandomIntInclusive","Math","floor","random","calculateAngle","x","y","angle","atan","PI","calculateDistance","sqrt","pow","Square","renderCounter","shouldComponentUpdate","nextProps","JSON","stringify","props","className","localId","this","squareId","active","isAvailableDestination","isChosenDestination","icon","isBreathing","isDead","isShooting","isTargeted","randomTime","toFixed","animationBreathing","targetCoords","targetPosition","projectileNumber","projectiles","customStyle","calcNewAangle","Helpers","position","distanceToTargetX","distanceToTargetY","actualDistance","weaponType","push","key","projectile","onClick","blood","style","animation","React","Component","Board","handleClick","bind","i","console","log","rowId","colId","square","squares","entity","rowNumber","colNumber","equipment","hands","type","cellId","rows","Array","size","fill","map","row","number","cells","cell","renderSquare","PureComponent","LinearDisplay","percentage","current","overload","progressStyle","width","title","amount","divider","progressGridStyle","backgroundSize","backgroundImage","Object","assign","label","InventoryList","reloadButton","inventory","inventoryItems","reload","rounds","maxRounds","name","derivedCtor","EntityCard","renderCount","handleInventoryClick","itemName","onInventoryClick","renderAmmo","inHands","lifeSigns","isFriendly","inHandsArray","clear","display","textAlign","hp","maxHp","ListOfEntities","entitiesFriendly","entities","filter","obj","entitiesUnfriendly","SquaresService","arenaSize","targetSquareIndex","squareIndex","setEntityWithinASquare","initializeSquareIfEmpty","j","getSquare","setSquare","EntitiesService","selected","id","oldPositionX","oldPositionY","newSquare","potentialTargetEntity","targeted","selectedInEntities","findEntityById","getEntityId","damageApplied","weapon","isAbleToFire","fire","ceaseFire","checkAmmoAndCalculateDamageApplied","getEntitiesAtGivenPosition","targetEntity","applyDamageToTargetEntity","ceaseFireNextTickIfTargetIsKilled","damage","bleeding","addBlood","bleedingReductionPerTurn","moveDestination","chosenDestinationSquare","targetedSquarePosition","moveEntityIntoChosenDestination","JR","OP","OC","moveEntityRandomly","squaresService","TargetedSquareInfo","setMoveDestinationOnASelectedEntity","processInterface","entityInfo","distanceInfo","positionInfo","bloodInfo","inspectedSquare","targetSquarePosition","squareNumber","availableActions","distanceToSelected","onMoveClick","onAttackClick","RangedWeapon","causesBleeding","range","Rifle","Lazer","M16","L30","M40","Positionable","Mortal","Entity","hasWeapon","bloodReleased","bleed","isSupposedToBeBreathing","baseCtor","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","age","head","entry","GameModel","Entities","Game","stepNumber","loop","processEntities","state","autoLoop","setTimeout","nextTick","setState","isSelectedTargeted","newHandleClick","selectedSquareNumber","markSquareAsTargeted","deselectAllEntities","selectEntityFromGivenSquare","nuke","dmg","toggleRotateBoard","isBoardRotated","switchAutoLoop","previousState","prevState","concat","entityId","actualEntity","actualItem","findItemOnEntity","handleDeselectAllEntities","setEntityWithinApropriateSquare","nextState","moveEntities","isEntityShootingProperly","fireAShot","bleedExternally","stopBreathingForKilledEntity","markAvailableDestinationsForSelectedEntity","calculateNextGameState","setSquaresAccordingToEntities","calculateNextInterfaceState","boardClassName","checked","onChange","render","document","getElementById"],"mappings":"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","file":"static/js/main.d350cd2e.chunk.js","sourcesContent":["export function resetGivenFieldsOnACollection(collection, ...fieldNames) {\r\n  collection.forEach(\r\n    item => {\r\n      fieldNames.forEach(fieldName => {\r\n        item && (item[fieldName] = undefined)\r\n      });\r\n    }\r\n  );\r\n}\r\n\r\nexport function getNumberWithinBoundaries(\r\n    value: number, min: number, max: number\r\n  ): number {\r\n  if( value < min) value = min;\r\n  if( value > max) value = max;\r\n  return value;\r\n}\r\n\r\nexport function getRandomIntInclusive(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function calculateAngle(x: number, y: number): number {\r\n  let angle: number;\r\n  if(y >= 0) {\r\n    angle = - Math.atan(\r\n      x/y\r\n    ) * (180/Math.PI);\r\n  } else if(y < 0) {\r\n    angle = (180/Math.PI) *\r\n      (\r\n        Math.atan(\r\n          x/-y\r\n        ) + Math.PI\r\n      )\r\n  }\r\n  return angle;\r\n}\r\n\r\nexport function calculateDistance(x: number,y: number): number {\r\n  return Math.sqrt(\r\n    Math.pow(x, 2) + Math.pow(y, 2)\r\n  );\r\n}\r\n\r\n\r\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\r\n  // see https://www.typescriptlang.org/docs/handbook/mixins.html\r\n  baseCtors.forEach(baseCtor => {\r\n      Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\r\n          Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));\r\n      });\r\n  });\r\n}","import React from 'react';\r\nimport * as Helpers from '../../helpers'\r\nimport \"./Square.scss\";\r\n\r\nconst DISTANCE_BETWEEN_TILES = 38;\r\n\r\nclass Square extends React.Component {\r\n\r\n  renderCounter = 0\r\n\r\n  shouldComponentUpdate = (nextProps) => // only update if props differ\r\n    (JSON.stringify(nextProps) !== JSON.stringify(this.props));\r\n\r\n  render() {\r\n    //this.renderCounter++;\r\n    //console.log(\"Rendering Square\", this.renderCounter, this.props);\r\n\r\n    let className = \"square\";\r\n    let localId = `Square${this.props.squareId}`;\r\n\r\n    if(this.props.active) {\r\n      className += \" active \";\r\n    }\r\n\t\tif(this.props.isAvailableDestination) {\r\n\t\t\tclassName += \" is-available-destination \"\r\n\t\t}\r\n\t\tif(this.props.isChosenDestination) {\r\n\t\t\tclassName += \" is-chosen-destination \"\r\n\t\t}\r\n    if(this.props.icon){\r\n      if(this.props.isBreathing) {\r\n        className += \" breathing \";\r\n      }\r\n      if(this.props.isDead) {\r\n        className += \" dead \";\r\n      }\r\n      if(this.props.isShooting) {\r\n        className += \" shooting \";\r\n      }\r\n    }\r\n    if(this.props.isTargeted) {\r\n      className += \" targeted \";\r\n    }\r\n\r\n    let randomTime = `${(Math.random()+0.5).toFixed(2)}s`// 0.50 - 1.50s\r\n    let animationBreathing = this.props.isBreathing ?\r\n        `breathing ${randomTime} alternate infinite linear` : 'none';\r\n\r\n    let targetCoords = this.props.targetPosition;\r\n    let projectileNumber = 5;\r\n    let projectiles = [];\r\n    let customStyle = \"\";\r\n\r\n    let calcNewAangle = Helpers.calculateAngle;\r\n\r\n    if(\r\n      (targetCoords && this.props.position && this.props.isShooting)\r\n      &&\r\n      (\r\n        this.props.targetPosition.x !== this.props.position.x ||\r\n        this.props.targetPosition.y !== this.props.position.y\r\n      )\r\n    ) {\r\n\r\n      if(targetCoords) {\r\n        // TODO: Move this into a helper\r\n\r\n        let distanceToTargetX =\r\n          DISTANCE_BETWEEN_TILES*(targetCoords.x-this.props.position.x);\r\n        let distanceToTargetY =\r\n          DISTANCE_BETWEEN_TILES*(targetCoords.y-this.props.position.y);\r\n\r\n        let actualDistance = Helpers.calculateDistance(\r\n          distanceToTargetX, distanceToTargetY\r\n        );\r\n\r\n        if(this.props.weaponType === 'lazer') {\r\n          // TODO: perhaps call to `visualizeShooting(from,to,weaponType)`\r\n          let className=`projectile${localId}_beam`;\r\n          let projectile= \"\";\r\n          let angle = calcNewAangle(distanceToTargetX, distanceToTargetY);\r\n          customStyle = `\r\n            @keyframes pulsing${localId} {\r\n              0%  {opacity: 0.1;}\r\n              100%  {opacity: 1;}\r\n            }\r\n\r\n            @keyframes elongating${localId} {\r\n              0%  {width: ${actualDistance - 20};}\r\n              100%  {width: ${actualDistance + 20};}\r\n            }\r\n\r\n            @keyframes swiping${localId} {\r\n              0%  {transform: rotate(${angle + 90 + -1}deg);}\r\n              50%  {transform: rotate(${angle + 90 + 1}deg);}\r\n              100%  {transform: rotate(${angle + 90 - 1}deg);}\r\n            }\r\n\r\n            .${className} {\r\n              width: ${actualDistance}px;\r\n              height: 3px;\r\n              border-radius: 5px;\r\n              background: #F00;\r\n              position: absolute;\r\n              top: 16px;\r\n              left: 16px;\r\n\r\n              transform: rotate(${angle + 90}deg);\r\n              transform-origin: left 0px;\r\n              animation: pulsing${localId} 0.1s linear infinite,\r\n              elongating${localId} 1s linear alternate infinite,\r\n              swiping${localId} 1s linear alternate infinite;\r\n              box-shadow: 0 0 5px 5px white;\r\n              z-index: 10;\r\n            }\r\n            `;\r\n          projectiles.push(<div key={className} className={className}>{projectile}</div>);\r\n        } else {\r\n\r\n          customStyle = `\r\n            @keyframes shooting${localId} {\r\n              0%   {transform: scale(1);}\r\n              100% {transform: translate(\r\n                ${36*(targetCoords.x-this.props.position.x)}px,\r\n                ${36*(targetCoords.y-this.props.position.y)}px\r\n              )}\r\n            }\r\n            `;\r\n\r\n          while(projectileNumber--) {\r\n            customStyle += `\r\n            .projectile${localId}_${projectileNumber} {\r\n              position: absolute;\r\n              top: -5px;\r\n              left: 0px;\r\n              width: 100%;\r\n              height: 100%;\r\n              line-height: 34px;\r\n              font-size: 30px;\r\n              animation: shooting${localId} 0.5s linear infinite;\r\n              animation-delay: ${projectileNumber - 1 * 0.3}s;\r\n              color: white;\r\n            }`;\r\n          };\r\n          let projectile = this.props.isShooting ? \".\" : \"\";\r\n\r\n          projectileNumber = 3;\r\n\r\n          while(projectileNumber--) {\r\n            let className=`projectile projectile${localId}_${projectileNumber}`\r\n            projectiles.push(<div key={className} className={className}>{projectile}</div>);\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <button className={className} onClick={() => this.props.onClick(this.props.squareId)}>\r\n        <div className=\"blood\">{this.props.blood}</div>\r\n        <div className=\"content\" style={{\r\n          animation: animationBreathing\r\n        }}>{this.props.icon}</div>\r\n        <style>\r\n            {customStyle}\r\n        </style>\r\n        {projectiles}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from '../Square';\r\nimport './Board.scss';\r\n\r\nexport default class Board extends React.PureComponent {\r\n  renderCounter = 0\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(i) {\r\n    console.log(\"Handles Click on Board\", i);\r\n    this.props.onClick(i);\r\n  }\r\n\r\n  renderSquare(i, rowId, colId) {\r\n    /*\r\n    We pass one and the same function to all the Squares when rendering,\r\n    so they do not detect getting a new fat-arrow function as a change of props.\r\n\r\n    This is CRUCIAL to only rerender squares with changed values.\r\n\r\n    Additionally, we need to ensure that Unchanged squares have the same values of objects passed down here.\r\n    */\r\n    let square = this.props.squares[i];\r\n    let entity = this.props.squares[i] && this.props.squares[i].entity;\r\n    return (\r\n      <Square\r\n        key={i}\r\n        squareId={i}\r\n        rowNumber={rowId}\r\n        colNumber={colId}\r\n\r\n        onClick={this.handleClick}\r\n\r\n        icon={entity && entity.icon}\r\n        active={entity && entity.active}\r\n        isBreathing={entity && entity.isBreathing}\r\n        isDead={entity && entity.isDead}\r\n\r\n        isShooting={entity && entity.isShooting}\r\n        weaponType={entity && entity.equipment && entity.equipment.hands && entity.equipment.hands.type}\r\n\r\n        position={entity && entity.position}\r\n        targetPosition={entity && entity.targetPosition}\r\n\r\n        blood={square && square.blood}\r\n\r\n        isAvailableDestination={square && square.isAvailableDestination}\r\n        isChosenDestination={square && square.isChosenDestination}\r\n        isTargeted={square && square.isTargeted}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // console.log(\"Rendering Board. #\", this.renderCounter++);\r\n\r\n    // Initial values for the Board\r\n    let cellId=0;\r\n    let rowId=0;\r\n    let colId;\r\n\r\n    let rows = Array(this.props.size).fill(null).map((row, number) => {\r\n      colId = 0;\r\n      let cells = Array(this.props.size).fill(null).map((cell, number) => {\r\n        return this.renderSquare(cellId++, rowId, colId++);\r\n      });\r\n      return (\r\n        <div key={rowId++} className=\"board-row\">\r\n          {cells}\r\n        </div>\r\n      );\r\n    });\r\n\r\n    let className = \"board \" + this.props.className;\r\n    return (\r\n      <div className={className}>\r\n        {rows}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './LinearDisplay.scss';\nexport default function LinearDisplay(props) {\n  let className=`linear-display ${props.className || ''}`\n  let percentage = ~~(props.current * 100 / props.max);\n  let overload = percentage > 100;\n  if(overload) {\n    percentage = 100;\n    className += \" overload \";\n  }\n\n  let progressStyle = {\n    width: `${percentage}%`,\n  }\n  let title = props.title || `${props.current}/${props.max}`;\n\n  let amount = props.current;\n\n  let divider = 1;\n  if ( props.max >= 50) {\n    divider = 5;  \n  } else if ( props.max >= 100) {\n    divider = 10;\n  }\n\n  amount = amount / divider;\n\n  let gridSize = 100/amount;\n  \n  let color = `rgba(200,200,200,0.4)`\n  color = `black`;\n  let progressGridStyle = {\n    backgroundSize: `${gridSize}% 100%`,\n    backgroundImage: `\n      linear-gradient(to left, ${color} 1px, transparent 1px)\n    `    \n  }\n  \n  Object.assign(progressStyle, progressGridStyle)\n\n\n  return (\n    <div className={className}>\n      <div className=\"linear-display__label\">{props.label}:&nbsp;</div>\n      <div className=\"linear-display__bar-container\"\n        title={title}\n      >\n        <div className=\"linear-display__bar-progress\" style={progressStyle}>\n          <span className=\"linear-display__bar-progress-text\">{props.current}{overload ? '/'+props.max : ''}&nbsp;</span>\n        </div>\n      </div>\n      <div>&nbsp;</div>\n    </div>\n  );\n}\n","import React from 'react';\r\nimport './InventoryList.scss';\r\nexport default function InventoryList(props) {\r\n\r\n  let className = `inventory-list ${props.className || ''}`\r\n\r\n  if(!props.inventory) {return null}\r\n  let reloadButton;\r\n  let inventoryItems = props.inventory.map(item => {\r\n    if(item.reload) {// has reload capability\r\n      let className = \" inventory-list__reload-button \";\r\n\r\n      if(item.rounds === 0 || item.rounds === 'empty') {\r\n        className += \" inventory-list__reload-button--empty \"\r\n      } else if (item.rounds < item.maxRounds) {\r\n        className += \" inventory-list__reload-button--partial \"\r\n      }\r\n      reloadButton =\r\n        <button\r\n          className={className}\r\n          onClick={() => {\r\n            item.reload();\r\n            props.onClick(item.name);// this only to trigger the render\r\n          }}\r\n        >Reload</button>\r\n    } else {\r\n      reloadButton = null;\r\n    }\r\n    return (\r\n      <div key={item.name}>\r\n        <div onClick={() => props.onClick(item.name || item)} key={item.name} className=\"inventory-list__item\">\r\n          <span>{item.name || item}</span>\r\n        </div>\r\n        {reloadButton}\r\n      </div>\r\n    )\r\n  });\r\n\r\n  return (\r\n    <div className={className}>\r\n      <div className=\"inventory-list__label\">{props.label}:&nbsp;</div>\r\n      <div className=\"inventory-list__container\"\r\n        title={props.title}\r\n      >\r\n       {inventoryItems}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport LinearDisplay from './LinearDisplay';\r\nimport InventoryList from './InventoryList';\r\nimport './EntityCard.scss';\r\n\r\nclass EntityCard extends React.Component {\r\n  renderCount = 0\r\n  handleInventoryClick = (itemName) => {\r\n    this.props.onInventoryClick(this.props.entity, itemName);\r\n  }\r\n\r\n  renderAmmo = (inHands)=> {\r\n    if(inHands) {\r\n     return <LinearDisplay label=\"Rounds\" current={inHands.rounds} max={inHands.maxRounds} />\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // console.log(\"Rendering EntityView. #\", this.renderCount++);\r\n    let { entity } = this.props;\r\n    if(!entity) return null;\r\n    /*\r\n      FIXME: Below should be separated into several sub-components\r\n      Each sub-component should receive flat data (position, hp, ...)\r\n     */\r\n    let className = \" entity \";\r\n    if(entity.active) {\r\n      className+=\" active \";\r\n    }\r\n\r\n    let { isDead, isFriendly } = entity;\r\n    let fof = isFriendly ? ' friendly ' : ' unfriendly ';\r\n    let lifeSigns = isDead ? \" DEAD \" : \" ALIVE \";\r\n    className += fof;\r\n    className += lifeSigns;\r\n    let inHands = entity.equipment && entity.equipment.hands;\r\n    let inHandsArray = (inHands && [inHands]) || [];\r\n\r\n\r\n    return (\r\n\r\n      <div className={className}>\r\n        <div>\r\n          <div className=\"position\" title=\"Position\">\r\n            <span> {entity.position.x} {entity.position.y} </span>\r\n          </div>\r\n\r\n          <div className=\"portrait\">\r\n            {entity.icon}\r\n          </div>\r\n        </div>\r\n        <strong title=\"Name\">{entity.name}</strong>\r\n        <br />\r\n        {` `}{lifeSigns}\r\n        <br />\r\n\r\n        <div style={{\r\n          clear: \"both\",\r\n          display: \"inline-block\",\r\n          textAlign: \"right\",\r\n        }}>\r\n          <LinearDisplay label=\"HP\" current={entity.hp} max={entity.maxHp} /><br/>\r\n          {this.renderAmmo(inHands)}\r\n        </div>\r\n        <InventoryList label=\"Equipped\" title=\"In hands\" onClick={this.handleInventoryClick} inventory={inHandsArray} />\r\n        <InventoryList label=\"Inventory\" title=\"In backpack\" onClick={this.handleInventoryClick} inventory={entity.inventory} />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EntityCard;\r\n","import React from 'react';\r\nimport EntityCard from '../EntityCard';\r\nimport './EntitiesList.scss';\r\n\r\nexport default class ListOfEntities extends React.Component {\r\n  renderCounter = 0\r\n  render() {\r\n    // console.log(\"Rendering EntitiesList #\", this.renderCounter++);\r\n    \r\n    let entitiesFriendly =\r\n    this.props.entities.filter(entity=>entity.isFriendly).map(obj => {\r\n      return (\r\n        <EntityCard onInventoryClick={this.props.onInventoryClick} entity={obj} key={obj.name} />\r\n      )\r\n    });\r\n\r\n    let entitiesUnfriendly =\r\n    this.props.entities.filter(entity=>!entity.isFriendly).map(obj => {\r\n      return (\r\n        <EntityCard entity={obj} key={obj.name}/>\r\n      )\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <h4 className=\"list-of-entities__header\">List of Entities:</h4>\r\n        <div className=\"list-of-entities\">\r\n            {entitiesFriendly}\r\n        </div>\r\n        <div className=\"list-of-entities\">\r\n            {entitiesUnfriendly}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import * as Helpers from '../helpers/Helpers';\r\nimport { Entity, Position } from './EntitiesValues';\r\n\r\nexport interface Square {\r\n  entity?: Entity\r\n  blood?: number\r\n  isAvailableDestination?: boolean\r\n  isChosenDestination?: boolean\r\n  isTargeted?: boolean\r\n}\r\n\r\nexport class Square implements Square {\r\n\r\n}\r\n\r\nclass SquaresServiceClass {\r\n  arenaSize: number = 10;\r\n\r\n  squares: Square[]\r\n\r\n  getSquare(x: number, y: number): Square {\r\n    return this.squares[this.targetSquareIndex(x, y)];\r\n  }\r\n\r\n  setSquare(x: number, y: number, value): void {\r\n    this.squares[this.targetSquareIndex(x, y)] = value;\r\n  }\r\n\r\n  targetSquareIndex(x: number, y:number): number {\r\n    return y * this.arenaSize + x;\r\n  }\r\n\r\n  targetSquarePosition(squareIndex: number): Position {\r\n    let x: number,y: number;\r\n    y = Math.floor(squareIndex / this.arenaSize);\r\n    x = (squareIndex % this.arenaSize);\r\n    return {x, y};\r\n  }\r\n\r\n  setEntityWithinApropriateSquare(entity: Entity): void {\r\n    this.setEntityWithinASquare(\r\n      entity.position.x, entity.position.y, entity\r\n    );\r\n  }\r\n\r\n  setEntityWithinASquare(x: number, y: number, entity: Entity) {\r\n    let squareIndex: number = this.targetSquareIndex(x, y);\r\n    this.initializeSquareIfEmpty(squareIndex);\r\n    this.squares[squareIndex].entity = entity;\r\n  }\r\n\r\n  addBlood(square: Square, amount: number) {\r\n    if(!square) {square = {}};\r\n    if(!square.blood) {\r\n      square.blood = amount;\r\n    } else {\r\n      square.blood += amount;\r\n    }\r\n  }\r\n\r\n  markSquareAsTargeted(squareIndex: number): void{\r\n    Helpers.resetGivenFieldsOnACollection(this.squares, 'isTargeted');\r\n    this.initializeSquareIfEmpty(squareIndex);\r\n    this.squares[squareIndex].isTargeted = true;\r\n  }\r\n\r\n  initializeSquareIfEmpty(squareIndex: number) {\r\n    if(!this.squares[squareIndex]) {\r\n      this.squares[squareIndex] = {};\r\n    }\r\n  }\r\n\r\n  markAvailableDestinationsForSelectedEntity(entity: Entity): void {\r\n    if(entity.active) {\r\n      let {x,y} = entity.position;\r\n\r\n      Helpers.resetGivenFieldsOnACollection(this.squares, 'isAvailableDestination');\r\n\r\n      for(let j = y - 1; j <= y + 1; j++){\r\n        if( j < 0 || j >= this.arenaSize){\r\n          continue\r\n        }\r\n        for(let i = x - 1; i <= x + 1; i++){\r\n          if( i < 0 || i >= this.arenaSize || (i === x && j === y)){\r\n            continue\r\n          }\r\n\r\n          let square: Square = this.getSquare(i, j);\r\n          if(!square) {square={}}\r\n          square.isAvailableDestination = true;\r\n          this.setSquare(i, j, square);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nlet SquaresService = new SquaresServiceClass();\r\nexport default SquaresService;\r\n","import entitiesService from './EntitiesService';\r\nimport squaresService from './SquaresService';\r\n\r\nexport let EntitiesService = entitiesService;\r\nexport let SquaresService = squaresService;\r\n","import { default as SquaresService, Square } from './SquaresService';\r\nimport * as Helpers from '../helpers/Helpers';\r\nimport { Entity, Position, Weapon, RangedWeapon, Mortal, Positionable, Bleedable } from '../services/EntitiesValues';\r\nconst arenaSize: number = 10;\r\n\r\nclass EntitiesServiceClass {\r\n  entities: Entity[]\r\n  selected: Entity\r\n\r\n  getEntityId(entity: Entity): string {\r\n    return entity.name;\r\n  }\r\n\r\n  findEntityById(id: string): Entity {\r\n    let result: Entity = this.entities.filter((entity) => entity.name === id)[0];\r\n    return result;\r\n  }\r\n\r\n  findItemOnEntity(entity: Entity, id: string) {\r\n    let result = entity.inventory.filter((item) => item.name === id)[0];\r\n    return result;\r\n  }\r\n\r\n\r\n  moveEntityRandomly(entity: Entity) {\r\n    if(entity.isDead) return;\r\n\r\n    let oldPositionX = entity.position.x;\r\n    let oldPositionY = entity.position.y;\r\n\r\n    entity.position.x = entity.position.x + Helpers.getRandomIntInclusive(-1,1);\r\n    entity.position.y = entity.position.y + Helpers.getRandomIntInclusive(-1,1);\r\n\r\n    entity.position.x = Helpers.getNumberWithinBoundaries(entity.position.x, 0, arenaSize-1);\r\n    entity.position.y = Helpers.getNumberWithinBoundaries(entity.position.y, 0, arenaSize-1);\r\n\r\n    let newSquare = SquaresService.getSquare(entity.position.x, entity.position.y);\r\n\r\n    if (newSquare && newSquare.entity) {// if square occupiec, reverse the move\r\n      entity.position.x = oldPositionX;\r\n      entity.position.y = oldPositionY;\r\n    }\r\n  }\r\n\r\n  stopBreathingForKilledEntity(entity: Entity): Entity {\r\n    if(entity && entity.hp <= 0){\r\n      entity.isBreathing = false;\r\n      entity.hp = 0;\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  getEntitiesAtGivenPosition(targetPosition: Position): Entity[] {\r\n    return this.entities.filter((potentialTargetEntity: Entity): boolean => {\r\n      return (\r\n        potentialTargetEntity.position.x === targetPosition.x &&\r\n        potentialTargetEntity.position.y === targetPosition.y\r\n      );\r\n    });\r\n  }\r\n\r\n  selectEntityFromGivenSquare(selected: Entity, targeted: Square): Entity {\r\n    if(selected && targeted && targeted.entity){\r\n      selected.active = false;\r\n    }\r\n    if(targeted && targeted.entity){\r\n      selected = targeted.entity;\r\n      selected.active = true;\r\n    }\r\n\r\n    return selected;\r\n  }\r\n\r\n  setSelected(selected: Entity, value: boolean): Entity {\r\n    let selectedInEntities = this.findEntityById(\r\n      this.getEntityId(selected)\r\n    );\r\n    if(value) {\r\n      selected.active = value;\r\n    } else {\r\n      selected = null;\r\n      console.log(\"Nullified:\", selected);\r\n    }\r\n    selectedInEntities.active = value;\r\n    return selected;\r\n  }\r\n\r\n  checkAmmoAndCalculateDamageApplied(entity: Entity): number {\r\n    let damageApplied: number = 0;\r\n    let weapon: RangedWeapon = entity.equipment && entity.equipment.hands;\r\n\r\n    if(!weapon) return 0;\r\n\r\n    if(weapon.isAbleToFire) {\r\n      damageApplied = weapon.fire();\r\n    } else {\r\n      weapon.rounds = \"empty\";\r\n      entity.isShooting = false;\r\n    }\r\n\r\n    return damageApplied;\r\n  }\r\n\r\n\r\n  fireAShot(entity: Entity) {\r\n    if(entity.ceaseFire) {\r\n      entity.isShooting = false;\r\n      entity.ceaseFire = false;\r\n      return;\r\n    }\r\n    let damageApplied = this.checkAmmoAndCalculateDamageApplied(entity);\r\n    let targetEntities =\r\n      this.getEntitiesAtGivenPosition(entity.targetPosition);\r\n    targetEntities.forEach((targetEntity) => {\r\n      this.applyDamageToTargetEntity(targetEntity, damageApplied);\r\n      this.ceaseFireNextTickIfTargetIsKilled(entity, targetEntity);\r\n    });\r\n  }\r\n\r\n  applyDamageToTargetEntity(targetEntity: Entity, damage: number) {\r\n    if(damage) {\r\n      targetEntity.hp -= damage;\r\n      targetEntity.bleeding = 5;\r\n    }\r\n  }\r\n\r\n  ceaseFireNextTickIfTargetIsKilled(entity: Entity, targetEntity: Entity): void {\r\n    if(targetEntity.hp < 0) {\r\n      entity.ceaseFire = true;\r\n    }\r\n  }\r\n\r\n  isEntityShootingProperly(entity: Entity): boolean {\r\n    return entity.isShooting && entity.targetPosition && (\r\n      entity.targetPosition.x !== entity.position.x ||\r\n      entity.targetPosition.y !== entity.position.y\r\n    );\r\n  }\r\n\r\n  applyEffectsOfBleeding(entity: Entity): Entity {\r\n    // TODO: move to a \"bleed\" method\r\n    if(entity.bleeding && entity.hp > 0) {\r\n      entity.hp -= entity.bleeding ;\r\n      let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\r\n      SquaresService.addBlood(square, entity.bleeding);\r\n      entity.bleeding -= entity.bleedingReductionPerTurn;\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  moveEntityIntoChosenDestination(entity: Entity): Entity {\r\n    if(!entity.isDead && entity.moveDestination) {\r\n      let chosenDestinationSquare: Square = SquaresService.getSquare(\r\n          entity.moveDestination.x, entity.moveDestination.y\r\n      );\r\n\r\n      entity.position = entity.moveDestination;\r\n      delete entity.moveDestination;\r\n      chosenDestinationSquare.isChosenDestination = undefined;\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  setMoveDestinationOnASelectedEntity(\r\n      selected: Entity, \r\n      targetedSquarePosition: Position\r\n    ): void {\r\n    selected.moveDestination = targetedSquarePosition;\r\n  }\r\n\r\n  moveEntities(): void {\r\n    this.entities.forEach(entity => this.moveEntityIntoChosenDestination(entity));\r\n    let JR: Entity = this.findEntityById(\"John Rambo\");\r\n    let OP: Entity = this.findEntityById(\"Squid\");\r\n    let OC: Entity = this.findEntityById(\"Octo\");\r\n    this.moveEntityRandomly(JR);\r\n    this.moveEntityRandomly(OP);\r\n    this.moveEntityRandomly(OC);\r\n  }\r\n\r\n}\r\n\r\nlet EntitiesService = new EntitiesServiceClass();\r\nexport default EntitiesService;\r\n","import React, { ReactElement, DOMElement } from 'react';\r\nimport * as Helpers from '../../helpers/Helpers';\r\nimport {SquaresService, EntitiesService} from '../../services';\r\nimport EntityCard from '../EntityCard/EntityCard';\r\nimport { Square } from '../../services/SquaresService';\r\nimport { Entity, Position } from '../../services/EntitiesValues';\r\n\r\ninterface TargetedSquareInfoProps {\r\n  className: string\r\n  squareNumber: number\r\n  squares: Square[]\r\n  selected: Entity\r\n  targeted: Square\r\n  onInventoryClick: Function\r\n  processInterface: Function\r\n}\r\n\r\nexport default class TargetedSquareInfo extends React.Component<TargetedSquareInfoProps> {\r\n\r\n  onMoveClick(selected: Entity, targetedSquarePosition: Position) {\r\n    EntitiesService.setMoveDestinationOnASelectedEntity(selected, targetedSquarePosition);\r\n    \r\n    let targetedSquare: Square = SquaresService.getSquare(\r\n      targetedSquarePosition.x,\r\n      targetedSquarePosition.y\r\n    );\r\n\r\n    targetedSquare.isChosenDestination = true;\r\n    this.props.processInterface();\r\n  }\r\n\r\n  onAttackClick(selected: Entity, targetedSquarePosition: Position) {\r\n    selected.targetPosition = targetedSquarePosition\r\n    selected.isShooting = true;\r\n    this.props.processInterface();\r\n  }  \r\n\r\n  render(){\r\n    //this.props.squareNumber\r\n    let inspectedSquare = this.props.targeted;\r\n    let selected: Entity = this.props.selected;\r\n    let targeted: Square = this.props.targeted;\r\n\r\n    let targetedSquarePosition = SquaresService.targetSquarePosition(this.props.squareNumber);\r\n\r\n    let entityInfo;\r\n    let distanceInfo;\r\n    let positionInfo;\r\n    let bloodInfo;\r\n    let availableActions = [];\r\n\r\n    if(targeted && targeted.entity) {\r\n      entityInfo = <EntityCard onInventoryClick={this.props.onInventoryClick} entity={targeted.entity} />\r\n    }\r\n\r\n    if(selected) {\r\n      let distanceToSelected = Helpers.calculateDistance(\r\n        targetedSquarePosition.x - selected.position.x,\r\n        targetedSquarePosition.y - selected.position.y\r\n      );\r\n      \r\n      distanceInfo = (\r\n        <li>\r\n          Distance to selected: {~~distanceToSelected}\r\n        </li>\r\n      );\r\n      \r\n      if(distanceToSelected !== 0) {\r\n        availableActions[0] = <button className='button'>Action</button>\r\n        if(targeted && targeted.isAvailableDestination){\r\n          availableActions[1] = <button onClick={()=> this.onMoveClick(selected, targetedSquarePosition)} className='button'>Move</button>\r\n        }\r\n        if(targeted && targeted.entity){\r\n          availableActions[2] = <button onClick={()=> this.onAttackClick(selected, targetedSquarePosition)} className='button'>Attack</button>\r\n        }  \r\n      }\r\n    }\r\n\r\n    if(targetedSquarePosition) {\r\n      positionInfo = <li>Position: [ {targetedSquarePosition.x}, {targetedSquarePosition.y} ] </li>\r\n    }\r\n\r\n    if(inspectedSquare && inspectedSquare.blood) {\r\n      bloodInfo = <li>Blood amount: {inspectedSquare.blood}</li>\r\n    }\r\n\r\n    return (\r\n      <div className={this.props.className}>\r\n        <strong>Target square Info</strong>\r\n        <div>{entityInfo}</div>\r\n        <div>{availableActions}</div>\r\n        <ul>\r\n          {positionInfo}\r\n          {distanceInfo}\r\n          {bloodInfo}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { applyMixins } from '../helpers';\r\nimport EntitiesService from './EntitiesService';\r\nimport { SquaresService } from '.';\r\nimport { Square } from './SquaresService';\r\n\r\nexport class Weapon {\r\n  causesBleeding = 0\r\n  range = 0\r\n  damage =  0\r\n}\r\n\r\nexport class RangedWeapon extends Weapon{\r\n  rounds: number | any = 0\r\n  maxRounds = 5\r\n\r\n  fire() {\r\n    this.rounds--;\r\n    console.log('Firing ranged weapon. Damage: ', this.damage);\r\n    return this.damage\r\n  }\r\n\r\n  get isAbleToFire() {\r\n    return this.rounds > 0;\r\n  }\r\n\r\n  reload() {\r\n    this.rounds = this.maxRounds;\r\n  }\r\n}\r\n\r\nclass Rifle extends RangedWeapon{\r\n  type = 'projectile'\r\n  range = 4\r\n  damage = 1\r\n  causesBleeding = 4\r\n}\r\n\r\nclass Lazer extends RangedWeapon{\r\n  type = 'lazer'\r\n  range = 6\r\n  damage = 5\r\n  causesBleeding = 0\r\n}\r\n\r\n\r\nclass M16 extends Rifle {\r\n  name = 'M16'\r\n  rounds = 15\r\n  maxRounds = 20\r\n  damage = 2\r\n}\r\n\r\nclass L30 extends Lazer {\r\n  name = 'Assault Lazer Cannon'\r\n  rounds = 3\r\n  maxRounds = 3\r\n  damage = 10\r\n}\r\n\r\nclass M40 extends Rifle {\r\n  name = 'M41A Pulse Rifle'\r\n  rounds = 40\r\n  maxRounds = 40\r\n  damage = 1\r\n}\r\n\r\n/** Position on a grid */\r\nexport interface Position { x: number, y: number }\r\n\r\nclass Identifiable {\r\n  name: string = \"An Entity\"\r\n  icon: string = \"E\"\r\n}\r\n\r\nexport class Positionable {\r\n  position: Position = {x: undefined, y: undefined}\r\n}\r\n\r\nclass Movable {\r\n  moveDestination: Position\r\n}\r\n\r\nexport class Mortal extends Positionable {\r\n  hp: number = 100\r\n  maxHp: number = 100\r\n  get isDead(): boolean {\r\n    return this.hp <= 0;\r\n  }\r\n}\r\n\r\nexport class Bleedable extends Mortal {\r\n  bleeding: number\r\n  bleedingReductionPerTurn: number = 1\r\n  bleed(): number {\r\n    let entity = this;\r\n    let bloodReleased = 0\r\n    if(entity.bleeding && entity.hp > 0) {\r\n      bloodReleased = entity.bleeding;\r\n      entity.hp -= bloodReleased ;\r\n      entity.bleeding -= entity.bleedingReductionPerTurn;\r\n    }\r\n    return bloodReleased;\r\n  }\r\n\r\n  bleedExternally() {\r\n    if(!this.bleeding) return;\r\n    let entity = this;\r\n    let bloodReleased = this.bleed();\r\n    let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\r\n    SquaresService.addBlood(square, bloodReleased);\r\n  }\r\n}\r\n\r\nclass Breathing extends Mortal {\r\n  isSupposedToBeBreathing: boolean = undefined;\r\n  get isBreathing(): boolean {\r\n    return this.hp > 0 && this.isSupposedToBeBreathing;\r\n  }\r\n  set isBreathing(value: boolean) {\r\n    this.isSupposedToBeBreathing = value;\r\n  }\r\n}\r\n\r\nclass Combative {\r\n  targetPosition: Position\r\n  isShooting?: boolean\r\n  ceaseFire?: boolean  \r\n}\r\n\r\nexport class Entity {// Extended by mixins below\r\n  constructor(...props) {\r\n    Object.assign(this, ...props);\r\n  }\r\n\r\n  active?: boolean\r\n  inventory: any[]\r\n  equipment: any\r\n  hasWeapon: boolean\r\n}\r\n\r\n/************************************************************/\r\n/* Always update both lists */\r\n\r\nexport interface Entity extends \r\n  Identifiable, Positionable, Mortal, Bleedable, Movable, Breathing, Combative\r\n  {};\r\napplyMixins(Entity, [\r\n  Identifiable, Positionable, Mortal, Bleedable, Movable, Breathing, Combative\r\n]);\r\n\r\n/************************************************************/\r\n\r\nconst entitiesInitialValues = [\r\n  {\r\n    name: \"John Rambo\", age: 40, hp: 95, maxHp: 100,\r\n    icon: \"😠\",\r\n    isBreathing: true,\r\n    isFriendly: true,\r\n    position: {x:8, y:8},\r\n    inventory: [{name:'KA-BAR'}, new M16()],\r\n    equipment: {head: 'Red Bandana', hands: null},\r\n    damage: 1, rounds: 10, maxRounds: 15, hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Ellen Replay\", age: 30, hp: 50, maxHp: 65,\r\n    icon: \"👩\",\r\n    isBreathing: true,\r\n    isFriendly: true,\r\n    position: {x:1, y:8},\r\n    inventory: [new M40(), {name:'Motion Detector'}],\r\n    equipment: {head: 'Afro'},\r\n    damage: 1, rounds: 10, maxRounds: 10, hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Lazer Blady\", age: 60, hp: 75, maxHp: 100,\r\n    icon: \"🧑🏻\",\r\n    isBreathing: true,\r\n    isFriendly: true,\r\n    position: {x:4, y:8},\r\n    inventory: [new L30(), new M16()],\r\n    equipment: {},\r\n    damage: 10, rounds: 3, maxRounds: 3, hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Lux Aeterna\", age: 20, hp: 50, maxHp: 50,\r\n    icon: \"👱‍♀️\",\r\n    isBreathing: true,\r\n    isFriendly: true,\r\n    position: {x:1, y:1},\r\n    inventory: [new L30()],\r\n    equipment: {},\r\n    damage: 4, rounds: 1, maxRounds: 1, hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Robot\", age: 1, hp: 50, maxHp: 50,\r\n    icon: \"🤖\",\r\n    isBreathing: false,\r\n    position: {x:4, y:5},\r\n  },\r\n  {\r\n    name: \"Octo\", age: 8, hp: 200, maxHp: 200,\r\n    icon: \"🐙\",\r\n    isBreathing: true,\r\n    position: {x:8, y:2},\r\n    bleedingReductionPerTurn: 0,\r\n    bleeding: 1,\r\n  },\r\n  {\r\n    name: \"Squid\", age: 5, hp: 100, maxHp: 100,\r\n    icon: \"🦑\",\r\n    isBreathing: true,\r\n    position: {x:5, y:5},\r\n  },\r\n  {\r\n    name: \"Ant\", age: 1, hp: 45, maxHp: 50,\r\n    icon: \"🐜\",\r\n    isBreathing: true,\r\n    position: {x:7, y:6},\r\n  },\r\n  {\r\n    name: \"Spider\", age: 1, hp: 100, maxHp: 150,\r\n    icon: \"🕷️\",\r\n    isBreathing: true,\r\n    position: {x:9, y:3},\r\n    bleedingReductionPerTurn: 1,\r\n  },\r\n  {\r\n    name: \"Mosquito\", age: 1, hp: 12, maxHp: 20,\r\n    icon: \"🦟\",\r\n    isBreathing: true,\r\n    position: {x:2, y:7},\r\n  },\r\n  {\r\n    name: \"Microbe\", age: 1, hp: 1, maxHp: 5,\r\n    icon: \"🦠\",\r\n    isBreathing: true,\r\n    position: {x:3, y:5},\r\n  },\r\n\r\n];\r\n\r\nconst entities = entitiesInitialValues.map(entry => new Entity(entry));\r\n\r\nexport default entities;\r\n","import Entities from './EntitiesValues';\n\nclass GameModelClass {\n  constructor(Entities) {\n    this.entities = Entities;\n  }\n  access() {\n    console.log(\"Accessing Game Model\");\n    console.log(this.entities);\n  }\n}\n\nlet GameModel = new GameModelClass(Entities);\n\nexport default GameModel;\n","import React from 'react';\r\nimport Board from '../Board';\r\nimport EntitiesList from '../EntitiesList';\r\nimport TargetedSquareInfo from './TargetedSquareInfo'\r\n\r\nimport { EntitiesService, SquaresService } from '../../services';\r\nimport GameLogic from '../../services/GameLogicService'\r\nimport GameModel from '../../services/GameModelService'\r\n\r\nimport * as Helpers from '../../helpers';\r\nimport './Game.scss';\r\n\r\nimport { Entity } from '../../services/EntitiesValues';\r\nimport { Square } from '../../services/SquaresService';\r\nimport EntityCard from '../EntityCard/EntityCard';\r\n\r\ninterface GameState {\r\n  targeted: Square,\r\n  selected: Entity,\r\n  arenaSize: number,\r\n  isBoardRotated: boolean,\r\n  entities: Entity[]\r\n  squares: Square[],\r\n  autoLoop: boolean,\r\n  selectedSquareNumber: number,\r\n}\r\n\r\nexport default class Game extends React.PureComponent<void, GameState> {\r\n  renderCounter: number = 0\r\n  stepNumber: number = 0\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Initial VALUE of game state\r\n    this.state = {\r\n      targeted: null,\r\n      selected: null,\r\n      arenaSize: 10,\r\n      isBoardRotated: false,\r\n      entities: GameModel.entities,\r\n      squares: [],\r\n      autoLoop: true,\r\n      selectedSquareNumber: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    SquaresService.squares = this.state.squares;\r\n    EntitiesService.entities = this.state.entities;\r\n    this.loop();\r\n  }\r\n\r\n  setSquaresAccordingToEntities() {\r\n    this.setState((previousState)=>{\r\n      let squares: Square[] = [].concat(previousState.squares);\r\n      let entities: Entity[] = previousState.entities;\r\n\r\n      SquaresService.squares = squares;\r\n      Helpers.resetGivenFieldsOnACollection(squares, 'entity');\r\n      entities.forEach((entity)=>{\r\n        SquaresService.setEntityWithinApropriateSquare(entity);\r\n      });\r\n\r\n      return { squares };\r\n    });\r\n  }\r\n\r\n  calculateNextGameState(previousState: GameState) {\r\n    let nextState: GameState = previousState;\r\n    let { entities, squares, selected } = nextState;\r\n\r\n    EntitiesService.moveEntities();\r\n    entities.forEach(entity => {\r\n      if(EntitiesService.isEntityShootingProperly(entity)) {\r\n        EntitiesService.fireAShot(entity);\r\n      }\r\n      entity.bleedExternally();\r\n\r\n      EntitiesService.stopBreathingForKilledEntity(entity);\r\n      SquaresService.markAvailableDestinationsForSelectedEntity(entity)\r\n    });\r\n\r\n    return nextState;\r\n  }\r\n\r\n  calculateNextInterfaceState(previousState: GameState) {\r\n    let nextState = previousState;\r\n    let { entities } = nextState;\r\n\r\n    entities.forEach(entity => {\r\n      SquaresService.markAvailableDestinationsForSelectedEntity(entity)\r\n    });\r\n\r\n    return nextState;\r\n  }\r\n\r\n  processEntities() {\r\n    this.setState(\r\n      prevState => this.calculateNextGameState(prevState),\r\n      () => this.setSquaresAccordingToEntities()\r\n    );\r\n  }\r\n\r\n  processInterface() {\r\n    this.setState(\r\n      prevState => this.calculateNextInterfaceState(prevState),\r\n      () => this.setSquaresAccordingToEntities()\r\n    )\r\n  }\r\n\r\n  loop = () => {\r\n    this.stepNumber++;\r\n\r\n    this.processEntities();\r\n\r\n    if(this.state.autoLoop) {\r\n      setTimeout(this.loop, 1000);\r\n    }\r\n  }\r\n\r\n  nextTick = () => {\r\n    this.setState({autoLoop: false});\r\n    this.loop();\r\n  }\r\n\r\n  isSelectedTargeted = (selected: Entity, targeted: Square): boolean => {\r\n    if(selected && targeted && targeted.entity && selected.name === targeted.entity.name) {\r\n      return true;\r\n    }else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  newHandleClick = (squareIndex: number) => {\r\n    this.setState( (state) => {\r\n      let {squares, entities, selected, targeted, selectedSquareNumber} = state;\r\n\r\n      targeted = squares[squareIndex];\r\n      SquaresService.markSquareAsTargeted(squareIndex);\r\n\r\n      if(!selected) {\r\n        selected = EntitiesService.selectEntityFromGivenSquare(selected, targeted);\r\n      } else if(this.isSelectedTargeted(selected, targeted)){\r\n        console.log('deselecting ')\r\n        this.deselectAllEntities();\r\n        selected = undefined;\r\n      }\r\n      selectedSquareNumber = squareIndex;\r\n\r\n      return {squares, entities, selected, targeted, selectedSquareNumber};\r\n    }, this.processInterface );\r\n  }\r\n\r\n\r\n  nuke = (dmg: number) => {\r\n    this.setState( (state) => {\r\n      let { entities } = state;\r\n\r\n      entities.forEach(entity => {\r\n        entity.hp = entity.hp - dmg;\r\n      });\r\n\r\n      return {entities}\r\n    }, () => {\r\n      this.processEntities();\r\n    });\r\n  }\r\n\r\n  toggleRotateBoard = () => {\r\n    this.setState({isBoardRotated: !this.state.isBoardRotated});\r\n  }\r\n\r\n  switchAutoLoop = () => {\r\n    this.setState((previousState) => {\r\n      return {autoLoop: !previousState.autoLoop};\r\n    }, ()=>{\r\n      if(this.state.autoLoop) {\r\n        this.loop();\r\n      }\r\n    });\r\n  }\r\n\r\n  onInventoryClick = (entity, itemName) => {\r\n    this.setState((prevState) => {\r\n      let entities = [].concat(prevState.entities);\r\n\r\n      let entityId = EntitiesService.getEntityId(entity);\r\n      let actualEntity = EntitiesService.findEntityById(entityId);\r\n      let actualItem = EntitiesService.findItemOnEntity(actualEntity, itemName);\r\n\r\n      actualEntity.equipment.hands = actualItem;\r\n\r\n      return {entities};\r\n    });\r\n    console.log(entity, itemName);\r\n  }\r\n\r\n  handleDeselectAllEntities = () => {\r\n    this.setState( (state) => {\r\n      let {squares, entities, selected} = state;\r\n\r\n      this.deselectAllEntities();\r\n      selected = undefined;\r\n      \r\n      return {squares, entities, selected}\r\n    }, () => {\r\n      //this.processEntities();\r\n    });\r\n  }\r\n\r\n  deselectAllEntities = () => {\r\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, 'active');\r\n    Helpers.resetGivenFieldsOnACollection(SquaresService.squares, 'isChosenDestination', 'isAvailableDestination');\r\n  }\r\n\r\n  ceaseFire = () => {\r\n    this.setState( (state) => {\r\n      let {squares, entities, selected} = state;\r\n\r\n      Helpers.resetGivenFieldsOnACollection(entities, 'isShooting');\r\n\r\n      return {squares, entities, selected}\r\n    }, () => {\r\n      this.processInterface();\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    let boardClassName = this.state.isBoardRotated ? \"rotated-board\" : \"\";\r\n    // console.log(\"Rendering Game. #\", this.renderCounter++);\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={this.state.squares}\r\n            onClick={(i) => this.newHandleClick(i)}\r\n            size={this.state.arenaSize}\r\n            className={boardClassName}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"game-info\">\r\n\r\n          <div className=\"actions\">\r\n            <button onClick={()=>{this.nuke(40);}} className=\"button button-nuke\">Nuke All</button>\r\n            <button onClick={this.ceaseFire} className=\"button\">Cease Fire</button>\r\n\r\n            <button onClick={this.toggleRotateBoard} className=\"button\">Rotate Board</button>\r\n            <button onClick={this.nextTick} className=\"button\">Next Tick</button>\r\n\r\n            <span className=\"step-counter\">Tick: {this.stepNumber}</span>\r\n            <label className=\"auto-cycle button\">\r\n              <input type=\"checkbox\" checked={this.state.autoLoop} onChange={this.switchAutoLoop}/>\r\n              <span>Auto Cycle</span>\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"interaction-container\">            \r\n            <div className=\"selected\">\r\n              <strong>Selected entity </strong>\r\n              <div>\r\n                <EntityCard onInventoryClick={this.onInventoryClick} entity={this.state.selected} />\r\n              </div>\r\n              <button onClick={this.handleDeselectAllEntities} className=\"button\"> Deselect</button>              \r\n            </div>\r\n            <TargetedSquareInfo\r\n              className=\"targeted\"\r\n              squareNumber = {this.state.selectedSquareNumber}\r\n              squares = {this.state.squares}\r\n              selected = {this.state.selected}\r\n              targeted = {this.state.targeted}\r\n              onInventoryClick = {this.onInventoryClick}\r\n              processInterface = {()=> this.processInterface()}\r\n            />\r\n            <div>\r\n              \r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"game-list\">\r\n          <EntitiesList\r\n            entities={this.state.entities}\r\n            onInventoryClick= {this.onInventoryClick}\r\n          />\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\nimport { render } from 'react-dom';\nimport Game from './components/Game';\n\nimport './style.scss';\n\nrender(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}