{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/EntityCard/LinearDisplay.js","components/EntityCard/InventoryList.js","components/EntityCard/EntityCard.js","components/EntitiesList/EntitiesList.js","components/Game/EntitiesValues.js","components/Game/ProcessingSquares.js","components/Game/ProcessingEntities.js","components/Game/Game.js","index.js"],"names":["Square","renderCounter","nextProps","nextState","JSON","stringify","this","props","className","localId","squareId","active","isAvailableDestination","isChosenDestination","icon","isBreathing","isShooting","randomTime","Math","random","toFixed","animationBreathing","targetCoords","targetPosition","projectileNumber","projectiles","customStyle","position","x","y","distanceToTargetX","distanceToTargetY","actualDistance","sqrt","pow","weaponType","angle","atan","PI","calcNewAangle","push","key","projectile","onClick","blood","style","animation","React","Component","Board","handleClick","bind","i","console","log","rowId","colId","square","squares","entity","rowNumber","colNumber","equipment","hands","type","cellId","rows","Array","size","fill","map","row","number","cells","cell","renderSquare","PureComponent","LinearDisplay","percentage","current","max","overload","progressStyle","width","title","label","InventoryList","inventory","inventoryItems","item","name","EntityCard","renderCount","handleInventoryClick","itemName","onInventoryClick","lifeSigns","isFriendly","clear","display","textAlign","hp","maxHp","rounds","maxRounds","ListOfEntities","entitiesFriendly","entities","filter","obj","entitiesUnfriendly","Rifle","causesBleeding","M16","damage","L30","M40","age","head","hasWeapon","bleedingReductionPerTurn","arenaSize","getSquare","targetSquareIndex","setSquare","value","setEntityWithinASquare","target","getNumberWithinBoundaries","min","getRandomIntInclusive","floor","getEntityId","findEntityById","id","moveEntityRandomly","oldPositionX","oldPositionY","newSquare","Game","stepNumber","loop","processEntities","state","autoLoop","setTimeout","nextTurn","setState","handleBoardClick","previousState","localCopyOfPreviousState","parse","selected","setSelected","selectedEntity","ProcessingEntities","forEach","deselectAllEntities","resetGivenFieldOnACollection","squareIndex","ProcessingSquares","getEntitiesAtGivenPosition","moveDestination","nuke","dmg","localCopyOfEntities","toggleRotateBoard","isBoardRotated","switchAutoLoop","prevState","actualEntity","actualItem","EntitiesValues","moveEntities","isEntityShootingProperly","fireAShot","applyEffectsOfBleeding","stopBreathingForKilledEntities","markAvailableDestinationsForSelectedEntity","collection","fieldName","j","moveEntityIntoChosenDestinations","JR","OP","bleeding","amount","potentialTargetEntity","targetEntity","ceaseFire","damageApplied","checkAmmoAndCalculateDamageApplied","applyDamageToTargetEntity","ceaseFireNextTurnIfTargetIsKilled","calculateNextGameState","setSquaresAccordingToEntities","selectedInEntities","boardClassName","checked","onChange","render","document","getElementById"],"mappings":"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","file":"static/js/main.ce80cc76.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Square.scss\";\n\nclass Square extends React.Component {\n  /*\n    We use PureComponent, so it compares new props with previous props,\n    and only re-renders when props changed.\n   */\n  renderCounter = 0\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if(JSON.stringify(nextProps) === JSON.stringify(this.props)) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    this.renderCounter++;\n    //console.log(\"Rendering Square\", this.renderCounter, this.props);\n\n    let className = \"square\";\n    let localId = `Sq${this.props.squareId}`;\n\n    if(this.props.active) {\n      className += \" active \";\n    }\n\t\tif(this.props.isAvailableDestination) {\n\t\t\tclassName += \" is-available-destination \"\n\t\t}\n\t\tif(this.props.isChosenDestination) {\n\t\t\tclassName += \" is-chosen-destination \"\n\t\t}\n    if(this.props.icon){\n      if(this.props.isBreathing) {\n        className += \" breathing\";\n      } else {\n        className += \" dead\";\n      }\n      if(this.props.isShooting) {\n        className += \" shooting\";\n      }\n    }\n\n    let randomTime = `${(Math.random()+0.5).toFixed(2)}s`\n    let animationBreathing = this.props.isBreathing ?\n        `breathing ${randomTime} alternate infinite linear` : 'none';\n\n    let targetCoords = this.props.targetPosition;\n    let projectileNumber = 5;\n    let projectiles = [];\n    let customStyle = \"\";\n\n    let calcNewAangle = function(x, y){\n      let angle;\n      if(y >= 0) {\n        angle = - Math.atan(\n          x/y\n        ) * (180/Math.PI);\n      } else if(y < 0) {\n        angle = (180/Math.PI) *\n          (\n            Math.atan(\n              x/-y\n            ) + Math.PI\n          )\n      }\n      return angle;\n    }\n\n    if((this.props.targetPosition && this.props.position && this.props.isShooting) &&\n      (this.props.targetPosition.x !== this.props.position.x ||\n      this.props.targetPosition.y !== this.props.position.y)) {\n\n      if(targetCoords) {\n\n        let distanceToTargetX = 38*(targetCoords.x-this.props.position.x);\n        let distanceToTargetY = 38*(targetCoords.y-this.props.position.y);\n        let actualDistance = Math.sqrt(Math.pow(distanceToTargetX, 2) + Math.pow(distanceToTargetY, 2));\n        if(this.props.weaponType === 'lazer') {\n\n          let className=`projectile${localId}_beam`;\n          let projectile= \"\";\n          let angle = calcNewAangle(distanceToTargetX, distanceToTargetY);\n          customStyle = `\n            @keyframes pulsing${localId} {\n              0%  {opacity: 0.1;}\n              100%  {opacity: 1;}\n            }\n\n            @keyframes elongating${localId} {\n              0%  {width: ${actualDistance - 20};}\n              100%  {width: ${actualDistance + 20};}\n            }\n\n            .${className} {\n              width: ${actualDistance}px;\n              height: 3px;\n              border-radius: 5px;\n              background: #F00;\n              position: absolute;\n              top: 16px;\n              left: 16px;\n\n              transform: rotate(${angle + 90}deg);\n              transform-origin: left 0px;\n              animation: pulsing${localId} 0.1s linear infinite,\n              elongating${localId} 1s linear alternate infinite;\n              box-shadow: 0 0 5px 5px white;\n              z-index: 10;\n            }\n\n            `;\n\n          projectiles.push(<div key={className} className={className}>{projectile}</div>);\n        }else {\n\n          customStyle = `\n            @keyframes shooting${localId} {\n              0%   {transform: scale(1);}\n              100% {transform: translate(\n                ${36*(targetCoords.x-this.props.position.x)}px,\n                ${36*(targetCoords.y-this.props.position.y)}px\n              )}\n            }\n\n            `;\n\n          while(projectileNumber--) {\n            customStyle += `\n            .projectile${localId}_${projectileNumber} {\n              position: absolute;\n              top: 5px;\n              left: 0px;\n              width: 100%;\n              height: 100%;\n              line-height: 34px;\n              font-size: 17px;\n              animation: shooting${localId} 0.5s linear infinite;\n              animation-delay: ${projectileNumber  * 0.5}s;\n              color: white;\n            }`;\n          };\n          let projectile = this.props.isShooting ? \"*\" : \"\";\n\n          projectileNumber = 5;\n\n          while(projectileNumber--) {\n            let className=`projectile projectile${localId}_${projectileNumber}`\n            projectiles.push(<div key={className} className={className}>{projectile}</div>);\n          };\n        }\n      }\n    }\n\n    return (\n      <button className={className} onClick={() => this.props.onClick(this.props.squareId)}>\n        <div className=\"blood\">{this.props.blood}</div>\n        <div className=\"content\" style={{\n          animation: animationBreathing\n        }}>{this.props.icon}</div>\n        <style>\n            {customStyle}\n        </style>\n        {projectiles}\n      </button>\n    );\n  }\n}\n\nexport default Square;\n","import React from 'react';\nimport Square from '../Square';\nimport './Board.scss';\n\nexport default class Board extends React.PureComponent {\n  renderCounter = 0\n\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(i) {\n    console.log(\"Handles Click on Board\", i);\n    this.props.onClick(i);\n  }\n\n  renderSquare(i, rowId, colId) {\n    /*\n    We pass one and the same function to all the Squares when rendering,\n    so they do not detect getting a new fat-arrow function as a change of props.\n\n    This is CRUCIAL to only rerender squares with changed values.\n\n    Additionally, we need to ensure that Unchanged squares have the same values of objects passed down here.\n    */\n    let square = this.props.squares[i];\n    let entity = this.props.squares[i] && this.props.squares[i].entity;\n    return (\n      <Square\n        key={i}\n        squareId={i}\n        rowNumber={rowId}\n        colNumber={colId}\n\n        onClick={this.handleClick}\n\n        icon={entity && entity.icon}\n        active={entity && entity.active}\n        isBreathing={entity && entity.isBreathing}\n\n        blood={square && square.blood}\n\n\t\t\t\tisAvailableDestination={square && square.isAvailableDestination}\n        isChosenDestination={square && square.isChosenDestination}\n\n        isShooting={entity && entity.isShooting}\n        weaponType={entity && entity.equipment && entity.equipment.hands && entity.equipment.hands.type}\n\n        position={entity && entity.position}\n        targetPosition={entity && entity.targetPosition}\n      />\n    );\n  }\n\n  render() {\n    // console.log(\"Rendering Board. #\", this.renderCounter++);\n\n    // Initial values for the Board\n    let cellId=0;\n    let rowId=0;\n    let colId;\n\n    let rows = Array(this.props.size).fill(null).map((row, number) => {\n      colId = 0;\n      let cells = Array(this.props.size).fill(null).map((cell, number) => {\n        return this.renderSquare(cellId++, rowId, colId++);\n      });\n      return (\n        <div key={rowId++} className=\"board-row\">\n          {cells}\n        </div>\n      );\n    });\n\n    let className = \"board \" + this.props.className;\n    return (\n      <div className={className}>\n        {rows}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './LinearDisplay.scss';\nexport default function LinearDisplay(props) {\n  let className=`linear-display ${props.className || ''}`\n  let percentage = ~~(props.current * 100 / props.max);\n  let overload = percentage > 100;\n  if(overload) {\n    percentage = 100;\n    className += \" overload \";\n  }\n\n  let progressStyle = {\n    width: `${percentage}%`,\n  }\n  let title = props.title || `${props.current}/${props.max}`;\n  return (\n    <div className={className}>\n      <div className=\"linear-display__label\">{props.label}:&nbsp;</div>\n      <div className=\"linear-display__bar-container\"\n        title={title}\n      >\n        <div className=\"linear-display__bar-progress\" style={progressStyle}>\n          <span className=\"linear-display__bar-progress-text\">{props.current}{overload ? '/'+props.max : ''}&nbsp;</span>\n        </div>\n      </div>\n      <div>&nbsp;</div>\n    </div>\n  );\n}\n","import React from 'react';\r\nimport './InventoryList.scss';\r\nexport default function InventoryList(props) {\r\n    \r\nlet className=`inventory-list ${props.className || ''}`\r\nif(!props.inventory) {return null}\r\nlet inventoryItems = props.inventory.map(item => {\r\n    return (\r\n        <div onClick={() => props.onClick(item.name || item)} key={item.name} className=\"inventory-list__item\">\r\n            <span>{item.name || item}</span>\r\n        </div>\r\n    )\r\n});\r\n\r\n  return (\r\n    <div className={className}>\r\n      <div className=\"inventory-list__label\">{props.label}:&nbsp;</div>\r\n      <div className=\"inventory-list__container\"\r\n        title={props.title}\r\n      >\r\n       {inventoryItems}\r\n      </div>\r\n      <div>&nbsp;</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport LinearDisplay from './LinearDisplay';\r\nimport InventoryList from './InventoryList';\r\nimport './EntityCard.scss';\r\n\r\nclass EntityCard extends React.Component {\r\n  renderCount = 0\r\n  handleInventoryClick = (itemName) => {\r\n    this.props.onInventoryClick(this.props.entity, itemName);\r\n  } \r\n\r\n  render() {\r\n    // console.log(\"Rendering EntityView. #\", this.renderCount++);\r\n    let { entity } = this.props;\r\n    /*\r\n      FIXME: Below should be separated into several sub-components\r\n      Each sub-component should receive flat data (position, hp, ...)\r\n     */\r\n    let className = \" entity \";\r\n    if(entity.active) {\r\n      className+=\" active \";\r\n    }\r\n\r\n    let { isBreathing, isFriendly } = entity;\r\n    let fof = isFriendly ? ' friendly ' : ' unfriendly ';\r\n    let lifeSigns = isBreathing ? \" ALIVE \" : \" DEAD \";\r\n    className += fof;\r\n    className += lifeSigns;\r\n    return (\r\n\r\n      <div className={className}>\r\n        <div>\r\n          <div className=\"position\" title=\"Position\">\r\n            <span> {entity.position.x} {entity.position.y} </span>\r\n          </div>\r\n\r\n          <div className=\"portrait\">\r\n            {entity.icon}\r\n          </div>\r\n        </div>\r\n        <strong title=\"Name\">{entity.name}</strong>\r\n        <br />\r\n        {` `}{lifeSigns}\r\n        <br />\r\n\r\n        <div style={{\r\n          clear: \"both\",\r\n          display: \"inline-block\",\r\n          textAlign: \"right\",\r\n        }}>\r\n          <LinearDisplay label=\"HP\" current={entity.hp} max={entity.maxHp} /><br/>\r\n          <LinearDisplay label=\"Rounds\" current={entity.rounds} max={entity.maxRounds} />\r\n        </div>\r\n        <div>\r\n          inHands: {entity.equipment && entity.equipment.hands && entity.equipment.hands.name || entity.equipment && entity.equipment.hands }\r\n        </div>\r\n        <InventoryList label=\"Inventory\" title=\"Inny niż dupa\" onClick={this.handleInventoryClick} inventory={entity.inventory} />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EntityCard;\r\n","import React from 'react';\r\nimport EntityCard from '../EntityCard';\r\nimport './EntitiesList.scss';\r\n\r\nexport default class ListOfEntities extends React.Component {\r\n  renderCounter = 0\r\n  render() {\r\n    // console.log(\"Rendering EntitiesList #\", this.renderCounter++);\r\n    \r\n    let entitiesFriendly =\r\n    this.props.entities.filter(entity=>entity.isFriendly).map(obj => {\r\n      return (\r\n        <EntityCard onInventoryClick={this.props.onInventoryClick} entity={obj} key={obj.name}/>\r\n      )\r\n    });\r\n\r\n    let entitiesUnfriendly =\r\n    this.props.entities.filter(entity=>!entity.isFriendly).map(obj => {\r\n      return (\r\n        <EntityCard entity={obj} key={obj.name}/>\r\n      )\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <h4 className=\"list-of-entities__header\">List of Entities:</h4>\r\n        <div className=\"list-of-entities\">\r\n            {entitiesFriendly}\r\n        </div>\r\n        <div className=\"list-of-entities\">\r\n            {entitiesUnfriendly}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","class Rifle {\r\n  causesBleeding =  2\r\n  type = 'projectile' \r\n};\r\n\r\nclass M16 extends Rifle {\r\n  name = 'M16'\r\n  rounds = 15\r\n  maxRounds = 20\r\n  damage = 1\r\n}\r\n\r\nclass Lazer {\r\n  type = 'lazer'\r\n}\r\n\r\nclass L30 extends Lazer {\r\n  name = 'Assault Lazer Rifle'\r\n  rounds = 3\r\n  maxRounds = 3\r\n  damage = 10\r\n}\r\nclass M40 extends Rifle {\r\n  name = 'M41A Pulse Rifle'\r\n  rounds = 40\r\n  maxRounds = 40\r\n  damage = 1\r\n}\r\n\r\nconst entities = [\r\n  {\r\n    name: \"John Rambo\", age: 40, hp: 95, maxHp: 100,\r\n    icon: \"😠\",\r\n    isBreathing: true,\r\n    isFriendly: true,\r\n    position: {x:8, y:8},\r\n    inventory: [{name:'KA-BAR'}, new M16],\r\n    equipment: {head: 'Red Bandana', hands: null},\r\n    damage: 1, rounds: 10, maxRounds: 15, hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Ellen Replay\", age: 30, hp: 50, maxHp: 65,\r\n    icon: \"👩\",\r\n    isBreathing: true,\r\n    isFriendly: true,\r\n    position: {x:1, y:8},\r\n    inventory: [new M40, {name:'Motion Detector'}],\r\n    equipment: {head: 'Afro'},\r\n    damage: 1, rounds: 10, maxRounds: 10, hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Lazer Blady\", age: 60, hp: 75, maxHp: 100,\r\n    icon: \"🧑🏻\",\r\n    isBreathing: true,\r\n    isFriendly: true,\r\n    position: {x:4, y:8},\r\n    inventory: [new L30],\r\n    equipment: {},\r\n    damage: 10, rounds: 3, maxRounds: 3, hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Octo\", age: 8, hp: 288, maxHp: 300,\r\n    icon: \"🐙\",\r\n    isBreathing: true,\r\n    position: {x:8, y:2},\r\n  },\r\n  {\r\n    name: \"Squid\", age: 5, hp: 55, maxHp: 55,\r\n    icon: \"🦑\",\r\n    isBreathing: true,\r\n    position: {x:5, y:5},\r\n  },\r\n  {\r\n    name: \"Ant\", age: 1, hp: 35, maxHp: 40,\r\n    icon: \"🐜\",\r\n    isBreathing: true,\r\n    position: {x:7, y:6},\r\n  },\r\n  {\r\n    name: \"Spider\", age: 1, hp: 160, maxHp: 150,\r\n    icon: \"🕷️\",\r\n    isBreathing: true,\r\n    position: {x:9, y:3},\r\n    bleedingReductionPerTurn: 1,\r\n  },\r\n  {\r\n    name: \"Mosquito\", age: 1, hp: 12, maxHp: 20,\r\n    icon: \"🦟\",\r\n    isBreathing: true,\r\n    position: {x:2, y:7},\r\n  },\r\n  {\r\n    name: \"Microbe\", age: 1, hp: 1, maxHp: 5,\r\n    icon: \"🦠\",\r\n    isBreathing: true,\r\n    position: {x:3, y:5},\r\n  },\r\n\r\n];\r\n\r\nexport default entities;\r\n","const arenaSize = 10;\r\n\r\nexport function getSquare (squares, x, y) {\r\n  return squares[targetSquareIndex(x, y, arenaSize)];\r\n}\r\n\r\nexport function setSquare(squares, x, y, value) {\r\n  squares[targetSquareIndex(x, y)] = value;\r\n}\r\n\r\nexport function targetSquareIndex(x, y) {\r\n  return y * arenaSize + x;\r\n}\r\n\r\nexport function targetSquarePosition(squareIndex) {\r\n  let x,y;\r\n\ty = Math.floor(squareIndex / arenaSize);\r\n\tx = (squareIndex % arenaSize);\r\n\treturn {x, y};\r\n}\r\n\r\nexport function setEntityWithinASquare(squares, x, y, entity) {\r\n  let target = targetSquareIndex(x, y);\r\n  if(!squares[target]) {\r\n    squares[target] = {};\r\n  }\r\n  squares[target].entity = entity;\r\n}\r\n\r\nexport function addBlood(square, amount) {\r\n  if(!square) {square = {}};\r\n  if(!square.blood) {\r\n    square.blood = amount;\r\n  } else {\r\n    square.blood += amount;\r\n  }\r\n}\r\n","import { getSquare, setEntityWithinASquare } from './ProcessingSquares';\n\nconst arenaSize = 10;\n\nfunction getNumberWithinBoundaries(value, min, max) {\n  if( value < min) value = min;\n  if( value > max) value = max;\n  return value;\n}\n\nfunction getRandomIntInclusive(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function getEntityId(entity) {\n  return entity.name;\n}\n\nexport function findEntityById(entities, id) {\n  let result = entities.filter((entity) => entity.name === id)[0];\n  //console.log(\"found entity:\", result);\n  return result;\n}\n\nexport function moveEntityRandomly(squares, entity) {\n  if(!entity.isBreathing) return;\n  // modifies entity in-place\n  let oldPositionX = entity.position.x;\n  let oldPositionY = entity.position.y;\n\n  entity.position.x = entity.position.x + getRandomIntInclusive(-1,1);\n  entity.position.y = entity.position.y + getRandomIntInclusive(-1,1);\n\n  entity.position.x = getNumberWithinBoundaries(entity.position.x, 0, arenaSize-1);\n  entity.position.y = getNumberWithinBoundaries(entity.position.y, 0, arenaSize-1);\n\n  let newSquare = getSquare(squares, entity.position.x, entity.position.y);\n\n  if (newSquare && newSquare.entity) {\n    entity.position.x = oldPositionX;\n    entity.position.y = oldPositionY;\n  }\n\n  if(\n    oldPositionX !== entity.position.x ||\n    oldPositionY !== entity.position.y\n  ) {\n    setEntityWithinASquare(squares, oldPositionX, oldPositionY, null);\n    setEntityWithinASquare(squares, entity.position.x, entity.position.y, entity);\n  }\n\n  // NO RETURN AS IT'S MODIFIED IN-PLACE return entity;\n  // WHICH IS A BAD HABIT, BUT OH SO COMFY.\n}\n","import React from 'react';\r\nimport Board from '../Board';\r\nimport EntitiesList from '../EntitiesList';\r\nimport EntitiesValues from './EntitiesValues';\r\n\r\nimport * as ProcessingEntities from './ProcessingEntities';\r\nimport * as ProcessingSquares from './ProcessingSquares';\r\n\r\nimport './Game.scss';\r\n\r\nexport default class Game extends React.PureComponent {\r\n  renderCounter = 0\r\n  stepNumber = 0\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Initial value of game state\r\n    this.state = {\r\n      selected: null,\r\n      arenaSize: 10,\r\n      isBoardRotated: false,\r\n      entities: EntitiesValues,\r\n      squares: [],\r\n      autoLoop: true,\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.loop();\r\n  }\r\n\r\n  setSquaresAccordingToEntities() {\r\n    this.setState((previousState)=>{\r\n\r\n      let squares = JSON.parse(JSON.stringify(previousState.squares));\r\n\t\t\tthis.resetGivenFieldOnACollection(squares, 'entity');\r\n      previousState.entities.forEach((entity)=>{\r\n        ProcessingSquares.setEntityWithinASquare(\r\n          squares, entity.position.x, entity.position.y, entity\r\n        );\r\n      });\r\n\r\n      return {squares};\r\n\r\n    });\r\n  }\r\n\r\n\r\n  calculateNextGameState(previousState) {\r\n    let nextState = JSON.parse(JSON.stringify(previousState));\r\n    let { entities, squares, selected } = nextState;\r\n\r\n    this.moveEntities(entities, squares, selected);\r\n\r\n    entities.forEach(entity => {\r\n      // this check should probably occur upon target verification\r\n      if(this.isEntityShootingProperly(entity)) {\r\n        // We are shooting and not targetting ourselves\r\n        this.fireAShot(entities, entity);\r\n      }\r\n\r\n      entity = this.applyEffectsOfBleeding(entity, squares);\r\n      entity = this.stopBreathingForKilledEntities(entity);\r\n\t\t\tthis.markAvailableDestinationsForSelectedEntity(entity, squares)\r\n    });\r\n\t\t\r\n    return nextState;\r\n  }\r\n\tresetGivenFieldOnACollection(collection, fieldName) {\r\n\t\tcollection.forEach(item => item &&\r\n\t\t\t\t\t\t\t\t\t\t\t(item[fieldName] = false));\r\n\t}\r\n\r\n\tmarkAvailableDestinationsForSelectedEntity(entity, squares, ) {\r\n\t\t\r\n\t\tif(entity.active) {\r\n\t\t\tlet {x,y} = entity.position;\r\n\t\t\t\r\n\t\t\tthis.resetGivenFieldOnACollection(squares, 'isAvailableDestination');\r\n\r\n\t\t\tfor(let j = y - 1; j <= y + 1; j++){\r\n\t\t\t\tif( j < 0 || j >= this.state.arenaSize){\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\t\t\t\tfor(let i = x - 1; i <= x + 1; i++){\r\n\t\t\t\t\tif( i < 0 || i >= this.state.arenaSize || (i == x && j == y)){\r\n\t\t\t\t\t\tcontinue \r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet square = ProcessingSquares.getSquare(squares, i, j );\r\n\t\t\t\t\tif(!square) {square={}}\r\n\t\t\t\t\tsquare.isAvailableDestination = true;\r\n\t\t\t\t\tProcessingSquares.setSquare(squares, i, j, square);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n  moveEntities(entities, squares, selected) {\r\n\t\tentities.forEach(\r\n\t\t\tentity => this.moveEntityIntoChosenDestinations(\r\n\t\t\t\tselected, entity\r\n\t\t\t)\r\n\t\t);\r\n    let JR = ProcessingEntities.findEntityById(entities, \"John Rambo\");\r\n    let OP = ProcessingEntities.findEntityById(entities, \"Squid\");\r\n    ProcessingEntities.moveEntityRandomly(squares, JR);\r\n    ProcessingEntities.moveEntityRandomly(squares, OP);\r\n\r\n  }\r\n\tmoveEntityIntoChosenDestinations(selected, entity){\r\n\t\tif(entity.isBreathing && entity.moveDestination) {\r\n\t\t\tentity.position = entity.moveDestination;\r\n\t\t\tselected.position = entity.position;\r\n\t\t\tdelete entity.moveDestination;\r\n\t\t}\r\n\t}\r\n\r\n  stopBreathingForKilledEntities(entity) {\r\n    if(entity && entity.hp <= 0){\r\n      entity.isBreathing = false;\r\n      entity.hp = 0;\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  applyEffectsOfBleeding(entity, squares) {\r\n    if(entity.bleeding && entity.hp > 0) {\r\n      entity.hp -= entity.bleeding ;\r\n      let square = ProcessingSquares.getSquare(squares, entity.position.x, entity.position.y);\r\n      ProcessingSquares.addBlood(square, entity.bleeding);\r\n      entity.bleeding -= entity.bleedingReductionPerTurn || 1;\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  isEntityShootingProperly(entity) {\r\n    return entity.isShooting && entity.targetPosition && (\r\n      entity.targetPosition.x !== entity.position.x ||\r\n      entity.targetPosition.y !== entity.position.y\r\n    );\r\n  }\r\n\r\n  getEntitiesAtGivenPosition(entities, targetPosition) {\r\n    return entities.filter((potentialTargetEntity) => {\r\n      return (\r\n        potentialTargetEntity.position.x === targetPosition.x &&\r\n        potentialTargetEntity.position.y === targetPosition.y\r\n      );\r\n    });\r\n  }\r\n\r\n  applyDamageToTargetEntity(targetEntity, damage) {\r\n    if(damage) {\r\n      targetEntity.hp -= damage;\r\n      targetEntity.bleeding = 5;\r\n    }\r\n  }\r\n\r\n  ceaseFireNextTurnIfTargetIsKilled(entity, targetEntity) {\r\n    if(targetEntity.hp < 0) {\r\n      //entity.isShooting = false;\r\n      entity.ceaseFire = true;\r\n    }\r\n  }\r\n\r\n  checkAmmoAndCalculateDamageApplied(entity) {\r\n    let damageApplied = 0;\r\n    if(entity.rounds !== \"empty\" && entity.rounds > 0) {// if we still have ammo\r\n      entity.rounds--;\r\n      damageApplied = entity.damage;\r\n    }\r\n    if(entity.rounds === 0) {\r\n      entity.rounds = \"empty\";\r\n    } else if(entity.rounds === \"empty\") {\r\n      // when ordered to shoot with \"empty\" magazine state, load ammo instead\r\n      entity.rounds = entity.maxRounds;\r\n      entity.isShooting = false;\r\n      entity.damageApplied = 0;\r\n    }\r\n    return damageApplied;\r\n  }\r\n\r\n  fireAShot(entities, entity) {\r\n    if(entity.ceaseFire) {\r\n      entity.isShooting = false;\r\n      entity.ceaseFire = false;\r\n      return;\r\n    }\r\n    let damageApplied = this.checkAmmoAndCalculateDamageApplied(entity);\r\n    let targetEntities =\r\n      this.getEntitiesAtGivenPosition(entities, entity.targetPosition);\r\n    targetEntities.forEach((targetEntity) => {\r\n      this.applyDamageToTargetEntity(targetEntity, damageApplied);\r\n      this.ceaseFireNextTurnIfTargetIsKilled(entity, targetEntity);\r\n    });\r\n  }\r\n\r\n  processEntities() {\r\n    this.setState(\r\n      prevState => this.calculateNextGameState(prevState),\r\n      () => this.setSquaresAccordingToEntities()\r\n    );\r\n  }\r\n\r\n  loop = () => {\r\n    this.stepNumber++;\r\n\r\n    this.processEntities();\r\n\r\n    if(this.state.autoLoop) {\r\n      setTimeout(this.loop, 1000);\r\n    }\r\n  }\r\n\r\n  nextTurn = () => {\r\n    this.setState({autoLoop: false});\r\n    this.loop();\r\n  }\r\n\r\n  setSelected(entities, selected, value) {\r\n    let selectedInEntities = ProcessingEntities.findEntityById(\r\n      entities,\r\n      ProcessingEntities.getEntityId(selected)\r\n    );\r\n    if(value) {\r\n      selected.active = value;\r\n    } else {\r\n      selected = null;\r\n      console.log(\"Nullified:\", selected);\r\n    }\r\n    selectedInEntities.active = value;\r\n    return selected;\r\n  }\r\n\r\n  handleBoardClick = (i) => {\r\n    //console.log(\"CLICKED \", i);\r\n\r\n    const deselectAllEntities = (entities) => {\r\n      entities.forEach((entity) => { entity.active = false; });\r\n    };\r\n\r\n\r\n    /* this should contain mostly function calls */\r\n\r\n\r\n    this.setState((previousState) => {\r\n      let localCopyOfPreviousState = JSON.parse(JSON.stringify(previousState));\r\n      let { entities, squares, selected } = localCopyOfPreviousState;\r\n\t\t\t\r\n      if(squares[i] && squares[i].entity) {// clicked an entity\r\n        if(selected && !squares[i].entity.isFriendly) {\r\n          // that is hostile, while we already have one selected\r\n          if(selected.name === previousState.squares[i].entity.name) {\r\n            // second click on a hostile entity deselects it\r\n            selected = this.setSelected(entities, selected, false);\r\n            console.log(selected);\r\n          } else {// clicked a non-selected hostile entity - attack\r\n            let selectedEntity = ProcessingEntities.findEntityById(\r\n              entities,\r\n              ProcessingEntities.getEntityId(selected)\r\n            );\r\n            selectedEntity.targetPosition =\r\n              previousState.squares[i].entity.position;\r\n\r\n            selectedEntity.isShooting = true;\r\n          }\r\n\r\n        } else {// clicked entity is friendly - select it\r\n          deselectAllEntities(entities);\r\n          selected = squares[i].entity;\r\n          this.setSelected(entities, selected, true);\r\n\t\t\t\t\tthis.resetGivenFieldOnACollection(squares, 'isChosenDestination');\r\n        }\r\n\r\n      } else {// clicked an empty square\r\n        /* Deselecting and stopping fire on all entities */\r\n\t\t\t\tif(squares[i] && squares[i].isAvailableDestination) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet position = ProcessingSquares.targetSquarePosition(i);\r\n\t\t\t\t\tlet entitiesAtGivenPosition = this.getEntitiesAtGivenPosition(entities, selected.position);\r\n\t\t\t\t\tlet entity = entitiesAtGivenPosition[0];\r\n\t\t\t\t\tentity && (entity.moveDestination = position);\r\n\t\t\t\t\tthis.resetGivenFieldOnACollection(squares, 'isChosenDestination');\r\n\t\t\t\t\tsquares[i].isChosenDestination = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.resetGivenFieldOnACollection(entities, 'active');\r\n\t\t\t\t\tthis.resetGivenFieldOnACollection(entities, 'isShooting');\r\n\t\t\t\t\t\r\n\t\t\t\t\tselected = null;\r\n\t\t\t\t\tthis.resetGivenFieldOnACollection(squares, 'isChosenDestination');\r\n\t\t\t\t\tthis.resetGivenFieldOnACollection(squares, 'isAvailableDestination');\r\n\t\t\t\t} \r\n      }\r\n\r\n      return {entities, squares, selected}\r\n    }, ()=> {\r\n      this.processEntities();\r\n    });\r\n\r\n  }\r\n\r\n  nuke = (dmg) => {\r\n    //console.log(\"Nuking\")\r\n    this.setState( (state) => {\r\n      let localCopyOfEntities = JSON.parse(JSON.stringify(state.entities));\r\n      localCopyOfEntities.forEach(entity => {\r\n        entity.hp = entity.hp - dmg;\r\n      });\r\n      return {entities: localCopyOfEntities}\r\n    }, () => {\r\n      this.processEntities();\r\n    });\r\n  }\r\n\r\n  toggleRotateBoard = () => {\r\n    this.setState({isBoardRotated: !this.state.isBoardRotated});\r\n  }\r\n\r\n  switchAutoLoop = () => {\r\n    this.setState((previousState) => {\r\n      return {autoLoop: !previousState.autoLoop};\r\n    },()=>{\r\n      if(this.state.autoLoop) {\r\n        this.loop();\r\n      }\r\n    });\r\n  }\r\n\r\n  onInventoryClick = (entity, itemName) => {\r\n    this.setState((prevState) => {\r\n      let nextState = JSON.parse(JSON.stringify(prevState));\r\n      let {entities} = nextState;\r\n\r\n      let entityId = ProcessingEntities.getEntityId(entity);\r\n      let actualEntity = ProcessingEntities.findEntityById(entities, entityId);\r\n      let actualItem = ProcessingEntities.findEntityById(actualEntity.inventory, itemName);\r\n\r\n      actualEntity.equipment.hands = actualItem;\r\n\r\n      return nextState\r\n    });\r\n\r\n    console.log(entity, itemName);\r\n  }\r\n\r\n  render() {\r\n    let boardClassName = this.state.isBoardRotated ? \"rotated-board\" : \"\";\r\n    //console.log(\"Rendering Game. #\", this.renderCounter++);\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={this.state.squares}\r\n            onClick={(i) => this.handleBoardClick(i)}\r\n            size={this.state.arenaSize}\r\n            className={boardClassName}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"game-info\">\r\n\r\n          <span className=\"selected\">Selected: {this.state.selected && this.state.selected.name}</span>\r\n          <button\r\n            onClick={\r\n              ()=>{\r\n                this.nuke(40);\r\n              }\r\n            }\r\n            className=\"button button-nuke\"\r\n          >Nuke All</button>\r\n          <button onClick={this.toggleRotateBoard} className=\"button\">Rotate Board</button>\r\n          <button onClick={this.nextTurn} className=\"button\">Next Step</button>\r\n          <span className=\"step-counter\">Turn: {this.stepNumber}</span>\r\n          <label className=\"auto-cycle button\">\r\n            <input type=\"checkbox\" checked={this.state.autoLoop ? 'checked' : ''} onChange={this.switchAutoLoop}/>\r\n            <span>Auto Cycle</span>\r\n          </label>\r\n          <ul>\r\n            <li>Click Ellen Replay on the board, to select her.</li>\r\n            <li>Click a target to shoot it.</li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"game-list\">\r\n          <EntitiesList\r\n            entities={this.state.entities}\r\n            onInventoryClick= {this.onInventoryClick}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\nimport { render } from 'react-dom';\nimport Game from './components/Game';\n\nimport './style.scss';\n\nrender(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}