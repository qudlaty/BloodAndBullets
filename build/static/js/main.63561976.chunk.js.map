{"version":3,"sources":["components/Game/Game.module.scss","components/Board/Board.module.scss","helpers/Helpers.ts","services/EntitiesService/EntityFeatures.ts","services/EntitiesService/EntityClass.ts","services/SquaresService/SquareClass.ts","services/SquaresService/SquaresService.ts","services/EntitiesService/EntitiesService.ts","services/ItemService/ItemClasses.ts","services/MessageService/MessageService.ts","resources/ItemDefinitions.ts","resources/CharacterDefinitions.ts","services/GameModelService/GameModelService.ts","services/GameLogicService/GameLogicService.ts","services/GameActionsService/GameActionsService.tsx","components/Square/Blood.tsx","components/Square/Items.tsx","components/Square/Square.tsx","components/HpBar/HpBar.tsx","components/ShootingVisualization/ShootingVisualization.tsx","components/EntityPawn/EntityPawn.tsx","components/Board/Board.tsx","components/LinearDisplay/LinearDisplay.tsx","components/InventoryItem/InventoryItem.tsx","components/InventoryList/InventoryList.tsx","components/EntityCard/EntityCard.tsx","resources/StructureDefinitions.ts","components/Game/TargetedSquareInfo.tsx","components/Game/SelectedEntityInfo.tsx","components/MessageBox/MessageBox.tsx","components/Game/Game.tsx","components/HudPanel/HudPanel.tsx","components/EntitiesList/EntitiesList.tsx","components/Grid/Cell.tsx","components/Grid/Grid.tsx","components/Controls/Controls.tsx","screens/BlastZone/BlastZone.tsx","App.tsx","index.js"],"names":["module","exports","resetGivenFieldsOnACollection","collection","fieldNames","forEach","item","fieldName","undefined","getNumberWithinBoundaries","value","min","max","getRandomIntInclusive","Math","floor","random","calculateAngle","x","y","angle","atan","PI","calculateDistance","sqrt","pow","isSelectedTargeted","selected","targeted","entity","name","turnFlagsIntoClasses","flags","classNameBase","flagsToClassess","active","isAvailableDestination","isChosenDestination","isBreathing","isDead","isShooting","isTargeted","isLit","isInTwilightZone","className","Object","keys","key","getCssClassesForAGivenSquare","square","squareClassName","squareType","derivedCtor","Identifiable","icon","Positionable","position","SquaresService","getSquare","this","Movable","moveDestination","squareIndex","setMoveDestinationPosition","targetSquarePosition","targetPosition","targetSquare","Helpers","squares","MessageService","send","Mortal","hp","maxHp","Bleedable","bleeding","bleedingReductionPerTurn","bloodReleased","isAlive","bleed","addBlood","Breathing","isSupposedToBeBreathing","Combative","ceaseFire","hasWeapon","targetedSquarePosition","HavingInventory","inventory","itemName","actualItemIndex","findIndex","splice","push","Entity","isFriendly","props","assign","equipment","unEquipFromHands","takeFromInventory","hands","Weapon","baseCtor","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","Square","addToInventory","arenaSize","i","initializeSquareIfEmpty","targetSquareIndex","setEntityWithinASquare","amount","blood","j","setSquare","EntitiesService","entities","id","filter","oldPositionX","oldPositionY","newSquare","potentialTargetEntity","selectedInEntities","findEntityById","getEntityId","console","log","damageApplied","weapon","isAbleToFire","fire","rounds","checkAmmoAndCalculateDamageApplied","getEntitiesAtGivenPosition","targetEntity","applyDamageToTargetEntity","ceaseFireNextTickIfTargetIsKilled","damage","chosenDestinationSquare","moveEntityIntoChosenDestination","moveEntityRandomly","causesBleeding","range","RangedWeapon","maxRounds","Rifle","type","Lazer","messages","message","M16","M40","L30","characterDefinitions","age","map","entry","GameModel","saveMap","squaresProcessedForSave","JSON","parse","stringify","squaresStringified","result","window","prompt","localStorage","loadMap","mapNames","squaresLoaded","loadMapIntoBoard","index","sourceSquare","loadEntities","loadBuiltInMap","tutorial_map_00","loadPredefinedEntitities","GameLogic","model","run","calculateNextInterfaceState","previousState","nextState","markAvailableDestinationsForSelectedEntity","syncSquaresWithEntities","array","concat","length","setEntityWithinApropriateSquare","deselectAllEntities","moveEntities","isEntityShootingProperly","fireAShot","bleedExternally","stopBreathingForKilledEntity","enemiesAlive","calculateNumberOfAliveEnemies","amountOfAliveEnemies","component","GameActionsClass","that","toggleEditorMode","state","isEditorOn","setState","prevState","loop","stepNumber","drawAggro","processEntities","autoLoop","setTimeout","nextTick","handleClickV2","selectedSquareNumber","targetedSquareNumber","previousTargeted","doubleClick","markSquareAsTargeted","setMoveDestinationSquare","selectEntityFromGivenSquare","attackPosition","processInterface","aggro","actor","entitiesToAttack","findEntitiesThatAreClose","firstAmongThem","nuke","dmg","toggleRotateBoard","isBoardRotated","switchAutoLoop","onInventoryClick","entityId","actualEntity","equipInHands","handleDeselectAllEntities","calculateNextGameState","setSquaresAccordingToEntities","newlyFoundEntities","Blood","bloodAmount","bloodNumbers","style","left","top","background","toFixed","React","PureComponent","Items","itemsIcons","items","itemsNumber","SquareComponent","onClick","squareId","classPrefix","cuboidFaces","cuboid","HpBar","percentage","current","progressStyle","width","backgroundColor","color","Component","ShootingVisualization","calcNewAangle","targetCoords","projectileNumber","projectiles","localId","customStyle","distanceToTargetXInUnits","distanceToTargetYInUnits","actualDistanceInUnits","weaponType","projectile","EntityPawn","randomTime","classessFromFlags","fof","zIndex","animationBreathing","boardPadding","animation","Board","handleClick","EntityPawns","BoardSquares","colId","cellId","rowId","Array","size","fill","row","number","cells","cell","renderSquare","styles","board","isRotated","LinearDisplay","overload","title","divider","progressGridStyle","backgroundSize","backgroundImage","label","InventoryItem","reloadButton","dropButton","ammoCounter","onDrop","reload","onReload","InventoryList","inventoryItems","EntityCard","renderCount","handleInventoryClick","addItem","inHands","inHandsArray","clear","display","textAlign","structures","box","redBarrel","TargetedSquareInfo","boxSerialNumber","onItemClick","squareNumber","targetedSquare","structureType","newStructure","entityInfo","distanceInfo","positionInfo","bloodInfo","availableActions","editorButtons","onAddStructureClick","GameStyles","button","distanceToSelected","onMoveClick","onAttackClick","targeted__label","SelectedEntityInfo","selected__label","MessageBox","messageNumber","renderMessage","RenderedMessages","requestAnimationFrame","element","document","getElementById","scrollTop","scrollHeight","scrollElement","GameActions","Game","renderCounter","squareSize","game","status","game__board","fontSize","game__info","actions","zoomIn","zoomOut","checked","onChange","HudPanel","children","Cell","Grid","gridReference","scroll","mapdrag","stateDriven","createRef","deltaX","deltaY","executeScroll","rows","height","sourceY","startAt","currentRow","sourceX","currentCell","ref","onMouseDown","e","onMouseUp","onMouseMove","handleMove","onContextMenu","preventDefault","onDrag","onMouseDrag","scrollRelativeXY","movementX","movementY","event","target","onChangeScrollX","onChangeScrollY","switchStateDriven","renderGrid","Controls","w","s","a","d","addEventListener","onKeyDown","onKeyUp","keyCode","onKeyPress","BlastZone","gridX","gridY","controls","onControlPress","statusIndicators","App","scenes","SelectedScene","loadedScene","handleChange","bind","sceneToLoad","render"],"mappings":"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","file":"static/js/main.63561976.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"Game_game__229bL\",\"game__board\":\"Game_game__board__1KMto\",\"game__info\":\"Game_game__info__3kjt8\",\"game__list\":\"Game_game__list__yMHF0\",\"status\":\"Game_status__21KP9\",\"button\":\"Game_button__1_Ze4\",\"button-nuke\":\"Game_button-nuke__xGjPs\",\"actions\":\"Game_actions__2-VcJ\",\"interaction-container\":\"Game_interaction-container__3RZ7s\",\"selected\":\"Game_selected__ZRNAo\",\"targeted\":\"Game_targeted__3gJqr\",\"selected__label\":\"Game_selected__label__2d30g\",\"targeted__label\":\"Game_targeted__label__328kg\",\"step-counter\":\"Game_step-counter__hrmzE\",\"auto-cycle\":\"Game_auto-cycle__1cp6W\",\"kbd-navigation\":\"Game_kbd-navigation__10pCT\",\"square\":\"Game_square__3r5qO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__1AthT\",\"board__row\":\"Board_board__row__1piKV\",\"board--rotated\":\"Board_board--rotated__be1H9\"};","import { Entity } from \"../services/EntitiesService\";\nimport { Square } from \"../services/SquaresService\";\n\n/** @description\n * Takes a collection and a list of strings describing object keys.\n * Sets all given fields on a collection to `undefined`\n */\nexport function resetGivenFieldsOnACollection(collection, ...fieldNames) {\n  collection.forEach((item) => {\n    fieldNames.forEach((fieldName) => {\n      item && (item[fieldName] = undefined);\n    });\n  });\n}\n\n/** @description Takes a number and fits it within given boundaries, then returns it */\nexport function getNumberWithinBoundaries(value: number, min: number, max: number): number {\n  if (value < min) value = min;\n  if (value > max) value = max;\n  return value;\n}\n\n/** @description Returns a random integer between min and max */\nexport function getRandomIntInclusive(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/** @description Returns angle (in degrees) of a given vector */\nexport function calculateAngle(x: number, y: number): number {\n  let angle: number;\n  if (y >= 0) {\n    angle = -Math.atan(x / y) * (180 / Math.PI);\n  } else if (y < 0) {\n    angle = (180 / Math.PI) * (Math.atan(x / -y) + Math.PI);\n  }\n  return angle;\n}\n\n/** @description Pitagorean distance between 0,0 and given coords */\nexport function calculateDistance(x: number, y: number): number {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n}\n\n/** @description Mixing classess together */\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  // see https://www.typescriptlang.org/docs/handbook/mixins.html\n  baseCtors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));\n    });\n  });\n}\n\n/** @description Checking if selected entity is on a targeted square */\nexport function isSelectedTargeted(selected: Entity, targeted: Square): boolean {\n  if (selected && targeted && targeted.entity && selected.name === targeted.entity.name) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * @description\n * Adding classess apropriate to the flags passed in by props\n * @param classNameBase - if given, it is added in front of the classname with \"--\"\n * Eg: classNameBase--class-from-flag\n */\nexport function turnFlagsIntoClasses(flags: object, classNameBase?: string) {\n  if(!flags) return '';\n  const flagsToClassess = {\n    active: \"active\",\n    isAvailableDestination: \"is-available-destination\",\n    isChosenDestination: \"is-chosen-destination\",\n    isBreathing: \"breathing\",\n    isDead: \"dead\",\n    isShooting: \"shooting\",\n    isTargeted: \"targeted\",\n    isLit: \"is-lit\",\n    isInTwilightZone: \"is-in-twilight-zone\",\n  };\n\n  let className = \"\";\n\n  if (classNameBase) {\n    classNameBase += \"--\";\n  } else {\n    classNameBase = \"\";\n  }\n\n  Object.keys(flagsToClassess).forEach((key) => {\n    if (flags[key]) {\n      className += ` ${classNameBase}${flagsToClassess[key]}`;\n    }\n  });\n  return className;\n}\n\n/**\n * @description\n * Creates a new array containing all the elements from a given array\n * @param array array to shallow-copy\n * @yields a new copy of the array\n */\nexport function newCopyOfArray(array: any[]) {\n  return [].concat(array);\n}\n\n/**\n * @description\n * Returns a string with set of CSS classes\n * based on the flags found in the given square.\n * @param square a square to style\n * @yields string with all classess applicable for the given square\n */\nexport function getCssClassesForAGivenSquare(square: Square): string {\n  if(!square) return;\n  let squareClassNameBase = \"square\";\n  let squareClassName = `${squareClassNameBase} ${square && square.squareType}`;\n  squareClassName += turnFlagsIntoClasses(square, squareClassNameBase);\n  if (square.entity) {\n    squareClassName += turnFlagsIntoClasses(square.entity, squareClassNameBase);\n  }\n  return squareClassName;\n}\n","import { Item, Weapon, Square } from \"..\";\nimport { SquaresService, MessageService } from \"..\";\nimport * as Helpers from \"../../helpers\";\n\n/** Position on a grid */\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport class Identifiable {\n  name: string = \"An Entity\";\n  icon: string = \"E\";\n}\n\nexport class Positionable {\n  position: Position = { x: undefined, y: undefined };\n\n  get square(): Square {\n    let square = SquaresService.getSquare(this.position.x, this.position.y);\n    return square;\n  }\n}\n\nexport class Movable extends Identifiable {\n  moveDestination: Position;\n\n  setMoveDestinationSquare(squareIndex: number) {\n    this.setMoveDestinationPosition(SquaresService.targetSquarePosition(squareIndex));\n  }\n\n  setMoveDestinationPosition(targetPosition: Position) {\n    let targetSquare = SquaresService.getSquare(targetPosition.x, targetPosition.y);\n    if (!targetSquare.entity || targetSquare.entity.isDead) {\n      this.moveDestination = targetPosition;\n      Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\");\n      targetSquare.isChosenDestination = true;\n    } else {\n      MessageService.send(`${this.name} can't move into square (${targetPosition.x}, ${targetPosition.y})`);\n    }\n  }\n}\n\nexport class Mortal extends Positionable {\n  hp: number = 100;\n  maxHp: number = 100;\n  get isDead(): boolean {\n    return this.hp <= 0;\n  }\n  get isAlive(): boolean {\n    return this.hp > 0;\n  }\n}\n\nexport class Bleedable extends Mortal {\n  bleeding: number;\n  bleedingReductionPerTurn: number = 1;\n  bleed(): number {\n    let entity = this;\n    let bloodReleased = 0;\n    if (entity.bleeding && entity.isAlive) {\n      bloodReleased = entity.bleeding;\n      entity.hp -= bloodReleased;\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n    }\n    return bloodReleased;\n  }\n\n  bleedExternally() {\n    if (!this.bleeding) return;\n    let entity = this;\n    let bloodReleased = this.bleed();\n    let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\n    SquaresService.addBlood(square, bloodReleased);\n  }\n}\n\nexport class Breathing extends Mortal {\n  isSupposedToBeBreathing: boolean = undefined;\n  get isBreathing(): boolean {\n    return this.isAlive && this.isSupposedToBeBreathing;\n  }\n  set isBreathing(value: boolean) {\n    this.isSupposedToBeBreathing = value;\n  }\n}\n\nexport class Combative extends Identifiable {\n  targetPosition: Position;\n  isShooting?: boolean;\n  ceaseFire?: boolean;\n  hasWeapon?: boolean;\n  attackPosition(targetedSquarePosition: Position) {\n    if (this.hasWeapon) {\n      this.targetPosition = targetedSquarePosition;\n      this.isShooting = true;\n    } else {\n      MessageService.send(`${this.name} can't shoot - no weapon equipped`);\n    }\n  }\n}\n\nexport class HavingInventory {\n  inventory: Item[];\n  takeFromInventory(itemName: string): Item {\n    let actualItemIndex = this.inventory.findIndex((item) => item.name === itemName);\n    let actualItem = this.inventory.splice(actualItemIndex, 1)[0];\n\n    return actualItem;\n  }\n  addToInventory(item: Item) {\n    if (!this.inventory) {\n      this.inventory = [];\n    }\n    this.inventory.push(item);\n  }\n}\n\nexport class HavingEquipment extends HavingInventory {\n  equipment: any;\n  hasWeapon?: boolean;\n\n  equipInHands(itemName: string) {\n    this.unEquipFromHands();\n    let item = this.takeFromInventory(itemName);\n    this.equipment.hands = item;\n    if (item instanceof Weapon) {\n      this.hasWeapon = true;\n    } else {\n      this.hasWeapon = false;\n    }\n  }\n\n  unEquipFromHands() {\n    if (this.equipment.hands) {\n      this.inventory.push(this.equipment.hands);\n      this.equipment.hands = null;\n      this.hasWeapon = false;\n    }\n  }\n}\n","import { applyMixins } from \"../../helpers\";\nimport {\n  Identifiable,\n  Positionable,\n  Mortal,\n  Bleedable,\n  Movable,\n  Breathing,\n  Combative,\n  HavingInventory,\n  HavingEquipment,\n} from \".\";\n\nexport class Entity {\n  // Extended by mixins below\n  constructor(...props) {\n    Object.assign(this, ...props);\n  }\n  isFriendly?: boolean;\n  active?: boolean;\n}\n\n/************************************************************/\n/* Always update both lists */\n\nexport interface Entity\n  extends Identifiable,\n    Positionable,\n    Mortal,\n    Bleedable,\n    Movable,\n    Breathing,\n    Combative,\n    HavingInventory,\n    HavingEquipment {}\napplyMixins(Entity, [\n  Identifiable,\n  Positionable,\n  Mortal,\n  Bleedable,\n  Movable,\n  Breathing,\n  Combative,\n  HavingInventory,\n  HavingEquipment,\n]);\n\n/************************************************************/\n","import { Item } from \"../ItemService\";\nimport { Entity, HavingInventory } from \"../EntitiesService\";\n\nexport interface Square {\n  entity?: Entity;\n  blood?: number;\n  squareType: string;\n  isAvailableDestination?: boolean;\n  isChosenDestination?: boolean;\n  isTargeted?: boolean;\n  isLit?: boolean;\n  isInTwilightZone?: boolean;\n  addItem(item: Item): void;\n}\n\nexport class Square extends HavingInventory implements Square {\n  public squareType: string = \"nothing\";\n  addItem(item: Item) {\n    this.addToInventory(item);\n  }\n  get items() {\n    return this.inventory;\n  }\n}\n","import * as Helpers from \"../../helpers/Helpers\";\nimport { Square } from \"./SquareClass\";\nimport { Entity, Position } from \"../EntitiesService\";\n\nclass SquaresServiceClass {\n  arenaSize: number = 10;\n\n  squares: Square[] = [];\n\n  constructor() {\n    let i = this.arenaSize * this.arenaSize;\n    while (i-- !== 0) {\n      this.initializeSquareIfEmpty(i);\n    }\n  }\n\n  getSquare(x: number, y: number): Square {\n    return this.squares[this.targetSquareIndex(x, y)];\n  }\n\n  setSquare(x: number, y: number, value): void {\n    this.squares[this.targetSquareIndex(x, y)] = value;\n  }\n\n  targetSquareIndex(x: number, y: number): number {\n    return y * this.arenaSize + x;\n  }\n\n  targetSquarePosition(squareIndex: number): Position {\n    let x: number, y: number;\n    y = Math.floor(squareIndex / this.arenaSize);\n    x = squareIndex % this.arenaSize;\n    return { x, y };\n  }\n\n  setEntityWithinApropriateSquare(entity: Entity): void {\n    this.setEntityWithinASquare(entity.position.x, entity.position.y, entity);\n  }\n\n  setEntityWithinASquare(x: number, y: number, entity: Entity) {\n    let squareIndex: number = this.targetSquareIndex(x, y);\n    this.initializeSquareIfEmpty(squareIndex);\n    this.squares[squareIndex].entity = entity;\n  }\n\n  addBlood(square: Square, amount: number) {\n    if (!square.blood) {\n      square.blood = amount;\n    } else {\n      square.blood += amount;\n    }\n  }\n\n  markSquareAsTargeted(squareIndex: number): void {\n    Helpers.resetGivenFieldsOnACollection(this.squares, \"isTargeted\");\n    this.initializeSquareIfEmpty(squareIndex);\n    this.squares[squareIndex].isTargeted = true;\n  }\n\n  initializeSquareIfEmpty(squareIndex: number) {\n    if (!this.squares[squareIndex]) {\n      this.squares[squareIndex] = new Square();\n    }\n  }\n\n  markAvailableDestinationsForSelectedEntity(entity: Entity): void {\n    if (entity.active) {\n      let { x, y } = entity.position;\n\n      Helpers.resetGivenFieldsOnACollection(this.squares, \"isAvailableDestination\");\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize || (i === x && j === y)) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n          if (square.squareType === \"floor\") {\n            square.isAvailableDestination = true;\n          }\n\n          this.setSquare(i, j, square);\n        }\n      }\n    }\n  }\n  lightAllSquares(): void {\n    this.squares.forEach((square) => (square.isLit = true));\n  }\n  castLightsFromFriendlyEntity(entity: Entity): void {\n    if (entity.isFriendly) {\n      let { x, y } = entity.position;\n\n      for (let j = y - 2; j <= y + 2; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 2; i <= x + 2; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n\n          square.isInTwilightZone = true;\n          this.setSquare(i, j, square);\n        }\n      }\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n\n          square.isLit = true;\n          this.setSquare(i, j, square);\n        }\n      }\n    }\n  }\n}\n\nexport const SquaresService = new SquaresServiceClass();\n","import { Entity, Position, HavingInventory } from \".\";\nimport { SquaresService, Square } from \"../SquaresService\";\nimport * as Helpers from \"../../helpers/Helpers\";\nimport { RangedWeapon } from \"../\";\nconst arenaSize: number = 10;\n\nclass EntitiesServiceClass {\n  entities: Entity[];\n  selected: Entity;\n\n  getEntityId(entity: Entity): string {\n    return entity.name;\n  }\n\n  findEntityById(id: string): Entity {\n    let result: Entity = this.entities.filter((entity) => entity.name === id)[0];\n    return result;\n  }\n\n  findItemOnEntity(entity: HavingInventory, id: string) {\n    let result = entity.inventory.filter((item) => item.name === id)[0];\n    return result;\n  }\n\n  moveEntityRandomly(entity: Entity) {\n    if (entity.isDead) return;\n\n    let oldPositionX = entity.position.x;\n    let oldPositionY = entity.position.y;\n\n    entity.position.x = entity.position.x + Helpers.getRandomIntInclusive(-1, 1);\n    entity.position.y = entity.position.y + Helpers.getRandomIntInclusive(-1, 1);\n\n    entity.position.x = Helpers.getNumberWithinBoundaries(entity.position.x, 0, arenaSize - 1);\n    entity.position.y = Helpers.getNumberWithinBoundaries(entity.position.y, 0, arenaSize - 1);\n\n    let newSquare = SquaresService.getSquare(entity.position.x, entity.position.y);\n\n    if ((newSquare && newSquare.entity) || (newSquare && newSquare.squareType !== \"floor\")) {\n      // if square occupiec, reverse the move\n      entity.position.x = oldPositionX;\n      entity.position.y = oldPositionY;\n    }\n  }\n\n  stopBreathingForKilledEntity(entity: Entity): Entity {\n    if (entity && entity.hp <= 0) {\n      entity.isBreathing = false;\n      entity.isShooting = false;\n      entity.hp = 0;\n    }\n    return entity;\n  }\n\n  getEntitiesAtGivenPosition(targetPosition: Position): Entity[] {\n    return this.entities.filter((potentialTargetEntity: Entity): boolean => {\n      return (\n        potentialTargetEntity.position.x === targetPosition.x && potentialTargetEntity.position.y === targetPosition.y\n      );\n    });\n  }\n\n  selectEntityFromGivenSquare(selected: Entity, targeted: Square): Entity {\n    if (selected && targeted && targeted.entity) {\n      selected.active = false;\n    }\n    if (targeted && targeted.entity) {\n      selected = targeted.entity;\n      selected.active = true;\n    }\n\n    return selected;\n  }\n\n  setSelected(selected: Entity, value: boolean): Entity {\n    let selectedInEntities = this.findEntityById(this.getEntityId(selected));\n    if (value) {\n      selected.active = value;\n    } else {\n      selected = null;\n      console.log(\"Nullified:\", selected);\n    }\n    selectedInEntities.active = value;\n    return selected;\n  }\n\n  checkAmmoAndCalculateDamageApplied(entity: Entity): number {\n    let damageApplied: number = 0;\n    let weapon: RangedWeapon = entity.equipment && entity.equipment.hands;\n\n    if (!weapon) return 0;\n\n    if (weapon.isAbleToFire) {\n      damageApplied = weapon.fire();\n    } else {\n      weapon.rounds = \"empty\";\n      entity.isShooting = false;\n    }\n\n    return damageApplied;\n  }\n\n  fireAShot(entity: Entity) {\n    if (entity.ceaseFire) {\n      entity.isShooting = false;\n      entity.ceaseFire = false;\n      return;\n    }\n    let damageApplied = this.checkAmmoAndCalculateDamageApplied(entity);\n    let targetEntities = this.getEntitiesAtGivenPosition(entity.targetPosition);\n    targetEntities.forEach((targetEntity) => {\n      this.applyDamageToTargetEntity(targetEntity, damageApplied);\n      this.ceaseFireNextTickIfTargetIsKilled(entity, targetEntity);\n    });\n  }\n\n  applyDamageToTargetEntity(targetEntity: Entity, damage: number) {\n    if (damage) {\n      targetEntity.hp -= damage;\n      targetEntity.bleeding = 5;\n    }\n  }\n\n  ceaseFireNextTickIfTargetIsKilled(entity: Entity, targetEntity: Entity): void {\n    if (targetEntity.hp < 0) {\n      entity.ceaseFire = true;\n    }\n  }\n\n  isEntityShootingProperly(entity: Entity): boolean {\n    return (\n      entity.isShooting &&\n      entity.targetPosition &&\n      (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\n    );\n  }\n\n  applyEffectsOfBleeding(entity: Entity): Entity {\n    // TODO: move to a \"bleed\" method\n    if (entity.bleeding && entity.hp > 0) {\n      entity.hp -= entity.bleeding;\n      let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\n      SquaresService.addBlood(square, entity.bleeding);\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n    }\n    return entity;\n  }\n\n  moveEntityIntoChosenDestination(entity: Entity): Entity {\n    if (!entity.isDead && entity.moveDestination) {\n      let chosenDestinationSquare: Square = SquaresService.getSquare(\n        entity.moveDestination.x,\n        entity.moveDestination.y\n      );\n\n      entity.position = entity.moveDestination;\n      delete entity.moveDestination;\n      chosenDestinationSquare.isChosenDestination = undefined;\n    }\n    return entity;\n  }\n\n  setMoveDestinationOnASelectedEntity(selected: Entity, targetedSquarePosition: Position): void {\n    selected.moveDestination = targetedSquarePosition;\n  }\n\n  moveEntities(): void {\n    this.entities.forEach((entity) => this.moveEntityIntoChosenDestination(entity));\n    // let OP: Entity = this.findEntityById(\"Squid\");\n    // let OC: Entity = this.findEntityById(\"Octo\");\n    // //this.moveEntityRandomly(JR);\n    // this.moveEntityRandomly(OP);\n    // this.moveEntityRandomly(OC);\n    this.entities.filter(entity => !entity.isFriendly).forEach((entity) => {\n      this.moveEntityRandomly(entity);\n    });\n  }\n}\n\nexport const EntitiesService = new EntitiesServiceClass();\n","export class Item {\n  name: string = \"\";\n}\n\nexport class Weapon extends Item {\n  causesBleeding = 0;\n  range = 0;\n  damage = 0;\n}\n\nexport class RangedWeapon extends Weapon {\n  rounds: number | any = 0;\n  maxRounds = 5;\n\n  fire() {\n    this.rounds--;\n    console.log(\"Firing ranged weapon. Damage: \", this.damage);\n    return this.damage;\n  }\n\n  get isAbleToFire() {\n    return this.rounds > 0;\n  }\n\n  reload() {\n    this.rounds = this.maxRounds;\n  }\n}\n\n// TODO: Should add kinetic/thermal damage\nexport class Rifle extends RangedWeapon {\n  type = \"projectile\";\n  range = 4;\n  damage = 1;\n  causesBleeding = 2;\n}\n\nexport class Lazer extends RangedWeapon {\n  type = \"lazer\";\n  range = 6;\n  damage = 5;\n  causesBleeding = 0;\n}\n","class MessageServiceClass {\r\n  messages: string[] = [];\r\n  send(message: string) {\r\n    this.messages.push(message);\r\n  }\r\n}\r\n\r\nexport const MessageService = new MessageServiceClass();\r\n\r\nexport default MessageService;\r\n","import { Rifle, Lazer } from \"../services\";\n\nexport class M16 extends Rifle {\n  name = \"M16\";\n  rounds = 15;\n  maxRounds = 20;\n  damage = 2;\n}\n\nexport class M40 extends Rifle {\n  name = \"M41A Pulse Rifle\";\n  rounds = 40;\n  maxRounds = 40;\n  damage = 1;\n}\n\nexport class L30 extends Lazer {\n  name = \"Assault Lazer Cannon\";\n  rounds = 30;\n  maxRounds = 30;\n  damage = 3;\n}\n","import { M16, M40, L30 } from \"./ItemDefinitions\";\nimport { Entity } from \"../services\";\n\nexport const entitiesInitialValues = [\n  {\n    name: \"Lazer Blady\",\n    age: 60,\n    hp: 75,\n    maxHp: 100,\n    icon: \"🧑🏻\",\n    isBreathing: true,\n    isFriendly: true,\n    hasWeapon: true,\n    position: { x: 4, y: 8 },\n    inventory: [new M16()],\n    equipment: {hands: new L30()},\n  },\n  {\n    name: \"Robot\",\n    age: 1,\n    hp: 50,\n    maxHp: 50,\n    icon: \"🤖\",\n    isBreathing: false,\n    position: { x: 3, y: 5 },\n    equipment: {hands: new L30()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Octo\",\n    age: 8,\n    hp: 200,\n    maxHp: 200,\n    icon: \"🐙\",\n    isBreathing: true,\n    position: { x: 8, y: 2 },\n    bleedingReductionPerTurn: 0,\n    bleeding: 1,\n    equipment: {hands: new L30()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Squid\",\n    age: 5,\n    hp: 100,\n    maxHp: 100,\n    icon: \"🦑\",\n    isBreathing: true,\n    position: { x: 5, y: 5 },\n    equipment: {hands: new M40()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Ant\",\n    age: 1,\n    hp: 45,\n    maxHp: 50,\n    icon: \"🐜\",\n    isBreathing: true,\n    position: { x: 7, y: 6 },\n    equipment: {hands: new M40()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Henry The Spider\",\n    age: 1,\n    hp: 100,\n    maxHp: 150,\n    icon: \"🕷️\",\n    isBreathing: true,\n    position: { x: 9, y: 3 },\n    bleedingReductionPerTurn: 1,\n    equipment: {hands: new L30()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Mosquito\",\n    age: 1,\n    hp: 12,\n    maxHp: 20,\n    icon: \"🦟\",\n    isBreathing: true,\n    position: { x: 2, y: 7 },\n    equipment: {hands: new M16()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Microbe\",\n    age: 1,\n    hp: 1,\n    maxHp: 5,\n    icon: \"🦠\",\n    isBreathing: true,\n    position: { x: 1, y: 5 },\n    equipment: {hands: new L30()},\n    inventory: [],\n    hasWeapon: true,\n  },\n];\n\nexport const characterDefinitions = entitiesInitialValues.map((entry) => new Entity(entry));\nexport default characterDefinitions;\n","import { SquaresService, Square } from \"../SquaresService\";\nimport { EntitiesService } from \"../EntitiesService\";\nimport tutorial_map_00 from \"../../resources/maps/tutorial_map_00.json\"; // yes, it's a resource named with snake_case\nimport { characterDefinitions } from \"../../resources/CharacterDefinitions\";\nimport { Entity } from \"../EntitiesService\";\n\nclass GameModelClass {\n  entities;\n  squares;\n  selected;\n\n  constructor() {\n    this.entities = EntitiesService.entities;\n    this.squares = SquaresService.squares;\n  }\n\n  saveMap = () => {\n    let squares: Square[] = JSON.parse(JSON.stringify(SquaresService.squares));\n    let squaresProcessedForSave = squares.map((square) => {\n      //let newSquare = { squareType: square.squareType, entity: square.entity };\n\n      return square;\n    });\n    let squaresStringified = JSON.stringify(squaresProcessedForSave);\n    console.log(squaresStringified);\n    let message = \"Enter the name of saved map.\";\n    let mapName = \"map00\";\n\n    let result = window.prompt(message, mapName);\n\n    localStorage[result] = squaresStringified;\n  };\n\n  loadMap = () => {\n    let mapNames = Object.keys(localStorage);\n    let message = `Enter the name of map to load. ${mapNames}`;\n    let mapName = \"map00\";\n    let result = window.prompt(message, mapName);\n    let squaresStringified = localStorage[result];\n\n    console.log(squaresStringified);\n    let squaresLoaded = JSON.parse(squaresStringified);\n    this.loadMapIntoBoard(squaresLoaded);\n  };\n\n  loadMapIntoBoard = (squaresLoaded) => {\n    SquaresService.squares.forEach((square, index) => {\n      let targetSquare = square;\n      let sourceSquare = squaresLoaded[index];\n      targetSquare.squareType = sourceSquare && sourceSquare.squareType || 'floor';\n    });\n  };\n\n  loadEntities = (entities: Entity[]) => {\n    EntitiesService.entities = entities;\n  };\n\n  loadBuiltInMap = () => {\n    this.loadMapIntoBoard(tutorial_map_00);\n  };\n\n  loadPredefinedEntitities = () => {\n    this.loadEntities(characterDefinitions);\n  };\n}\n\nexport const GameModel = new GameModelClass();\n\nexport default GameModel;\n","import { GameModel } from \"../GameModelService\";\nimport { SquaresService, Square } from \"../SquaresService\";\nimport { EntitiesService } from \"../EntitiesService\";\nimport { Entity } from \"../EntitiesService\";\nimport * as Helpers from \"../../helpers\";\n\nimport { GameState } from \"./GameState\";\nclass GameLogicClass {\n  model;\n\n  constructor() {\n    this.model = GameModel;\n  }\n\n  run = () => {\n    console.log(\"Running Game Logic\");\n    console.log(GameModel.entities);\n  };\n\n  calculateNextInterfaceState = (previousState: GameState) => {\n    let nextState = previousState;\n    let { entities, selected } = nextState;\n    entities.forEach((entity) => {\n      if (entity === selected) SquaresService.markAvailableDestinationsForSelectedEntity(selected);\n    });\n\n    return nextState;\n  };\n\n  /**\n   * Calculate WHAT EXACTLY? This should probably go into GameLogic\n   * @param previousState\n   */\n  calculateNextGameState(previousState: GameState) {\n    let nextState: GameState = previousState;\n    let { entities } = nextState;\n\n    EntitiesService.moveEntities();\n    //Helpers.resetGivenFieldsOnACollection(squares, \"isLit\", \"isInTwilightZone\");\n    //SquaresService.lightAllSquares();\n    entities.forEach((entity) => {\n      if (EntitiesService.isEntityShootingProperly(entity)) {\n        EntitiesService.fireAShot(entity);\n      }\n      entity.bleedExternally();\n\n      EntitiesService.stopBreathingForKilledEntity(entity);\n\n      SquaresService.markAvailableDestinationsForSelectedEntity(entity);\n      // SquaresService.castLightsFromFriendlyEntity(entity);\n    });\n\n    nextState.enemiesAlive = this.calculateNumberOfAliveEnemies(entities);\n    console.log(nextState.enemiesAlive);\n    return nextState;\n  }\n\n  calculateNumberOfAliveEnemies(entities: Entity[]):number {\n    let amountOfAliveEnemies = 0;\n    entities.forEach((entity) => {\n      if(entity.isFriendly) {\n        return;\n      } else if(entity.hp > 0) {\n        amountOfAliveEnemies++;\n      }\n    });\n\n    return amountOfAliveEnemies;\n  }\n\n  syncSquaresWithEntities = (previousState) => {\n    let squares: Square[] = Helpers.newCopyOfArray(previousState.squares);\n    /*\n    Reattach new squares array to the SquaresService\n    This might actually be not-needed, as elements of that array are objects\n    and are referenced in both arrays, so unless we're adding new squares,\n    everything should work without re-attaching\n    */\n    SquaresService.squares = squares;\n    let entities: Entity[] = previousState.entities;\n    if (entities.length) {\n      Helpers.resetGivenFieldsOnACollection(squares, \"entity\");\n    }\n    entities.forEach((entity) => {\n      SquaresService.setEntityWithinApropriateSquare(entity);\n    });\n\n    return { squares };\n  };\n\n  deselectAllEntities = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"active\");\n    Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\", \"isAvailableDestination\");\n  };\n\n  ceaseFire = () => {\n    Helpers.resetGivenFieldsOnACollection(GameModel.entities, \"isShooting\");\n  };\n}\n\nexport const GameLogic = new GameLogicClass();\nexport default GameLogic;\n","/** This file contains most of the click-handling logic for the Game */\n/* Handling of particular events is delegated to proper services */\n\nimport * as Helpers from \"../../helpers\";\nimport { Entity, EntitiesService, SquaresService, GameLogic, Position } from \"../../services\";\n\nlet component = null;\nexport class GameActionsClass {\n  constructor(that) {\n    component = that;\n  }\n  toggleEditorMode = () => {\n    if (!component.state.isEditorOn) {\n      Helpers.resetGivenFieldsOnACollection(component.state.squares, \"blood\", \"entity\");\n      component.setState((prevState) => {\n        return { entities: [], isEditorOn: true };\n      });\n    } else {\n      component.setState((prevState) => {\n        return { squares: SquaresService.squares, entities: EntitiesService.entities, isEditorOn: false };\n      });\n    }\n  };\n\n  loop = () => {\n    component.stepNumber++;\n    this.drawAggro();\n    this.processEntities();\n    if (component.state.autoLoop) {\n      setTimeout(this.loop, 1000);\n    }\n  };\n\n  processEntities() {\n    component.setState(\n      (prevState) => GameLogic.calculateNextGameState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  processInterface() {\n    component.setState(\n      (prevState) => GameLogic.calculateNextInterfaceState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  /** Sets entities within apropriate squares, based on the value of their `position` field\n   * This might actually be not-needed, if movement of entities is reflected in their respectable squares\n   * Also: entities are no longer rendered within `Square` component\n   */\n  setSquaresAccordingToEntities() {\n    component.setState((prevState) => GameLogic.syncSquaresWithEntities(prevState));\n  }\n\n  nextTick = () => {\n    component.setState({ autoLoop: false });\n    this.loop();\n  };\n\n  handleClickV2 = (squareIndex: number) => {\n    component.setState(\n      (state) => {\n        let { squares, entities, selected, targeted, isEditorOn, targetedSquareNumber: selectedSquareNumber } = state;\n        let previousTargeted = targeted;\n        targeted = squares[squareIndex];\n        selectedSquareNumber = squareIndex;\n        const doubleClick = () => previousTargeted === targeted;\n        SquaresService.markSquareAsTargeted(squareIndex);\n\n        if (isEditorOn) {\n          switch (targeted.squareType) {\n            case \"floor\":\n              targeted.squareType = \"wall\";\n              break;\n            case \"wall\":\n              targeted.squareType = \"nothing\";\n              break;\n            case \"nothing\":\n            default:\n              targeted.squareType = \"floor\";\n          }\n        }\n\n        /** Setting move destination while clicking on empty square */\n        if (doubleClick() && targeted.isAvailableDestination) {\n          selected.setMoveDestinationSquare(squareIndex);\n        }\n\n        /** To be able to deselect */\n        if (doubleClick() || selected) {\n          if (!selected && targeted.entity) {\n            // Selecting\n            selected = EntitiesService.selectEntityFromGivenSquare(selected, targeted);\n            //targeted = undefined;\n          } else if (Helpers.isSelectedTargeted(selected, targeted)) {\n            // Deselecting if not selecting\n            /* // DISABLE DOUBLECLICK DESELECT\n            GameLogic.deselectAllEntities();\n            selected = undefined;\n            // */\n          }\n        }\n\n        // setting attack\n        if (doubleClick() && selected && targeted.entity && selected !== targeted.entity) {\n          selected.attackPosition(SquaresService.targetSquarePosition(squareIndex));\n        }\n\n        return { squares, entities, selected, targeted, targetedSquareNumber: selectedSquareNumber };\n      },\n      () => this.processInterface()\n    );\n  };\n\n  drawAggro() {\n    EntitiesService.entities.forEach((entity)=>{\n      if(entity.isFriendly) return;\n      entity.isShooting = false;\n      this.aggro(entity.name);\n    })\n  }\n\n  aggro = (name) => {\n    let actor = EntitiesService.findEntityById(name);\n    let position = actor.position;\n    let closeEntities = this.findEntitiesThatAreClose(position);\n    let entitiesToAttack = closeEntities.filter(entity => entity.hp > 0);\n    if(entitiesToAttack.length) {\n      let firstAmongThem = entitiesToAttack[0];\n      actor.attackPosition(firstAmongThem.position);\n    }\n  }\n\n  findEntitiesThatAreClose(position: Position){\n    let {x, y} = position;\n    let entities: Entity[] = [];\n    for (let j = y - 1; j <= y + 1; j++) {\n      if (j < 0 || j >= SquaresService.arenaSize) {\n        continue;\n      }\n      for (let i = x - 1; i <= x + 1; i++) {\n        if (i < 0 || i >= SquaresService.arenaSize || (i === x && j === y)) {\n          continue;\n        }\n        let newlyFoundEntities = EntitiesService.getEntitiesAtGivenPosition({x: i, y: j})\n        entities = entities.concat(newlyFoundEntities);\n      }\n    }\n\n    return entities;\n  }\n\n  nuke = (dmg: number) => {\n    component.setState(\n      (state) => {\n        let { entities } = state;\n\n        entities.forEach((entity) => {\n          entity.hp = entity.hp - dmg;\n        });\n\n        return { entities };\n      },\n      () => {\n        this.processEntities();\n      }\n    );\n  };\n\n  toggleRotateBoard = () => {\n    component.setState({ isBoardRotated: !component.state.isBoardRotated });\n  };\n\n  switchAutoLoop = () => {\n    component.setState(\n      (previousState) => {\n        return { autoLoop: !previousState.autoLoop };\n      },\n      () => {\n        if (component.state.autoLoop) {\n          this.loop();\n        }\n      }\n    );\n  };\n\n  onInventoryClick = (entity: Entity, itemName: string) => {\n    component.setState((prevState) => {\n      let entities = [].concat(prevState.entities);\n      EntitiesService.entities = entities;\n      let entityId = EntitiesService.getEntityId(entity);\n      let actualEntity = EntitiesService.findEntityById(entityId);\n      //let actualItem = EntitiesService.findItemOnEntity(actualEntity, itemName);\n\n      if (actualEntity.equipment.hands && actualEntity.equipment.hands.name === itemName) {\n        actualEntity.unEquipFromHands();\n      } else {\n        actualEntity.equipInHands(itemName);\n      }\n\n      return { entities };\n    });\n    console.log(entity, itemName);\n  };\n\n  handleDeselectAllEntities = () => {\n    component.setState(\n      (state) => {\n        let { squares, entities, selected } = state;\n\n        GameLogic.deselectAllEntities();\n        selected = undefined;\n\n        return { squares, entities, selected };\n      },\n      () => {\n        //this.processEntities();\n      }\n    );\n  };\n\n  ceaseFire = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"isShooting\");\n    this.processInterface();\n  };\n}\n","import React from \"react\";\n\ninterface BloodProps {\n  bloodAmount: number; // receives amount of blood ONLY\n}\n\n/**\n * @description\n * Visualises blood by adding red background\n * and a little number in the corner.\n *\n * @param bloodAmount - number representing the amount of blood.\n */\nclass Blood extends React.PureComponent<BloodProps> {\n  render() {\n    console.log('BLOOD', this.props);\n    let { bloodAmount } = this.props;\n\n    let bloodNumbers = [];\n    let i = bloodAmount;\n\n    while(i--) {\n      bloodNumbers.push(\n        <span style={{\n          position: 'absolute',\n          left: `${Math.random() * 90}%`,\n          top: `${Math.random() * 90 -15}%`,\n        }}>o</span>\n      );\n    }\n\n    return (\n      <div\n        className=\"square__blood\"\n        style={{\n          background: `rgba(255, 0, 0, ${(bloodAmount / 50).toFixed(2)})`,\n          position: 'relative'\n        }}\n      >\n        {bloodNumbers}\n        {bloodAmount}\n      </div>\n    );\n  }\n}\n\nexport default Blood;\n","import React from \"react\";\nimport { Entity, Item } from \"../../services\";\n\ninterface ItemsProps {\n  items: Item[];\n  itemsNumber: number; // here to trigger update when list length changes\n}\n// FIXME: I have a strange feeling this doesn't update when contents of items list change but not the number of elements\n/**\n * @description\n * Displays icons of items on the square, as well as little number in the corner.\n * @param itemsNumber - number of items on the square\n * @param items - array of items on the square\n */\nclass Items extends React.PureComponent<ItemsProps> {\n  itemsIcons = [];\n\n  render() {\n    let { items, itemsNumber } = this.props;\n\n    if (!items) return null;\n\n    items.forEach((item) => {\n      let entity = item as Entity;\n      if (entity.icon) {\n        this.itemsIcons.push(<div className=\"square__item-icon\">{entity.icon}</div>);\n      }\n    });\n\n    return (\n      <div className=\"square__items\">\n        <div className=\"square__items-icons\">{this.itemsIcons}</div>\n        <div className=\"square__items-number\">{itemsNumber}</div>\n      </div>\n    );\n  }\n}\n\nexport default Items;\n","import React, { ReactElement } from \"react\";\n// services\nimport { Item } from \"../../services\";\n// components\nimport Blood from \"../Square/Blood\";\nimport Items from \"../Square/Items\";\n// others\nimport \"./Square.scss\";\n\n// TODO: This should really take less props\ninterface SquareProps {\n  squareId: number;\n  className?: string;\n  onClick: (squareIndex: number) => void;\n  blood: number;\n  items: Item[]; // collection of objects\n  itemsNumber: number; // here to trigger update when list length changes\n}\n\n/**\n * @description Displays a square with blood and items on it.\n * @param squareId - unique numerical id\n * @param className - string with CSS clasess\n * @param onClick - callback to call when square is clicked\n * @param blood - amount of blood\n * @param items - array of items\n * @param itemsNumber - numberof items\n */\nclass SquareComponent extends React.PureComponent<SquareProps> {\n  onClick = () => {\n    this.props.onClick(this.props.squareId);\n  };\n\n  render() {\n    // console.log(\"Render Square\", this.props.squareId);\n    // TODO: Extract into separate component\n    function cuboid(classPrefix:string):ReactElement {\n      let i = 6;\n      let cuboidFaces: ReactElement[] = [];\n\n      while(i--){\n        cuboidFaces.push(<div key={i} className={`${classPrefix}__cuboid-face`}></div>);\n      }\n\n      return <div className={`${classPrefix}__cuboid`}>\n        {cuboidFaces}\n      </div>\n    }\n\n    return (\n      <button className={this.props.className} onClick={this.onClick}>\n        <Blood bloodAmount={this.props.blood} />\n        <Items items={this.props.items} itemsNumber={this.props.itemsNumber} />\n        <div className=\"square__content\">&nbsp;</div>\n        {cuboid('square')}\n      </button>\n    );\n  }\n}\n\nexport default SquareComponent;\n","import React from \"react\";\nimport \"./HpBar.scss\";\n\ninterface HpBarProps {\n    current: number;\n    max: number;\n    color: string;\n}\n\nexport class HpBar extends React.Component<HpBarProps> {\n\n    render() {\n        let percentage = ~~((this.props.current * 100) / this.props.max);\n        let progressStyle = {\n            width: `${percentage}%`,\n            backgroundColor: this.props.color\n        };\n        return(\n            <div className=\"hpbar\">\n                <div className=\"hpbar__indicator\" style={progressStyle}>\n\n                </div>\n                <span className=\"hpbar__text\">\n                        {this.props.current}\n                </span>\n            </div>\n        );\n    }\n}","import * as Helpers from \"../../helpers\";\nimport React, { ReactElement } from \"react\";\n\nexport function ShootingVisualization(props): ReactElement {\n  const DISTANCE_BETWEEN_TILES = 54;\n  let { entity } = props;\n\n  let calcNewAangle = Helpers.calculateAngle;\n  let targetCoords = entity.targetPosition;\n  let projectileNumber = 5;\n  let projectiles = [];\n  let localId = `Entity${entity.icon}`;\n  let customStyle = \"\";\n\n  if (\n    targetCoords &&\n    entity.position &&\n    entity.hasWeapon &&\n    entity.isShooting &&\n    (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\n  ) {\n    if (targetCoords) {\n      let distanceToTargetXInUnits = (targetCoords.x - entity.position.x);\n      let distanceToTargetYInUnits = (targetCoords.y - entity.position.y);\n\n      let actualDistanceInUnits = Helpers.calculateDistance(distanceToTargetXInUnits, distanceToTargetYInUnits);\n      let weaponType = entity && entity.equipment && entity.equipment.hands && entity.equipment.hands.type;\n      let angle = calcNewAangle(distanceToTargetXInUnits, distanceToTargetYInUnits);\n\n      if (weaponType === \"lazer\") {\n        // TODO: perhaps call to `visualizeShooting(from,to,weaponType)`\n        let className = `projectile${localId}_beam`;\n        let projectile = \"\";\n        const distanceWhereBeamBegins = 20;//in pixels\n        //actualDistance = actualDistance - distanceWhereBeamBegins;\n        // do above within template\n        customStyle = `\n          @keyframes pulsing${localId} {\n            0%  {opacity: 0.1;}\n            100%  {opacity: 1;}\n          }\n\n          @keyframes elongating${localId} {\n            0%  { width: calc(${actualDistanceInUnits}em + ${actualDistanceInUnits} * 4px - 20px); }\n            100%  {width: calc(${actualDistanceInUnits}em + ${actualDistanceInUnits} * 4px - 20px); }\n          }\n\n          @keyframes swiping${localId} {\n            0%  {transform: rotate(${angle + 90 -1}deg) translateX(${distanceWhereBeamBegins}px);}\n            50%  {transform: rotate(${angle + 90 + 1}deg) translateX(${distanceWhereBeamBegins}px);}\n            100%  {transform: rotate(${angle + 90 - 1}deg) translateX(${distanceWhereBeamBegins}px);}\n          }\n\n          .${className} {\n            width: ${actualDistanceInUnits}em;\n            height: 3px;\n            border-radius: 5px;\n            background: #F00;\n            position: absolute;\n            top: 0.5em;\n            left: 0.5em;\n            transform: rotate(${angle + 90}deg);/* overriden by swiping keyframes */\n            transform-origin: left 0px;\n            animation: pulsing${localId} 0.1s ease infinite,\n            elongating${localId} 0.7s ease alternate infinite,\n            swiping${localId} 1s ease alternate infinite;\n            box-shadow: 0 0 5px 5px white;\n            z-index: 10;\n          }\n          `;\n        projectiles.push(\n          <div key={className} className={className}>\n            {projectile}\n          </div>\n        );\n      } else {\n        customStyle = `\n          @keyframes shooting${localId} {\n            0%   {transform: translate(0,0) rotate(${angle}deg) scaleY(0.3)}\n            100% {transform: translate(\n              ${36 * (targetCoords.x - entity.position.x)}px,\n              ${36 * (targetCoords.y - entity.position.y)}px\n            ) rotate(${angle}deg) scaleY(2)}\n          }\n          `;\n\n        while (projectileNumber--) {\n          customStyle += `\n          .projectile${localId}_${projectileNumber} {\n            transform: rotate(${angle}deg);\n            animation: shooting${localId} 0.8s linear infinite;\n            animation-delay: ${projectileNumber - 1 * 0.3}s;\n          }`;\n        }\n        let projectile = entity.isShooting ? \"|\" : \"\";\n\n        projectileNumber = 3;\n\n        while (projectileNumber--) {\n          let className = `projectile projectile${localId}_${projectileNumber}`;\n          projectiles.push(\n            <div key={className} className={className}>\n              {projectile}\n            </div>\n          );\n        }\n      }\n    }\n  }\n  return (\n    <div className=\"shooting-visualization\">\n      <style>{customStyle}</style>\n      {projectiles}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { SquaresService } from \"../../services\";\nimport { Entity } from \"../../services/EntitiesService\";\nimport { HpBar } from \"../HpBar\";\nimport { ShootingVisualization } from \"../ShootingVisualization\";\nimport * as Helpers from \"../../helpers\";\nimport \"./EntityPawn.scss\";\n\ninterface EntityPawnProps {\n  entity: Entity;\n}\n\nexport default class EntityPawn extends React.Component<EntityPawnProps> {\n  randomTime = `${(Math.random() + 0.5).toFixed(2)}s`;\n\n  render() {\n    let { entity } = this.props;\n    let square = SquaresService.getSquare(entity.position.x, entity.position.y);\n\n    let classNameBase = \"entity-pawn__icon\";\n    let className = `${classNameBase}`;\n    let classessFromFlags = Helpers.turnFlagsIntoClasses(entity, classNameBase);\n    classessFromFlags += Helpers.turnFlagsIntoClasses(square, classNameBase);\n    className += ` ${classessFromFlags} `;\n    let fof = entity.isFriendly ? 'friendly' : 'hostile';\n    let color = entity.isFriendly ? 'green' : 'red';\n    let zIndex = entity.isShooting ? 5 : 1;\n    let animationBreathing = entity.isBreathing ? `breathing ${this.randomTime} alternate infinite linear` : \"none\";\n\n    let boardPadding = 10;\n    let squareMargin = 2;\n    return (\n      <div\n        className=\"entity-pawn\"\n        key={entity.name}\n        style={{\n          left: `calc(${boardPadding + 3}px + ${entity.position.x * squareMargin * 2}px + ${entity.position.x}em)`,\n          top: `calc(${boardPadding + 3}px + ${entity.position.y * squareMargin * 2}px + ${entity.position.y}em)`,\n          zIndex: zIndex,\n        }}\n      >\n        <div\n          className={`entity-pawn__health-display ` + fof}\n        >\n\n          <HpBar\n            current={entity.hp}\n            max={entity.maxHp}\n            color={color}\n          />\n        </div>\n\n        <div\n          className={className}\n          style={{\n            animation: animationBreathing,\n          }}\n        >\n          {entity.icon}\n        </div>\n        <ShootingVisualization entity={entity} />\n      </div>\n    );\n  }\n}\n","import React, { ReactElement } from \"react\";\n\nimport SquareComponent from \"../Square\";\nimport EntityPawnComponent from \"../EntityPawn\";\nimport * as Helpers from \"../../helpers\";\nimport { Entity } from \"../../services/EntitiesService\";\nimport { Square } from \"../../services/SquaresService\";\n\nimport styles from \"./Board.module.scss\";\n\ninterface BoardProps {\n  onClick(i: number): void;\n  squares: Square[]; // updated every tick\n  entities: Entity[]; // updated every tick\n  size: number;\n  isRotated: boolean;\n  style: any;\n}\n/**\n * @description Board component renders Squares and EntityPawns\n */\nexport default class Board extends React.Component<BoardProps> {\n  handleClick = (i: number) => {\n    console.log(\"Handles Click on Board\", i);\n    this.props.onClick(i);\n  };\n\n  renderSquare(i: number, rowId: number, colId: number) {\n    let square = this.props.squares[i];\n\n    return (\n      <SquareComponent // is a pureComponent\n        key={`r${rowId}_c${i}`}\n        squareId={i}\n        className={Helpers.getCssClassesForAGivenSquare(square)}\n        onClick={this.handleClick}\n        blood={square && square.blood} // number\n        items={square && square.items} // list of objects\n        itemsNumber={square && square.items && square.items.length}\n      ></SquareComponent>\n    );\n  }\n\n  EntityPawns = (): ReactElement[] => this.props.entities.map((entity) => <EntityPawnComponent key={entity.name} entity={entity} />);\n\n  BoardSquares = () => {\n    let cellId: number = 0;\n    let rowId: number = 0;\n    let colId: number;\n\n    let rowsOfSquares = Array(this.props.size)\n      .fill(null)\n      .map((row, number) => {\n        colId = 0;\n        let cells = Array(this.props.size)\n          .fill(null)\n          .map((cell, number) => {\n            return this.renderSquare(cellId++, rowId, colId++);\n          });\n        return (\n          <div key={rowId++} className={styles[\"board__row\"]}>\n            {cells}\n          </div>\n        );\n      });\n\n    return rowsOfSquares;\n  }; // Board Squares\n\n  render() {\n    let className: string = styles.board;\n    if (this.props.isRotated) {\n      className += ` ${styles[\"board--rotated\"]} board--rotated`;\n    }\n    return (\n      <div className={className} style={this.props.style}>\n        {this.BoardSquares()}\n        {this.EntityPawns()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./LinearDisplay.scss\";\n\ninterface LinearDisplayProps {\n  className?: string;\n  current: number;\n  max: number;\n  title?: string;\n  label?: string;\n}\n\nexport function LinearDisplay(props: LinearDisplayProps) {\n  let className = `linear-display ${props.className || \"\"}`;\n  let percentage = ~~((props.current * 100) / props.max);\n  let overload = percentage > 100;\n  if (overload) {\n    percentage = 100;\n    className += \" linear-display--overloaded\";\n  }\n\n  let progressStyle = {\n    width: `${percentage}%`,\n  };\n  let title = props.title || `${props.current}/${props.max}`;\n\n  let amount = props.current;\n\n  let divider = 1;\n  if (props.max >= 40 && props.max < 100) {\n    divider = 5;\n  } else if (props.max >= 100) {\n    divider = 10;\n  }\n\n  amount = amount / divider;\n\n  let gridSize = 100 / amount;\n\n  let color = `rgba(200,200,200,0.4)`;\n  color = `black`;\n  let progressGridStyle = {\n    backgroundSize: `${gridSize}% 100%`,\n    backgroundImage: `\n      linear-gradient(to left, ${color} 1px, transparent 1px)\n    `,\n  };\n\n  Object.assign(progressStyle, progressGridStyle);\n\n  return (\n    <div className={className}>\n      <div className=\"linear-display__label\">{props.label}:&nbsp;</div>\n      <div className=\"linear-display__bar-container\" title={title}>\n        <div className=\"linear-display__bar-progress\" style={progressStyle}>\n          <span className=\"linear-display__bar-progress-text\">\n            {props.current}\n            {overload ? \"/\" + props.max : \"\"}&nbsp;\n          </span>\n        </div>\n      </div>\n      <div>&nbsp;</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Item, RangedWeapon } from \"../../services\";\nimport { LinearDisplay } from \"../LinearDisplay\";\n\ninterface InventoryItemProps {\n  item: Item;\n  onDrop(itemName: string);\n  onReload(itemName: string);\n  onClick(itemName: string);\n  processInterface: Function;\n}\n\nexport function InventoryItem(props: InventoryItemProps) {\n  let { item } = props;\n  let reloadButton;\n  let dropButton;\n  let ammoCounter;\n\n  if (props.onDrop) {\n    dropButton = (\n      <button\n        className=\"inventory-list__drop-button\"\n        onClick={() => {\n          props.onDrop(item.name);\n        }}\n      >\n        Drop\n      </button>\n    );\n  }\n\n  if (item instanceof RangedWeapon) {\n    let weapon = item as RangedWeapon;\n\n    if (weapon.reload) {\n      // has reload capability\n      let className = \" inventory-list__reload-button \";\n\n      if (weapon.rounds === 0 || weapon.rounds === \"empty\") {\n        className += \" inventory-list__reload-button--empty \";\n      } else if (weapon.rounds < weapon.maxRounds) {\n        className += \" inventory-list__reload-button--partial \";\n      }\n      reloadButton = (\n        <button\n          className={className}\n          onClick={() => {\n            weapon.reload();\n            props.onReload && props.onReload(item.name);\n            props.processInterface();\n          }}\n        >\n          Reload\n        </button>\n      );\n    } else {\n      reloadButton = null;\n    }\n\n    ammoCounter = weapon.reload ? (\n      <LinearDisplay label=\"Rounds\" current={weapon.rounds} max={weapon.maxRounds} />\n    ) : null;\n  }\n\n  return (\n    <div key={item.name}>\n      <div onClick={() => props.onClick(item.name)} key={item.name} className=\"inventory-list__item\">\n        <span>{item.name}</span>\n        <div>{ammoCounter}</div>\n      </div>\n      {reloadButton}\n      {dropButton}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./InventoryList.scss\";\nimport { Item } from \"../../services\";\nimport { InventoryItem } from \"../InventoryItem\";\n\ninterface InventoryListProps {\n  className?: string;\n  label: string;\n  title: string;\n  onClick(itemName: string);\n  onDrop(itemName: string);\n  onReload(itemName: string);\n  inventory: Item[]; //\n  processInterface: Function;\n}\n\nexport function InventoryList(props: InventoryListProps) {\n  const className = `inventory-list ${props.className || \"\"}`;\n\n  if (!props.inventory) {\n    return null;\n  }\n\n  const inventoryItems = props.inventory.map((item) => (\n    <InventoryItem\n      key={`i${item.name}`}\n      item={item}\n      onClick={props.onClick}\n      onDrop={props.onDrop}\n      onReload={props.onReload}\n      processInterface={props.processInterface}\n    />\n  ));\n\n  return (\n    <div className={className}>\n      <div className=\"inventory-list__label\">\n        {props.label}\n        :&nbsp;\n      </div>\n      <div className=\"inventory-list__items\" title={props.title}>\n        {inventoryItems}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { LinearDisplay } from \"../LinearDisplay\";\nimport { InventoryList } from \"../InventoryList\";\nimport \"./EntityCard.scss\";\nimport { Entity, Item } from \"../../services\";\n\ninterface EntityCardProps {\n  entity: Entity;\n  onInventoryClick?(entity: Entity, itemName: string);\n  processInterface?: Function;\n}\n\nexport class EntityCard extends React.Component<EntityCardProps> {\n  renderCount = 0;\n  handleInventoryClick = (itemName: string): void => {\n    this.props.onInventoryClick(this.props.entity, itemName);\n  };\n\n  onDrop = (itemName: string) => {\n    let { entity } = this.props;\n    if (entity.equipment.hands && entity.equipment.hands.name === itemName) {\n      entity.unEquipFromHands();\n      entity.isShooting = false;\n    }\n    let item: Item = entity.takeFromInventory(itemName);\n    entity.square.addItem(item);\n    this.props.processInterface();\n  };\n\n  onReload = (itemName: string) => {\n    let { entity } = this.props;\n    if (entity.equipment.hands && entity.equipment.hands.name === itemName) {\n      entity.isShooting = false;\n    }\n    this.props.processInterface();\n  };\n\n  render() {\n    let { entity } = this.props;\n    if (!entity) return null;\n    // FIXME: Below should be separated into several sub-components\n    // Each sub-component should receive flat data (position, hp, ...)\n\n    let className = \"entity-card\";\n    if (entity.active) {\n      className += \" entity-card--active\";\n    }\n\n    if (entity.isFriendly) {\n      className += \" entity-card--friendly\";\n    }\n\n    if (entity.isDead) {\n      className += \" entity-card--dead\";\n    }\n\n    let inHands = entity.equipment && entity.equipment.hands;\n    let inHandsArray = inHands && [inHands];\n\n    return (\n      <div className={className}>\n        <div>\n          <div className=\"entity-card__position\" title=\"Position\">\n            <span>\n              {\" \"}\n              {entity.position.x} {entity.position.y}{\" \"}\n            </span>\n          </div>\n\n          <div className=\"entity-card__portrait\">{entity.icon}</div>\n        </div>\n        <strong title=\"Name\">{entity.name}</strong>\n        <br />\n        <div\n          style={{\n            clear: \"both\",\n            display: \"inline-block\",\n            textAlign: \"right\",\n          }}\n        >\n          <LinearDisplay label=\"HP\" current={entity.hp} max={entity.maxHp} />\n          <br />\n        </div>\n        <InventoryList\n          label=\"Equipped\"\n          title=\"In hands\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          onReload={this.onReload}\n          inventory={inHandsArray}\n          processInterface={() => this.props.processInterface()}\n        />\n        <InventoryList\n          label=\"Inventory\"\n          title=\"In backpack\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          onReload={this.onReload}\n          inventory={entity.inventory}\n          processInterface={() => this.props.processInterface()}\n        />\n      </div>\n    );\n  }\n}\n","export const structures = {\r\n  box: {\r\n    name: \"box\",\r\n    icon: \"📦\",\r\n    hp: 50,\r\n    maxHp: 70,\r\n    isBreathing: false,\r\n    position: { x: 4, y: 5 },\r\n  },\r\n  redBarrel: {\r\n    name: \"redBarrel\",\r\n    icon: \"🛢️\",\r\n    hp: 50,\r\n    maxHp: 70,\r\n    isBreathing: false,\r\n    position: { x: 4, y: 5 },\r\n  },\r\n};\r\n","import React from \"react\";\n// services\nimport { SquaresService } from \"../../services\";\nimport { Entity, Square, Position, Item } from \"../../services\";\n// components\nimport { EntityCard } from \"../EntityCard\";\nimport { InventoryList } from \"../InventoryList\";\n// others\nimport { structures } from \"../../resources\";\nimport * as Helpers from \"../../helpers\";\nimport GameStyles from \"./Game.module.scss\";\n\ninterface TargetedSquareInfoProps {\n  className: string;\n  squareNumber: number;\n  squares: Square[];\n  selected: Entity;\n  targeted: Square;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  processInterface: Function;\n}\n\n// TODO: Refactor, does it really need all this logic.\nexport default class TargetedSquareInfo extends React.Component<TargetedSquareInfoProps> {\n  boxSerialNumber: number = 0;\n\n  onItemClick = (itemName: string): void => {\n    let { selected, targeted, squareNumber } = this.props;\n    let targetedSquarePosition = SquaresService.targetSquarePosition(squareNumber);\n    if (selected && targeted &&\n      selected.position.x == targetedSquarePosition.x &&\n      selected.position.y == targetedSquarePosition.y\n      ) {\n      let item = targeted.takeFromInventory(itemName);\n      selected.addToInventory(item);\n    }\n    this.props.processInterface();\n  };\n\n  onMoveClick(selected: Entity, targetedSquarePosition: Position): void {\n    let targetedSquare: Square = SquaresService.getSquare(targetedSquarePosition.x, targetedSquarePosition.y);\n    selected.setMoveDestinationPosition(targetedSquarePosition);\n    targetedSquare.isChosenDestination = true;\n    this.props.processInterface();\n  }\n\n  onAttackClick(selected: Entity, targetedSquarePosition: Position): void {\n    selected.attackPosition(targetedSquarePosition);\n    this.props.processInterface();\n  }\n\n  onAddStructureClick(targetedSquarePosition: Position, structureType: string): void {\n    let box = Object.assign({}, structures[structureType]);\n    let targetPosition = Object.assign({}, targetedSquarePosition);\n    box.position = targetPosition;\n    box.name += this.boxSerialNumber++;\n    let newStructure = new Entity(box);\n    let square = SquaresService.getSquare(targetedSquarePosition.x, targetedSquarePosition.y);\n    square.entity = newStructure;\n    square.addToInventory(newStructure as Item); // TODO: FIXME: Stop forcing types, make a new list for scenery items.\n    //EntitiesService.entities.push(newBox);\n    this.props.processInterface();\n  }\n\n  render() {\n    let { targeted, selected, squareNumber } = this.props;\n\n    if (!targeted) {\n      return null;\n    }\n\n    let targetedSquarePosition = SquaresService.targetSquarePosition(squareNumber);\n\n    let entityInfo;\n    let distanceInfo;\n    let positionInfo;\n    let bloodInfo;\n    let availableActions = [];\n    let items;\n\n    let editorButtons = (\n      <div>\n        <button onClick={() => this.onAddStructureClick(targetedSquarePosition, \"box\")} className={GameStyles.button}>\n          Add box\n        </button>\n        <button\n          onClick={() => this.onAddStructureClick(targetedSquarePosition, \"redBarrel\")}\n          className={GameStyles.button}\n        >\n          Add barrel\n        </button>\n      </div>\n    );\n\n    if (targeted.entity && !Helpers.isSelectedTargeted(selected, targeted)) {\n      entityInfo = (\n        <EntityCard\n          onInventoryClick={this.props.onInventoryClick}\n          entity={targeted.entity}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (targeted.items) {\n      items = (\n        <InventoryList\n          label=\"Items in this location\"\n          title=\"On the floor\"\n          onClick={this.onItemClick}\n          onDrop={null}\n          onReload={null}\n          inventory={targeted.items}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (selected) {\n      let distanceToSelected = Helpers.calculateDistance(\n        targetedSquarePosition.x - selected.position.x,\n        targetedSquarePosition.y - selected.position.y\n      );\n\n      distanceInfo = <li>Distance to selected: {distanceToSelected.toFixed(2)}</li>;\n\n      if (distanceToSelected !== 0) {\n        if (targeted.isAvailableDestination) {\n          availableActions[0] = (\n            <button key=\"move\" onClick={() => this.onMoveClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Move\n            </button>\n          );\n        }\n        if (targeted.entity) {\n          availableActions[1] = (\n            <button key=\"attack\" onClick={() => this.onAttackClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Attack\n            </button>\n          );\n        }\n      }\n    }\n\n    if (targetedSquarePosition) {\n      positionInfo = (\n        <li>\n          Position: [ {targetedSquarePosition.x}, {targetedSquarePosition.y} ]{\" \"}\n        </li>\n      );\n    }\n\n    if (targeted.blood) {\n      bloodInfo = <li>Blood amount: {targeted.blood}</li>;\n    }\n\n    return (\n      <div className={this.props.className}>\n        <strong className={GameStyles.targeted__label}>Target square Info</strong>\n        <div>{entityInfo}</div>\n        <div>{availableActions}</div>\n        <ul>\n          {positionInfo}\n          {distanceInfo}\n          {bloodInfo}\n          {items}\n          {editorButtons}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { ReactElement } from \"react\";\n// services\nimport { Entity } from \"../../services\";\n// components\nimport { EntityCard } from \"../EntityCard\";\n// others\nimport GameStyles from \"./Game.module.scss\";\n\ninterface SelectedEntityInfoProperties {\n  selected: Entity;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  handleDeselectAllEntities: () => void;\n  processInterface: Function;\n}\n\n// TODO: Change this into HOC, as it doesn't really need half of it's props for itself\nexport default class SelectedEntityInfo extends React.Component<SelectedEntityInfoProperties> {\n  render(): ReactElement {\n    if (!this.props.selected) {\n      return null;\n    }\n\n    return (\n      <div className={GameStyles.selected}>\n        <strong className={GameStyles.selected__label}>Selected entity </strong>\n        <div>\n          <EntityCard\n            onInventoryClick={this.props.onInventoryClick}\n            entity={this.props.selected}\n            processInterface={() => this.props.processInterface()}\n          />\n        </div>\n        <button onClick={this.props.handleDeselectAllEntities} className={GameStyles.button}>\n          {\" \"}\n          Deselect\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n// services\nimport \"./MessageBox.scss\";\nimport { MessageService } from \"../../services\";\n\nexport class MessageBox extends React.Component {\n  messages = MessageService.messages;\n  messageNumber;\n\n  shouldComponentUpdate() {\n    // don't update if there are no new messages since last render\n    return this.messages.length !== this.messageNumber;\n  }\n\n  renderMessage = (message: string, number: number) => {\n    return (\n      <li key={`msg${number}`}>\n        Message #[{number}]: {message}\n      </li>\n    );\n  };\n\n  render() {\n    if (!this.messages.length) return null;\n    let RenderedMessages = this.messages.map((message, number) => this.renderMessage(message, number));\n    // remember the number of messages rendered\n    this.messageNumber = this.messages.length;\n    return (\n      <ul className=\"messages\" id=\"messages\">\n        {RenderedMessages}\n      </ul>\n    );\n  }\n\n  scrollElement() {\n    window.requestAnimationFrame(() => {\n      var element = document.getElementById(\"messages\");\n      element.scrollTop = element.scrollHeight;\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.messages.length) this.scrollElement();\n  }\n}\n","import React from \"react\";\n//import * as dat from \"dat.gui\";\n\n// services\nimport { EntitiesService, SquaresService, GameModel, GameActionsClass, GameState } from \"../../services\";\n\n// components\nimport Board from \"../Board\";\nimport EntitiesList from \"../EntitiesList\";\nimport TargetedSquareInfo from \"./TargetedSquareInfo\";\nimport SelectedEntityInfo from \"./SelectedEntityInfo\";\nimport { MessageBox } from \"../MessageBox\";\n\n// others\nimport styles from \"./Game.module.scss\";\n\nlet GameActions = null;\n\n/** Game composes all the parts of the interface */\nexport class Game extends React.PureComponent<void, GameState> {\n  renderCounter: number = 0;\n  stepNumber: number = 0;\n  //dat;\n\n  constructor(props: void) {\n    super(props);\n\n    GameModel.loadBuiltInMap();\n    GameModel.loadPredefinedEntitities();\n    //this.dat = new dat.GUI();\n    this.state = {\n      entities: EntitiesService.entities,\n      squares: SquaresService.squares,\n      squareSize: 40,\n      selected: EntitiesService.findEntityById(\"Lazer Blady\"),\n      targeted: null,\n      targetedSquareNumber: null,\n      enemiesAlive: null,\n      arenaSize: 10,\n      autoLoop: true,\n      isBoardRotated: false,\n      isEditorOn: false,\n    };\n    this.state.selected.active = true;\n    GameActions = new GameActionsClass(this);\n  }\n\n  componentDidMount() {\n    GameActions.loop();\n  }\n\n  zoomIn() {\n    this.setState((prevState) => {\n      return { squareSize: prevState.squareSize + 5 };\n    });\n  }\n  zoomOut() {\n    this.setState((prevState) => {\n      return { squareSize: prevState.squareSize - 5 };\n    });\n  }\n  render() {\n    // console.log(\"Rendering Game. #\", this.renderCounter++);\n    return (\n      <div className={styles.game}>\n        <div className={styles.status}>\n          Enemies to kill: {this.state.enemiesAlive}<br></br>\n          {this.state.enemiesAlive ? '' : \" Great Job. YOU WON.\" }\n          {this.state.selected.isAlive ? '' : \" Damn. YOU DIED.\" }\n        </div>\n        <p>\n          L2P: Click friendly entity on the map, twice. Then click a target square to move, or target entity to attack.\n        </p>\n        <div className={styles.game__board}>\n          <Board\n            squares={this.state.squares}\n            entities={this.state.entities}\n            onClick={(i) => GameActions.handleClickV2(i)}\n            size={this.state.arenaSize}\n            isRotated={this.state.isBoardRotated}\n            style={{fontSize: `${this.state.squareSize}px`}}\n          />\n        </div>\n\n        <div className={styles.game__info}>\n          <div className={styles.actions}>\n            <button onClick={GameActions.toggleEditorMode} className={styles.button}>\n              Editor Mode\n            </button>\n            <button onClick={GameModel.saveMap} className={styles.button}>\n              Save Map\n            </button>\n            <button onClick={GameModel.loadMap} className={styles.button}>\n              Load Map\n            </button>\n            <button\n              onClick={() => {\n                GameActions.nuke(40);\n              }}\n              className={`${styles.button} ${styles[\"button-nuke\"]}`}\n            >\n              Nuke All\n            </button>\n            <button onClick={GameActions.ceaseFire} className={styles.button}>\n              Cease Fire\n            </button>\n\n            <button onClick={GameActions.toggleRotateBoard} className={styles.button}>\n              Rotate Board\n            </button>\n\n            <button onClick={() => this.zoomIn()} className={styles.button}>\n              Zoom In (+)\n            </button>\n            <button onClick={() => this.zoomOut()} className={styles.button}>\n              Zoom Out (-)\n            </button>\n\n            <button onClick={GameActions.nextTick} className={styles.button}>\n              Next Tick\n            </button>\n\n            <span className={styles[\"step-counter\"]}>Tick: {this.stepNumber}</span>\n\n            <label className={` ${styles.button} ${styles[\"auto-cycle\"]}`}>\n              <input type=\"checkbox\" checked={this.state.autoLoop} onChange={GameActions.switchAutoLoop} />\n              <span>Auto Cycle</span>\n            </label>\n          </div>\n          <div className={styles[\"interaction-container\"]}>\n            <SelectedEntityInfo\n              selected={this.state.selected}\n              handleDeselectAllEntities={GameActions.handleDeselectAllEntities}\n              onInventoryClick={GameActions.onInventoryClick}\n              processInterface={() => GameActions.processInterface()}\n            />\n\n            <TargetedSquareInfo\n              className={styles.targeted}\n              squareNumber={this.state.targetedSquareNumber}\n              squares={this.state.squares}\n              selected={this.state.selected}\n              targeted={this.state.targeted}\n              onInventoryClick={GameActions.onInventoryClick}\n              processInterface={() => GameActions.processInterface()}\n            />\n            <div></div>\n          </div>\n          <MessageBox />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\nimport \"./HudPanel.scss\";\n\ninterface HudPanelProps {\n  title: string;\n  children: JSX.Element;\n}\n\nexport class HudPanel extends React.Component<HudPanelProps> {\n\n    render() {\n        return <div className=\"hud-panel\">\n            <div className=\"hud-panel__title\">{this.props.title}</div>\n            <div className=\"hud-panel__content\">{this.props.children}</div>\n        </div>;\n    }\n}","import React from \"react\";\nimport { EntityCard } from \"../EntityCard\";\nimport \"./EntitiesList.scss\";\nimport { Entity } from \"../../services/EntitiesService\";\n\ninterface ListOfEntitiesProps {\n  entities: Entity[];\n  onInventoryClick: any;\n  processInterface: Function;\n}\n\nexport default class ListOfEntities extends React.Component<ListOfEntitiesProps> {\n  render() {\n    let entitiesFriendly = this.props.entities\n      .filter((entity) => entity.isFriendly)\n      .map((obj) => {\n        return (\n          <EntityCard\n            key={obj.name}\n            entity={obj}\n            onInventoryClick={this.props.onInventoryClick}\n            processInterface={() => this.props.processInterface()}\n          />\n        );\n      });\n\n    let entitiesUnfriendly = this.props.entities\n      .filter((entity) => !entity.isFriendly)\n      .map((obj) => {\n        return <EntityCard key={obj.name} entity={obj} processInterface={() => this.props.processInterface()} />;\n      });\n\n    return (\n      <>\n        <h4 className=\"entities-list__header\">List of Entities:</h4>\n        <div className=\"entities-list\">{entitiesFriendly}</div>\n        <div className=\"entities-list\">{entitiesUnfriendly}</div>\n      </>\n    );\n  }\n}\n","import React from \"react\";\n//import \"./Cell.scss\";\n\ninterface CellProps {\n}\n\ninterface CellState {\n}\n\nexport class Cell extends React.PureComponent<CellProps, CellState> {\n\n  state = {}\n\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //   }\n  // }\n\n  render() {\n    //console.log(`Rendering [${this.props.children}]`);\n    return <div className=\"cell\">{this.props.children}</div>\n  }\n}","import React from \"react\";\nimport { Cell } from \"./Cell\";\nimport \"./Grid.scss\";\n\ninterface GridProps {\n  width: number;\n  height: number;\n  startAt: [number, number];\n}\n\ninterface GridState {\n  mapdrag: boolean,\n  scroll: {\n    x: number,\n    y: number,\n  }\n}\n\nexport class Grid extends React.Component<GridProps, GridState> {\n  gridReference;\n  scroll = {\n    x: 0,\n    y: 0,\n  }\n\n  mapdrag = false;\n\n  stateDriven = false;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      mapdrag: false,\n      scroll: {\n        x: 0,\n        y: 0,\n      }\n    }\n\n    this.gridReference = React.createRef();\n  }\n\n  scrollRelativeXY(deltaX: number, deltaY: number) {\n    this.scroll.x -= deltaX;\n    this.scroll.y -= deltaY;\n\n    if(this.scroll.x <= 0) {\n      this.scroll.x = 0;\n    }\n    if(this.scroll.y <= 0) {\n      this.scroll.y = 0;\n    }\n\n    if(this.stateDriven) {\n      this.setState({\n        scroll: {\n          x: this.scroll.x,\n          y: this.scroll.y,\n      }})\n    }\n    this.executeScroll();\n  }\n\n  renderGrid() {\n    let rows = [];\n    for(let y = 0; y <= this.props.height; y++) {\n      let sourceY = this.props.startAt[1] + y;\n      let currentRow = [];\n\n      for(let x = 0; x <= this.props.width; x++) {\n        let sourceX = this.props.startAt[0] + x;\n        let currentCell = <Cell key={`$key_${sourceX}_${sourceY}`}>{sourceX}, {sourceY}</Cell>\n        currentRow.push(currentCell);\n      }\n      rows.push(<div className=\"row\"  key={`$key_X_${sourceY}`}>{currentRow}</div>);\n    }\n    return <div\n      className=\"grid\"\n      ref={this.gridReference}\n      onMouseDown={(e) => this.onMouseDown(e)}\n      onMouseUp={(e) => this.onMouseUp(e)}\n      onMouseMove={(e) => this.handleMove(e)}\n      onContextMenu={(e)=>e.preventDefault()}\n      onDrag={(e)=>this.onMouseDrag(e)}\n      //onMouseOut={(e)=>this.onMouseOut(e)}\n    >{rows}</div>;\n  }\n\n  handleMove(e) {\n    if(!this.mapdrag) return;\n    this.scrollRelativeXY(e.movementX, e.movementY);\n  }\n\n  onMouseDrag(e){\n    console.log(e);\n  }\n\n  onMouseDown(e) {\n    console.log(e.button);\n    if(e.button === 2) {\n      this.mapdrag = true;\n    }\n    e.preventDefault();\n    console.log(this.mapdrag);\n  }\n\n  onMouseOut(e) {\n    console.log(\"MOUSE OUT\")\n    this.mapdrag = false;\n  }\n\n  startDragging(e){\n      this.mapdrag = true;\n  }\n\n  onMouseUp(e){\n    console.log(e.button);\n    if(e.button === 2) {\n      this.mapdrag = false;\n    }\n    e.preventDefault();\n    console.log(this.mapdrag);\n  }\n\n  onChangeScrollX(event) {\n    console.log(event.target.value);\n    this.scroll.x = event.target.value;\n    this.executeScroll();\n  }\n  onChangeScrollY(event) {\n    console.log(event.target.value)\n    this.scroll.y = event.target.value;\n    this.executeScroll();\n  }\n\n  executeScroll() {\n    this.gridReference.current.scroll({\n      top: this.scroll.y,\n      left: this.scroll.x,\n    });\n  }\n\n  switchStateDriven(e) {\n    console.log(e.target.checked);\n    this.stateDriven = e.target.checked;\n  }\n\n  render() {\n    return <div className=\"grid-container\">\n      <pre className=\"gridDebugData\">\n        Width: {this.props.width}<br/>\n        Height: {this.props.height}<br/>\n        StartAt: {this.props.startAt[0]}, {this.props.startAt[1]}<br/>\n        ScrollX: <input onChange={(e) => this.onChangeScrollX(e)}></input><br/>\n        ScrollY: <input onChange={(e) => this.onChangeScrollY(e)}></input><br/>\n        StateDriven: <input type=\"checkbox\" onChange={(e)=>this.switchStateDriven(e)}></input><br/>\n\n        State mapdrag: {this.state.mapdrag}<br/>\n        State scrollX: {this.state.scroll.x}<br/>\n        State scrollY: {this.state.scroll.y}<br/>\n      </pre>\n      {this.renderGrid()}\n    </div>;\n  }\n}","import React from \"react\";\nimport \"./Controls.scss\";\n\ninterface ControlsProps {\n    keys: string[],\n    onKeyPress: Function,\n}\n\ninterface ControlsState {\n    w: boolean,\n    s: boolean,\n    a: boolean,\n    d: boolean,\n}\n\nexport class Controls extends React.Component<ControlsProps, ControlsState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            w: false,\n            s: false,\n            a: false,\n            d: false,\n        }\n    }\n\n    componentDidMount(){\n        document.addEventListener(\"keydown\", (e) => this.onKeyDown(e), false);\n        document.addEventListener(\"keyup\", (e) => this.onKeyUp(e), false);\n    }\n\n    onKeyDown(event) {\n        console.log(event)\n        switch(event.keyCode) {\n            case 87: // W\n                this.setState({w: true});\n                this.props.onKeyPress('w');\n                break;\n            case 83: // S\n                this.setState({s: true});\n                this.props.onKeyPress('s');\n                break;\n            case 65: // A\n                this.setState({a: true});\n                this.props.onKeyPress('a');\n                break;\n            case 68: // D\n                this.setState({d: true});\n                this.props.onKeyPress('d');\n                break;\n        }\n    }\n\n    onKeyUp(event) {\n        console.log(event)\n        switch(event.keyCode) {\n            case 87: // W\n                this.setState({w: false});\n                break;\n            case 83: // S\n                this.setState({s: false});\n                break;\n            case 65: // A\n                this.setState({a: false});\n                break;\n            case 68: // D\n                this.setState({d: false});\n                break;\n        }\n    }\n\n    render() {\n        return <div className=\"controls\">\n            [<span className={`${this.state.w ? 'pressed' : ''} key` }>W</span>]\n            [<span className={`${this.state.s ? 'pressed' : ''} key` }>S</span>]\n            [<span className={`${this.state.a ? 'pressed' : ''} key` }>A</span>]\n            [<span className={`${this.state.d ? 'pressed' : ''} key` }>D</span>]\n        </div>;\n    }\n}","import React from \"react\";\nimport { HudPanel, Grid, Controls } from \"../../components\";\nimport \"./BlastZone.scss\";\n\ninterface BlastZoneState {\n  gridX: number,\n  gridY: number,\n}\nexport default class BlastZone extends React.Component<void, BlastZoneState> {\n  constructor(props: void) {\n    super(props);\n    this.state = {\n      gridX: 0,\n      gridY: 0,\n    }\n  }\n  componentDidMount() {\n  }\n\n  onControlPress(key) {\n    let deltaX = 0;\n    let deltaY = 0;\n    switch(key) {\n      case \"w\":\n        deltaY = -1;\n        break;\n      case \"s\":\n        deltaY = 1;\n        break;\n\n      case \"a\":\n        deltaX = -1;\n        break;\n      case \"d\":\n        deltaX = 1;\n        break;\n    }\n\n    console.log(key);\n    this.setState(prevState => {\n      return {\n        gridX: prevState.gridX + deltaX,\n        gridY: prevState.gridY + deltaY\n      };\n    })\n  }\n\n  render() {\n\n    const controls = <Controls\n      keys={['W', 'S', 'A', 'D']}\n      onKeyPress={(e) => this.onControlPress(e)}\n      ></Controls>\n    const console = <></>;\n    const statusIndicators = <></>;\n\n    return <div className=\"blast-zone\">\n      <div className=\"top-row\">\n        <HudPanel title=\"Controls\">\n          {controls}\n        </HudPanel>\n        <HudPanel title=\"Console\">\n          {console}\n        </HudPanel>\n        <HudPanel title=\"Status Indicators\">\n          {statusIndicators}\n        </HudPanel>\n      </div>\n      <div className=\"mid-row\">\n        <HudPanel title=\"Tactical Grid\">\n          <Grid width={100} height={100} startAt={[this.state.gridX,this.state.gridY]}></Grid>\n        </HudPanel>\n      </div>\n\n      <div className=\"bottom-row\">\n        <HudPanel title=\"OhWell\">\n          <span>:)</span>\n        </HudPanel>\n      </div>\n    </div>;\n  }\n}","import React from \"react\";\nimport { HudPanel, Grid, Controls, Game } from \"./components\";\nimport BlastZone from \"./screens/BlastZone\";\ninterface AppState {\n  loadedScene: string\n}\nexport default class App extends React.Component<void, AppState> {\n\n  scenes:{} = {\n    BlastZone,\n    Game,\n  }\n  SelectedScene = null;\n  constructor(props: void) {\n    super(props);\n    this.state = {\n      loadedScene: 'Game'\n    }\n    this.handleChange.bind(this);\n  }\n  componentDidMount() {\n  }\n\n  handleChange(e) {\n    // e.target.value;\n    console.log(e)\n    console.log(e.target)\n    console.log(e.target.value)\n    const sceneToLoad = e.target.value;\n    this.setState(prevState => {return {loadedScene: sceneToLoad}});\n  }\n\n  render() {\n    let SelectedScene = this.scenes[this.state.loadedScene];\n    return <div className=\"app\">\n      <div className=\"meta-bar\">\n        <div className=\"screen-switch\">\n          <span>Select screen: </span>\n          <select value={this.state.loadedScene} onChange={(e)=>this.handleChange(e)}>\n            <option value=\"BlastZone\">BlastZone</option>\n            <option value=\"Game\">Game</option>\n          </select>\n        </div>\n      </div>\n      <SelectedScene/>\n    </div>\n  }\n}","import React from \"react\";\nimport { render } from \"react-dom\";\nimport Game from \"./components/Game\";\nimport BlastZone from \"./screens/BlastZone\";\nimport App from \"./App\";\n\nimport \"./style.scss\";\n\n// Rendering the top-level Game component\n// render(<Game />, document.getElementById(\"root\"));\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}