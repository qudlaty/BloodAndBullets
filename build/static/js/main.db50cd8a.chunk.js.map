{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/EntityCard/LinearDisplay.js","components/EntityCard/InventoryList.js","components/EntityCard/EntityCard.js","components/EntitiesList/EntitiesList.js","components/Game/EntitiesValues.js","components/Game/ProcessingSquares.js","components/Game/ProcessingEntities.js","components/Game/Game.js","index.js"],"names":["Square","renderCounter","nextProps","nextState","JSON","stringify","this","props","className","localId","squareId","active","isAvailableDestination","isChosenDestination","icon","isBreathing","isShooting","randomTime","Math","random","toFixed","animationBreathing","targetCoords","targetPosition","projectileNumber","projectiles","customStyle","position","x","y","distanceToTargetX","distanceToTargetY","actualDistance","sqrt","pow","weaponType","angle","atan","PI","calcNewAangle","push","key","projectile","onClick","blood","style","animation","React","Component","Board","handleClick","bind","i","console","log","rowId","colId","square","squares","entity","rowNumber","colNumber","equipment","hands","type","cellId","rows","Array","size","fill","map","row","number","cells","cell","renderSquare","PureComponent","LinearDisplay","percentage","current","max","overload","progressStyle","width","title","label","InventoryList","inventory","inventoryItems","item","name","EntityCard","renderCount","handleInventoryClick","itemName","onInventoryClick","lifeSigns","isFriendly","inHands","inHandsArray","clear","display","textAlign","hp","maxHp","rounds","maxRounds","ListOfEntities","entitiesFriendly","entities","filter","obj","entitiesUnfriendly","Weapon","causesBleeding","Rifle","range","Lazer","M16","damage","L30","M40","age","head","hasWeapon","bleedingReductionPerTurn","arenaSize","getSquare","targetSquareIndex","setSquare","value","setEntityWithinASquare","target","getNumberWithinBoundaries","min","getRandomIntInclusive","floor","getEntityId","findEntityById","id","moveEntityRandomly","oldPositionX","oldPositionY","newSquare","Game","stepNumber","loop","processEntities","state","autoLoop","setTimeout","nextTick","setState","handleBoardClick","previousState","localCopyOfPreviousState","parse","selected","setSelected","selectedEntity","ProcessingEntities","forEach","deselectAllEntities","resetGivenFieldsOnACollection","squareIndex","ProcessingSquares","getEntitiesAtGivenPosition","moveDestination","nuke","dmg","localCopyOfEntities","toggleRotateBoard","isBoardRotated","switchAutoLoop","prevState","actualEntity","actualItem","EntitiesValues","moveEntities","isEntityShootingProperly","fireAShot","applyEffectsOfBleeding","stopBreathingForKilledEntities","markAvailableDestinationsForSelectedEntity","collection","fieldNames","fieldName","j","moveEntityIntoChosenDestinations","JR","OP","bleeding","amount","potentialTargetEntity","targetEntity","ceaseFire","damageApplied","checkAmmoAndCalculateDamageApplied","applyDamageToTargetEntity","ceaseFireNextTickIfTargetIsKilled","calculateNextGameState","setSquaresAccordingToEntities","selectedInEntities","boardClassName","checked","onChange","render","document","getElementById"],"mappings":"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","file":"static/js/main.db50cd8a.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Square.scss\";\n\nconst DISTANCE_BETWEEN_TILES = 38;\nclass Square extends React.Component {\n  /*\n    We use PureComponent, so it compares new props with previous props,\n    and only re-renders when props changed.\n   */\n  renderCounter = 0\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if(JSON.stringify(nextProps) === JSON.stringify(this.props)) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    this.renderCounter++;\n    //console.log(\"Rendering Square\", this.renderCounter, this.props);\n\n    let className = \"square\";\n    let localId = `Sq${this.props.squareId}`;\n\n    if(this.props.active) {\n      className += \" active \";\n    }\n\t\tif(this.props.isAvailableDestination) {\n\t\t\tclassName += \" is-available-destination \"\n\t\t}\n\t\tif(this.props.isChosenDestination) {\n\t\t\tclassName += \" is-chosen-destination \"\n\t\t}\n    if(this.props.icon){\n      if(this.props.isBreathing) {\n        className += \" breathing\";\n      } else {\n        className += \" dead\";\n      }\n      if(this.props.isShooting) {\n        className += \" shooting\";\n      }\n    }\n\n    let randomTime = `${(Math.random()+0.5).toFixed(2)}s`\n    let animationBreathing = this.props.isBreathing ?\n        `breathing ${randomTime} alternate infinite linear` : 'none';\n\n    let targetCoords = this.props.targetPosition;\n    let projectileNumber = 5;\n    let projectiles = [];\n    let customStyle = \"\";\n\n    let calcNewAangle = function(x, y){\n      let angle;\n      if(y >= 0) {\n        angle = - Math.atan(\n          x/y\n        ) * (180/Math.PI);\n      } else if(y < 0) {\n        angle = (180/Math.PI) *\n          (\n            Math.atan(\n              x/-y\n            ) + Math.PI\n          )\n      }\n      return angle;\n    }\n\n    if((this.props.targetPosition && this.props.position &&\n      this.props.isShooting) &&\n      (this.props.targetPosition.x !== this.props.position.x ||\n      this.props.targetPosition.y !== this.props.position.y)) {\n\n      if(targetCoords) {\n\n        let distanceToTargetX =\n          DISTANCE_BETWEEN_TILES*(targetCoords.x-this.props.position.x);\n        let distanceToTargetY =\n          DISTANCE_BETWEEN_TILES*(targetCoords.y-this.props.position.y);\n        let actualDistance = Math.sqrt(\n          Math.pow(distanceToTargetX, 2) + Math.pow(distanceToTargetY, 2)\n        );\n\n        if(this.props.weaponType === 'lazer') {\n          let className=`projectile${localId}_beam`;\n          let projectile= \"\";\n          let angle = calcNewAangle(distanceToTargetX, distanceToTargetY);\n          customStyle = `\n            @keyframes pulsing${localId} {\n              0%  {opacity: 0.1;}\n              100%  {opacity: 1;}\n            }\n\n            @keyframes elongating${localId} {\n              0%  {width: ${actualDistance - 20};}\n              100%  {width: ${actualDistance + 20};}\n            }\n\n            @keyframes swiping${localId} {\n              0%  {transform: rotate(${angle + 90 + -1}deg);}\n              50%  {transform: rotate(${angle + 90 + 1}deg);}\n              100%  {transform: rotate(${angle + 90 - 1}deg);}\n            }\n\n            .${className} {\n              width: ${actualDistance}px;\n              height: 3px;\n              border-radius: 5px;\n              background: #F00;\n              position: absolute;\n              top: 16px;\n              left: 16px;\n\n              transform: rotate(${angle + 90}deg);\n              transform-origin: left 0px;\n              animation: pulsing${localId} 0.1s linear infinite,\n              elongating${localId} 1s linear alternate infinite,\n              swiping${localId} 1s linear alternate infinite;\n              box-shadow: 0 0 5px 5px white;\n              z-index: 10;\n            }\n\n            `;\n\n          projectiles.push(<div key={className} className={className}>{projectile}</div>);\n        } else {\n\n          customStyle = `\n            @keyframes shooting${localId} {\n              0%   {transform: scale(1);}\n              100% {transform: translate(\n                ${36*(targetCoords.x-this.props.position.x)}px,\n                ${36*(targetCoords.y-this.props.position.y)}px\n              )}\n            }\n\n            `;\n\n          while(projectileNumber--) {\n            customStyle += `\n            .projectile${localId}_${projectileNumber} {\n              position: absolute;\n              top: -5px;\n              left: 0px;\n              width: 100%;\n              height: 100%;\n              line-height: 34px;\n              font-size: 30px;\n              animation: shooting${localId} 0.5s linear infinite;\n              animation-delay: ${projectileNumber - 1 * 0.3}s;\n              color: white;\n            }`;\n          };\n          let projectile = this.props.isShooting ? \".\" : \"\";\n\n          projectileNumber = 3;\n\n          while(projectileNumber--) {\n            let className=`projectile projectile${localId}_${projectileNumber}`\n            projectiles.push(<div key={className} className={className}>{projectile}</div>);\n          };\n        }\n      }\n    }\n\n    return (\n      <button className={className} onClick={() => this.props.onClick(this.props.squareId)}>\n        <div className=\"blood\">{this.props.blood}</div>\n        <div className=\"content\" style={{\n          animation: animationBreathing\n        }}>{this.props.icon}</div>\n        <style>\n            {customStyle}\n        </style>\n        {projectiles}\n      </button>\n    );\n  }\n}\n\nexport default Square;\n","import React from 'react';\nimport Square from '../Square';\nimport './Board.scss';\n\nexport default class Board extends React.PureComponent {\n  renderCounter = 0\n\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(i) {\n    console.log(\"Handles Click on Board\", i);\n    this.props.onClick(i);\n  }\n\n  renderSquare(i, rowId, colId) {\n    /*\n    We pass one and the same function to all the Squares when rendering,\n    so they do not detect getting a new fat-arrow function as a change of props.\n\n    This is CRUCIAL to only rerender squares with changed values.\n\n    Additionally, we need to ensure that Unchanged squares have the same values of objects passed down here.\n    */\n    let square = this.props.squares[i];\n    let entity = this.props.squares[i] && this.props.squares[i].entity;\n    return (\n      <Square\n        key={i}\n        squareId={i}\n        rowNumber={rowId}\n        colNumber={colId}\n\n        onClick={this.handleClick}\n\n        icon={entity && entity.icon}\n        active={entity && entity.active}\n        isBreathing={entity && entity.isBreathing}\n\n        isShooting={entity && entity.isShooting}\n        weaponType={entity && entity.equipment && entity.equipment.hands && entity.equipment.hands.type}\n\n        position={entity && entity.position}\n        targetPosition={entity && entity.targetPosition}\n\n        blood={square && square.blood}\n\n        isAvailableDestination={square && square.isAvailableDestination}\n        isChosenDestination={square && square.isChosenDestination}\n      />\n    );\n  }\n\n  render() {\n    // console.log(\"Rendering Board. #\", this.renderCounter++);\n\n    // Initial values for the Board\n    let cellId=0;\n    let rowId=0;\n    let colId;\n\n    let rows = Array(this.props.size).fill(null).map((row, number) => {\n      colId = 0;\n      let cells = Array(this.props.size).fill(null).map((cell, number) => {\n        return this.renderSquare(cellId++, rowId, colId++);\n      });\n      return (\n        <div key={rowId++} className=\"board-row\">\n          {cells}\n        </div>\n      );\n    });\n\n    let className = \"board \" + this.props.className;\n    return (\n      <div className={className}>\n        {rows}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './LinearDisplay.scss';\nexport default function LinearDisplay(props) {\n  let className=`linear-display ${props.className || ''}`\n  let percentage = ~~(props.current * 100 / props.max);\n  let overload = percentage > 100;\n  if(overload) {\n    percentage = 100;\n    className += \" overload \";\n  }\n\n  let progressStyle = {\n    width: `${percentage}%`,\n  }\n  let title = props.title || `${props.current}/${props.max}`;\n  return (\n    <div className={className}>\n      <div className=\"linear-display__label\">{props.label}:&nbsp;</div>\n      <div className=\"linear-display__bar-container\"\n        title={title}\n      >\n        <div className=\"linear-display__bar-progress\" style={progressStyle}>\n          <span className=\"linear-display__bar-progress-text\">{props.current}{overload ? '/'+props.max : ''}&nbsp;</span>\n        </div>\n      </div>\n      <div>&nbsp;</div>\n    </div>\n  );\n}\n","import React from 'react';\r\nimport './InventoryList.scss';\r\nexport default function InventoryList(props) {\r\n\r\nlet className=`inventory-list ${props.className || ''}`\r\nif(!props.inventory) {return null}\r\nlet inventoryItems = props.inventory.map(item => {\r\n    return (\r\n        <div onClick={() => props.onClick(item.name || item)} key={item.name} className=\"inventory-list__item\">\r\n            <span>{item.name || item}</span>\r\n        </div>\r\n    )\r\n});\r\n\r\n  return (\r\n    <div className={className}>\r\n      <div className=\"inventory-list__label\">{props.label}:&nbsp;</div>\r\n      <div className=\"inventory-list__container\"\r\n        title={props.title}\r\n      >\r\n       {inventoryItems}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport LinearDisplay from './LinearDisplay';\r\nimport InventoryList from './InventoryList';\r\nimport './EntityCard.scss';\r\n\r\nclass EntityCard extends React.Component {\r\n  renderCount = 0\r\n  handleInventoryClick = (itemName) => {\r\n    this.props.onInventoryClick(this.props.entity, itemName);\r\n  }\r\n\r\n  render() {\r\n    // console.log(\"Rendering EntityView. #\", this.renderCount++);\r\n    let { entity } = this.props;\r\n    /*\r\n      FIXME: Below should be separated into several sub-components\r\n      Each sub-component should receive flat data (position, hp, ...)\r\n     */\r\n    let className = \" entity \";\r\n    if(entity.active) {\r\n      className+=\" active \";\r\n    }\r\n\r\n    let { isBreathing, isFriendly } = entity;\r\n    let fof = isFriendly ? ' friendly ' : ' unfriendly ';\r\n    let lifeSigns = isBreathing ? \" ALIVE \" : \" DEAD \";\r\n    className += fof;\r\n    className += lifeSigns;\r\n    let inHands = entity.equipment && entity.equipment.hands && entity.equipment.hands.name || entity.equipment && entity.equipment.hands;\r\n    let inHandsArray = inHands && [inHands] || [];\r\n    let equipped = inHands && (\r\n      <>\r\n        <span>inHands: </span>\r\n        <div className=\"inventory-list__item\">\r\n          {inHands}\r\n        </div>\r\n      </>\r\n    );\r\n\r\n    return (\r\n\r\n      <div className={className}>\r\n        <div>\r\n          <div className=\"position\" title=\"Position\">\r\n            <span> {entity.position.x} {entity.position.y} </span>\r\n          </div>\r\n\r\n          <div className=\"portrait\">\r\n            {entity.icon}\r\n          </div>\r\n        </div>\r\n        <strong title=\"Name\">{entity.name}</strong>\r\n        <br />\r\n        {` `}{lifeSigns}\r\n        <br />\r\n\r\n        <div style={{\r\n          clear: \"both\",\r\n          display: \"inline-block\",\r\n          textAlign: \"right\",\r\n        }}>\r\n          <LinearDisplay label=\"HP\" current={entity.hp} max={entity.maxHp} /><br/>\r\n          <LinearDisplay label=\"Rounds\" current={entity.rounds} max={entity.maxRounds} />\r\n        </div>\r\n        <InventoryList label=\"Equipped\" title=\"In hands\" onClick={()=>{}} inventory={inHandsArray} />\r\n        <InventoryList label=\"Inventory\" title=\"In backpack\" onClick={this.handleInventoryClick} inventory={entity.inventory} />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EntityCard;\r\n","import React from 'react';\r\nimport EntityCard from '../EntityCard';\r\nimport './EntitiesList.scss';\r\n\r\nexport default class ListOfEntities extends React.Component {\r\n  renderCounter = 0\r\n  render() {\r\n    // console.log(\"Rendering EntitiesList #\", this.renderCounter++);\r\n    \r\n    let entitiesFriendly =\r\n    this.props.entities.filter(entity=>entity.isFriendly).map(obj => {\r\n      return (\r\n        <EntityCard onInventoryClick={this.props.onInventoryClick} entity={obj} key={obj.name}/>\r\n      )\r\n    });\r\n\r\n    let entitiesUnfriendly =\r\n    this.props.entities.filter(entity=>!entity.isFriendly).map(obj => {\r\n      return (\r\n        <EntityCard entity={obj} key={obj.name}/>\r\n      )\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <h4 className=\"list-of-entities__header\">List of Entities:</h4>\r\n        <div className=\"list-of-entities\">\r\n            {entitiesFriendly}\r\n        </div>\r\n        <div className=\"list-of-entities\">\r\n            {entitiesUnfriendly}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","class Weapon {\r\n  causesBleeding = 0\r\n  range: 0\r\n  damage: 0\r\n};\r\n\r\nclass Rifle extends Weapon{\r\n  type = 'projectile'\r\n  causesBleeding =  2\r\n  range = 4\r\n};\r\n\r\nclass Lazer extends Weapon{\r\n  type = 'lazer'\r\n  causesBleeding = 0\r\n  range = 6\r\n}\r\n\r\n\r\nclass M16 extends Rifle {\r\n  name = 'M16'\r\n  rounds = 15\r\n  maxRounds = 20\r\n  damage = 1\r\n}\r\n\r\nclass L30 extends Lazer {\r\n  name = 'Assault Lazer Rifle'\r\n  rounds = 3\r\n  maxRounds = 3\r\n  damage = 10\r\n}\r\n\r\nclass M40 extends Rifle {\r\n  name = 'M41A Pulse Rifle'\r\n  rounds = 40\r\n  maxRounds = 40\r\n  damage = 1\r\n}\r\n\r\nconst entities = [\r\n  {\r\n    name: \"John Rambo\", age: 40, hp: 95, maxHp: 100,\r\n    icon: \"😠\",\r\n    isBreathing: true,\r\n    isFriendly: true,\r\n    position: {x:8, y:8},\r\n    inventory: [{name:'KA-BAR'}, new M16],\r\n    equipment: {head: 'Red Bandana', hands: null},\r\n    damage: 1, rounds: 10, maxRounds: 15, hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Ellen Replay\", age: 30, hp: 50, maxHp: 65,\r\n    icon: \"👩\",\r\n    isBreathing: true,\r\n    isFriendly: true,\r\n    position: {x:1, y:8},\r\n    inventory: [new M40, {name:'Motion Detector'}],\r\n    equipment: {head: 'Afro'},\r\n    damage: 1, rounds: 10, maxRounds: 10, hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Lazer Blady\", age: 60, hp: 75, maxHp: 100,\r\n    icon: \"🧑🏻\",\r\n    isBreathing: true,\r\n    isFriendly: true,\r\n    position: {x:4, y:8},\r\n    inventory: [new L30],\r\n    equipment: {},\r\n    damage: 10, rounds: 3, maxRounds: 3, hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Octo\", age: 8, hp: 288, maxHp: 300,\r\n    icon: \"🐙\",\r\n    isBreathing: true,\r\n    position: {x:8, y:2},\r\n  },\r\n  {\r\n    name: \"Squid\", age: 5, hp: 55, maxHp: 55,\r\n    icon: \"🦑\",\r\n    isBreathing: true,\r\n    position: {x:5, y:5},\r\n  },\r\n  {\r\n    name: \"Ant\", age: 1, hp: 35, maxHp: 40,\r\n    icon: \"🐜\",\r\n    isBreathing: true,\r\n    position: {x:7, y:6},\r\n  },\r\n  {\r\n    name: \"Spider\", age: 1, hp: 160, maxHp: 150,\r\n    icon: \"🕷️\",\r\n    isBreathing: true,\r\n    position: {x:9, y:3},\r\n    bleedingReductionPerTurn: 1,\r\n  },\r\n  {\r\n    name: \"Mosquito\", age: 1, hp: 12, maxHp: 20,\r\n    icon: \"🦟\",\r\n    isBreathing: true,\r\n    position: {x:2, y:7},\r\n  },\r\n  {\r\n    name: \"Microbe\", age: 1, hp: 1, maxHp: 5,\r\n    icon: \"🦠\",\r\n    isBreathing: true,\r\n    position: {x:3, y:5},\r\n  },\r\n\r\n];\r\n\r\nexport default entities;\r\n","const arenaSize = 10;\r\n\r\nexport function getSquare (squares, x, y) {\r\n  return squares[targetSquareIndex(x, y, arenaSize)];\r\n}\r\n\r\nexport function setSquare(squares, x, y, value) {\r\n  squares[targetSquareIndex(x, y)] = value;\r\n}\r\n\r\nexport function targetSquareIndex(x, y) {\r\n  return y * arenaSize + x;\r\n}\r\n\r\nexport function targetSquarePosition(squareIndex) {\r\n  let x,y;\r\n\ty = Math.floor(squareIndex / arenaSize);\r\n\tx = (squareIndex % arenaSize);\r\n\treturn {x, y};\r\n}\r\n\r\nexport function setEntityWithinASquare(squares, x, y, entity) {\r\n  let target = targetSquareIndex(x, y);\r\n  if(!squares[target]) {\r\n    squares[target] = {};\r\n  }\r\n  squares[target].entity = entity;\r\n}\r\n\r\nexport function addBlood(square, amount) {\r\n  if(!square) {square = {}};\r\n  if(!square.blood) {\r\n    square.blood = amount;\r\n  } else {\r\n    square.blood += amount;\r\n  }\r\n}\r\n","import { getSquare, setEntityWithinASquare } from './ProcessingSquares';\n\nconst arenaSize = 10;\n\nfunction getNumberWithinBoundaries(value, min, max) {\n  if( value < min) value = min;\n  if( value > max) value = max;\n  return value;\n}\n\nfunction getRandomIntInclusive(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function getEntityId(entity) {\n  return entity.name;\n}\n\nexport function findEntityById(entities, id) {\n  let result = entities.filter((entity) => entity.name === id)[0];\n  //console.log(\"found entity:\", result);\n  return result;\n}\n\nexport function moveEntityRandomly(squares, entity) {\n  if(!entity.isBreathing) return;\n  // modifies entity in-place\n  let oldPositionX = entity.position.x;\n  let oldPositionY = entity.position.y;\n\n  entity.position.x = entity.position.x + getRandomIntInclusive(-1,1);\n  entity.position.y = entity.position.y + getRandomIntInclusive(-1,1);\n\n  entity.position.x = getNumberWithinBoundaries(entity.position.x, 0, arenaSize-1);\n  entity.position.y = getNumberWithinBoundaries(entity.position.y, 0, arenaSize-1);\n\n  let newSquare = getSquare(squares, entity.position.x, entity.position.y);\n\n  if (newSquare && newSquare.entity) {\n    entity.position.x = oldPositionX;\n    entity.position.y = oldPositionY;\n  }\n\n  if(\n    oldPositionX !== entity.position.x ||\n    oldPositionY !== entity.position.y\n  ) {\n    setEntityWithinASquare(squares, oldPositionX, oldPositionY, null);\n    setEntityWithinASquare(squares, entity.position.x, entity.position.y, entity);\n  }\n\n  // NO RETURN AS IT'S MODIFIED IN-PLACE return entity;\n  // WHICH IS A BAD HABIT, BUT OH SO COMFY.\n}\n","import React from 'react';\r\nimport Board from '../Board';\r\nimport EntitiesList from '../EntitiesList';\r\nimport EntitiesValues from './EntitiesValues';\r\n\r\nimport * as ProcessingEntities from './ProcessingEntities';\r\nimport * as ProcessingSquares from './ProcessingSquares';\r\n\r\nimport './Game.scss';\r\n\r\nexport default class Game extends React.PureComponent {\r\n  renderCounter = 0\r\n  stepNumber = 0\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Initial value of game state\r\n    this.state = {\r\n      selected: null,\r\n      arenaSize: 10,\r\n      isBoardRotated: false,\r\n      entities: EntitiesValues,\r\n      squares: [],\r\n      autoLoop: true,\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.loop();\r\n  }\r\n\r\n  setSquaresAccordingToEntities() {\r\n    this.setState((previousState)=>{\r\n\r\n      let squares = JSON.parse(JSON.stringify(previousState.squares));\r\n\t\t\tthis.resetGivenFieldsOnACollection(squares, 'entity');\r\n      previousState.entities.forEach((entity)=>{\r\n        ProcessingSquares.setEntityWithinASquare(\r\n          squares, entity.position.x, entity.position.y, entity\r\n        );\r\n      });\r\n\r\n      return {squares};\r\n\r\n    });\r\n  }\r\n\r\n\r\n  calculateNextGameState(previousState) {\r\n    let nextState = JSON.parse(JSON.stringify(previousState));\r\n    let { entities, squares, selected } = nextState;\r\n\r\n    this.moveEntities(entities, squares, selected);\r\n\r\n    entities.forEach(entity => {\r\n      // this check should probably occur upon target verification\r\n      if(this.isEntityShootingProperly(entity)) {\r\n        // We are shooting and not targetting ourselves\r\n        this.fireAShot(entities, entity);\r\n      }\r\n\r\n      entity = this.applyEffectsOfBleeding(entity, squares);\r\n      entity = this.stopBreathingForKilledEntities(entity);\r\n\t\t\tthis.markAvailableDestinationsForSelectedEntity(entity, squares)\r\n    });\r\n\r\n    return nextState;\r\n  }\r\n\r\n\tresetGivenFieldsOnACollection(collection, ...fieldNames) {\r\n\t\tcollection.forEach(\r\n      item => {\r\n        fieldNames.forEach(fieldName => {\r\n          item && (item[fieldName] = false)\r\n        });\r\n\r\n      }\r\n    );\r\n\t}\r\n\r\n\tmarkAvailableDestinationsForSelectedEntity(entity, squares, ) {\r\n\r\n\t\tif(entity.active) {\r\n\t\t\tlet {x,y} = entity.position;\r\n\r\n\t\t\tthis.resetGivenFieldsOnACollection(squares, 'isAvailableDestination');\r\n\r\n\t\t\tfor(let j = y - 1; j <= y + 1; j++){\r\n\t\t\t\tif( j < 0 || j >= this.state.arenaSize){\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\t\t\t\tfor(let i = x - 1; i <= x + 1; i++){\r\n\t\t\t\t\tif( i < 0 || i >= this.state.arenaSize || (i == x && j == y)){\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet square = ProcessingSquares.getSquare(squares, i, j );\r\n\t\t\t\t\tif(!square) {square={}}\r\n\t\t\t\t\tsquare.isAvailableDestination = true;\r\n\t\t\t\t\tProcessingSquares.setSquare(squares, i, j, square);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n  moveEntities(entities, squares, selected) {\r\n\t\tentities.forEach(\r\n\t\t\tentity => this.moveEntityIntoChosenDestinations(\r\n\t\t\t\tselected, entity\r\n\t\t\t)\r\n\t\t);\r\n    let JR = ProcessingEntities.findEntityById(entities, \"John Rambo\");\r\n    let OP = ProcessingEntities.findEntityById(entities, \"Squid\");\r\n    ProcessingEntities.moveEntityRandomly(squares, JR);\r\n    ProcessingEntities.moveEntityRandomly(squares, OP);\r\n\r\n  }\r\n\tmoveEntityIntoChosenDestinations(selected, entity){\r\n\t\tif(entity.isBreathing && entity.moveDestination) {\r\n\t\t\tentity.position = entity.moveDestination;\r\n\t\t\tselected.position = entity.position;\r\n\t\t\tdelete entity.moveDestination;\r\n\t\t}\r\n\t}\r\n\r\n  stopBreathingForKilledEntities(entity) {\r\n    if(entity && entity.hp <= 0){\r\n      entity.isBreathing = false;\r\n      entity.hp = 0;\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  applyEffectsOfBleeding(entity, squares) {\r\n    if(entity.bleeding && entity.hp > 0) {\r\n      entity.hp -= entity.bleeding ;\r\n      let square = ProcessingSquares.getSquare(squares, entity.position.x, entity.position.y);\r\n      ProcessingSquares.addBlood(square, entity.bleeding);\r\n      entity.bleeding -= entity.bleedingReductionPerTurn || 1;\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  isEntityShootingProperly(entity) {\r\n    return entity.isShooting && entity.targetPosition && (\r\n      entity.targetPosition.x !== entity.position.x ||\r\n      entity.targetPosition.y !== entity.position.y\r\n    );\r\n  }\r\n\r\n  getEntitiesAtGivenPosition(entities, targetPosition) {\r\n    return entities.filter((potentialTargetEntity) => {\r\n      return (\r\n        potentialTargetEntity.position.x === targetPosition.x &&\r\n        potentialTargetEntity.position.y === targetPosition.y\r\n      );\r\n    });\r\n  }\r\n\r\n  applyDamageToTargetEntity(targetEntity, damage) {\r\n    if(damage) {\r\n      targetEntity.hp -= damage;\r\n      targetEntity.bleeding = 5;\r\n    }\r\n  }\r\n\r\n  ceaseFireNextTickIfTargetIsKilled(entity, targetEntity) {\r\n    if(targetEntity.hp < 0) {\r\n      //entity.isShooting = false;\r\n      entity.ceaseFire = true;\r\n    }\r\n  }\r\n\r\n  checkAmmoAndCalculateDamageApplied(entity) {\r\n    let damageApplied = 0;\r\n    if(entity.rounds !== \"empty\" && entity.rounds > 0) {// if we still have ammo\r\n      entity.rounds--;\r\n      damageApplied = entity.damage;\r\n    }\r\n    if(entity.rounds === 0) {\r\n      entity.rounds = \"empty\";\r\n    } else if(entity.rounds === \"empty\") {\r\n      // when ordered to shoot with \"empty\" magazine state, load ammo instead\r\n      entity.rounds = entity.maxRounds;\r\n      entity.isShooting = false;\r\n      entity.damageApplied = 0;\r\n    }\r\n    return damageApplied;\r\n  }\r\n\r\n  fireAShot(entities, entity) {\r\n    if(entity.ceaseFire) {\r\n      entity.isShooting = false;\r\n      entity.ceaseFire = false;\r\n      return;\r\n    }\r\n    let damageApplied = this.checkAmmoAndCalculateDamageApplied(entity);\r\n    let targetEntities =\r\n      this.getEntitiesAtGivenPosition(entities, entity.targetPosition);\r\n    targetEntities.forEach((targetEntity) => {\r\n      this.applyDamageToTargetEntity(targetEntity, damageApplied);\r\n      this.ceaseFireNextTickIfTargetIsKilled(entity, targetEntity);\r\n    });\r\n  }\r\n\r\n  processEntities() {\r\n    this.setState(\r\n      prevState => this.calculateNextGameState(prevState),\r\n      () => this.setSquaresAccordingToEntities()\r\n    );\r\n  }\r\n\r\n  loop = () => {\r\n    this.stepNumber++;\r\n\r\n    this.processEntities();\r\n\r\n    if(this.state.autoLoop) {\r\n      setTimeout(this.loop, 1000);\r\n    }\r\n  }\r\n\r\n  nextTick = () => {\r\n    this.setState({autoLoop: false});\r\n    this.loop();\r\n  }\r\n\r\n  setSelected(entities, selected, value) {\r\n    let selectedInEntities = ProcessingEntities.findEntityById(\r\n      entities,\r\n      ProcessingEntities.getEntityId(selected)\r\n    );\r\n    if(value) {\r\n      selected.active = value;\r\n    } else {\r\n      selected = null;\r\n      console.log(\"Nullified:\", selected);\r\n    }\r\n    selectedInEntities.active = value;\r\n    return selected;\r\n  }\r\n\r\n  handleBoardClick = (i) => {\r\n    //console.log(\"CLICKED \", i);\r\n\r\n    const deselectAllEntities = (entities) => {\r\n      entities.forEach((entity) => { entity.active = false; });\r\n    };\r\n\r\n\r\n    /* this should contain mostly function calls */\r\n\r\n\r\n    this.setState((previousState) => {\r\n      let localCopyOfPreviousState = JSON.parse(JSON.stringify(previousState));\r\n      let { entities, squares, selected } = localCopyOfPreviousState;\r\n\r\n      if(squares[i] && squares[i].entity) {// clicked an entity\r\n        if(selected && !squares[i].entity.isFriendly) {\r\n          // that is hostile, while we already have one selected\r\n          if(selected.name === previousState.squares[i].entity.name) {\r\n            // second click on a hostile entity deselects it\r\n            selected = this.setSelected(entities, selected, false);\r\n            console.log(selected);\r\n          } else {// clicked a non-selected hostile entity - attack\r\n            let selectedEntity = ProcessingEntities.findEntityById(\r\n              entities,\r\n              ProcessingEntities.getEntityId(selected)\r\n            );\r\n            selectedEntity.targetPosition =\r\n              previousState.squares[i].entity.position;\r\n\r\n            selectedEntity.isShooting = true;\r\n          }\r\n\r\n        } else {// clicked entity is friendly - select it\r\n          deselectAllEntities(entities);\r\n          selected = squares[i].entity;\r\n          this.setSelected(entities, selected, true);\r\n\t\t\t\t\tthis.resetGivenFieldsOnACollection(squares, 'isChosenDestination');\r\n        }\r\n\r\n      } else {// clicked an empty square\r\n        /* Deselecting and stopping fire on all entities */\r\n\t\t\t\tif(squares[i] && squares[i].isAvailableDestination) {\r\n\r\n\t\t\t\t\tlet position = ProcessingSquares.targetSquarePosition(i);\r\n\t\t\t\t\tlet entitiesAtGivenPosition = this.getEntitiesAtGivenPosition(entities, selected.position);\r\n\t\t\t\t\tlet entity = entitiesAtGivenPosition[0];\r\n\t\t\t\t\tentity && (entity.moveDestination = position);\r\n\t\t\t\t\tthis.resetGivenFieldsOnACollection(squares, 'isChosenDestination');\r\n\t\t\t\t\tsquares[i].isChosenDestination = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tselected = null;\r\n\t\t\t\t\tthis.resetGivenFieldsOnACollection(entities, 'active', 'isShooting');\r\n\t\t\t\t\tthis.resetGivenFieldsOnACollection(squares, 'isChosenDestination', 'isAvailableDestination');\r\n\t\t\t\t}\r\n      }\r\n\r\n      return {entities, squares, selected}\r\n    }, ()=> {\r\n      this.processEntities();\r\n    });\r\n\r\n  }\r\n\r\n  nuke = (dmg) => {\r\n    //console.log(\"Nuking\")\r\n    this.setState( (state) => {\r\n      let localCopyOfEntities = JSON.parse(JSON.stringify(state.entities));\r\n      localCopyOfEntities.forEach(entity => {\r\n        entity.hp = entity.hp - dmg;\r\n      });\r\n      return {entities: localCopyOfEntities}\r\n    }, () => {\r\n      this.processEntities();\r\n    });\r\n  }\r\n\r\n  toggleRotateBoard = () => {\r\n    this.setState({isBoardRotated: !this.state.isBoardRotated});\r\n  }\r\n\r\n  switchAutoLoop = () => {\r\n    this.setState((previousState) => {\r\n      return {autoLoop: !previousState.autoLoop};\r\n    },()=>{\r\n      if(this.state.autoLoop) {\r\n        this.loop();\r\n      }\r\n    });\r\n  }\r\n\r\n  onInventoryClick = (entity, itemName) => {\r\n    this.setState((prevState) => {\r\n      let nextState = JSON.parse(JSON.stringify(prevState));\r\n      let {entities} = nextState;\r\n\r\n      let entityId = ProcessingEntities.getEntityId(entity);\r\n      let actualEntity = ProcessingEntities.findEntityById(entities, entityId);\r\n      let actualItem = ProcessingEntities.findEntityById(actualEntity.inventory, itemName);\r\n\r\n      actualEntity.equipment.hands = actualItem;\r\n\r\n      return nextState\r\n    });\r\n\r\n    console.log(entity, itemName);\r\n  }\r\n\r\n  render() {\r\n    let boardClassName = this.state.isBoardRotated ? \"rotated-board\" : \"\";\r\n    //console.log(\"Rendering Game. #\", this.renderCounter++);\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={this.state.squares}\r\n            onClick={(i) => this.handleBoardClick(i)}\r\n            size={this.state.arenaSize}\r\n            className={boardClassName}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"game-info\">\r\n\r\n          <span className=\"selected\">Selected: {this.state.selected && this.state.selected.name}</span>\r\n          <button\r\n            onClick={\r\n              ()=>{\r\n                this.nuke(40);\r\n              }\r\n            }\r\n            className=\"button button-nuke\"\r\n          >Nuke All</button>\r\n          <button onClick={this.toggleRotateBoard} className=\"button\">Rotate Board</button>\r\n          <button onClick={this.nextTick} className=\"button\">Next Tick</button>\r\n          <span className=\"step-counter\">Tick: {this.stepNumber}</span>\r\n          <label className=\"auto-cycle button\">\r\n            <input type=\"checkbox\" checked={this.state.autoLoop ? 'checked' : ''} onChange={this.switchAutoLoop}/>\r\n            <span>Auto Cycle</span>\r\n          </label>\r\n          <ul>\r\n            <li>Click Ellen Replay on the board, to select her.</li>\r\n            <li>Click a target to shoot it.</li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"game-list\">\r\n          <EntitiesList\r\n            entities={this.state.entities}\r\n            onInventoryClick= {this.onInventoryClick}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\nimport { render } from 'react-dom';\nimport Game from './components/Game';\n\nimport './style.scss';\n\nrender(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}