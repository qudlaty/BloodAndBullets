{"version":3,"sources":["helpers/Helpers.ts","components/Square/Square.tsx","components/Board/Board.js","components/EntityCard/LinearDisplay.js","components/EntityCard/InventoryList.js","services/SquaresService.ts","components/EntityCard/EntityCard.js","components/EntitiesList/EntitiesList.js","services/index.ts","services/EntitiesService.ts","components/Game/TargetedSquareInfo.tsx","services/MessageService.ts","services/EntitiesValues.ts","services/GameModelService.ts","components/Game/SelectedEntityInfo.tsx","components/Game/MessageBox.tsx","components/Game/Game.tsx","index.js"],"names":["resetGivenFieldsOnACollection","collection","fieldNames","forEach","item","fieldName","undefined","getNumberWithinBoundaries","value","min","max","getRandomIntInclusive","Math","floor","random","calculateAngle","x","y","angle","atan","PI","calculateDistance","sqrt","pow","isSelectedTargeted","selected","targeted","entity","name","flagsToClassess","active","isAvailableDestination","isChosenDestination","isBreathing","isDead","isShooting","isTargeted","Square","renderCounter","shouldComponentUpdate","nextProps","JSON","stringify","props","className","localId","this","squareId","flagsToClasses","Object","keys","key","turnFlagsIntoClasses","itemsClassName","itemsNumber","randomTime","toFixed","animationBreathing","targetCoords","targetPosition","projectileNumber","projectiles","customStyle","bloodClassName","blood","calcNewAangle","Helpers","items","length","position","distanceToTargetX","distanceToTargetY","actualDistance","weaponType","push","projectile","onClick","style","animation","icon","React","Component","Board","handleClick","bind","i","console","log","rowId","colId","square","squares","rowNumber","colNumber","equipment","hands","type","cellId","rows","Array","size","fill","map","row","number","cells","cell","renderSquare","PureComponent","LinearDisplay","percentage","current","overload","progressStyle","width","title","amount","divider","progressGridStyle","backgroundSize","backgroundImage","assign","label","InventoryList","reloadButton","dropButton","inventory","inventoryItems","reload","rounds","maxRounds","onDrop","derivedCtor","SquaresService","arenaSize","initializeSquareIfEmpty","targetSquareIndex","squareIndex","setEntityWithinASquare","j","getSquare","setSquare","EntityCard","renderCount","handleInventoryClick","itemName","onInventoryClick","renderAmmo","inHands","unEquipFromHands","takeFromInventory","lifeSigns","isFriendly","inHandsArray","clear","display","textAlign","hp","maxHp","ListOfEntities","entitiesFriendly","entities","filter","obj","entitiesUnfriendly","EntitiesService","id","oldPositionX","oldPositionY","newSquare","potentialTargetEntity","selectedInEntities","findEntityById","getEntityId","damageApplied","weapon","isAbleToFire","fire","ceaseFire","checkAmmoAndCalculateDamageApplied","getEntitiesAtGivenPosition","targetEntity","applyDamageToTargetEntity","ceaseFireNextTickIfTargetIsKilled","damage","bleeding","addBlood","bleedingReductionPerTurn","moveDestination","chosenDestinationSquare","targetedSquarePosition","moveEntityIntoChosenDestination","JR","OP","OC","moveEntityRandomly","squaresService","TargetedSquareInfo","setMoveDestinationPosition","processInterface","attackPosition","entityInfo","distanceInfo","positionInfo","bloodInfo","inspectedSquare","targetSquarePosition","squareNumber","availableActions","distanceToSelected","onMoveClick","onAttackClick","MessageService","messages","message","Weapon","causesBleeding","range","RangedWeapon","Rifle","Lazer","M16","L30","M40","Identifiable","Positionable","Movable","targetSquare","Message","send","Mortal","Bleedable","bloodReleased","bleed","Breathing","isSupposedToBeBreathing","Combative","hasWeapon","HavingInventory","actualItemIndex","findIndex","splice","Entity","baseCtor","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","age","head","entry","GameModel","Entities","SelectedEntityInfo","handleDeselectAllEntities","MessageBox","renderMessage","RenderedMessages","Game","stepNumber","loop","processEntities","state","autoLoop","setTimeout","nextTick","setState","newHandleClick","selectedSquareNumber","previousTargeted","doubleClick","markSquareAsTargeted","setMoveDestinationSquare","selectEntityFromGivenSquare","deselectAllEntities","nuke","dmg","toggleRotateBoard","isBoardRotated","switchAutoLoop","previousState","prevState","concat","entityId","actualEntity","findItemOnEntity","equipInHands","setEntityWithinApropriateSquare","nextState","moveEntities","isEntityShootingProperly","fireAShot","bleedExternally","stopBreathingForKilledEntity","markAvailableDestinationsForSelectedEntity","calculateNextGameState","setSquaresAccordingToEntities","calculateNextInterfaceState","boardClassName","checked","onChange","render","document","getElementById"],"mappings":"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","file":"static/js/main.7bf59408.chunk.js","sourcesContent":["import { Entity } from \"../services/EntitiesValues\";\r\nimport { Square } from \"../services/SquaresService\";\r\n\r\nexport function resetGivenFieldsOnACollection(collection, ...fieldNames) {\r\n  collection.forEach((item) => {\r\n    fieldNames.forEach((fieldName) => {\r\n      item && (item[fieldName] = undefined);\r\n    });\r\n  });\r\n}\r\n\r\nexport function getNumberWithinBoundaries(value: number, min: number, max: number): number {\r\n  if (value < min) value = min;\r\n  if (value > max) value = max;\r\n  return value;\r\n}\r\n\r\nexport function getRandomIntInclusive(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function calculateAngle(x: number, y: number): number {\r\n  let angle: number;\r\n  if (y >= 0) {\r\n    angle = -Math.atan(x / y) * (180 / Math.PI);\r\n  } else if (y < 0) {\r\n    angle = (180 / Math.PI) * (Math.atan(x / -y) + Math.PI);\r\n  }\r\n  return angle;\r\n}\r\n\r\nexport function calculateDistance(x: number, y: number): number {\r\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\r\n}\r\n\r\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\r\n  // see https://www.typescriptlang.org/docs/handbook/mixins.html\r\n  baseCtors.forEach((baseCtor) => {\r\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\r\n      Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));\r\n    });\r\n  });\r\n}\r\n\r\nexport function isSelectedTargeted(selected: Entity, targeted: Square): boolean {\r\n  if (selected && targeted && targeted.entity && selected.name === targeted.entity.name) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport * as Helpers from \"../../helpers\";\r\nimport \"./Square.scss\";\r\nimport { Position, Item } from \"../../services/EntitiesValues\";\r\n\r\nconst DISTANCE_BETWEEN_TILES = 38;\r\n\r\ninterface SquareProps {\r\n  squareId: string;\r\n  icon: string;\r\n\r\n  active: boolean;\r\n  isAvailableDestination: boolean;\r\n  isChosenDestination: boolean;\r\n  isBreathing: boolean;\r\n  isDead: boolean;\r\n  isShooting: boolean;\r\n  isTargeted: boolean;\r\n\r\n  position: Position;\r\n  targetPosition: Position;\r\n  blood: number;\r\n  items: Item[];\r\n\r\n  weaponType: string;\r\n  onClick: (squareIndex: string) => void;\r\n}\r\n\r\nconst flagsToClassess = {\r\n  active: \"active\",\r\n  isAvailableDestination: \"is-available-destination\",\r\n  isChosenDestination: \"is-chosen-destination\",\r\n  isBreathing: \"breathing\",\r\n  isDead: \"dead\",\r\n  isShooting: \"shooting\",\r\n  isTargeted: \"targeted\",\r\n};\r\n\r\ninterface flagsToClassessInterface {\r\n  active: string;\r\n  isAvailableDestination: string;\r\n  isChosenDestination: string;\r\n  isBreathing: string;\r\n  isDead: string;\r\n  isShooting: string;\r\n  isTargeted: string;\r\n}\r\n\r\n/** Adding classess apropriate to the flags passed in by props */\r\nfunction turnFlagsIntoClasses(props: SquareProps, flagsToClasses: flagsToClassessInterface) {\r\n  let className = \"\";\r\n\r\n  Object.keys(flagsToClassess).forEach((key) => {\r\n    if (props[key]) {\r\n      className += ` ${flagsToClassess[key]} `;\r\n    }\r\n  });\r\n  return className;\r\n}\r\n\r\nclass Square extends React.Component<SquareProps> {\r\n  renderCounter = 0;\r\n\r\n  shouldComponentUpdate = (\r\n    nextProps // only update if props differ\r\n  ) => JSON.stringify(nextProps) !== JSON.stringify(this.props);\r\n\r\n  render() {\r\n    //this.renderCounter++;\r\n    //console.log(\"Rendering Square\", this.renderCounter, this.props);\r\n\r\n    let className = \"square\";\r\n    let localId = `Square${this.props.squareId}`;\r\n\r\n    className += turnFlagsIntoClasses(this.props, flagsToClassess);\r\n\r\n    let randomTime = `${(Math.random() + 0.5).toFixed(2)}s`; // 0.50 - 1.50s\r\n    let animationBreathing = this.props.isBreathing ? `breathing ${randomTime} alternate infinite linear` : \"none\";\r\n\r\n    let targetCoords = this.props.targetPosition;\r\n    let projectileNumber = 5;\r\n    let projectiles = [];\r\n    let customStyle = \"\";\r\n    let bloodClassName = `blood-${localId}`;\r\n    let itemsClassName;\r\n    let itemsNumber;\r\n    let bloodStyle = `\r\n\r\n      .${bloodClassName} {\r\n        background: rgba(255,0,0, ${(this.props.blood / 30).toFixed(2)})\r\n      }\r\n\r\n    `;\r\n    customStyle += bloodStyle;\r\n    bloodClassName += \" blood \";\r\n\r\n    let calcNewAangle = Helpers.calculateAngle;\r\n\r\n    if (this.props.items && this.props.items.length) {\r\n      itemsClassName += ` has-items `;\r\n      itemsNumber = this.props.items.length;\r\n    }\r\n\r\n    if (\r\n      targetCoords &&\r\n      this.props.position &&\r\n      this.props.isShooting &&\r\n      (this.props.targetPosition.x !== this.props.position.x || this.props.targetPosition.y !== this.props.position.y)\r\n    ) {\r\n      if (targetCoords) {\r\n        // TODO: Move this into a helper\r\n\r\n        let distanceToTargetX = DISTANCE_BETWEEN_TILES * (targetCoords.x - this.props.position.x);\r\n        let distanceToTargetY = DISTANCE_BETWEEN_TILES * (targetCoords.y - this.props.position.y);\r\n\r\n        let actualDistance = Helpers.calculateDistance(distanceToTargetX, distanceToTargetY);\r\n\r\n        if (this.props.weaponType === \"lazer\") {\r\n          // TODO: perhaps call to `visualizeShooting(from,to,weaponType)`\r\n          let className = `projectile${localId}_beam`;\r\n          let projectile = \"\";\r\n          let angle = calcNewAangle(distanceToTargetX, distanceToTargetY);\r\n          customStyle = `\r\n            @keyframes pulsing${localId} {\r\n              0%  {opacity: 0.1;}\r\n              100%  {opacity: 1;}\r\n            }\r\n\r\n            @keyframes elongating${localId} {\r\n              0%  {width: ${actualDistance - 20};}\r\n              100%  {width: ${actualDistance + 20};}\r\n            }\r\n\r\n            @keyframes swiping${localId} {\r\n              0%  {transform: rotate(${angle + 90 + -1}deg);}\r\n              50%  {transform: rotate(${angle + 90 + 1}deg);}\r\n              100%  {transform: rotate(${angle + 90 - 1}deg);}\r\n            }\r\n\r\n            .${className} {\r\n              width: ${actualDistance}px;\r\n              height: 3px;\r\n              border-radius: 5px;\r\n              background: #F00;\r\n              position: absolute;\r\n              top: 16px;\r\n              left: 16px;\r\n\r\n              transform: rotate(${angle + 90}deg);\r\n              transform-origin: left 0px;\r\n              animation: pulsing${localId} 0.1s linear infinite,\r\n              elongating${localId} 1s linear alternate infinite,\r\n              swiping${localId} 1s linear alternate infinite;\r\n              box-shadow: 0 0 5px 5px white;\r\n              z-index: 10;\r\n            }\r\n            `;\r\n          projectiles.push(\r\n            <div key={className} className={className}>\r\n              {projectile}\r\n            </div>\r\n          );\r\n        } else {\r\n          customStyle = `\r\n            @keyframes shooting${localId} {\r\n              0%   {transform: scale(1);}\r\n              100% {transform: translate(\r\n                ${36 * (targetCoords.x - this.props.position.x)}px,\r\n                ${36 * (targetCoords.y - this.props.position.y)}px\r\n              )}\r\n            }\r\n            `;\r\n\r\n          while (projectileNumber--) {\r\n            customStyle += `\r\n            .projectile${localId}_${projectileNumber} {\r\n              position: absolute;\r\n              top: -5px;\r\n              left: 0px;\r\n              width: 100%;\r\n              height: 100%;\r\n              line-height: 34px;\r\n              font-size: 30px;\r\n              animation: shooting${localId} 0.5s linear infinite;\r\n              animation-delay: ${projectileNumber - 1 * 0.3}s;\r\n              color: white;\r\n            }`;\r\n          }\r\n          let projectile = this.props.isShooting ? \".\" : \"\";\r\n\r\n          projectileNumber = 3;\r\n\r\n          while (projectileNumber--) {\r\n            let className = `projectile projectile${localId}_${projectileNumber}`;\r\n            projectiles.push(\r\n              <div key={className} className={className}>\r\n                {projectile}\r\n              </div>\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <button className={className} onClick={() => this.props.onClick(this.props.squareId)}>\r\n        <div className={bloodClassName}>{this.props.blood}</div>\r\n        <div className={itemsClassName}>{itemsNumber}</div>\r\n        <div\r\n          className=\"content\"\r\n          style={{\r\n            animation: animationBreathing,\r\n          }}\r\n        >\r\n          {this.props.icon}\r\n        </div>\r\n        <style>{customStyle}</style>\r\n        {projectiles}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"../Square\";\r\nimport \"./Board.scss\";\r\n\r\nexport default class Board extends React.PureComponent {\r\n  renderCounter = 0;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(i) {\r\n    console.log(\"Handles Click on Board\", i);\r\n    this.props.onClick(i);\r\n  }\r\n\r\n  renderSquare(i, rowId, colId) {\r\n    /*\r\n    We pass one and the same function to all the Squares when rendering,\r\n    so they do not detect getting a new fat-arrow function as a change of props.\r\n\r\n    This is CRUCIAL to only rerender squares with changed values.\r\n\r\n    Additionally, we need to ensure that Unchanged squares have the same values of objects passed down here.\r\n    */\r\n    let square = this.props.squares[i];\r\n    let entity = this.props.squares[i] && this.props.squares[i].entity;\r\n    return (\r\n      <Square\r\n        key={i}\r\n        squareId={i}\r\n        rowNumber={rowId}\r\n        colNumber={colId}\r\n        onClick={this.handleClick}\r\n        icon={entity && entity.icon}\r\n        active={entity && entity.active}\r\n        isBreathing={entity && entity.isBreathing}\r\n        isDead={entity && entity.isDead}\r\n        isShooting={entity && entity.isShooting}\r\n        weaponType={entity && entity.equipment && entity.equipment.hands && entity.equipment.hands.type}\r\n        position={entity && entity.position}\r\n        targetPosition={entity && entity.targetPosition}\r\n        blood={square && square.blood}\r\n        items={square && square.items}\r\n        isAvailableDestination={square && square.isAvailableDestination}\r\n        isChosenDestination={square && square.isChosenDestination}\r\n        isTargeted={square && square.isTargeted}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // console.log(\"Rendering Board. #\", this.renderCounter++);\r\n\r\n    // Initial values for the Board\r\n    let cellId = 0;\r\n    let rowId = 0;\r\n    let colId;\r\n\r\n    let rows = Array(this.props.size)\r\n      .fill(null)\r\n      .map((row, number) => {\r\n        colId = 0;\r\n        let cells = Array(this.props.size)\r\n          .fill(null)\r\n          .map((cell, number) => {\r\n            return this.renderSquare(cellId++, rowId, colId++);\r\n          });\r\n        return (\r\n          <div key={rowId++} className=\"board-row\">\r\n            {cells}\r\n          </div>\r\n        );\r\n      });\r\n\r\n    let className = \"board \" + this.props.className;\r\n    return <div className={className}>{rows}</div>;\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./LinearDisplay.scss\";\n\nexport default function LinearDisplay(props) {\n  let className = `linear-display ${props.className || \"\"}`;\n  let percentage = ~~((props.current * 100) / props.max);\n  let overload = percentage > 100;\n  if (overload) {\n    percentage = 100;\n    className += \" overload \";\n  }\n\n  let progressStyle = {\n    width: `${percentage}%`,\n  };\n  let title = props.title || `${props.current}/${props.max}`;\n\n  let amount = props.current;\n\n  let divider = 1;\n  if (props.max >= 40 && props.max < 100) {\n    divider = 5;\n  } else if (props.max >= 100) {\n    divider = 10;\n  }\n\n  amount = amount / divider;\n\n  let gridSize = 100 / amount;\n\n  let color = `rgba(200,200,200,0.4)`;\n  color = `black`;\n  let progressGridStyle = {\n    backgroundSize: `${gridSize}% 100%`,\n    backgroundImage: `\n      linear-gradient(to left, ${color} 1px, transparent 1px)\n    `,\n  };\n\n  Object.assign(progressStyle, progressGridStyle);\n\n  return (\n    <div className={className}>\n      <div className=\"linear-display__label\">{props.label}:&nbsp;</div>\n      <div className=\"linear-display__bar-container\" title={title}>\n        <div className=\"linear-display__bar-progress\" style={progressStyle}>\n          <span className=\"linear-display__bar-progress-text\">\n            {props.current}\n            {overload ? \"/\" + props.max : \"\"}&nbsp;\n          </span>\n        </div>\n      </div>\n      <div>&nbsp;</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./InventoryList.scss\";\n\nexport default function InventoryList(props) {\n  const className = `inventory-list ${props.className || \"\"}`;\n\n  if (!props.inventory) {\n    return null;\n  }\n  let reloadButton;\n  let dropButton;\n  const inventoryItems = props.inventory.map((item) => {\n    if (item.reload) {\n      // has reload capability\n      let className = \" inventory-list__reload-button \";\n\n      if (item.rounds === 0 || item.rounds === \"empty\") {\n        className += \" inventory-list__reload-button--empty \";\n      } else if (item.rounds < item.maxRounds) {\n        className += \" inventory-list__reload-button--partial \";\n      }\n      reloadButton = (\n        <button\n          className={className}\n          onClick={() => {\n            item.reload();\n            props.onClick(item.name); // this only to trigger the render\n          }}\n        >\n          Reload\n        </button>\n      );\n    } else {\n      reloadButton = null;\n    }\n    dropButton = (\n      <button\n        className=\"inventory-list__drop-button\"\n        onClick={() => {\n          props.onDrop(item.name);\n        }}\n      >\n        Drop\n      </button>\n    );\n\n    return (\n      <div key={item.name}>\n        <div onClick={() => props.onClick(item.name)} key={item.name} className=\"inventory-list__item\">\n          <span>{item.name}</span>\n        </div>\n        {reloadButton}\n        {dropButton}\n      </div>\n    );\n  });\n\n  return (\n    <div className={className}>\n      <div className=\"inventory-list__label\">\n        {props.label}\n        :&nbsp;\n      </div>\n      <div className=\"inventory-list__container\" title={props.title}>\n        {inventoryItems}\n      </div>\n    </div>\n  );\n}\n","import * as Helpers from \"../helpers/Helpers\";\nimport { Entity, Position, Item } from \"./EntitiesValues\";\n\nexport interface Square {\n  entity?: Entity;\n  blood?: number;\n  isAvailableDestination?: boolean;\n  isChosenDestination?: boolean;\n  isTargeted?: boolean;\n  items?: Item[];\n}\n\nexport class Square implements Square {}\n\nclass SquaresServiceClass {\n  arenaSize: number = 10;\n\n  squares: Square[] = [];\n\n  constructor() {\n    let i = this.arenaSize * this.arenaSize;\n    while (i-- !== 0) {\n      this.initializeSquareIfEmpty(i);\n    }\n  }\n\n  getSquare(x: number, y: number): Square {\n    return this.squares[this.targetSquareIndex(x, y)];\n  }\n\n  setSquare(x: number, y: number, value): void {\n    this.squares[this.targetSquareIndex(x, y)] = value;\n  }\n\n  targetSquareIndex(x: number, y: number): number {\n    return y * this.arenaSize + x;\n  }\n\n  targetSquarePosition(squareIndex: number): Position {\n    let x: number, y: number;\n    y = Math.floor(squareIndex / this.arenaSize);\n    x = squareIndex % this.arenaSize;\n    return { x, y };\n  }\n\n  setEntityWithinApropriateSquare(entity: Entity): void {\n    this.setEntityWithinASquare(entity.position.x, entity.position.y, entity);\n  }\n\n  setEntityWithinASquare(x: number, y: number, entity: Entity) {\n    let squareIndex: number = this.targetSquareIndex(x, y);\n    this.initializeSquareIfEmpty(squareIndex);\n    this.squares[squareIndex].entity = entity;\n  }\n\n  addBlood(square: Square, amount: number) {\n    if (!square) {\n      square = {};\n    }\n    if (!square.blood) {\n      square.blood = amount;\n    } else {\n      square.blood += amount;\n    }\n  }\n\n  markSquareAsTargeted(squareIndex: number): void {\n    Helpers.resetGivenFieldsOnACollection(this.squares, \"isTargeted\");\n    this.initializeSquareIfEmpty(squareIndex);\n    this.squares[squareIndex].isTargeted = true;\n  }\n\n  initializeSquareIfEmpty(squareIndex: number) {\n    if (!this.squares[squareIndex]) {\n      this.squares[squareIndex] = {};\n    }\n  }\n\n  markAvailableDestinationsForSelectedEntity(entity: Entity): void {\n    if (entity.active) {\n      let { x, y } = entity.position;\n\n      Helpers.resetGivenFieldsOnACollection(this.squares, \"isAvailableDestination\");\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize || (i === x && j === y)) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n          if (!square) {\n            square = {};\n          }\n          square.isAvailableDestination = true;\n          this.setSquare(i, j, square);\n        }\n      }\n    }\n  }\n}\n\nlet SquaresService = new SquaresServiceClass();\nexport default SquaresService;\n","import React from \"react\";\r\nimport LinearDisplay from \"./LinearDisplay\";\r\nimport InventoryList from \"./InventoryList\";\r\nimport \"./EntityCard.scss\";\r\nimport SquaresService from \"../../services/SquaresService\";\r\n\r\nclass EntityCard extends React.Component {\r\n  renderCount = 0;\r\n  handleInventoryClick = (itemName) => {\r\n    this.props.onInventoryClick(this.props.entity, itemName);\r\n  };\r\n\r\n  renderAmmo = (inHands) => {\r\n    if (inHands) {\r\n      return <LinearDisplay label=\"Rounds\" current={inHands.rounds} max={inHands.maxRounds} />;\r\n    }\r\n  };\r\n\r\n  onDrop = (itemName) => {\r\n    let { entity } = this.props;\r\n    entity.unEquipFromHands();\r\n    let item = entity.takeFromInventory(itemName);\r\n    let square = SquaresService.getSquare(entity.position.x, entity.position.y);\r\n    if (!square.items) {\r\n      square.items = [];\r\n    }\r\n    square.items.push(item);\r\n    this.props.onInventoryClick(this.props.entity, \"\"); // just to rerender\r\n  };\r\n\r\n  render() {\r\n    // console.log(\"Rendering EntityView. #\", this.renderCount++);\r\n    let { entity } = this.props;\r\n    if (!entity) return null;\r\n    /*\r\n      FIXME: Below should be separated into several sub-components\r\n      Each sub-component should receive flat data (position, hp, ...)\r\n     */\r\n    let className = \" entity \";\r\n    if (entity.active) {\r\n      className += \" active \";\r\n    }\r\n\r\n    let { isDead, isFriendly } = entity;\r\n    let fof = isFriendly ? \" friendly \" : \" unfriendly \";\r\n    let lifeSigns = isDead ? \" DEAD \" : \" ALIVE \";\r\n    className += fof;\r\n    className += lifeSigns;\r\n    let inHands = entity.equipment && entity.equipment.hands;\r\n    let inHandsArray = (inHands && [inHands]) || [];\r\n\r\n    return (\r\n      <div className={className}>\r\n        <div>\r\n          <div className=\"position\" title=\"Position\">\r\n            <span>\r\n              {\" \"}\r\n              {entity.position.x} {entity.position.y}{\" \"}\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"portrait\">{entity.icon}</div>\r\n        </div>\r\n        <strong title=\"Name\">{entity.name}</strong>\r\n        <br />\r\n        {` `}\r\n        {lifeSigns}\r\n        <br />\r\n\r\n        <div\r\n          style={{\r\n            clear: \"both\",\r\n            display: \"inline-block\",\r\n            textAlign: \"right\",\r\n          }}\r\n        >\r\n          <LinearDisplay label=\"HP\" current={entity.hp} max={entity.maxHp} />\r\n          <br />\r\n          {this.renderAmmo(inHands)}\r\n        </div>\r\n        <InventoryList\r\n          label=\"Equipped\"\r\n          title=\"In hands\"\r\n          onClick={this.handleInventoryClick}\r\n          onDrop={this.onDrop}\r\n          inventory={inHandsArray}\r\n        />\r\n        <InventoryList\r\n          label=\"Inventory\"\r\n          title=\"In backpack\"\r\n          onClick={this.handleInventoryClick}\r\n          onDrop={this.onDrop}\r\n          inventory={entity.inventory}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EntityCard;\r\n","import React from \"react\";\r\nimport EntityCard from \"../EntityCard\";\r\nimport \"./EntitiesList.scss\";\r\n\r\nexport default class ListOfEntities extends React.Component {\r\n  renderCounter = 0;\r\n  render() {\r\n    // console.log(\"Rendering EntitiesList #\", this.renderCounter++);\r\n\r\n    let entitiesFriendly = this.props.entities\r\n      .filter((entity) => entity.isFriendly)\r\n      .map((obj) => {\r\n        return <EntityCard onInventoryClick={this.props.onInventoryClick} entity={obj} key={obj.name} />;\r\n      });\r\n\r\n    let entitiesUnfriendly = this.props.entities\r\n      .filter((entity) => !entity.isFriendly)\r\n      .map((obj) => {\r\n        return <EntityCard entity={obj} key={obj.name} />;\r\n      });\r\n\r\n    return (\r\n      <>\r\n        <h4 className=\"list-of-entities__header\">List of Entities:</h4>\r\n        <div className=\"list-of-entities\">{entitiesFriendly}</div>\r\n        <div className=\"list-of-entities\">{entitiesUnfriendly}</div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import entitiesService from \"./EntitiesService\";\r\nimport squaresService from \"./SquaresService\";\r\n\r\nexport let EntitiesService = entitiesService;\r\nexport let SquaresService = squaresService;\r\n","import { default as SquaresService, Square } from \"./SquaresService\";\nimport * as Helpers from \"../helpers/Helpers\";\nimport {\n  Entity,\n  Position,\n  Weapon,\n  RangedWeapon,\n  Mortal,\n  Positionable,\n  Bleedable,\n  HavingInventory,\n} from \"../services/EntitiesValues\";\nconst arenaSize: number = 10;\n\nclass EntitiesServiceClass {\n  entities: Entity[];\n  selected: Entity;\n\n  getEntityId(entity: Entity): string {\n    return entity.name;\n  }\n\n  findEntityById(id: string): Entity {\n    let result: Entity = this.entities.filter((entity) => entity.name === id)[0];\n    return result;\n  }\n\n  findItemOnEntity(entity: HavingInventory, id: string) {\n    let result = entity.inventory.filter((item) => item.name === id)[0];\n    return result;\n  }\n\n  moveEntityRandomly(entity: Entity) {\n    if (entity.isDead) return;\n\n    let oldPositionX = entity.position.x;\n    let oldPositionY = entity.position.y;\n\n    entity.position.x = entity.position.x + Helpers.getRandomIntInclusive(-1, 1);\n    entity.position.y = entity.position.y + Helpers.getRandomIntInclusive(-1, 1);\n\n    entity.position.x = Helpers.getNumberWithinBoundaries(entity.position.x, 0, arenaSize - 1);\n    entity.position.y = Helpers.getNumberWithinBoundaries(entity.position.y, 0, arenaSize - 1);\n\n    let newSquare = SquaresService.getSquare(entity.position.x, entity.position.y);\n\n    if (newSquare && newSquare.entity) {\n      // if square occupiec, reverse the move\n      entity.position.x = oldPositionX;\n      entity.position.y = oldPositionY;\n    }\n  }\n\n  stopBreathingForKilledEntity(entity: Entity): Entity {\n    if (entity && entity.hp <= 0) {\n      entity.isBreathing = false;\n      entity.hp = 0;\n    }\n    return entity;\n  }\n\n  getEntitiesAtGivenPosition(targetPosition: Position): Entity[] {\n    return this.entities.filter((potentialTargetEntity: Entity): boolean => {\n      return (\n        potentialTargetEntity.position.x === targetPosition.x && potentialTargetEntity.position.y === targetPosition.y\n      );\n    });\n  }\n\n  selectEntityFromGivenSquare(selected: Entity, targeted: Square): Entity {\n    if (selected && targeted && targeted.entity) {\n      selected.active = false;\n    }\n    if (targeted && targeted.entity) {\n      selected = targeted.entity;\n      selected.active = true;\n    }\n\n    return selected;\n  }\n\n  setSelected(selected: Entity, value: boolean): Entity {\n    let selectedInEntities = this.findEntityById(this.getEntityId(selected));\n    if (value) {\n      selected.active = value;\n    } else {\n      selected = null;\n      console.log(\"Nullified:\", selected);\n    }\n    selectedInEntities.active = value;\n    return selected;\n  }\n\n  checkAmmoAndCalculateDamageApplied(entity: Entity): number {\n    let damageApplied: number = 0;\n    let weapon: RangedWeapon = entity.equipment && entity.equipment.hands;\n\n    if (!weapon) return 0;\n\n    if (weapon.isAbleToFire) {\n      damageApplied = weapon.fire();\n    } else {\n      weapon.rounds = \"empty\";\n      entity.isShooting = false;\n    }\n\n    return damageApplied;\n  }\n\n  fireAShot(entity: Entity) {\n    if (entity.ceaseFire) {\n      entity.isShooting = false;\n      entity.ceaseFire = false;\n      return;\n    }\n    let damageApplied = this.checkAmmoAndCalculateDamageApplied(entity);\n    let targetEntities = this.getEntitiesAtGivenPosition(entity.targetPosition);\n    targetEntities.forEach((targetEntity) => {\n      this.applyDamageToTargetEntity(targetEntity, damageApplied);\n      this.ceaseFireNextTickIfTargetIsKilled(entity, targetEntity);\n    });\n  }\n\n  applyDamageToTargetEntity(targetEntity: Entity, damage: number) {\n    if (damage) {\n      targetEntity.hp -= damage;\n      targetEntity.bleeding = 5;\n    }\n  }\n\n  ceaseFireNextTickIfTargetIsKilled(entity: Entity, targetEntity: Entity): void {\n    if (targetEntity.hp < 0) {\n      entity.ceaseFire = true;\n    }\n  }\n\n  isEntityShootingProperly(entity: Entity): boolean {\n    return (\n      entity.isShooting &&\n      entity.targetPosition &&\n      (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\n    );\n  }\n\n  applyEffectsOfBleeding(entity: Entity): Entity {\n    // TODO: move to a \"bleed\" method\n    if (entity.bleeding && entity.hp > 0) {\n      entity.hp -= entity.bleeding;\n      let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\n      SquaresService.addBlood(square, entity.bleeding);\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n    }\n    return entity;\n  }\n\n  moveEntityIntoChosenDestination(entity: Entity): Entity {\n    if (!entity.isDead && entity.moveDestination) {\n      let chosenDestinationSquare: Square = SquaresService.getSquare(\n        entity.moveDestination.x,\n        entity.moveDestination.y\n      );\n\n      entity.position = entity.moveDestination;\n      delete entity.moveDestination;\n      chosenDestinationSquare.isChosenDestination = undefined;\n    }\n    return entity;\n  }\n\n  setMoveDestinationOnASelectedEntity(selected: Entity, targetedSquarePosition: Position): void {\n    selected.moveDestination = targetedSquarePosition;\n  }\n\n  moveEntities(): void {\n    this.entities.forEach((entity) => this.moveEntityIntoChosenDestination(entity));\n    let JR: Entity = this.findEntityById(\"John Rambo\");\n    let OP: Entity = this.findEntityById(\"Squid\");\n    let OC: Entity = this.findEntityById(\"Octo\");\n    this.moveEntityRandomly(JR);\n    this.moveEntityRandomly(OP);\n    this.moveEntityRandomly(OC);\n  }\n}\n\nlet EntitiesService = new EntitiesServiceClass();\nexport default EntitiesService;\n","import React, { ReactElement, DOMElement } from \"react\";\nimport * as Helpers from \"../../helpers/Helpers\";\nimport { SquaresService, EntitiesService } from \"../../services\";\nimport EntityCard from \"../EntityCard/EntityCard\";\nimport { Square } from \"../../services/SquaresService\";\nimport { Entity, Position } from \"../../services/EntitiesValues\";\nimport InventoryList from \"../EntityCard/InventoryList\";\n\ninterface TargetedSquareInfoProps {\n  className: string;\n  squareNumber: number;\n  squares: Square[];\n  selected: Entity;\n  targeted: Square;\n  onInventoryClick: Function;\n  processInterface: Function;\n}\n\nexport default class TargetedSquareInfo extends React.Component<TargetedSquareInfoProps> {\n  onMoveClick(selected: Entity, targetedSquarePosition: Position) {\n    //EntitiesService.setMoveDestinationOnASelectedEntity(selected, targetedSquarePosition);\n    selected.setMoveDestinationPosition(targetedSquarePosition);\n    let targetedSquare: Square = SquaresService.getSquare(targetedSquarePosition.x, targetedSquarePosition.y);\n\n    targetedSquare.isChosenDestination = true;\n    this.props.processInterface();\n  }\n\n  onAttackClick(selected: Entity, targetedSquarePosition: Position) {\n    selected.attackPosition(targetedSquarePosition);\n    this.props.processInterface();\n  }\n\n  render() {\n    if (!this.props.targeted) {\n      return null;\n    }\n\n    //this.props.squareNumber\n    let inspectedSquare = this.props.targeted;\n    let selected: Entity = this.props.selected;\n    let targeted: Square = this.props.targeted;\n\n    let targetedSquarePosition = SquaresService.targetSquarePosition(this.props.squareNumber);\n\n    let entityInfo;\n    let distanceInfo;\n    let positionInfo;\n    let bloodInfo;\n    let availableActions = [];\n    let items;\n\n    if (targeted && targeted.entity && !Helpers.isSelectedTargeted(this.props.selected, this.props.targeted)) {\n      entityInfo = <EntityCard onInventoryClick={this.props.onInventoryClick} entity={targeted.entity} />;\n    }\n\n    if (targeted && targeted.items) {\n      items = (\n        <InventoryList\n          label=\"Items in this location\"\n          title=\"On the floor\"\n          onClick={null}\n          onDrop={null}\n          inventory={targeted.items}\n        />\n      );\n    }\n\n    if (selected) {\n      let distanceToSelected = Helpers.calculateDistance(\n        targetedSquarePosition.x - selected.position.x,\n        targetedSquarePosition.y - selected.position.y\n      );\n\n      distanceInfo = <li>Distance to selected: {~~distanceToSelected}</li>;\n\n      if (distanceToSelected !== 0) {\n        if (targeted && targeted.isAvailableDestination) {\n          availableActions[0] = (\n            <button onClick={() => this.onMoveClick(selected, targetedSquarePosition)} className=\"button\">\n              Move\n            </button>\n          );\n        }\n        if (targeted && targeted.entity) {\n          availableActions[1] = (\n            <button onClick={() => this.onAttackClick(selected, targetedSquarePosition)} className=\"button\">\n              Attack\n            </button>\n          );\n        }\n      }\n    }\n\n    if (targetedSquarePosition) {\n      positionInfo = (\n        <li>\n          Position: [ {targetedSquarePosition.x}, {targetedSquarePosition.y} ]{\" \"}\n        </li>\n      );\n    }\n\n    if (inspectedSquare && inspectedSquare.blood) {\n      bloodInfo = <li>Blood amount: {inspectedSquare.blood}</li>;\n    }\n\n    return (\n      <div className={this.props.className}>\n        <strong>Target square Info</strong>\n        <div>{entityInfo}</div>\n        <div>{availableActions}</div>\n        <ul>\n          {positionInfo}\n          {distanceInfo}\n          {bloodInfo}\n          {items}\n        </ul>\n      </div>\n    );\n  }\n}\n","class MessageServiceClass {\n  messages: string[] = [];\n  send(message: string) {\n    this.messages.push(message);\n  }\n}\n\nconst MessageService = new MessageServiceClass();\n\nexport default MessageService;\n","import { applyMixins } from \"../helpers\";\nimport EntitiesService from \"./EntitiesService\";\nimport { SquaresService } from \".\";\nimport { Square } from \"./SquaresService\";\nimport * as Helpers from \"../helpers\";\nimport Message from \"../services/MessageService\";\n\nexport class Item {}\n\nexport class Weapon extends Item {\n  causesBleeding = 0;\n  range = 0;\n  damage = 0;\n}\n\nexport class RangedWeapon extends Weapon {\n  rounds: number | any = 0;\n  maxRounds = 5;\n\n  fire() {\n    this.rounds--;\n    console.log(\"Firing ranged weapon. Damage: \", this.damage);\n    return this.damage;\n  }\n\n  get isAbleToFire() {\n    return this.rounds > 0;\n  }\n\n  reload() {\n    this.rounds = this.maxRounds;\n  }\n}\n\nclass Rifle extends RangedWeapon {\n  type = \"projectile\";\n  range = 4;\n  damage = 1;\n  causesBleeding = 4;\n}\n\nclass Lazer extends RangedWeapon {\n  type = \"lazer\";\n  range = 6;\n  damage = 5;\n  causesBleeding = 0;\n}\n\nclass M16 extends Rifle {\n  name = \"M16\";\n  rounds = 15;\n  maxRounds = 20;\n  damage = 2;\n}\n\nclass L30 extends Lazer {\n  name = \"Assault Lazer Cannon\";\n  rounds = 3;\n  maxRounds = 3;\n  damage = 10;\n}\n\nclass M40 extends Rifle {\n  name = \"M41A Pulse Rifle\";\n  rounds = 40;\n  maxRounds = 40;\n  damage = 1;\n}\n\n/** Position on a grid */\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nclass Identifiable {\n  name: string = \"An Entity\";\n  icon: string = \"E\";\n}\n\nexport class Positionable {\n  position: Position = { x: undefined, y: undefined };\n}\n\nclass Movable extends Identifiable {\n  moveDestination: Position;\n\n  setMoveDestinationSquare(squareIndex: number) {\n    this.setMoveDestinationPosition(SquaresService.targetSquarePosition(squareIndex));\n  }\n\n  setMoveDestinationPosition(targetPosition: Position) {\n    let targetSquare = SquaresService.getSquare(targetPosition.x, targetPosition.y);\n    if (!targetSquare.entity || targetSquare.entity.isDead) {\n      this.moveDestination = targetPosition;\n      Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\");\n      targetSquare.isChosenDestination = true;\n    } else {\n      Message.send(`${this.name} cannot move into square ${targetPosition.x} ${targetPosition.y}`);\n    }\n  }\n}\n\nexport class Mortal extends Positionable {\n  hp: number = 100;\n  maxHp: number = 100;\n  get isDead(): boolean {\n    return this.hp <= 0;\n  }\n}\n\nexport class Bleedable extends Mortal {\n  bleeding: number;\n  bleedingReductionPerTurn: number = 1;\n  bleed(): number {\n    let entity = this;\n    let bloodReleased = 0;\n    if (entity.bleeding && entity.hp > 0) {\n      bloodReleased = entity.bleeding;\n      entity.hp -= bloodReleased;\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n    }\n    return bloodReleased;\n  }\n\n  bleedExternally() {\n    if (!this.bleeding) return;\n    let entity = this;\n    let bloodReleased = this.bleed();\n    let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\n    SquaresService.addBlood(square, bloodReleased);\n  }\n}\n\nclass Breathing extends Mortal {\n  isSupposedToBeBreathing: boolean = undefined;\n  get isBreathing(): boolean {\n    return this.hp > 0 && this.isSupposedToBeBreathing;\n  }\n  set isBreathing(value: boolean) {\n    this.isSupposedToBeBreathing = value;\n  }\n}\n\nclass Combative extends Identifiable {\n  targetPosition: Position;\n  isShooting?: boolean;\n  ceaseFire?: boolean;\n  hasWeapon?: boolean;\n  attackPosition(targetedSquarePosition: Position) {\n    if (this.hasWeapon) {\n      this.targetPosition = targetedSquarePosition;\n      this.isShooting = true;\n    } else {\n      Message.send(`${this.name} no fkin weapon in hands`);\n    }\n  }\n}\n\nexport class HavingInventory {\n  inventory: any[];\n  takeFromInventory(itemName) {\n    let actualItemIndex = this.inventory.findIndex((item) => item.name == itemName);\n    let actualItem = this.inventory.splice(actualItemIndex, 1)[0];\n    //let newInventory = [].concat(this.inventory)\n    //this.inventory = newInventory\n    return actualItem;\n  }\n  addToInventory(item: Item) {\n    this.inventory.push(item);\n  }\n}\n\nclass HavingEquipment extends HavingInventory {\n  equipment: any;\n  hasWeapon?: boolean;\n\n  equipInHands(itemName: string) {\n    this.unEquipFromHands();\n    let item = this.takeFromInventory(itemName);\n    this.equipment.hands = item;\n    if (item instanceof Weapon) {\n      this.hasWeapon = true;\n    }\n  }\n\n  unEquipFromHands() {\n    if (this.equipment.hands) {\n      this.inventory.push(this.equipment.hands);\n      this.equipment.hands = null;\n    }\n  }\n}\n\nexport class Entity {\n  // Extended by mixins below\n  constructor(...props) {\n    Object.assign(this, ...props);\n  }\n\n  active?: boolean;\n}\n\n/************************************************************/\n/* Always update both lists */\n\nexport interface Entity\n  extends Identifiable,\n    Positionable,\n    Mortal,\n    Bleedable,\n    Movable,\n    Breathing,\n    Combative,\n    HavingInventory,\n    HavingEquipment {}\napplyMixins(Entity, [\n  Identifiable,\n  Positionable,\n  Mortal,\n  Bleedable,\n  Movable,\n  Breathing,\n  Combative,\n  HavingInventory,\n  HavingEquipment,\n]);\n\n/************************************************************/\n\nconst entitiesInitialValues = [\n  {\n    name: \"John Rambo\",\n    age: 40,\n    hp: 95,\n    maxHp: 100,\n    icon: \"😠\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 8, y: 8 },\n    inventory: [{ name: \"KA-BAR\" }, new M16()],\n    equipment: { head: \"Red Bandana\", hands: null },\n  },\n  {\n    name: \"Ellen Replay\",\n    age: 30,\n    hp: 50,\n    maxHp: 65,\n    icon: \"👩\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 1, y: 8 },\n    inventory: [new M40(), { name: \"Motion Detector\" }],\n    equipment: { head: \"Afro\" },\n  },\n  {\n    name: \"Lazer Blady\",\n    age: 60,\n    hp: 75,\n    maxHp: 100,\n    icon: \"🧑🏻\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 4, y: 8 },\n    inventory: [new L30(), new M16()],\n    equipment: {},\n  },\n  {\n    name: \"Lux Aeterna\",\n    age: 20,\n    hp: 50,\n    maxHp: 50,\n    icon: \"👱‍♀️\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 1, y: 1 },\n    inventory: [new L30()],\n    equipment: {},\n  },\n  {\n    name: \"Robot\",\n    age: 1,\n    hp: 50,\n    maxHp: 50,\n    icon: \"🤖\",\n    isBreathing: false,\n    position: { x: 4, y: 5 },\n  },\n  {\n    name: \"Octo\",\n    age: 8,\n    hp: 200,\n    maxHp: 200,\n    icon: \"🐙\",\n    isBreathing: true,\n    position: { x: 8, y: 2 },\n    bleedingReductionPerTurn: 0,\n    bleeding: 1,\n  },\n  {\n    name: \"Squid\",\n    age: 5,\n    hp: 100,\n    maxHp: 100,\n    icon: \"🦑\",\n    isBreathing: true,\n    position: { x: 5, y: 5 },\n  },\n  {\n    name: \"Ant\",\n    age: 1,\n    hp: 45,\n    maxHp: 50,\n    icon: \"🐜\",\n    isBreathing: true,\n    position: { x: 7, y: 6 },\n  },\n  {\n    name: \"Spider\",\n    age: 1,\n    hp: 100,\n    maxHp: 150,\n    icon: \"🕷️\",\n    isBreathing: true,\n    position: { x: 9, y: 3 },\n    bleedingReductionPerTurn: 1,\n  },\n  {\n    name: \"Mosquito\",\n    age: 1,\n    hp: 12,\n    maxHp: 20,\n    icon: \"🦟\",\n    isBreathing: true,\n    position: { x: 2, y: 7 },\n  },\n  {\n    name: \"Microbe\",\n    age: 1,\n    hp: 1,\n    maxHp: 5,\n    icon: \"🦠\",\n    isBreathing: true,\n    position: { x: 3, y: 5 },\n  },\n];\n\nconst entities = entitiesInitialValues.map((entry) => new Entity(entry));\n\nexport default entities;\n","import Entities from \"./EntitiesValues\";\n\nclass GameModelClass {\n  entities;\n  constructor(Entities) {\n    this.entities = Entities;\n  }\n  access() {\n    console.log(\"Accessing Game Model\");\n    console.log(this.entities);\n  }\n}\n\nlet GameModel = new GameModelClass(Entities);\n\nexport default GameModel;\n","import React, { ReactElement, DOMElement } from \"react\";\nimport * as Helpers from \"../../helpers/Helpers\";\nimport { SquaresService, EntitiesService } from \"../../services\";\nimport EntityCard from \"../EntityCard/EntityCard\";\nimport { Square } from \"../../services/SquaresService\";\nimport { Entity, Position } from \"../../services/EntitiesValues\";\n\ninterface SelectedEntityInfoProperties {\n  selected: Entity;\n  onInventoryClick: Function;\n  handleDeselectAllEntities: () => void;\n}\n\nexport default class SelectedEntityInfo extends React.Component<SelectedEntityInfoProperties> {\n  render() {\n    if (!this.props.selected) {\n      return null;\n    }\n\n    return (\n      <div className=\"selected\">\n        <strong>Selected entity </strong>\n        <div>\n          <EntityCard onInventoryClick={this.props.onInventoryClick} entity={this.props.selected} />\n        </div>\n        <button onClick={this.props.handleDeselectAllEntities} className=\"button\">\n          {\" \"}\n          Deselect\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport MessageService from \"../../services/MessageService\";\n\nexport class MessageBox extends React.Component {\n  messages = MessageService.messages;\n\n  renderMessage = (message, number) => {\n    return (\n      <li>\n        Message nr[{number}]: {message}\n      </li>\n    );\n  };\n\n  render() {\n    let RenderedMessages = this.messages.map((message, number) => {\n      return this.renderMessage(message, number);\n    });\n\n    return <ul>{RenderedMessages}</ul>;\n  }\n}\n","import React from \"react\";\nimport Board from \"../Board\";\nimport EntitiesList from \"../EntitiesList\";\nimport TargetedSquareInfo from \"./TargetedSquareInfo\";\n\nimport { EntitiesService, SquaresService } from \"../../services\";\nimport GameLogic from \"../../services/GameLogicService\";\nimport GameModel from \"../../services/GameModelService\";\n\nimport * as Helpers from \"../../helpers\";\nimport \"./Game.scss\";\n\nimport { Entity, Weapon } from \"../../services/EntitiesValues\";\nimport { Square } from \"../../services/SquaresService\";\nimport EntityCard from \"../EntityCard/EntityCard\";\nimport SelectedEntityInfo from \"./SelectedEntityInfo\";\nimport { MessageBox } from \"./MessageBox\";\n\ninterface GameState {\n  targeted: Square;\n  selected: Entity;\n  arenaSize: number;\n  isBoardRotated: boolean;\n  entities: Entity[];\n  squares: Square[];\n  autoLoop: boolean;\n  selectedSquareNumber: number;\n}\n\nexport default class Game extends React.PureComponent<void, GameState> {\n  renderCounter: number = 0;\n  stepNumber: number = 0;\n\n  constructor(props) {\n    super(props);\n\n    // Initial VALUE of game state\n    this.state = {\n      targeted: null,\n      selected: null,\n      arenaSize: 10,\n      isBoardRotated: false,\n      entities: GameModel.entities,\n      squares: SquaresService.squares,\n      autoLoop: true,\n      selectedSquareNumber: null,\n    };\n  }\n\n  componentDidMount() {\n    //this.state.squares =SquaresService.squares;\n    EntitiesService.entities = this.state.entities;\n    this.loop();\n  }\n\n  setSquaresAccordingToEntities() {\n    this.setState((previousState) => {\n      let squares: Square[] = [].concat(previousState.squares);\n      let entities: Entity[] = previousState.entities;\n\n      SquaresService.squares = squares;\n      Helpers.resetGivenFieldsOnACollection(squares, \"entity\");\n      entities.forEach((entity) => {\n        SquaresService.setEntityWithinApropriateSquare(entity);\n      });\n\n      return { squares };\n    });\n  }\n\n  calculateNextGameState(previousState: GameState) {\n    let nextState: GameState = previousState;\n    let { entities, squares, selected } = nextState;\n\n    EntitiesService.moveEntities();\n    entities.forEach((entity) => {\n      if (EntitiesService.isEntityShootingProperly(entity)) {\n        EntitiesService.fireAShot(entity);\n      }\n      entity.bleedExternally();\n\n      EntitiesService.stopBreathingForKilledEntity(entity);\n      SquaresService.markAvailableDestinationsForSelectedEntity(entity);\n    });\n\n    return nextState;\n  }\n\n  calculateNextInterfaceState(previousState: GameState) {\n    let nextState = previousState;\n    let { entities } = nextState;\n\n    entities.forEach((entity) => {\n      SquaresService.markAvailableDestinationsForSelectedEntity(entity);\n    });\n\n    return nextState;\n  }\n\n  processEntities() {\n    this.setState(\n      (prevState) => this.calculateNextGameState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  processInterface() {\n    this.setState(\n      (prevState) => this.calculateNextInterfaceState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  loop = () => {\n    this.stepNumber++;\n\n    this.processEntities();\n\n    if (this.state.autoLoop) {\n      setTimeout(this.loop, 1000);\n    }\n  };\n\n  nextTick = () => {\n    this.setState({ autoLoop: false });\n    this.loop();\n  };\n\n  newHandleClick = (squareIndex: number) => {\n    this.setState((state) => {\n      let { squares, entities, selected, targeted, selectedSquareNumber } = state;\n      let previousTargeted = targeted;\n      targeted = squares[squareIndex];\n      const doubleClick = () => previousTargeted === targeted;\n      SquaresService.markSquareAsTargeted(squareIndex);\n\n      /** Setting move destination while clicking on empty square */\n      if (doubleClick() && targeted.isAvailableDestination) {\n        selected.setMoveDestinationSquare(squareIndex);\n      }\n\n      /** To be able to deselect */\n      if (doubleClick() || selected) {\n        if (!selected && targeted.entity) {\n          // Selecting\n          selected = EntitiesService.selectEntityFromGivenSquare(selected, targeted);\n          //targeted = undefined;\n        } else if (Helpers.isSelectedTargeted(selected, targeted)) {\n          // Deselecting if not selecting\n          this.deselectAllEntities();\n          selected = undefined;\n        }\n        selectedSquareNumber = squareIndex;\n      }\n\n      // setting attack\n      if (doubleClick() && selected && targeted.entity) {\n        selected.attackPosition(SquaresService.targetSquarePosition(squareIndex));\n      }\n\n      return { squares, entities, selected, targeted, selectedSquareNumber };\n    }, this.processInterface);\n  };\n\n  nuke = (dmg: number) => {\n    this.setState(\n      (state) => {\n        let { entities } = state;\n\n        entities.forEach((entity) => {\n          entity.hp = entity.hp - dmg;\n        });\n\n        return { entities };\n      },\n      () => {\n        this.processEntities();\n      }\n    );\n  };\n\n  toggleRotateBoard = () => {\n    this.setState({ isBoardRotated: !this.state.isBoardRotated });\n  };\n\n  switchAutoLoop = () => {\n    this.setState(\n      (previousState) => {\n        return { autoLoop: !previousState.autoLoop };\n      },\n      () => {\n        if (this.state.autoLoop) {\n          this.loop();\n        }\n      }\n    );\n  };\n\n  onInventoryClick = (entity: Entity, itemName: string) => {\n    this.setState((prevState) => {\n      let entities = [].concat(prevState.entities);\n      let entityId = EntitiesService.getEntityId(entity);\n      let actualEntity = EntitiesService.findEntityById(entityId);\n      let actualItem = EntitiesService.findItemOnEntity(actualEntity, itemName);\n\n      if (actualEntity.equipment.hands && actualEntity.equipment.hands.name == itemName) {\n        actualEntity.unEquipFromHands();\n      } else {\n        actualEntity.equipInHands(itemName);\n      }\n\n      return { entities };\n    });\n    console.log(entity, itemName);\n  };\n\n  handleDeselectAllEntities = () => {\n    this.setState(\n      (state) => {\n        let { squares, entities, selected } = state;\n\n        this.deselectAllEntities();\n        selected = undefined;\n\n        return { squares, entities, selected };\n      },\n      () => {\n        //this.processEntities();\n      }\n    );\n  };\n\n  deselectAllEntities = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"active\");\n    Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\", \"isAvailableDestination\");\n  };\n\n  ceaseFire = () => {\n    this.setState(\n      (state) => {\n        let { squares, entities, selected } = state;\n\n        Helpers.resetGivenFieldsOnACollection(entities, \"isShooting\");\n\n        return { squares, entities, selected };\n      },\n      () => {\n        this.processInterface();\n      }\n    );\n  };\n\n  render() {\n    let boardClassName = this.state.isBoardRotated ? \"rotated-board\" : \"\";\n    // console.log(\"Rendering Game. #\", this.renderCounter++);\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={this.state.squares}\n            onClick={(i) => this.newHandleClick(i)}\n            size={this.state.arenaSize}\n            className={boardClassName}\n          />\n        </div>\n\n        <div className=\"game-info\">\n          <div className=\"actions\">\n            <button\n              onClick={() => {\n                this.nuke(40);\n              }}\n              className=\"button button-nuke\"\n            >\n              Nuke All\n            </button>\n            <button onClick={this.ceaseFire} className=\"button\">\n              Cease Fire\n            </button>\n\n            <button onClick={this.toggleRotateBoard} className=\"button\">\n              Rotate Board\n            </button>\n            <button onClick={this.nextTick} className=\"button\">\n              Next Tick\n            </button>\n\n            <span className=\"step-counter\">Tick: {this.stepNumber}</span>\n            <label className=\"auto-cycle button\">\n              <input type=\"checkbox\" checked={this.state.autoLoop} onChange={this.switchAutoLoop} />\n              <span>Auto Cycle</span>\n            </label>\n          </div>\n\n          <div className=\"interaction-container\">\n            <SelectedEntityInfo\n              selected={this.state.selected}\n              handleDeselectAllEntities={this.handleDeselectAllEntities}\n              onInventoryClick={this.onInventoryClick}\n            />\n\n            <TargetedSquareInfo\n              className=\"targeted\"\n              squareNumber={this.state.selectedSquareNumber}\n              squares={this.state.squares}\n              selected={this.state.selected}\n              targeted={this.state.targeted}\n              onInventoryClick={this.onInventoryClick}\n              processInterface={() => this.processInterface()}\n            />\n            <div></div>\n          </div>\n          <MessageBox />\n        </div>\n\n        <div className=\"game-list\">\n          <EntitiesList entities={this.state.entities} onInventoryClick={this.onInventoryClick} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport Game from './components/Game';\n\nimport './style.scss';\n\nrender(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}