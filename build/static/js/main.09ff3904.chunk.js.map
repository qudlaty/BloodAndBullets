{"version":3,"sources":["components/Game/Game.module.scss","components/Board/Board.module.scss","helpers/Helpers.ts","components/Square/Blood.tsx","components/Square/Items.tsx","components/Square/Square.tsx","services/MessageService.ts","services/EntitiesValues.ts","services/SquaresService.ts","services/index.ts","services/EntitiesService.ts","components/EntityPawn/ShootingVisualization.tsx","components/EntityPawn/EntityPawn.tsx","components/Board/Board.tsx","components/EntityCard/LinearDisplay.tsx","components/EntityCard/InventoryItem.tsx","components/EntityCard/InventoryList.tsx","components/EntityCard/EntityCard.tsx","components/EntitiesList/EntitiesList.tsx","components/Game/TargetedSquareInfo.tsx","components/Game/SelectedEntityInfo.tsx","components/Game/MessageBox.tsx","services/GameModelService.ts","components/Game/Game.tsx","index.js"],"names":["module","exports","resetGivenFieldsOnACollection","collection","fieldNames","forEach","item","fieldName","undefined","getNumberWithinBoundaries","value","min","max","getRandomIntInclusive","Math","floor","random","calculateAngle","x","y","angle","atan","PI","calculateDistance","sqrt","pow","isSelectedTargeted","selected","targeted","entity","name","turnFlagsIntoClasses","flags","classNameBase","flagsToClassess","active","isAvailableDestination","isChosenDestination","isBreathing","isDead","isShooting","isTargeted","isLit","isInTwilightZone","className","Object","keys","key","derivedCtor","Blood","this","props","parentClassBase","bloodAmount","bloodClassName","style","toFixed","React","Component","Items","items","itemsNumber","itemsIcons","length","icon","push","Square","shouldComponentUpdate","nextProps","JSON","stringify","squareId","blood","squareClassName","localId","indicators","Helpers","squareType","onClick","MessageService","messages","message","Weapon","causesBleeding","range","damage","RangedWeapon","rounds","maxRounds","console","log","Rifle","type","Lazer","M16","L30","M40","Identifiable","Positionable","position","SquaresService","getSquare","Movable","moveDestination","squareIndex","setMoveDestinationPosition","targetSquarePosition","targetPosition","targetSquare","squares","Message","send","Mortal","hp","maxHp","Bleedable","bleeding","bleedingReductionPerTurn","bloodReleased","bleed","square","addBlood","Breathing","isSupposedToBeBreathing","Combative","ceaseFire","hasWeapon","targetedSquarePosition","HavingInventory","inventory","itemName","actualItemIndex","findIndex","splice","Entity","isFriendly","assign","equipment","unEquipFromHands","takeFromInventory","hands","baseCtor","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","entitiesInitialValues","age","head","structures","box","redBarrel","entities","map","entry","addToInventory","arenaSize","i","initializeSquareIfEmpty","targetSquareIndex","setEntityWithinASquare","amount","j","setSquare","EntitiesService","id","filter","oldPositionX","oldPositionY","newSquare","potentialTargetEntity","selectedInEntities","findEntityById","getEntityId","damageApplied","weapon","isAbleToFire","fire","checkAmmoAndCalculateDamageApplied","getEntitiesAtGivenPosition","targetEntity","applyDamageToTargetEntity","ceaseFireNextTickIfTargetIsKilled","chosenDestinationSquare","moveEntityIntoChosenDestination","JR","OP","OC","moveEntityRandomly","squaresService","ShootingVisualization","calcNewAangle","targetCoords","projectileNumber","projectiles","customStyle","distanceToTargetX","distanceToTargetY","actualDistance","weaponType","projectile","EntityPawn","randomTime","classessFromFlags","animationBreathing","left","squareDistance","top","animation","Board","renderEntityPawns","handleClick","bind","rowId","colId","itemsLength","cellId","rowsOfSquares","Array","size","fill","row","number","cells","cell","renderSquare","styles","entityPawns","board","isRotated","PureComponent","LinearDisplay","percentage","current","overload","progressStyle","width","title","divider","progressGridStyle","backgroundSize","backgroundImage","label","InventoryItem","reloadButton","dropButton","ammoCounter","onDrop","reload","processInterface","InventoryList","inventoryItems","EntityCard","renderCount","handleInventoryClick","onInventoryClick","addItem","inHands","inHandsArray","clear","display","textAlign","ListOfEntities","renderCounter","entitiesFriendly","obj","entitiesUnfriendly","TargetedSquareInfo","boxSerialNumber","onItemClick","targetedSquare","attackPosition","structureType","newStructure","squareNumber","entityInfo","distanceInfo","positionInfo","bloodInfo","availableActions","editorButtons","onAddStructureClick","GameStyles","button","distanceToSelected","onMoveClick","onAttackClick","targeted__label","SelectedEntityInfo","selected__label","handleDeselectAllEntities","MessageBox","messageNumber","renderMessage","RenderedMessages","window","requestAnimationFrame","element","document","getElementById","scrollTop","scrollHeight","scrollElement","GameModel","Entities","Game","stepNumber","toggleEditorMode","state","isEditorOn","setState","prevState","loop","processEntities","autoLoop","setTimeout","nextTick","newHandleClick","selectedSquareNumber","targetedSquareNumber","previousTargeted","doubleClick","markSquareAsTargeted","setMoveDestinationSquare","selectEntityFromGivenSquare","deselectAllEntities","nuke","dmg","toggleRotateBoard","isBoardRotated","switchAutoLoop","previousState","concat","entityId","actualEntity","findItemOnEntity","equipInHands","saveMap","squaresProcessedForSave","parse","squaresStringified","result","prompt","localStorage","loadMap","mapNames","squaresLoaded","index","sourceSquare","calculateNextGameState","setSquaresAccordingToEntities","nextState","moveEntities","isEntityShootingProperly","fireAShot","bleedExternally","stopBreathingForKilledEntity","markAvailableDestinationsForSelectedEntity","calculateNextInterfaceState","array","setEntityWithinApropriateSquare","game","game__board","game__info","actions","checked","onChange","game__list","render"],"mappings":"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","file":"static/js/main.09ff3904.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"Game_game__2BmQU\",\"game__board\":\"Game_game__board__1AR5E\",\"game__info\":\"Game_game__info__2XuYT\",\"game__list\":\"Game_game__list__3Ltux\",\"button\":\"Game_button__2usZ6\",\"button-nuke\":\"Game_button-nuke__37qkj\",\"actions\":\"Game_actions__2RncO\",\"interaction-container\":\"Game_interaction-container__14p5W\",\"selected\":\"Game_selected__Vfr4N\",\"targeted\":\"Game_targeted__2kJbA\",\"selected__label\":\"Game_selected__label__QlKmT\",\"targeted__label\":\"Game_targeted__label__3dceM\",\"step-counter\":\"Game_step-counter__3OklF\",\"auto-cycle\":\"Game_auto-cycle__16n4Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__3vjsK\",\"board__row\":\"Board_board__row__1-mls\",\"board--rotated\":\"Board_board--rotated__2eonB\"};","import { Entity } from \"../services/EntitiesValues\";\nimport { Square } from \"../services/SquaresService\";\n\n/** Takes a collection and a list of strings describing object keys. Sets all given fields on a collection to `undefined` */\nexport function resetGivenFieldsOnACollection(collection, ...fieldNames) {\n  collection.forEach((item) => {\n    fieldNames.forEach((fieldName) => {\n      item && (item[fieldName] = undefined);\n    });\n  });\n}\n\n/** Takes a number and fits it within given boundaries, then returns it */\nexport function getNumberWithinBoundaries(value: number, min: number, max: number): number {\n  if (value < min) value = min;\n  if (value > max) value = max;\n  return value;\n}\n\n/** Returns an integer between min and max */\nexport function getRandomIntInclusive(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/** Returns angle (in degrees) of a given vector */\nexport function calculateAngle(x: number, y: number): number {\n  let angle: number;\n  if (y >= 0) {\n    angle = -Math.atan(x / y) * (180 / Math.PI);\n  } else if (y < 0) {\n    angle = (180 / Math.PI) * (Math.atan(x / -y) + Math.PI);\n  }\n  return angle;\n}\n\n/** Pitagorean distance between 0,0 and given coords */\nexport function calculateDistance(x: number, y: number): number {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n}\n\n/** Mixing classess together */\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  // see https://www.typescriptlang.org/docs/handbook/mixins.html\n  baseCtors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));\n    });\n  });\n}\n\n/** Checking if selected entity is on a targeted square */\nexport function isSelectedTargeted(selected: Entity, targeted: Square): boolean {\n  if (selected && targeted && targeted.entity && selected.name === targeted.entity.name) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/** Adding classess apropriate to the flags passed in by props\n * If @classNameBase is given, it is added in front of the classname with \"--\"\n * Eg: classNameBase--class-from-flag\n */\nexport function turnFlagsIntoClasses(flags: object, classNameBase?: string) {\n  const flagsToClassess = {\n    active: \"active\",\n    isAvailableDestination: \"is-available-destination\",\n    isChosenDestination: \"is-chosen-destination\",\n    isBreathing: \"breathing\",\n    isDead: \"dead\",\n    isShooting: \"shooting\",\n    isTargeted: \"targeted\",\n    isLit: \"is-lit\",\n    isInTwilightZone: \"is-in-twilight-zone\",\n  };\n\n  let className = \"\";\n\n  if (classNameBase) {\n    classNameBase += \"--\";\n  } else {\n    classNameBase = \"\";\n  }\n\n  Object.keys(flagsToClassess).forEach((key) => {\n    if (flags[key]) {\n      className += ` ${classNameBase}${flagsToClassess[key]}`;\n    }\n  });\n  return className;\n}\n\n/**\n * Creates a new array containing all the elements from a given array\n * @param array array to shallow-copy\n * @yields a new copy of the array\n */\nexport function newCopyOfArray(array: any[]) {\n  return [].concat(array);\n}\n","import React from \"react\";\r\n\r\ninterface BloodProps {\r\n  bloodAmount: number;\r\n  parentClassBase: string;\r\n}\r\n\r\nclass Blood extends React.Component<BloodProps> {\r\n  render() {\r\n    let { parentClassBase, bloodAmount } = this.props;\r\n    let bloodClassName = `${parentClassBase}__blood`;\r\n    let style = `\r\n        .${bloodClassName} {\r\n            background: rgba(255,0,0, ${(bloodAmount / 30).toFixed(2)});\r\n        }\r\n    `;\r\n\r\n    return (\r\n      <div className={`square__blood ${bloodClassName}`}>\r\n        {bloodAmount}\r\n        <style>{style}</style>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Blood;\r\n","import React from \"react\";\r\nimport { Item, Entity } from \"../../services/EntitiesValues\";\r\n\r\ninterface ItemsProps {\r\n  items: Item[];\r\n}\r\n\r\nclass Items extends React.Component<ItemsProps> {\r\n  render() {\r\n    let { items } = this.props;\r\n    let itemsNumber: number = null;\r\n    let itemsIcons = [];\r\n\r\n    if (items && items.length) {\r\n      itemsNumber = this.props.items.length;\r\n\r\n      items.forEach((item) => {\r\n        let entity = item as Entity;\r\n        if (entity.icon) {\r\n          itemsIcons.push(<div className=\"square__item-icon\">{entity.icon}</div>);\r\n        }\r\n      });\r\n    }\r\n    return (\r\n      <div className=\"square__items\">\r\n        <div className=\"square__items-icons\">{itemsIcons}</div>\r\n        <div className=\"square__items-number\">{itemsNumber}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Items;\r\n","import React from \"react\";\nimport * as Helpers from \"../../helpers\";\nimport { Item } from \"../../services/EntitiesValues\";\nimport Blood from \"./Blood\";\nimport Items from \"./Items\";\nimport \"./Square.scss\";\n\ninterface SquareProps {\n  squareId: string;\n\n  squareType: string;\n  active: boolean;\n  isDead: boolean;\n\n  blood: number;\n  items: Item[];\n  itemsLength: number;\n\n  isLit: boolean;\n  isInTwilightZone: boolean;\n\n  isAvailableDestination: boolean;\n  isChosenDestination: boolean;\n  isTargeted: boolean;\n\n  onClick: (squareIndex: string) => void;\n}\n\nclass Square extends React.Component<SquareProps> {\n  shouldComponentUpdate = (\n    nextProps: SquareProps // only update if props differ\n  ) => JSON.stringify(nextProps) !== JSON.stringify(this.props);\n\n  render() {\n    let { squareId, isLit, items, blood } = this.props;\n    let classNameBase = \"square\";\n    let squareClassName = classNameBase;\n    let localId = `${classNameBase}${squareId}`;\n    let indicators = null;\n\n    squareClassName += Helpers.turnFlagsIntoClasses(this.props, classNameBase);\n\n    // This hsould be a switch-case statement ran on enum, but it didn't work, O.o\n    if (this.props.squareType == \"floor\") {\n      squareClassName += \" floor\";\n    } else if (this.props.squareType == \"wall\") {\n      squareClassName += \" wall\";\n    } else if (this.props.squareType == \"nothing\") {\n      squareClassName += \" nothing\";\n    }\n\n    if (true || isLit) {\n      indicators = (\n        <div>\n          <Blood parentClassBase={localId} bloodAmount={blood} />\n          <Items items={items} />\n        </div>\n      );\n    } else {\n      squareClassName += ` ${classNameBase}--dark`;\n    }\n\n    return (\n      <button className={squareClassName} onClick={() => this.props.onClick(this.props.squareId)}>\n        {indicators}\n        <div className=\"square__content\">&nbsp;</div>\n      </button>\n    );\n  }\n}\n\nexport default Square;\n","class MessageServiceClass {\n  messages: string[] = [];\n  send(message: string) {\n    this.messages.push(message);\n  }\n}\n\nconst MessageService = new MessageServiceClass();\n\nexport default MessageService;\n","import { applyMixins } from \"../helpers\";\nimport EntitiesService from \"./EntitiesService\";\nimport { SquaresService } from \".\";\nimport { Square } from \"./SquaresService\";\nimport * as Helpers from \"../helpers\";\nimport Message from \"../services/MessageService\";\n\nexport class Item {\n  name: string = \"\";\n}\n\nexport class Weapon extends Item {\n  causesBleeding = 0;\n  range = 0;\n  damage = 0;\n}\n\nexport class RangedWeapon extends Weapon {\n  rounds: number | any = 0;\n  maxRounds = 5;\n\n  fire() {\n    this.rounds--;\n    console.log(\"Firing ranged weapon. Damage: \", this.damage);\n    return this.damage;\n  }\n\n  get isAbleToFire() {\n    return this.rounds > 0;\n  }\n\n  reload() {\n    this.rounds = this.maxRounds;\n  }\n}\n\nclass Rifle extends RangedWeapon {\n  type = \"projectile\";\n  range = 4;\n  damage = 1;\n  causesBleeding = 4;\n}\n\nclass Lazer extends RangedWeapon {\n  type = \"lazer\";\n  range = 6;\n  damage = 5;\n  causesBleeding = 0;\n}\n\nclass M16 extends Rifle {\n  name = \"M16\";\n  rounds = 15;\n  maxRounds = 20;\n  damage = 2;\n}\n\nclass L30 extends Lazer {\n  name = \"Assault Lazer Cannon\";\n  rounds = 3;\n  maxRounds = 3;\n  damage = 10;\n}\n\nclass M40 extends Rifle {\n  name = \"M41A Pulse Rifle\";\n  rounds = 40;\n  maxRounds = 40;\n  damage = 1;\n}\n\n/** Position on a grid */\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nclass Identifiable {\n  name: string = \"An Entity\";\n  icon: string = \"E\";\n}\n\nexport class Positionable {\n  position: Position = { x: undefined, y: undefined };\n\n  get square(): Square {\n    let square = SquaresService.getSquare(this.position.x, this.position.y);\n    return square;\n  }\n}\n\nclass Movable extends Identifiable {\n  moveDestination: Position;\n\n  setMoveDestinationSquare(squareIndex: number) {\n    this.setMoveDestinationPosition(SquaresService.targetSquarePosition(squareIndex));\n  }\n\n  setMoveDestinationPosition(targetPosition: Position) {\n    let targetSquare = SquaresService.getSquare(targetPosition.x, targetPosition.y);\n    if (!targetSquare.entity || targetSquare.entity.isDead) {\n      this.moveDestination = targetPosition;\n      Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\");\n      targetSquare.isChosenDestination = true;\n    } else {\n      Message.send(`${this.name} can't move into square (${targetPosition.x}, ${targetPosition.y})`);\n    }\n  }\n}\n\nexport class Mortal extends Positionable {\n  hp: number = 100;\n  maxHp: number = 100;\n  get isDead(): boolean {\n    return this.hp <= 0;\n  }\n}\n\nexport class Bleedable extends Mortal {\n  bleeding: number;\n  bleedingReductionPerTurn: number = 1;\n  bleed(): number {\n    let entity = this;\n    let bloodReleased = 0;\n    if (entity.bleeding && entity.hp > 0) {\n      bloodReleased = entity.bleeding;\n      entity.hp -= bloodReleased;\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n    }\n    return bloodReleased;\n  }\n\n  bleedExternally() {\n    if (!this.bleeding) return;\n    let entity = this;\n    let bloodReleased = this.bleed();\n    let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\n    SquaresService.addBlood(square, bloodReleased);\n  }\n}\n\nclass Breathing extends Mortal {\n  isSupposedToBeBreathing: boolean = undefined;\n  get isBreathing(): boolean {\n    return this.hp > 0 && this.isSupposedToBeBreathing;\n  }\n  set isBreathing(value: boolean) {\n    this.isSupposedToBeBreathing = value;\n  }\n}\n\nclass Combative extends Identifiable {\n  targetPosition: Position;\n  isShooting?: boolean;\n  ceaseFire?: boolean;\n  hasWeapon?: boolean;\n  attackPosition(targetedSquarePosition: Position) {\n    if (this.hasWeapon) {\n      this.targetPosition = targetedSquarePosition;\n      this.isShooting = true;\n    } else {\n      Message.send(`${this.name} can't shoot - no weapon equipped`);\n    }\n  }\n}\n\nexport class HavingInventory {\n  inventory: Item[];\n  takeFromInventory(itemName: string): Item {\n    let actualItemIndex = this.inventory.findIndex((item) => item.name == itemName);\n    let actualItem = this.inventory.splice(actualItemIndex, 1)[0];\n\n    return actualItem;\n  }\n  addToInventory(item: Item) {\n    if (!this.inventory) {\n      this.inventory = [];\n    }\n    this.inventory.push(item);\n  }\n}\n\nclass HavingEquipment extends HavingInventory {\n  equipment: any;\n  hasWeapon?: boolean;\n\n  equipInHands(itemName: string) {\n    this.unEquipFromHands();\n    let item = this.takeFromInventory(itemName);\n    this.equipment.hands = item;\n    if (item instanceof Weapon) {\n      this.hasWeapon = true;\n    } else {\n      this.hasWeapon = false;\n    }\n  }\n\n  unEquipFromHands() {\n    if (this.equipment.hands) {\n      this.inventory.push(this.equipment.hands);\n      this.equipment.hands = null;\n      this.hasWeapon = false;\n    }\n  }\n}\n\nexport class Entity {\n  // Extended by mixins below\n  constructor(...props) {\n    Object.assign(this, ...props);\n  }\n  isFriendly?: boolean;\n  active?: boolean;\n}\n\n/************************************************************/\n/* Always update both lists */\n\nexport interface Entity\n  extends Identifiable,\n    Positionable,\n    Mortal,\n    Bleedable,\n    Movable,\n    Breathing,\n    Combative,\n    HavingInventory,\n    HavingEquipment {}\napplyMixins(Entity, [\n  Identifiable,\n  Positionable,\n  Mortal,\n  Bleedable,\n  Movable,\n  Breathing,\n  Combative,\n  HavingInventory,\n  HavingEquipment,\n]);\n\n/************************************************************/\n\nconst entitiesInitialValues = [\n  {\n    name: \"John Rambo\",\n    age: 40,\n    hp: 95,\n    maxHp: 100,\n    icon: \"😠\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 8, y: 8 },\n    inventory: [{ name: \"KA-BAR\" }, new M16()],\n    equipment: { head: \"Red Bandana\", hands: null },\n  },\n  {\n    name: \"Ellen Replay\",\n    age: 30,\n    hp: 50,\n    maxHp: 65,\n    icon: \"👩\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 1, y: 8 },\n    inventory: [new M40(), { name: \"Motion Detector\" }],\n    equipment: { head: \"Afro\" },\n  },\n  {\n    name: \"Lazer Blady\",\n    age: 60,\n    hp: 75,\n    maxHp: 100,\n    icon: \"🧑🏻\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 4, y: 8 },\n    inventory: [new L30(), new M16()],\n    equipment: {},\n  },\n  {\n    name: \"Lux Aeterna\",\n    age: 20,\n    hp: 50,\n    maxHp: 50,\n    icon: \"👱‍♀️\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 1, y: 1 },\n    inventory: [new L30()],\n    equipment: {},\n  },\n  {\n    name: \"Robot\",\n    age: 1,\n    hp: 50,\n    maxHp: 50,\n    icon: \"🤖\",\n    isBreathing: false,\n    position: { x: 4, y: 5 },\n  },\n  {\n    name: \"Octo\",\n    age: 8,\n    hp: 200,\n    maxHp: 200,\n    icon: \"🐙\",\n    isBreathing: true,\n    position: { x: 8, y: 2 },\n    bleedingReductionPerTurn: 0,\n    bleeding: 1,\n  },\n  {\n    name: \"Squid\",\n    age: 5,\n    hp: 100,\n    maxHp: 100,\n    icon: \"🦑\",\n    isBreathing: true,\n    position: { x: 5, y: 5 },\n  },\n  {\n    name: \"Ant\",\n    age: 1,\n    hp: 45,\n    maxHp: 50,\n    icon: \"🐜\",\n    isBreathing: true,\n    position: { x: 7, y: 6 },\n  },\n  {\n    name: \"Spider\",\n    age: 1,\n    hp: 100,\n    maxHp: 150,\n    icon: \"🕷️\",\n    isBreathing: true,\n    position: { x: 9, y: 3 },\n    bleedingReductionPerTurn: 1,\n  },\n  {\n    name: \"Mosquito\",\n    age: 1,\n    hp: 12,\n    maxHp: 20,\n    icon: \"🦟\",\n    isBreathing: true,\n    position: { x: 2, y: 7 },\n  },\n  {\n    name: \"Microbe\",\n    age: 1,\n    hp: 1,\n    maxHp: 5,\n    icon: \"🦠\",\n    isBreathing: true,\n    position: { x: 3, y: 5 },\n  },\n];\n\nexport const structures = {\n  box: {\n    name: \"box\",\n    icon: \"📦\",\n    hp: 50,\n    maxHp: 70,\n    isBreathing: false,\n    position: { x: 4, y: 5 },\n  },\n  redBarrel: {\n    name: \"redBarrel\",\n    icon: \"🛢️\",\n    hp: 50,\n    maxHp: 70,\n    isBreathing: false,\n    position: { x: 4, y: 5 },\n  },\n};\n\nconst entities = entitiesInitialValues.map((entry) => new Entity(entry));\n\nexport default entities;\n","import * as Helpers from \"../helpers/Helpers\";\nimport { Entity, Position, Item, RangedWeapon, HavingInventory } from \"./EntitiesValues\";\n\nexport interface Square {\n  entity?: Entity;\n  blood?: number;\n  squareType: string;\n  isAvailableDestination?: boolean;\n  isChosenDestination?: boolean;\n  isTargeted?: boolean;\n  isLit?: boolean;\n  isInTwilightZone?: boolean;\n  // items?: RangedWeapon[];\n  addItem(item: Item): void;\n}\n\nexport class Square extends HavingInventory implements Square {\n  public squareType: string = \"nothing\";\n\n  addItem(item: RangedWeapon) {\n    this.addToInventory(item);\n  }\n  get items() {\n    return this.inventory;\n  }\n}\n\nclass SquaresServiceClass {\n  arenaSize: number = 10;\n\n  squares: Square[] = [];\n\n  constructor() {\n    let i = this.arenaSize * this.arenaSize;\n    while (i-- !== 0) {\n      this.initializeSquareIfEmpty(i);\n    }\n  }\n\n  getSquare(x: number, y: number): Square {\n    return this.squares[this.targetSquareIndex(x, y)];\n  }\n\n  setSquare(x: number, y: number, value): void {\n    this.squares[this.targetSquareIndex(x, y)] = value;\n  }\n\n  targetSquareIndex(x: number, y: number): number {\n    return y * this.arenaSize + x;\n  }\n\n  targetSquarePosition(squareIndex: number): Position {\n    let x: number, y: number;\n    y = Math.floor(squareIndex / this.arenaSize);\n    x = squareIndex % this.arenaSize;\n    return { x, y };\n  }\n\n  setEntityWithinApropriateSquare(entity: Entity): void {\n    this.setEntityWithinASquare(entity.position.x, entity.position.y, entity);\n  }\n\n  setEntityWithinASquare(x: number, y: number, entity: Entity) {\n    let squareIndex: number = this.targetSquareIndex(x, y);\n    this.initializeSquareIfEmpty(squareIndex);\n    this.squares[squareIndex].entity = entity;\n  }\n\n  addBlood(square: Square, amount: number) {\n    if (!square.blood) {\n      square.blood = amount;\n    } else {\n      square.blood += amount;\n    }\n  }\n\n  markSquareAsTargeted(squareIndex: number): void {\n    Helpers.resetGivenFieldsOnACollection(this.squares, \"isTargeted\");\n    this.initializeSquareIfEmpty(squareIndex);\n    this.squares[squareIndex].isTargeted = true;\n  }\n\n  initializeSquareIfEmpty(squareIndex: number) {\n    if (!this.squares[squareIndex]) {\n      this.squares[squareIndex] = new Square();\n    }\n  }\n\n  markAvailableDestinationsForSelectedEntity(entity: Entity): void {\n    if (entity.active) {\n      let { x, y } = entity.position;\n\n      Helpers.resetGivenFieldsOnACollection(this.squares, \"isAvailableDestination\");\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize || (i === x && j === y)) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n          if (square.squareType === \"floor\") {\n            square.isAvailableDestination = true;\n          }\n\n          this.setSquare(i, j, square);\n        }\n      }\n    }\n  }\n  lightAllSquares(): void {\n    this.squares.forEach((square) => (square.isLit = true));\n  }\n  castLightsFromFriendlyEntity(entity: Entity): void {\n    if (entity.isFriendly) {\n      let { x, y } = entity.position;\n\n      for (let j = y - 2; j <= y + 2; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 2; i <= x + 2; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n\n          square.isInTwilightZone = true;\n          this.setSquare(i, j, square);\n        }\n      }\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n\n          square.isLit = true;\n          this.setSquare(i, j, square);\n        }\n      }\n    }\n  }\n}\n\nlet SquaresService = new SquaresServiceClass();\nexport default SquaresService;\n","import entitiesService from \"./EntitiesService\";\r\nimport squaresService from \"./SquaresService\";\r\n\r\nexport let EntitiesService = entitiesService;\r\nexport let SquaresService = squaresService;\r\n","import { default as SquaresService, Square } from \"./SquaresService\";\nimport * as Helpers from \"../helpers/Helpers\";\nimport {\n  Entity,\n  Position,\n  Weapon,\n  RangedWeapon,\n  Mortal,\n  Positionable,\n  Bleedable,\n  HavingInventory,\n} from \"../services/EntitiesValues\";\nconst arenaSize: number = 10;\n\nclass EntitiesServiceClass {\n  entities: Entity[];\n  selected: Entity;\n\n  getEntityId(entity: Entity): string {\n    return entity.name;\n  }\n\n  findEntityById(id: string): Entity {\n    let result: Entity = this.entities.filter((entity) => entity.name === id)[0];\n    return result;\n  }\n\n  findItemOnEntity(entity: HavingInventory, id: string) {\n    let result = entity.inventory.filter((item) => item.name === id)[0];\n    return result;\n  }\n\n  moveEntityRandomly(entity: Entity) {\n    if (entity.isDead) return;\n\n    let oldPositionX = entity.position.x;\n    let oldPositionY = entity.position.y;\n\n    entity.position.x = entity.position.x + Helpers.getRandomIntInclusive(-1, 1);\n    entity.position.y = entity.position.y + Helpers.getRandomIntInclusive(-1, 1);\n\n    entity.position.x = Helpers.getNumberWithinBoundaries(entity.position.x, 0, arenaSize - 1);\n    entity.position.y = Helpers.getNumberWithinBoundaries(entity.position.y, 0, arenaSize - 1);\n\n    let newSquare = SquaresService.getSquare(entity.position.x, entity.position.y);\n\n    if ((newSquare && newSquare.entity) || (newSquare && newSquare.squareType !== \"floor\")) {\n      // if square occupiec, reverse the move\n      entity.position.x = oldPositionX;\n      entity.position.y = oldPositionY;\n    }\n  }\n\n  stopBreathingForKilledEntity(entity: Entity): Entity {\n    if (entity && entity.hp <= 0) {\n      entity.isBreathing = false;\n      entity.hp = 0;\n    }\n    return entity;\n  }\n\n  getEntitiesAtGivenPosition(targetPosition: Position): Entity[] {\n    return this.entities.filter((potentialTargetEntity: Entity): boolean => {\n      return (\n        potentialTargetEntity.position.x === targetPosition.x && potentialTargetEntity.position.y === targetPosition.y\n      );\n    });\n  }\n\n  selectEntityFromGivenSquare(selected: Entity, targeted: Square): Entity {\n    if (selected && targeted && targeted.entity) {\n      selected.active = false;\n    }\n    if (targeted && targeted.entity) {\n      selected = targeted.entity;\n      selected.active = true;\n    }\n\n    return selected;\n  }\n\n  setSelected(selected: Entity, value: boolean): Entity {\n    let selectedInEntities = this.findEntityById(this.getEntityId(selected));\n    if (value) {\n      selected.active = value;\n    } else {\n      selected = null;\n      console.log(\"Nullified:\", selected);\n    }\n    selectedInEntities.active = value;\n    return selected;\n  }\n\n  checkAmmoAndCalculateDamageApplied(entity: Entity): number {\n    let damageApplied: number = 0;\n    let weapon: RangedWeapon = entity.equipment && entity.equipment.hands;\n\n    if (!weapon) return 0;\n\n    if (weapon.isAbleToFire) {\n      damageApplied = weapon.fire();\n    } else {\n      weapon.rounds = \"empty\";\n      entity.isShooting = false;\n    }\n\n    return damageApplied;\n  }\n\n  fireAShot(entity: Entity) {\n    if (entity.ceaseFire) {\n      entity.isShooting = false;\n      entity.ceaseFire = false;\n      return;\n    }\n    let damageApplied = this.checkAmmoAndCalculateDamageApplied(entity);\n    let targetEntities = this.getEntitiesAtGivenPosition(entity.targetPosition);\n    targetEntities.forEach((targetEntity) => {\n      this.applyDamageToTargetEntity(targetEntity, damageApplied);\n      this.ceaseFireNextTickIfTargetIsKilled(entity, targetEntity);\n    });\n  }\n\n  applyDamageToTargetEntity(targetEntity: Entity, damage: number) {\n    if (damage) {\n      targetEntity.hp -= damage;\n      targetEntity.bleeding = 5;\n    }\n  }\n\n  ceaseFireNextTickIfTargetIsKilled(entity: Entity, targetEntity: Entity): void {\n    if (targetEntity.hp < 0) {\n      entity.ceaseFire = true;\n    }\n  }\n\n  isEntityShootingProperly(entity: Entity): boolean {\n    return (\n      entity.isShooting &&\n      entity.targetPosition &&\n      (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\n    );\n  }\n\n  applyEffectsOfBleeding(entity: Entity): Entity {\n    // TODO: move to a \"bleed\" method\n    if (entity.bleeding && entity.hp > 0) {\n      entity.hp -= entity.bleeding;\n      let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\n      SquaresService.addBlood(square, entity.bleeding);\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n    }\n    return entity;\n  }\n\n  moveEntityIntoChosenDestination(entity: Entity): Entity {\n    if (!entity.isDead && entity.moveDestination) {\n      let chosenDestinationSquare: Square = SquaresService.getSquare(\n        entity.moveDestination.x,\n        entity.moveDestination.y\n      );\n\n      entity.position = entity.moveDestination;\n      delete entity.moveDestination;\n      chosenDestinationSquare.isChosenDestination = undefined;\n    }\n    return entity;\n  }\n\n  setMoveDestinationOnASelectedEntity(selected: Entity, targetedSquarePosition: Position): void {\n    selected.moveDestination = targetedSquarePosition;\n  }\n\n  moveEntities(): void {\n    this.entities.forEach((entity) => this.moveEntityIntoChosenDestination(entity));\n    let JR: Entity = this.findEntityById(\"John Rambo\");\n    let OP: Entity = this.findEntityById(\"Squid\");\n    let OC: Entity = this.findEntityById(\"Octo\");\n    this.moveEntityRandomly(JR);\n    this.moveEntityRandomly(OP);\n    this.moveEntityRandomly(OC);\n  }\n}\n\nlet EntitiesService = new EntitiesServiceClass();\nexport default EntitiesService;\n","import * as Helpers from \"../../helpers\";\nimport React, { ReactElement } from \"react\";\n\nexport default function ShootingVisualization(props): ReactElement {\n  const DISTANCE_BETWEEN_TILES = 38;\n  let { entity } = props;\n\n  let calcNewAangle = Helpers.calculateAngle;\n  let targetCoords = entity.targetPosition;\n  let projectileNumber = 5;\n  let projectiles = [];\n  let localId = `Entity${entity.icon}`;\n  let customStyle = \"\";\n\n  if (\n    targetCoords &&\n    entity.position &&\n    entity.hasWeapon &&\n    entity.isShooting &&\n    (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\n  ) {\n    if (targetCoords) {\n      let distanceToTargetX = DISTANCE_BETWEEN_TILES * (targetCoords.x - entity.position.x);\n      let distanceToTargetY = DISTANCE_BETWEEN_TILES * (targetCoords.y - entity.position.y);\n\n      let actualDistance = Helpers.calculateDistance(distanceToTargetX, distanceToTargetY);\n      let weaponType = entity && entity.equipment && entity.equipment.hands && entity.equipment.hands.type;\n      let angle = calcNewAangle(distanceToTargetX, distanceToTargetY);\n\n      if (weaponType === \"lazer\") {\n        // TODO: perhaps call to `visualizeShooting(from,to,weaponType)`\n        let className = `projectile${localId}_beam`;\n        let projectile = \"\";\n\n        customStyle = `\n          @keyframes pulsing${localId} {\n            0%  {opacity: 0.1;}\n            100%  {opacity: 1;}\n          }\n\n          @keyframes elongating${localId} {\n            0%  {width: ${actualDistance - 20};}\n            100%  {width: ${actualDistance + 20};}\n          }\n\n          @keyframes swiping${localId} {\n            0%  {transform: rotate(${angle + 90 + -1}deg);}\n            50%  {transform: rotate(${angle + 90 + 1}deg);}\n            100%  {transform: rotate(${angle + 90 - 1}deg);}\n          }\n\n          .${className} {\n            width: ${actualDistance}px;\n            height: 3px;\n            border-radius: 5px;\n            background: #F00;\n            position: absolute;\n            top: 16px;\n            left: 16px;\n\n            transform: rotate(${angle + 90}deg);\n            transform-origin: left 0px;\n            animation: pulsing${localId} 0.1s linear infinite,\n            elongating${localId} 1s linear alternate infinite,\n            swiping${localId} 1s linear alternate infinite;\n            box-shadow: 0 0 5px 5px white;\n            z-index: 10;\n          }\n          `;\n        projectiles.push(\n          <div key={className} className={className}>\n            {projectile}\n          </div>\n        );\n      } else {\n        customStyle = `\n          @keyframes shooting${localId} {\n            0%   {transform: translate(0,0) rotate(${angle}deg) scaleY(0.3)}\n            100% {transform: translate(\n              ${36 * (targetCoords.x - entity.position.x)}px,\n              ${36 * (targetCoords.y - entity.position.y)}px\n            ) rotate(${angle}deg) scaleY(2)}\n          }\n          `;\n\n        while (projectileNumber--) {\n          customStyle += `\n          .projectile${localId}_${projectileNumber} {\n            transform: rotate(${angle}deg);\n            animation: shooting${localId} 0.8s linear infinite;\n            animation-delay: ${projectileNumber - 1 * 0.3}s;\n          }`;\n        }\n        let projectile = entity.isShooting ? \"|\" : \"\";\n\n        projectileNumber = 3;\n\n        while (projectileNumber--) {\n          let className = `projectile projectile${localId}_${projectileNumber}`;\n          projectiles.push(\n            <div key={className} className={className}>\n              {projectile}\n            </div>\n          );\n        }\n      }\n    }\n  }\n  return (\n    <div className=\"shooting-visualization\">\n      <style>{customStyle}</style>\n      {projectiles}\n    </div>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport { SquaresService } from \"../../services\";\nimport { Entity } from \"../../services/EntitiesValues\";\nimport ShootingVisualization from \"./ShootingVisualization\";\nimport * as Helpers from \"../../helpers\";\nimport \"./EntityPawn.scss\";\n\ninterface EntityPawnProps {\n  entity: Entity;\n}\n\nexport default class EntityPawn extends React.Component<EntityPawnProps> {\n  randomTime = `${(Math.random() + 0.5).toFixed(2)}s`;\n\n  render() {\n    let { entity } = this.props;\n    let square = SquaresService.getSquare(entity.position.x, entity.position.y);\n    const squareDistance = 38;\n\n    let classNameBase = \"entity-pawn__icon\";\n    let className = `${classNameBase}`;\n    let classessFromFlags = Helpers.turnFlagsIntoClasses(entity, classNameBase);\n    classessFromFlags += Helpers.turnFlagsIntoClasses(square, classNameBase);\n    className += ` ${classessFromFlags} `;\n\n    let animationBreathing = entity.isBreathing ? `breathing ${this.randomTime} alternate infinite linear` : \"none\";\n\n    return (\n      <div\n        className=\"entity-pawn\"\n        key={entity.name}\n        style={{\n          left: squareDistance / 2 - 4 + squareDistance * entity.position.x,\n          top: squareDistance / 2 - 4 + squareDistance * entity.position.y,\n        }}\n      >\n        <div\n          className={className}\n          style={{\n            animation: animationBreathing,\n          }}\n        >\n          {entity.icon}\n        </div>\n        <ShootingVisualization entity={entity} />\n      </div>\n    );\n  }\n}\n","import React, { ReactElement } from \"react\";\nimport BoardSquare from \"../Square\";\nimport EntityPawn from \"../EntityPawn\";\nimport { Entity } from \"../../services/EntitiesValues\";\nimport { Square } from \"../../services/SquaresService\";\n\nimport styles from \"./Board.module.scss\";\n\ninterface BoardProps {\n  onClick(i: number): void;\n  squares: Square[];\n  entities: Entity[];\n  size: number;\n  isRotated: boolean;\n}\n\nexport default class Board extends React.PureComponent<BoardProps> {\n  constructor(props: BoardProps) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(i) {\n    console.log(\"Handles Click on Board\", i);\n    this.props.onClick(i);\n  }\n\n  renderSquare(i: number, rowId: number, colId: number) {\n    /*\n    We pass one and the same function to all the Squares when rendering,\n    so they do not detect getting a new fat-arrow function as a change of props.\n\n    This is CRUCIAL to only rerender squares with changed values.\n\n    Additionally, we need to ensure that Unchanged squares have the same values of objects passed down here.\n    */\n    let square = this.props.squares[i];\n    let entity = (this.props.squares[i] && this.props.squares[i].entity) || ({} as Entity);\n    return (\n      <BoardSquare\n        key={i}\n        squareId={i + \"\"}\n        onClick={this.handleClick}\n        // Entity on this square\n        active={entity.active}\n        isDead={entity.isDead}\n        // Environment state fields\n        blood={square.blood}\n        items={square.items}\n        itemsLength={square.items && square.items.length}\n        isLit={square.isLit}\n        squareType={square.squareType}\n        isInTwilightZone={square.isInTwilightZone}\n        // Interface state fields\n        isAvailableDestination={square.isAvailableDestination}\n        isChosenDestination={square.isChosenDestination}\n        isTargeted={square.isTargeted}\n      />\n    );\n  }\n\n  renderEntityPawns = () => this.props.entities.map((entity) => <EntityPawn entity={entity} />);\n\n  render() {\n    let cellId = 0;\n    let rowId = 0;\n    let colId: number;\n\n    let rowsOfSquares = Array(this.props.size)\n      .fill(null)\n      .map((row, number) => {\n        colId = 0;\n        let cells = Array(this.props.size)\n          .fill(null)\n          .map((cell, number) => {\n            return this.renderSquare(cellId++, rowId, colId++);\n          });\n        return (\n          <div key={rowId++} className={styles[\"board__row\"]}>\n            {cells}\n          </div>\n        );\n      });\n\n    let entityPawns: ReactElement[] = this.renderEntityPawns();\n\n    let className: string = styles.board;\n    const isBoardRotated: boolean = this.props.isRotated;\n    if (isBoardRotated) {\n      className += ` ${styles[\"board--rotated\"]}`;\n    }\n    return (\n      <div className={className}>\n        {rowsOfSquares}\n        {entityPawns}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./LinearDisplay.scss\";\n\ninterface LinearDisplayProps {\n  className?: string;\n  current: number;\n  max: number;\n  title?: string;\n  label?: string;\n}\n\nexport default function LinearDisplay(props: LinearDisplayProps) {\n  let className = `linear-display ${props.className || \"\"}`;\n  let percentage = ~~((props.current * 100) / props.max);\n  let overload = percentage > 100;\n  if (overload) {\n    percentage = 100;\n    className += \" linear-display--overloaded\";\n  }\n\n  let progressStyle = {\n    width: `${percentage}%`,\n  };\n  let title = props.title || `${props.current}/${props.max}`;\n\n  let amount = props.current;\n\n  let divider = 1;\n  if (props.max >= 40 && props.max < 100) {\n    divider = 5;\n  } else if (props.max >= 100) {\n    divider = 10;\n  }\n\n  amount = amount / divider;\n\n  let gridSize = 100 / amount;\n\n  let color = `rgba(200,200,200,0.4)`;\n  color = `black`;\n  let progressGridStyle = {\n    backgroundSize: `${gridSize}% 100%`,\n    backgroundImage: `\n      linear-gradient(to left, ${color} 1px, transparent 1px)\n    `,\n  };\n\n  Object.assign(progressStyle, progressGridStyle);\n\n  return (\n    <div className={className}>\n      <div className=\"linear-display__label\">{props.label}:&nbsp;</div>\n      <div className=\"linear-display__bar-container\" title={title}>\n        <div className=\"linear-display__bar-progress\" style={progressStyle}>\n          <span className=\"linear-display__bar-progress-text\">\n            {props.current}\n            {overload ? \"/\" + props.max : \"\"}&nbsp;\n          </span>\n        </div>\n      </div>\n      <div>&nbsp;</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { RangedWeapon, Item } from \"../../services/EntitiesValues\";\nimport LinearDisplay from \"./LinearDisplay\";\n\ninterface InventoryItemProps {\n  item: Item;\n  onDrop(itemName: string);\n  onClick(itemName: string);\n  processInterface: Function;\n}\n\nexport default function InventoryItem(props: InventoryItemProps) {\n  let { item } = props;\n  let reloadButton;\n  let dropButton;\n  let ammoCounter;\n\n  if (props.onDrop) {\n    dropButton = (\n      <button\n        className=\"inventory-list__drop-button\"\n        onClick={() => {\n          props.onDrop(item.name);\n        }}\n      >\n        Drop\n      </button>\n    );\n  }\n\n  if (item instanceof RangedWeapon) {\n    let weapon = item as RangedWeapon;\n\n    if (weapon.reload) {\n      // has reload capability\n      let className = \" inventory-list__reload-button \";\n\n      if (weapon.rounds === 0 || weapon.rounds === \"empty\") {\n        className += \" inventory-list__reload-button--empty \";\n      } else if (weapon.rounds < weapon.maxRounds) {\n        className += \" inventory-list__reload-button--partial \";\n      }\n      reloadButton = (\n        <button\n          className={className}\n          onClick={() => {\n            weapon.reload();\n            props.processInterface();\n          }}\n        >\n          Reload\n        </button>\n      );\n    } else {\n      reloadButton = null;\n    }\n\n    ammoCounter = weapon.reload ? (\n      <LinearDisplay label=\"Rounds\" current={weapon.rounds} max={weapon.maxRounds} />\n    ) : null;\n  }\n\n  return (\n    <div key={item.name}>\n      <div onClick={() => props.onClick(item.name)} key={item.name} className=\"inventory-list__item\">\n        <span>{item.name}</span>\n        <div>{ammoCounter}</div>\n      </div>\n      {reloadButton}\n      {dropButton}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./InventoryList.scss\";\nimport { Item, Entity, RangedWeapon } from \"../../services/EntitiesValues\";\nimport InventoryItem from \"./InventoryItem\";\n\ninterface InventoryListProps {\n  className?: string;\n  label: string;\n  title: string;\n  onClick(itemName: string);\n  onDrop(itemName: string);\n  inventory: Item[]; //\n  processInterface: Function;\n}\n\nexport default function InventoryList(props: InventoryListProps) {\n  const className = `inventory-list ${props.className || \"\"}`;\n\n  if (!props.inventory) {\n    return null;\n  }\n  let reloadButton;\n  let dropButton;\n\n  const inventoryItems = props.inventory.map((item) => (\n    <InventoryItem\n      item={item}\n      onClick={props.onClick}\n      onDrop={props.onDrop}\n      processInterface={props.processInterface}\n    />\n  ));\n\n  return (\n    <div className={className}>\n      <div className=\"inventory-list__label\">\n        {props.label}\n        :&nbsp;\n      </div>\n      <div className=\"inventory-list__items\" title={props.title}>\n        {inventoryItems}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport LinearDisplay from \"./LinearDisplay\";\nimport InventoryList from \"./InventoryList\";\nimport \"./EntityCard.scss\";\nimport SquaresService from \"../../services/SquaresService\";\nimport { Entity, RangedWeapon, Item } from \"../../services/EntitiesValues\";\n\ninterface EntityCardProps {\n  entity: Entity;\n  key?: string;\n  onInventoryClick?(entity: Entity, itemName: string);\n  processInterface?: Function;\n}\n\nclass EntityCard extends React.Component<EntityCardProps> {\n  renderCount = 0;\n  handleInventoryClick = (itemName: string): void => {\n    this.props.onInventoryClick(this.props.entity, itemName);\n  };\n\n  onDrop = (itemName: string) => {\n    let { entity } = this.props;\n    if (entity.equipment.hands && entity.equipment.hands.name == itemName) {\n      entity.unEquipFromHands();\n      entity.isShooting = false;\n    }\n    let item: Item = entity.takeFromInventory(itemName);\n    entity.square.addItem(item);\n    this.props.processInterface();\n  };\n\n  render() {\n    // console.log(\"Rendering EntityView. #\", this.renderCount++);\n    let { entity } = this.props;\n    if (!entity) return null;\n    /*\n      FIXME: Below should be separated into several sub-components\n      Each sub-component should receive flat data (position, hp, ...)\n     */\n\n    let className = \"entity-card\";\n    if (entity.active) {\n      className += \" entity-card--active\";\n    }\n\n    if (entity.isFriendly) {\n      className += \" entity-card--friendly\";\n    }\n\n    if (entity.isDead) {\n      className += \" entity-card--dead\";\n    }\n\n    let inHands = entity.equipment && entity.equipment.hands;\n    let inHandsArray = inHands && [inHands];\n\n    return (\n      <div className={className}>\n        <div>\n          <div className=\"entity-card__position\" title=\"Position\">\n            <span>\n              {\" \"}\n              {entity.position.x} {entity.position.y}{\" \"}\n            </span>\n          </div>\n\n          <div className=\"entity-card__portrait\">{entity.icon}</div>\n        </div>\n        <strong title=\"Name\">{entity.name}</strong>\n        <br />\n        <div\n          style={{\n            clear: \"both\",\n            display: \"inline-block\",\n            textAlign: \"right\",\n          }}\n        >\n          <LinearDisplay label=\"HP\" current={entity.hp} max={entity.maxHp} />\n          <br />\n        </div>\n        <InventoryList\n          label=\"Equipped\"\n          title=\"In hands\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          inventory={inHandsArray}\n          processInterface={() => this.props.processInterface()}\n        />\n        <InventoryList\n          label=\"Inventory\"\n          title=\"In backpack\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          inventory={entity.inventory}\n          processInterface={() => this.props.processInterface()}\n        />\n      </div>\n    );\n  }\n}\n\nexport default EntityCard;\n","import React from \"react\";\nimport EntityCard from \"../EntityCard\";\nimport \"./EntitiesList.scss\";\nimport { Entity } from \"../../services/EntitiesValues\";\n\ninterface ListOfEntitiesProps {\n  entities: Entity[];\n  onInventoryClick: any;\n  processInterface: Function;\n}\n\nexport default class ListOfEntities extends React.Component<ListOfEntitiesProps> {\n  renderCounter = 0;\n  render() {\n    // console.log(\"Rendering EntitiesList #\", this.renderCounter++);\n\n    let entitiesFriendly = this.props.entities\n      .filter((entity) => entity.isFriendly)\n      .map((obj) => {\n        return (\n          <EntityCard\n            onInventoryClick={this.props.onInventoryClick}\n            entity={obj}\n            key={obj.name}\n            processInterface={() => this.props.processInterface()}\n          />\n        );\n      });\n\n    let entitiesUnfriendly = this.props.entities\n      .filter((entity) => !entity.isFriendly)\n      .map((obj) => {\n        return <EntityCard entity={obj} key={obj.name} processInterface={() => this.props.processInterface()} />;\n      });\n\n    return (\n      <>\n        <h4 className=\"entities-list__header\">List of Entities:</h4>\n        <div className=\"entities-list\">{entitiesFriendly}</div>\n        <div className=\"entities-list\">{entitiesUnfriendly}</div>\n      </>\n    );\n  }\n}\n","import React, { ReactElement, DOMElement } from \"react\";\nimport * as Helpers from \"../../helpers/Helpers\";\nimport { SquaresService, EntitiesService } from \"../../services\";\nimport EntityCard from \"../EntityCard/EntityCard\";\nimport { Square } from \"../../services/SquaresService\";\nimport { Entity, Position, structures, Item } from \"../../services/EntitiesValues\";\n\nimport InventoryList from \"../EntityCard/InventoryList\";\n\nimport GameStyles from \"./Game.module.scss\";\n\ninterface TargetedSquareInfoProps {\n  className: string;\n  squareNumber: number;\n  squares: Square[];\n  selected: Entity;\n  targeted: Square;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  processInterface: Function;\n}\n\nexport default class TargetedSquareInfo extends React.Component<TargetedSquareInfoProps> {\n  boxSerialNumber: number = 0;\n\n  constructor(props) {\n    super(props);\n  }\n\n  onItemClick = (itemName: string): void => {\n    let { selected, targeted } = this.props;\n    if (Helpers.isSelectedTargeted(selected, targeted)) {\n      let item = targeted.takeFromInventory(itemName);\n      selected.addToInventory(item);\n    }\n    this.props.processInterface();\n  };\n\n  onMoveClick(selected: Entity, targetedSquarePosition: Position): void {\n    let targetedSquare: Square = SquaresService.getSquare(targetedSquarePosition.x, targetedSquarePosition.y);\n    selected.setMoveDestinationPosition(targetedSquarePosition);\n    targetedSquare.isChosenDestination = true;\n    this.props.processInterface();\n  }\n\n  onAttackClick(selected: Entity, targetedSquarePosition: Position): void {\n    selected.attackPosition(targetedSquarePosition);\n    this.props.processInterface();\n  }\n\n  onAddStructureClick(targetedSquarePosition: Position, structureType: string): void {\n    let box = Object.assign({}, structures[structureType]);\n    let targetPosition = Object.assign({}, targetedSquarePosition);\n    box.position = targetPosition;\n    box.name += this.boxSerialNumber++;\n    let newStructure = new Entity(box);\n    let square = SquaresService.getSquare(targetedSquarePosition.x, targetedSquarePosition.y);\n    square.entity = newStructure;\n    square.addToInventory(newStructure as Item); // TODO: FIXME: Stop forcing types, make a new list for scenery items.\n    //EntitiesService.entities.push(newBox);\n    this.props.processInterface();\n  }\n\n  render() {\n    let { targeted, selected, squareNumber } = this.props;\n\n    if (!targeted) {\n      return null;\n    }\n\n    let targetedSquarePosition = SquaresService.targetSquarePosition(squareNumber);\n\n    let entityInfo;\n    let distanceInfo;\n    let positionInfo;\n    let bloodInfo;\n    let availableActions = [];\n    let items;\n\n    let editorButtons = (\n      <div>\n        <button onClick={() => this.onAddStructureClick(targetedSquarePosition, \"box\")} className={GameStyles.button}>\n          Add box\n        </button>\n        <button\n          onClick={() => this.onAddStructureClick(targetedSquarePosition, \"redBarrel\")}\n          className={GameStyles.button}\n        >\n          Add barrel\n        </button>\n      </div>\n    );\n\n    if (targeted.entity && !Helpers.isSelectedTargeted(selected, targeted)) {\n      entityInfo = (\n        <EntityCard\n          onInventoryClick={this.props.onInventoryClick}\n          entity={targeted.entity}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (targeted.items) {\n      items = (\n        <InventoryList\n          label=\"Items in this location\"\n          title=\"On the floor\"\n          onClick={this.onItemClick}\n          onDrop={null}\n          inventory={targeted.items}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (selected) {\n      let distanceToSelected = Helpers.calculateDistance(\n        targetedSquarePosition.x - selected.position.x,\n        targetedSquarePosition.y - selected.position.y\n      );\n\n      distanceInfo = <li>Distance to selected: {distanceToSelected.toFixed(2)}</li>;\n\n      if (distanceToSelected !== 0) {\n        if (targeted.isAvailableDestination) {\n          availableActions[0] = (\n            <button onClick={() => this.onMoveClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Move\n            </button>\n          );\n        }\n        if (targeted.entity) {\n          availableActions[1] = (\n            <button onClick={() => this.onAttackClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Attack\n            </button>\n          );\n        }\n      }\n    }\n\n    if (targetedSquarePosition) {\n      positionInfo = (\n        <li>\n          Position: [ {targetedSquarePosition.x}, {targetedSquarePosition.y} ]{\" \"}\n        </li>\n      );\n    }\n\n    if (targeted.blood) {\n      bloodInfo = <li>Blood amount: {targeted.blood}</li>;\n    }\n\n    return (\n      <div className={this.props.className}>\n        <strong className={GameStyles.targeted__label}>Target square Info</strong>\n        <div>{entityInfo}</div>\n        <div>{availableActions}</div>\n        <ul>\n          {positionInfo}\n          {distanceInfo}\n          {bloodInfo}\n          {items}\n          {editorButtons}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { ReactElement } from \"react\";\nimport EntityCard from \"../EntityCard/EntityCard\";\nimport { Entity } from \"../../services/EntitiesValues\";\n\nimport GameStyles from \"./Game.module.scss\";\n\ninterface SelectedEntityInfoProperties {\n  selected: Entity;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  handleDeselectAllEntities: () => void;\n  processInterface: Function;\n}\n\nexport default class SelectedEntityInfo extends React.Component<SelectedEntityInfoProperties> {\n  render(): ReactElement {\n    if (!this.props.selected) {\n      return null;\n    }\n\n    return (\n      <div className={GameStyles.selected}>\n        <strong className={GameStyles.selected__label}>Selected entity </strong>\n        <div>\n          <EntityCard\n            onInventoryClick={this.props.onInventoryClick}\n            entity={this.props.selected}\n            processInterface={() => this.props.processInterface()}\n          />\n        </div>\n        <button onClick={this.props.handleDeselectAllEntities} className={GameStyles.button}>\n          {\" \"}\n          Deselect\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport MessageService from \"../../services/MessageService\";\n\nexport class MessageBox extends React.Component {\n  messages = MessageService.messages;\n  messageNumber;\n\n  shouldComponentUpdate() {\n    // don't update if there are no new messages since last render\n    return this.messages.length != this.messageNumber;\n  }\n\n  renderMessage = (message: string, number: number) => {\n    return (\n      <li>\n        Message #[{number}]: {message}\n      </li>\n    );\n  };\n\n  render() {\n    if (!this.messages.length) return null;\n    let RenderedMessages = this.messages.map((message, number) => this.renderMessage(message, number));\n    // remember the number of messages rendered\n    this.messageNumber = this.messages.length;\n    return (\n      <ul className=\"messages\" id=\"messages\">\n        {RenderedMessages}\n      </ul>\n    );\n  }\n\n  scrollElement() {\n    window.requestAnimationFrame(() => {\n      var element = document.getElementById(\"messages\");\n      element.scrollTop = element.scrollHeight;\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.messages.length) this.scrollElement();\n  }\n}\n","import Entities from \"./EntitiesValues\";\n\nclass GameModelClass {\n  entities;\n  constructor(Entities) {\n    this.entities = Entities;\n  }\n  access() {\n    console.log(\"Accessing Game Model\");\n    console.log(this.entities);\n  }\n}\n\nlet GameModel = new GameModelClass(Entities);\n\nexport default GameModel;\n","import React from \"react\";\n\nimport Board from \"../Board\";\nimport EntitiesList from \"../EntitiesList\";\nimport TargetedSquareInfo from \"./TargetedSquareInfo\";\nimport SelectedEntityInfo from \"./SelectedEntityInfo\";\nimport { MessageBox } from \"./MessageBox\";\n\nimport { Entity } from \"../../services/EntitiesValues\";\nimport { Square } from \"../../services/SquaresService\";\n\nimport { EntitiesService, SquaresService } from \"../../services\";\n\nimport * as Helpers from \"../../helpers\";\n\nimport GameLogic from \"../../services/GameLogicService\";\nimport GameModel from \"../../services/GameModelService\";\n\nimport styles from \"./Game.module.scss\";\n\n/** Type of GameState */\ninterface GameState {\n  entities: Entity[];\n  squares: Square[];\n\n  selected: Entity;\n  targeted: Square;\n  targetedSquareNumber: number;\n\n  arenaSize: number;\n  autoLoop: boolean;\n  isBoardRotated: boolean;\n  isEditorOn: boolean;\n}\n\n/** Game composes all the parts of the interface */\nexport default class Game extends React.PureComponent<void, GameState> {\n  renderCounter: number = 0;\n  stepNumber: number = 0;\n\n  constructor(props: void) {\n    super(props);\n\n    // Initial VALUE of game state\n    this.state = {\n      entities: GameModel.entities,\n      squares: SquaresService.squares,\n\n      selected: null,\n      targeted: null,\n      targetedSquareNumber: null,\n\n      arenaSize: 10,\n      autoLoop: true,\n      isBoardRotated: false,\n      isEditorOn: false,\n    };\n  }\n\n  componentDidMount() {\n    EntitiesService.entities = this.state.entities;\n    this.loop();\n  }\n\n  toggleEditorMode = () => {\n    if (!this.state.isEditorOn) {\n      Helpers.resetGivenFieldsOnACollection(this.state.squares, \"blood\", \"entity\");\n      this.setState((prevState) => {\n        return { entities: [], isEditorOn: true };\n      });\n    } else {\n      this.setState((prevState) => {\n        return { squares: SquaresService.squares, entities: EntitiesService.entities, isEditorOn: false };\n      });\n    }\n  };\n\n  loop = () => {\n    this.stepNumber++;\n    this.processEntities();\n    if (this.state.autoLoop) {\n      setTimeout(this.loop, 1000);\n    }\n  };\n\n  processEntities() {\n    this.setState(\n      (prevState) => this.calculateNextGameState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  /**\n   * Calculate WHAT EXACTLY? This should probably go into GameLogic\n   * @param previousState\n   */\n  calculateNextGameState(previousState: GameState) {\n    let nextState: GameState = previousState;\n    let { entities, squares, selected } = nextState;\n\n    EntitiesService.moveEntities();\n    //Helpers.resetGivenFieldsOnACollection(squares, \"isLit\", \"isInTwilightZone\");\n    //SquaresService.lightAllSquares();\n    entities.forEach((entity) => {\n      if (EntitiesService.isEntityShootingProperly(entity)) {\n        EntitiesService.fireAShot(entity);\n      }\n      entity.bleedExternally();\n\n      EntitiesService.stopBreathingForKilledEntity(entity);\n      SquaresService.markAvailableDestinationsForSelectedEntity(entity);\n      // SquaresService.castLightsFromFriendlyEntity(entity);\n    });\n\n    return nextState;\n  }\n\n  processInterface() {\n    this.setState(\n      (prevState) => this.calculateNextInterfaceState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  calculateNextInterfaceState(previousState: GameState) {\n    let nextState = previousState;\n    let { entities, selected } = nextState;\n    entities.forEach((entity) => {\n      if (entity == selected) SquaresService.markAvailableDestinationsForSelectedEntity(selected);\n    });\n\n    return nextState;\n  }\n\n  /** Sets entities within apropriate squares, based on the value of their `position` field\n   * This might actually be not-needed, if movement of entities is reflected in their respectable squares\n   * Also: entities are no longer rendered within `Square` component\n   */\n  setSquaresAccordingToEntities() {\n    this.setState((previousState) => {\n      let squares: Square[] = Helpers.newCopyOfArray(previousState.squares);\n      /* \n      Reattach new squares array to the SquaresService \n      This might actually be not-needed, as elements of that array are objects \n      and are referenced in both arrays, so unless we're adding new squares, \n      everything should work without re-attaching\n      */\n      SquaresService.squares = squares;\n      let entities: Entity[] = previousState.entities;\n      if (entities.length) {\n        Helpers.resetGivenFieldsOnACollection(squares, \"entity\");\n      }\n      entities.forEach((entity) => {\n        SquaresService.setEntityWithinApropriateSquare(entity);\n      });\n\n      return { squares };\n    });\n  }\n\n  nextTick = () => {\n    this.setState({ autoLoop: false });\n    this.loop();\n  };\n\n  newHandleClick = (squareIndex: number) => {\n    this.setState((state) => {\n      let { squares, entities, selected, targeted, isEditorOn, targetedSquareNumber: selectedSquareNumber } = state;\n      let previousTargeted = targeted;\n      targeted = squares[squareIndex];\n      selectedSquareNumber = squareIndex;\n      const doubleClick = () => previousTargeted === targeted;\n      SquaresService.markSquareAsTargeted(squareIndex);\n\n      if (isEditorOn) {\n        switch (targeted.squareType) {\n          case \"floor\":\n            targeted.squareType = \"wall\";\n            break;\n          case \"wall\":\n            targeted.squareType = \"nothing\";\n            break;\n          case \"nothing\":\n          default:\n            targeted.squareType = \"floor\";\n        }\n      }\n\n      /** Setting move destination while clicking on empty square */\n      if (doubleClick() && targeted.isAvailableDestination) {\n        selected.setMoveDestinationSquare(squareIndex);\n      }\n\n      /** To be able to deselect */\n      if (doubleClick() || selected) {\n        if (!selected && targeted.entity) {\n          // Selecting\n          selected = EntitiesService.selectEntityFromGivenSquare(selected, targeted);\n          //targeted = undefined;\n        } else if (Helpers.isSelectedTargeted(selected, targeted)) {\n          // Deselecting if not selecting\n          this.deselectAllEntities();\n          selected = undefined;\n        }\n      }\n\n      // setting attack\n      if (doubleClick() && selected && targeted.entity && selected !== targeted.entity) {\n        selected.attackPosition(SquaresService.targetSquarePosition(squareIndex));\n      }\n\n      return { squares, entities, selected, targeted, targetedSquareNumber: selectedSquareNumber };\n    }, this.processInterface);\n  };\n\n  nuke = (dmg: number) => {\n    this.setState(\n      (state) => {\n        let { entities } = state;\n\n        entities.forEach((entity) => {\n          entity.hp = entity.hp - dmg;\n        });\n\n        return { entities };\n      },\n      () => {\n        this.processEntities();\n      }\n    );\n  };\n\n  toggleRotateBoard = () => {\n    this.setState({ isBoardRotated: !this.state.isBoardRotated });\n  };\n\n  switchAutoLoop = () => {\n    this.setState(\n      (previousState) => {\n        return { autoLoop: !previousState.autoLoop };\n      },\n      () => {\n        if (this.state.autoLoop) {\n          this.loop();\n        }\n      }\n    );\n  };\n\n  onInventoryClick = (entity: Entity, itemName: string) => {\n    this.setState((prevState) => {\n      let entities = [].concat(prevState.entities);\n      EntitiesService.entities = entities;\n      let entityId = EntitiesService.getEntityId(entity);\n      let actualEntity = EntitiesService.findEntityById(entityId);\n      let actualItem = EntitiesService.findItemOnEntity(actualEntity, itemName);\n\n      if (actualEntity.equipment.hands && actualEntity.equipment.hands.name == itemName) {\n        actualEntity.unEquipFromHands();\n      } else {\n        actualEntity.equipInHands(itemName);\n      }\n\n      return { entities };\n    });\n    console.log(entity, itemName);\n  };\n\n  handleDeselectAllEntities = () => {\n    this.setState(\n      (state) => {\n        let { squares, entities, selected } = state;\n\n        this.deselectAllEntities();\n        selected = undefined;\n\n        return { squares, entities, selected };\n      },\n      () => {\n        //this.processEntities();\n      }\n    );\n  };\n\n  deselectAllEntities = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"active\");\n    Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\", \"isAvailableDestination\");\n  };\n\n  ceaseFire = () => {\n    this.setState(\n      (state) => {\n        let { squares, entities, selected } = state;\n\n        Helpers.resetGivenFieldsOnACollection(entities, \"isShooting\");\n\n        return { squares, entities, selected };\n      },\n      () => {\n        this.processInterface();\n      }\n    );\n  };\n\n  saveMap = () => {\n    let squares: Square[] = JSON.parse(JSON.stringify(SquaresService.squares));\n    let squaresProcessedForSave = squares.map((square) => {\n      //let newSquare = { squareType: square.squareType, entity: square.entity };\n\n      return square;\n    });\n    let squaresStringified = JSON.stringify(squaresProcessedForSave);\n    console.log(squaresStringified);\n    let message = \"Enter the name of saved map.\";\n    let mapName = \"map00\";\n\n    let result = window.prompt(message, mapName);\n\n    localStorage[result] = squaresStringified;\n  };\n\n  loadMap = () => {\n    let mapNames = Object.keys(localStorage);\n    let message = `Enter the name of map to load. ${mapNames}`;\n    let mapName = \"map00\";\n    let result = window.prompt(message, mapName);\n    let squaresStringified = localStorage[result];\n\n    console.log(squaresStringified);\n    let squaresLoaded = JSON.parse(squaresStringified);\n    SquaresService.squares.forEach((square, index) => {\n      let targetSquare = square;\n      let sourceSquare = squaresLoaded[index];\n      targetSquare.squareType = sourceSquare.squareType;\n    });\n  };\n\n  render() {\n    // console.log(\"Rendering Game. #\", this.renderCounter++);\n    return (\n      <div className={styles.game}>\n        <div className={styles.game__board}>\n          <Board\n            squares={this.state.squares}\n            entities={this.state.entities}\n            onClick={(i) => this.newHandleClick(i)}\n            size={this.state.arenaSize}\n            isRotated={this.state.isBoardRotated}\n          />\n        </div>\n\n        <div className={styles.game__info}>\n          <div className={styles.actions}>\n            <button onClick={this.toggleEditorMode} className={styles.button}>\n              Editor Mode\n            </button>\n            <button onClick={this.saveMap} className={styles.button}>\n              Save Map\n            </button>\n            <button onClick={this.loadMap} className={styles.button}>\n              Load Map\n            </button>\n            <button\n              onClick={() => {\n                this.nuke(40);\n              }}\n              className={`${styles.button} ${styles[\"button-nuke\"]}`}\n            >\n              Nuke All\n            </button>\n            <button onClick={this.ceaseFire} className={styles.button}>\n              Cease Fire\n            </button>\n\n            <button onClick={this.toggleRotateBoard} className={styles.button}>\n              Rotate Board\n            </button>\n            <button onClick={this.nextTick} className={styles.button}>\n              Next Tick\n            </button>\n\n            <span className={styles[\"step-counter\"]}>Tick: {this.stepNumber}</span>\n\n            <label className={` ${styles.button} ${styles[\"auto-cycle\"]}`}>\n              <input type=\"checkbox\" checked={this.state.autoLoop} onChange={this.switchAutoLoop} />\n              <span>Auto Cycle</span>\n            </label>\n          </div>\n\n          <div className={styles[\"interaction-container\"]}>\n            <SelectedEntityInfo\n              selected={this.state.selected}\n              handleDeselectAllEntities={this.handleDeselectAllEntities}\n              onInventoryClick={this.onInventoryClick}\n              processInterface={() => this.processInterface()}\n            />\n\n            <TargetedSquareInfo\n              className={styles.targeted}\n              squareNumber={this.state.targetedSquareNumber}\n              squares={this.state.squares}\n              selected={this.state.selected}\n              targeted={this.state.targeted}\n              onInventoryClick={this.onInventoryClick}\n              processInterface={() => this.processInterface()}\n            />\n            <div></div>\n          </div>\n          <MessageBox />\n        </div>\n\n        <div className={styles.game__list}>\n          <EntitiesList\n            entities={this.state.entities}\n            onInventoryClick={this.onInventoryClick}\n            processInterface={() => this.processInterface()}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport Game from \"./components/Game\";\n\nimport \"./style.scss\";\n\nrender(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}