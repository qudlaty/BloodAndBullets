{"version":3,"sources":["components/Game/Game.module.scss","components/Board/Board.module.scss","components/Square/Blood.tsx","components/Square/Items.tsx","components/Square/Square.tsx","helpers/Helpers.ts","services/MessageService.ts","services/EntitiesValues.ts","services/SquaresService.ts","services/EntitiesService.ts","services/index.ts","components/EntityPawn/ShootingVisualization.tsx","components/EntityPawn/EntityPawn.tsx","components/Board/Board.tsx","components/EntityCard/LinearDisplay.tsx","components/EntityCard/InventoryItem.tsx","components/EntityCard/InventoryList.tsx","components/EntityCard/EntityCard.tsx","components/EntitiesList/EntitiesList.tsx","components/Game/TargetedSquareInfo.tsx","components/Game/SelectedEntityInfo.tsx","components/Game/MessageBox.tsx","services/GameModelService.ts","services/GameLogicService.ts","components/Game/Game.tsx","index.js"],"names":["module","exports","Blood","bloodAmount","this","props","className","style","background","toFixed","React","PureComponent","Items","itemsIcons","items","itemsNumber","forEach","item","entity","icon","push","SquareComponent","onClick","squareId","blood","resetGivenFieldsOnACollection","collection","fieldNames","fieldName","undefined","getNumberWithinBoundaries","value","min","max","getRandomIntInclusive","Math","floor","random","calculateAngle","x","y","angle","atan","PI","calculateDistance","sqrt","pow","isSelectedTargeted","selected","targeted","name","turnFlagsIntoClasses","flags","classNameBase","flagsToClassess","active","isAvailableDestination","isChosenDestination","isBreathing","isDead","isShooting","isTargeted","isLit","isInTwilightZone","Object","keys","key","getCssClassesForAGivenSquare","square","squareClassName","squareType","derivedCtor","MessageService","messages","message","Weapon","causesBleeding","range","damage","RangedWeapon","rounds","maxRounds","console","log","Rifle","type","Lazer","M16","L30","M40","Identifiable","Positionable","position","SquaresService","getSquare","Movable","moveDestination","squareIndex","setMoveDestinationPosition","targetSquarePosition","targetPosition","targetSquare","Helpers","squares","Message","send","Mortal","hp","maxHp","Bleedable","bleeding","bleedingReductionPerTurn","bloodReleased","bleed","addBlood","Breathing","isSupposedToBeBreathing","Combative","ceaseFire","hasWeapon","targetedSquarePosition","HavingInventory","inventory","itemName","actualItemIndex","findIndex","splice","Entity","isFriendly","assign","equipment","unEquipFromHands","takeFromInventory","hands","baseCtor","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","entitiesInitialValues","age","head","structures","box","redBarrel","entities","map","entry","Square","addToInventory","arenaSize","i","initializeSquareIfEmpty","targetSquareIndex","setEntityWithinASquare","amount","j","setSquare","EntitiesService","id","filter","oldPositionX","oldPositionY","newSquare","potentialTargetEntity","selectedInEntities","findEntityById","getEntityId","damageApplied","weapon","isAbleToFire","fire","checkAmmoAndCalculateDamageApplied","getEntitiesAtGivenPosition","targetEntity","applyDamageToTargetEntity","ceaseFireNextTickIfTargetIsKilled","chosenDestinationSquare","moveEntityIntoChosenDestination","JR","OP","OC","moveEntityRandomly","entitiesService","squaresService","ShootingVisualization","calcNewAangle","targetCoords","projectileNumber","projectiles","localId","customStyle","distanceToTargetX","distanceToTargetY","actualDistance","weaponType","projectile","EntityPawn","randomTime","classessFromFlags","animationBreathing","left","squareDistance","top","animation","Component","Board","handleClick","EntityPawns","BoardSquares","colId","cellId","rowId","Array","size","fill","row","number","cells","cell","renderSquare","styles","length","board","isRotated","LinearDisplay","percentage","current","overload","progressStyle","width","title","divider","progressGridStyle","backgroundSize","backgroundImage","label","InventoryItem","reloadButton","dropButton","ammoCounter","onDrop","reload","processInterface","InventoryList","inventoryItems","EntityCard","renderCount","handleInventoryClick","onInventoryClick","addItem","inHands","inHandsArray","clear","display","textAlign","ListOfEntities","entitiesFriendly","obj","entitiesUnfriendly","TargetedSquareInfo","boxSerialNumber","onItemClick","targetedSquare","attackPosition","structureType","newStructure","squareNumber","entityInfo","distanceInfo","positionInfo","bloodInfo","availableActions","editorButtons","onAddStructureClick","GameStyles","button","distanceToSelected","onMoveClick","onAttackClick","targeted__label","SelectedEntityInfo","selected__label","handleDeselectAllEntities","MessageBox","messageNumber","renderMessage","RenderedMessages","window","requestAnimationFrame","element","document","getElementById","scrollTop","scrollHeight","scrollElement","GameModel","saveMap","squaresProcessedForSave","JSON","parse","stringify","squaresStringified","result","prompt","localStorage","loadMap","mapNames","squaresLoaded","loadMapIntoBoard","index","sourceSquare","loadBuiltInMap","tutorial_map_00","GameLogic","model","run","calculateNextInterfaceState","previousState","nextState","markAvailableDestinationsForSelectedEntity","syncSquaresWithEntities","array","concat","setEntityWithinApropriateSquare","deselectAllEntities","moveEntities","isEntityShootingProperly","fireAShot","bleedExternally","stopBreathingForKilledEntity","Game","renderCounter","stepNumber","toggleEditorMode","state","isEditorOn","setState","prevState","loop","processEntities","autoLoop","setTimeout","nextTick","newHandleClick","selectedSquareNumber","targetedSquareNumber","previousTargeted","doubleClick","markSquareAsTargeted","setMoveDestinationSquare","selectEntityFromGivenSquare","nuke","dmg","toggleRotateBoard","isBoardRotated","switchAutoLoop","entityId","actualEntity","equipInHands","Entities","calculateNextGameState","setSquaresAccordingToEntities","game","game__board","game__info","actions","checked","onChange","game__list","render"],"mappings":"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","file":"static/js/main.e5280a66.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"Game_game__2BmQU\",\"game__board\":\"Game_game__board__1AR5E\",\"game__info\":\"Game_game__info__2XuYT\",\"game__list\":\"Game_game__list__3Ltux\",\"button\":\"Game_button__2usZ6\",\"button-nuke\":\"Game_button-nuke__37qkj\",\"actions\":\"Game_actions__2RncO\",\"interaction-container\":\"Game_interaction-container__14p5W\",\"selected\":\"Game_selected__Vfr4N\",\"targeted\":\"Game_targeted__2kJbA\",\"selected__label\":\"Game_selected__label__QlKmT\",\"targeted__label\":\"Game_targeted__label__3dceM\",\"step-counter\":\"Game_step-counter__3OklF\",\"auto-cycle\":\"Game_auto-cycle__16n4Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__3vjsK\",\"board__row\":\"Board_board__row__1-mls\",\"board--rotated\":\"Board_board--rotated__2eonB\"};","import React from \"react\";\n\ninterface BloodProps {\n  bloodAmount: number; // receives amount of blood ONLY\n}\n\n/**\n * @description\n * Visualises blood by adding red background\n * and a little number in the corner.\n *\n * @param bloodAmount - number representing the amount of blood.\n */\nclass Blood extends React.PureComponent<BloodProps> {\n  render() {\n    let { bloodAmount } = this.props;\n\n    return (\n      <div\n        className=\"square__blood\"\n        style={{\n          background: `rgba(255, 0, 0, ${(bloodAmount / 50).toFixed(2)})`,\n        }}\n      >\n        {bloodAmount}\n      </div>\n    );\n  }\n}\n\nexport default Blood;\n","import React from \"react\";\nimport { Item, Entity } from \"../../services/EntitiesValues\";\n\ninterface ItemsProps {\n  items: Item[];\n  itemsNumber: number; // here to trigger update when list length changes\n}\n\n/**\n * @description\n * Displays icons of items on the square, as well as little number in the corner.\n * @param itemsNumber - number of items on the square\n * @param items - array of items on the square\n */\nclass Items extends React.PureComponent<ItemsProps> {\n  itemsIcons = [];\n\n  render() {\n    let { items, itemsNumber } = this.props;\n\n    if (!items) return null;\n\n    items.forEach((item) => {\n      let entity = item as Entity;\n      if (entity.icon) {\n        this.itemsIcons.push(<div className=\"square__item-icon\">{entity.icon}</div>);\n      }\n    });\n\n    return (\n      <div className=\"square__items\">\n        <div className=\"square__items-icons\">{this.itemsIcons}</div>\n        <div className=\"square__items-number\">{itemsNumber}</div>\n      </div>\n    );\n  }\n}\n\nexport default Items;\n","import React from \"react\";\nimport Blood from \"../Square/Blood\";\nimport Items from \"../Square/Items\";\nimport { Item } from \"../../services/EntitiesValues\";\nimport \"./Square.scss\";\n\n// TODO: This should really take less props\ninterface SquareProps {\n  squareId: number;\n  className?: string;\n  onClick: (squareIndex: number) => void;\n  blood: number;\n  items: Item[]; // collection of objects\n  itemsNumber: number; // here to trigger update when list length changes\n}\n\n/**\n * @description Displays a square with blood and items on it.\n * @param squareId - unique numerical id\n * @param className - string with CSS clasess\n * @param onClick - callback to call when square is clicked\n * @param blood - amount of blood\n * @param items - array of items\n * @param itemsNumber - numberof items\n */\nclass SquareComponent extends React.PureComponent<SquareProps> {\n  onClick = () => {\n    this.props.onClick(this.props.squareId);\n  };\n\n  render() {\n    // console.log(\"Render Square\", this.props.squareId);\n    return (\n      <button className={this.props.className} onClick={this.onClick}>\n        <Blood bloodAmount={this.props.blood} />\n        <Items items={this.props.items} itemsNumber={this.props.itemsNumber} />\n        <div className=\"square__content\">&nbsp;</div>\n      </button>\n    );\n  }\n}\n\nexport default SquareComponent;\n","import { Entity } from \"../services/EntitiesValues\";\nimport { Square } from \"../services/SquaresService\";\n\n/** @description\n * Takes a collection and a list of strings describing object keys.\n * Sets all given fields on a collection to `undefined`\n */\nexport function resetGivenFieldsOnACollection(collection, ...fieldNames) {\n  collection.forEach((item) => {\n    fieldNames.forEach((fieldName) => {\n      item && (item[fieldName] = undefined);\n    });\n  });\n}\n\n/** @description Takes a number and fits it within given boundaries, then returns it */\nexport function getNumberWithinBoundaries(value: number, min: number, max: number): number {\n  if (value < min) value = min;\n  if (value > max) value = max;\n  return value;\n}\n\n/** @description Returns a random integer between min and max */\nexport function getRandomIntInclusive(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/** @description Returns angle (in degrees) of a given vector */\nexport function calculateAngle(x: number, y: number): number {\n  let angle: number;\n  if (y >= 0) {\n    angle = -Math.atan(x / y) * (180 / Math.PI);\n  } else if (y < 0) {\n    angle = (180 / Math.PI) * (Math.atan(x / -y) + Math.PI);\n  }\n  return angle;\n}\n\n/** @description Pitagorean distance between 0,0 and given coords */\nexport function calculateDistance(x: number, y: number): number {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n}\n\n/** @description Mixing classess together */\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  // see https://www.typescriptlang.org/docs/handbook/mixins.html\n  baseCtors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));\n    });\n  });\n}\n\n/** @description Checking if selected entity is on a targeted square */\nexport function isSelectedTargeted(selected: Entity, targeted: Square): boolean {\n  if (selected && targeted && targeted.entity && selected.name === targeted.entity.name) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * @description\n * Adding classess apropriate to the flags passed in by props\n * @param classNameBase - if given, it is added in front of the classname with \"--\"\n * Eg: classNameBase--class-from-flag\n */\nexport function turnFlagsIntoClasses(flags: object, classNameBase?: string) {\n  const flagsToClassess = {\n    active: \"active\",\n    isAvailableDestination: \"is-available-destination\",\n    isChosenDestination: \"is-chosen-destination\",\n    isBreathing: \"breathing\",\n    isDead: \"dead\",\n    isShooting: \"shooting\",\n    isTargeted: \"targeted\",\n    isLit: \"is-lit\",\n    isInTwilightZone: \"is-in-twilight-zone\",\n  };\n\n  let className = \"\";\n\n  if (classNameBase) {\n    classNameBase += \"--\";\n  } else {\n    classNameBase = \"\";\n  }\n\n  Object.keys(flagsToClassess).forEach((key) => {\n    if (flags[key]) {\n      className += ` ${classNameBase}${flagsToClassess[key]}`;\n    }\n  });\n  return className;\n}\n\n/**\n * @description\n * Creates a new array containing all the elements from a given array\n * @param array array to shallow-copy\n * @yields a new copy of the array\n */\nexport function newCopyOfArray(array: any[]) {\n  return [].concat(array);\n}\n\n/**\n * @description\n * Returns a string with set of CSS classes\n * based on the flags found in the given square.\n * @param square a square to style\n * @yields string with all classess applicable for the given square\n */\nexport function getCssClassesForAGivenSquare(square: Square): string {\n  let squareClassNameBase = \"square\";\n  let squareClassName = `${squareClassNameBase} ${square.squareType}`;\n  squareClassName += turnFlagsIntoClasses(square, squareClassNameBase);\n  if (square.entity) {\n    squareClassName += turnFlagsIntoClasses(square.entity, squareClassNameBase);\n  }\n  return squareClassName;\n}\n","class MessageServiceClass {\n  messages: string[] = [];\n  send(message: string) {\n    this.messages.push(message);\n  }\n}\n\nconst MessageService = new MessageServiceClass();\n\nexport default MessageService;\n","import { applyMixins } from \"../helpers\";\nimport { SquaresService } from \".\";\nimport { Square } from \"./SquaresService\";\nimport * as Helpers from \"../helpers\";\nimport Message from \"../services/MessageService\";\n\nexport class Item {\n  name: string = \"\";\n}\n\nexport class Weapon extends Item {\n  causesBleeding = 0;\n  range = 0;\n  damage = 0;\n}\n\nexport class RangedWeapon extends Weapon {\n  rounds: number | any = 0;\n  maxRounds = 5;\n\n  fire() {\n    this.rounds--;\n    console.log(\"Firing ranged weapon. Damage: \", this.damage);\n    return this.damage;\n  }\n\n  get isAbleToFire() {\n    return this.rounds > 0;\n  }\n\n  reload() {\n    this.rounds = this.maxRounds;\n  }\n}\n\nclass Rifle extends RangedWeapon {\n  type = \"projectile\";\n  range = 4;\n  damage = 1;\n  causesBleeding = 4;\n}\n\nclass Lazer extends RangedWeapon {\n  type = \"lazer\";\n  range = 6;\n  damage = 5;\n  causesBleeding = 0;\n}\n\nclass M16 extends Rifle {\n  name = \"M16\";\n  rounds = 15;\n  maxRounds = 20;\n  damage = 2;\n}\n\nclass L30 extends Lazer {\n  name = \"Assault Lazer Cannon\";\n  rounds = 3;\n  maxRounds = 3;\n  damage = 10;\n}\n\nclass M40 extends Rifle {\n  name = \"M41A Pulse Rifle\";\n  rounds = 40;\n  maxRounds = 40;\n  damage = 1;\n}\n\n/** Position on a grid */\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nclass Identifiable {\n  name: string = \"An Entity\";\n  icon: string = \"E\";\n}\n\nexport class Positionable {\n  position: Position = { x: undefined, y: undefined };\n\n  get square(): Square {\n    let square = SquaresService.getSquare(this.position.x, this.position.y);\n    return square;\n  }\n}\n\nclass Movable extends Identifiable {\n  moveDestination: Position;\n\n  setMoveDestinationSquare(squareIndex: number) {\n    this.setMoveDestinationPosition(SquaresService.targetSquarePosition(squareIndex));\n  }\n\n  setMoveDestinationPosition(targetPosition: Position) {\n    let targetSquare = SquaresService.getSquare(targetPosition.x, targetPosition.y);\n    if (!targetSquare.entity || targetSquare.entity.isDead) {\n      this.moveDestination = targetPosition;\n      Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\");\n      targetSquare.isChosenDestination = true;\n    } else {\n      Message.send(`${this.name} can't move into square (${targetPosition.x}, ${targetPosition.y})`);\n    }\n  }\n}\n\nexport class Mortal extends Positionable {\n  hp: number = 100;\n  maxHp: number = 100;\n  get isDead(): boolean {\n    return this.hp <= 0;\n  }\n}\n\nexport class Bleedable extends Mortal {\n  bleeding: number;\n  bleedingReductionPerTurn: number = 1;\n  bleed(): number {\n    let entity = this;\n    let bloodReleased = 0;\n    if (entity.bleeding && entity.hp > 0) {\n      bloodReleased = entity.bleeding;\n      entity.hp -= bloodReleased;\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n    }\n    return bloodReleased;\n  }\n\n  bleedExternally() {\n    if (!this.bleeding) return;\n    let entity = this;\n    let bloodReleased = this.bleed();\n    let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\n    SquaresService.addBlood(square, bloodReleased);\n  }\n}\n\nclass Breathing extends Mortal {\n  isSupposedToBeBreathing: boolean = undefined;\n  get isBreathing(): boolean {\n    return this.hp > 0 && this.isSupposedToBeBreathing;\n  }\n  set isBreathing(value: boolean) {\n    this.isSupposedToBeBreathing = value;\n  }\n}\n\nclass Combative extends Identifiable {\n  targetPosition: Position;\n  isShooting?: boolean;\n  ceaseFire?: boolean;\n  hasWeapon?: boolean;\n  attackPosition(targetedSquarePosition: Position) {\n    if (this.hasWeapon) {\n      this.targetPosition = targetedSquarePosition;\n      this.isShooting = true;\n    } else {\n      Message.send(`${this.name} can't shoot - no weapon equipped`);\n    }\n  }\n}\n\nexport class HavingInventory {\n  inventory: Item[];\n  takeFromInventory(itemName: string): Item {\n    let actualItemIndex = this.inventory.findIndex((item) => item.name === itemName);\n    let actualItem = this.inventory.splice(actualItemIndex, 1)[0];\n\n    return actualItem;\n  }\n  addToInventory(item: Item) {\n    if (!this.inventory) {\n      this.inventory = [];\n    }\n    this.inventory.push(item);\n  }\n}\n\nclass HavingEquipment extends HavingInventory {\n  equipment: any;\n  hasWeapon?: boolean;\n\n  equipInHands(itemName: string) {\n    this.unEquipFromHands();\n    let item = this.takeFromInventory(itemName);\n    this.equipment.hands = item;\n    if (item instanceof Weapon) {\n      this.hasWeapon = true;\n    } else {\n      this.hasWeapon = false;\n    }\n  }\n\n  unEquipFromHands() {\n    if (this.equipment.hands) {\n      this.inventory.push(this.equipment.hands);\n      this.equipment.hands = null;\n      this.hasWeapon = false;\n    }\n  }\n}\n\nexport class Entity {\n  // Extended by mixins below\n  constructor(...props) {\n    Object.assign(this, ...props);\n  }\n  isFriendly?: boolean;\n  active?: boolean;\n}\n\n/************************************************************/\n/* Always update both lists */\n\nexport interface Entity\n  extends Identifiable,\n    Positionable,\n    Mortal,\n    Bleedable,\n    Movable,\n    Breathing,\n    Combative,\n    HavingInventory,\n    HavingEquipment {}\napplyMixins(Entity, [\n  Identifiable,\n  Positionable,\n  Mortal,\n  Bleedable,\n  Movable,\n  Breathing,\n  Combative,\n  HavingInventory,\n  HavingEquipment,\n]);\n\n/************************************************************/\n\nconst entitiesInitialValues = [\n  {\n    name: \"John Rambo\",\n    age: 40,\n    hp: 95,\n    maxHp: 100,\n    icon: \"😠\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 8, y: 8 },\n    inventory: [{ name: \"KA-BAR\" }, new M16()],\n    equipment: { head: \"Red Bandana\", hands: null },\n  },\n  {\n    name: \"Ellen Replay\",\n    age: 30,\n    hp: 50,\n    maxHp: 65,\n    icon: \"👩\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 1, y: 8 },\n    inventory: [new M40(), { name: \"Motion Detector\" }],\n    equipment: { head: \"Afro\" },\n  },\n  {\n    name: \"Lazer Blady\",\n    age: 60,\n    hp: 75,\n    maxHp: 100,\n    icon: \"🧑🏻\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 4, y: 8 },\n    inventory: [new L30(), new M16()],\n    equipment: {},\n  },\n  {\n    name: \"Lux Aeterna\",\n    age: 20,\n    hp: 50,\n    maxHp: 50,\n    icon: \"👱‍♀️\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 1, y: 1 },\n    inventory: [new L30()],\n    equipment: {},\n  },\n  {\n    name: \"Robot\",\n    age: 1,\n    hp: 50,\n    maxHp: 50,\n    icon: \"🤖\",\n    isBreathing: false,\n    position: { x: 4, y: 5 },\n  },\n  {\n    name: \"Octo\",\n    age: 8,\n    hp: 200,\n    maxHp: 200,\n    icon: \"🐙\",\n    isBreathing: true,\n    position: { x: 8, y: 2 },\n    bleedingReductionPerTurn: 0,\n    bleeding: 1,\n  },\n  {\n    name: \"Squid\",\n    age: 5,\n    hp: 100,\n    maxHp: 100,\n    icon: \"🦑\",\n    isBreathing: true,\n    position: { x: 5, y: 5 },\n  },\n  {\n    name: \"Ant\",\n    age: 1,\n    hp: 45,\n    maxHp: 50,\n    icon: \"🐜\",\n    isBreathing: true,\n    position: { x: 7, y: 6 },\n  },\n  {\n    name: \"Spider\",\n    age: 1,\n    hp: 100,\n    maxHp: 150,\n    icon: \"🕷️\",\n    isBreathing: true,\n    position: { x: 9, y: 3 },\n    bleedingReductionPerTurn: 1,\n  },\n  {\n    name: \"Mosquito\",\n    age: 1,\n    hp: 12,\n    maxHp: 20,\n    icon: \"🦟\",\n    isBreathing: true,\n    position: { x: 2, y: 7 },\n  },\n  {\n    name: \"Microbe\",\n    age: 1,\n    hp: 1,\n    maxHp: 5,\n    icon: \"🦠\",\n    isBreathing: true,\n    position: { x: 3, y: 5 },\n  },\n];\n\nexport const structures = {\n  box: {\n    name: \"box\",\n    icon: \"📦\",\n    hp: 50,\n    maxHp: 70,\n    isBreathing: false,\n    position: { x: 4, y: 5 },\n  },\n  redBarrel: {\n    name: \"redBarrel\",\n    icon: \"🛢️\",\n    hp: 50,\n    maxHp: 70,\n    isBreathing: false,\n    position: { x: 4, y: 5 },\n  },\n};\n\nconst entities = entitiesInitialValues.map((entry) => new Entity(entry));\n\nexport default entities;\n","import * as Helpers from \"../helpers/Helpers\";\nimport { Entity, Position, Item, RangedWeapon, HavingInventory } from \"./EntitiesValues\";\n\nexport interface Square {\n  entity?: Entity;\n  blood?: number;\n  squareType: string;\n  isAvailableDestination?: boolean;\n  isChosenDestination?: boolean;\n  isTargeted?: boolean;\n  isLit?: boolean;\n  isInTwilightZone?: boolean;\n  // items?: RangedWeapon[];\n  addItem(item: Item): void;\n}\n\nexport class Square extends HavingInventory implements Square {\n  public squareType: string = \"nothing\";\n\n  addItem(item: RangedWeapon) {\n    this.addToInventory(item);\n  }\n  get items() {\n    return this.inventory;\n  }\n}\n\nclass SquaresServiceClass {\n  arenaSize: number = 10;\n\n  squares: Square[] = [];\n\n  constructor() {\n    let i = this.arenaSize * this.arenaSize;\n    while (i-- !== 0) {\n      this.initializeSquareIfEmpty(i);\n    }\n  }\n\n  getSquare(x: number, y: number): Square {\n    return this.squares[this.targetSquareIndex(x, y)];\n  }\n\n  setSquare(x: number, y: number, value): void {\n    this.squares[this.targetSquareIndex(x, y)] = value;\n  }\n\n  targetSquareIndex(x: number, y: number): number {\n    return y * this.arenaSize + x;\n  }\n\n  targetSquarePosition(squareIndex: number): Position {\n    let x: number, y: number;\n    y = Math.floor(squareIndex / this.arenaSize);\n    x = squareIndex % this.arenaSize;\n    return { x, y };\n  }\n\n  setEntityWithinApropriateSquare(entity: Entity): void {\n    this.setEntityWithinASquare(entity.position.x, entity.position.y, entity);\n  }\n\n  setEntityWithinASquare(x: number, y: number, entity: Entity) {\n    let squareIndex: number = this.targetSquareIndex(x, y);\n    this.initializeSquareIfEmpty(squareIndex);\n    this.squares[squareIndex].entity = entity;\n  }\n\n  addBlood(square: Square, amount: number) {\n    if (!square.blood) {\n      square.blood = amount;\n    } else {\n      square.blood += amount;\n    }\n  }\n\n  markSquareAsTargeted(squareIndex: number): void {\n    Helpers.resetGivenFieldsOnACollection(this.squares, \"isTargeted\");\n    this.initializeSquareIfEmpty(squareIndex);\n    this.squares[squareIndex].isTargeted = true;\n  }\n\n  initializeSquareIfEmpty(squareIndex: number) {\n    if (!this.squares[squareIndex]) {\n      this.squares[squareIndex] = new Square();\n    }\n  }\n\n  markAvailableDestinationsForSelectedEntity(entity: Entity): void {\n    if (entity.active) {\n      let { x, y } = entity.position;\n\n      Helpers.resetGivenFieldsOnACollection(this.squares, \"isAvailableDestination\");\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize || (i === x && j === y)) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n          if (square.squareType === \"floor\") {\n            square.isAvailableDestination = true;\n          }\n\n          this.setSquare(i, j, square);\n        }\n      }\n    }\n  }\n  lightAllSquares(): void {\n    this.squares.forEach((square) => (square.isLit = true));\n  }\n  castLightsFromFriendlyEntity(entity: Entity): void {\n    if (entity.isFriendly) {\n      let { x, y } = entity.position;\n\n      for (let j = y - 2; j <= y + 2; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 2; i <= x + 2; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n\n          square.isInTwilightZone = true;\n          this.setSquare(i, j, square);\n        }\n      }\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n\n          square.isLit = true;\n          this.setSquare(i, j, square);\n        }\n      }\n    }\n  }\n}\n\nlet SquaresService = new SquaresServiceClass();\nexport default SquaresService;\n","import { default as SquaresService, Square } from \"./SquaresService\";\nimport * as Helpers from \"../helpers/Helpers\";\nimport { Entity, Position, RangedWeapon, HavingInventory } from \"../services/EntitiesValues\";\nconst arenaSize: number = 10;\n\nclass EntitiesServiceClass {\n  entities: Entity[];\n  selected: Entity;\n\n  getEntityId(entity: Entity): string {\n    return entity.name;\n  }\n\n  findEntityById(id: string): Entity {\n    let result: Entity = this.entities.filter((entity) => entity.name === id)[0];\n    return result;\n  }\n\n  findItemOnEntity(entity: HavingInventory, id: string) {\n    let result = entity.inventory.filter((item) => item.name === id)[0];\n    return result;\n  }\n\n  moveEntityRandomly(entity: Entity) {\n    if (entity.isDead) return;\n\n    let oldPositionX = entity.position.x;\n    let oldPositionY = entity.position.y;\n\n    entity.position.x = entity.position.x + Helpers.getRandomIntInclusive(-1, 1);\n    entity.position.y = entity.position.y + Helpers.getRandomIntInclusive(-1, 1);\n\n    entity.position.x = Helpers.getNumberWithinBoundaries(entity.position.x, 0, arenaSize - 1);\n    entity.position.y = Helpers.getNumberWithinBoundaries(entity.position.y, 0, arenaSize - 1);\n\n    let newSquare = SquaresService.getSquare(entity.position.x, entity.position.y);\n\n    if ((newSquare && newSquare.entity) || (newSquare && newSquare.squareType !== \"floor\")) {\n      // if square occupiec, reverse the move\n      entity.position.x = oldPositionX;\n      entity.position.y = oldPositionY;\n    }\n  }\n\n  stopBreathingForKilledEntity(entity: Entity): Entity {\n    if (entity && entity.hp <= 0) {\n      entity.isBreathing = false;\n      entity.hp = 0;\n    }\n    return entity;\n  }\n\n  getEntitiesAtGivenPosition(targetPosition: Position): Entity[] {\n    return this.entities.filter((potentialTargetEntity: Entity): boolean => {\n      return (\n        potentialTargetEntity.position.x === targetPosition.x && potentialTargetEntity.position.y === targetPosition.y\n      );\n    });\n  }\n\n  selectEntityFromGivenSquare(selected: Entity, targeted: Square): Entity {\n    if (selected && targeted && targeted.entity) {\n      selected.active = false;\n    }\n    if (targeted && targeted.entity) {\n      selected = targeted.entity;\n      selected.active = true;\n    }\n\n    return selected;\n  }\n\n  setSelected(selected: Entity, value: boolean): Entity {\n    let selectedInEntities = this.findEntityById(this.getEntityId(selected));\n    if (value) {\n      selected.active = value;\n    } else {\n      selected = null;\n      console.log(\"Nullified:\", selected);\n    }\n    selectedInEntities.active = value;\n    return selected;\n  }\n\n  checkAmmoAndCalculateDamageApplied(entity: Entity): number {\n    let damageApplied: number = 0;\n    let weapon: RangedWeapon = entity.equipment && entity.equipment.hands;\n\n    if (!weapon) return 0;\n\n    if (weapon.isAbleToFire) {\n      damageApplied = weapon.fire();\n    } else {\n      weapon.rounds = \"empty\";\n      entity.isShooting = false;\n    }\n\n    return damageApplied;\n  }\n\n  fireAShot(entity: Entity) {\n    if (entity.ceaseFire) {\n      entity.isShooting = false;\n      entity.ceaseFire = false;\n      return;\n    }\n    let damageApplied = this.checkAmmoAndCalculateDamageApplied(entity);\n    let targetEntities = this.getEntitiesAtGivenPosition(entity.targetPosition);\n    targetEntities.forEach((targetEntity) => {\n      this.applyDamageToTargetEntity(targetEntity, damageApplied);\n      this.ceaseFireNextTickIfTargetIsKilled(entity, targetEntity);\n    });\n  }\n\n  applyDamageToTargetEntity(targetEntity: Entity, damage: number) {\n    if (damage) {\n      targetEntity.hp -= damage;\n      targetEntity.bleeding = 5;\n    }\n  }\n\n  ceaseFireNextTickIfTargetIsKilled(entity: Entity, targetEntity: Entity): void {\n    if (targetEntity.hp < 0) {\n      entity.ceaseFire = true;\n    }\n  }\n\n  isEntityShootingProperly(entity: Entity): boolean {\n    return (\n      entity.isShooting &&\n      entity.targetPosition &&\n      (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\n    );\n  }\n\n  applyEffectsOfBleeding(entity: Entity): Entity {\n    // TODO: move to a \"bleed\" method\n    if (entity.bleeding && entity.hp > 0) {\n      entity.hp -= entity.bleeding;\n      let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\n      SquaresService.addBlood(square, entity.bleeding);\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n    }\n    return entity;\n  }\n\n  moveEntityIntoChosenDestination(entity: Entity): Entity {\n    if (!entity.isDead && entity.moveDestination) {\n      let chosenDestinationSquare: Square = SquaresService.getSquare(\n        entity.moveDestination.x,\n        entity.moveDestination.y\n      );\n\n      entity.position = entity.moveDestination;\n      delete entity.moveDestination;\n      chosenDestinationSquare.isChosenDestination = undefined;\n    }\n    return entity;\n  }\n\n  setMoveDestinationOnASelectedEntity(selected: Entity, targetedSquarePosition: Position): void {\n    selected.moveDestination = targetedSquarePosition;\n  }\n\n  moveEntities(): void {\n    this.entities.forEach((entity) => this.moveEntityIntoChosenDestination(entity));\n    let JR: Entity = this.findEntityById(\"John Rambo\");\n    let OP: Entity = this.findEntityById(\"Squid\");\n    let OC: Entity = this.findEntityById(\"Octo\");\n    this.moveEntityRandomly(JR);\n    this.moveEntityRandomly(OP);\n    this.moveEntityRandomly(OC);\n  }\n}\n\nlet EntitiesService = new EntitiesServiceClass();\nexport default EntitiesService;\n","import entitiesService from \"./EntitiesService\";\r\nimport squaresService from \"./SquaresService\";\r\n\r\nexport let EntitiesService = entitiesService;\r\nexport let SquaresService = squaresService;\r\n","import * as Helpers from \"../../helpers\";\nimport React, { ReactElement } from \"react\";\n\nexport default function ShootingVisualization(props): ReactElement {\n  const DISTANCE_BETWEEN_TILES = 38;\n  let { entity } = props;\n\n  let calcNewAangle = Helpers.calculateAngle;\n  let targetCoords = entity.targetPosition;\n  let projectileNumber = 5;\n  let projectiles = [];\n  let localId = `Entity${entity.icon}`;\n  let customStyle = \"\";\n\n  if (\n    targetCoords &&\n    entity.position &&\n    entity.hasWeapon &&\n    entity.isShooting &&\n    (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\n  ) {\n    if (targetCoords) {\n      let distanceToTargetX = DISTANCE_BETWEEN_TILES * (targetCoords.x - entity.position.x);\n      let distanceToTargetY = DISTANCE_BETWEEN_TILES * (targetCoords.y - entity.position.y);\n\n      let actualDistance = Helpers.calculateDistance(distanceToTargetX, distanceToTargetY);\n      let weaponType = entity && entity.equipment && entity.equipment.hands && entity.equipment.hands.type;\n      let angle = calcNewAangle(distanceToTargetX, distanceToTargetY);\n\n      if (weaponType === \"lazer\") {\n        // TODO: perhaps call to `visualizeShooting(from,to,weaponType)`\n        let className = `projectile${localId}_beam`;\n        let projectile = \"\";\n\n        customStyle = `\n          @keyframes pulsing${localId} {\n            0%  {opacity: 0.1;}\n            100%  {opacity: 1;}\n          }\n\n          @keyframes elongating${localId} {\n            0%  {width: ${actualDistance - 20};}\n            100%  {width: ${actualDistance + 20};}\n          }\n\n          @keyframes swiping${localId} {\n            0%  {transform: rotate(${angle + 90 + -1}deg);}\n            50%  {transform: rotate(${angle + 90 + 1}deg);}\n            100%  {transform: rotate(${angle + 90 - 1}deg);}\n          }\n\n          .${className} {\n            width: ${actualDistance}px;\n            height: 3px;\n            border-radius: 5px;\n            background: #F00;\n            position: absolute;\n            top: 16px;\n            left: 16px;\n\n            transform: rotate(${angle + 90}deg);\n            transform-origin: left 0px;\n            animation: pulsing${localId} 0.1s linear infinite,\n            elongating${localId} 1s linear alternate infinite,\n            swiping${localId} 1s linear alternate infinite;\n            box-shadow: 0 0 5px 5px white;\n            z-index: 10;\n          }\n          `;\n        projectiles.push(\n          <div key={className} className={className}>\n            {projectile}\n          </div>\n        );\n      } else {\n        customStyle = `\n          @keyframes shooting${localId} {\n            0%   {transform: translate(0,0) rotate(${angle}deg) scaleY(0.3)}\n            100% {transform: translate(\n              ${36 * (targetCoords.x - entity.position.x)}px,\n              ${36 * (targetCoords.y - entity.position.y)}px\n            ) rotate(${angle}deg) scaleY(2)}\n          }\n          `;\n\n        while (projectileNumber--) {\n          customStyle += `\n          .projectile${localId}_${projectileNumber} {\n            transform: rotate(${angle}deg);\n            animation: shooting${localId} 0.8s linear infinite;\n            animation-delay: ${projectileNumber - 1 * 0.3}s;\n          }`;\n        }\n        let projectile = entity.isShooting ? \"|\" : \"\";\n\n        projectileNumber = 3;\n\n        while (projectileNumber--) {\n          let className = `projectile projectile${localId}_${projectileNumber}`;\n          projectiles.push(\n            <div key={className} className={className}>\n              {projectile}\n            </div>\n          );\n        }\n      }\n    }\n  }\n  return (\n    <div className=\"shooting-visualization\">\n      <style>{customStyle}</style>\n      {projectiles}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { SquaresService } from \"../../services\";\nimport { Entity } from \"../../services/EntitiesValues\";\nimport ShootingVisualization from \"./ShootingVisualization\";\nimport * as Helpers from \"../../helpers\";\nimport \"./EntityPawn.scss\";\n\ninterface EntityPawnProps {\n  entity: Entity;\n}\n\nexport default class EntityPawn extends React.Component<EntityPawnProps> {\n  randomTime = `${(Math.random() + 0.5).toFixed(2)}s`;\n\n  render() {\n    let { entity } = this.props;\n    let square = SquaresService.getSquare(entity.position.x, entity.position.y);\n    const squareDistance = 38;\n\n    let classNameBase = \"entity-pawn__icon\";\n    let className = `${classNameBase}`;\n    let classessFromFlags = Helpers.turnFlagsIntoClasses(entity, classNameBase);\n    classessFromFlags += Helpers.turnFlagsIntoClasses(square, classNameBase);\n    className += ` ${classessFromFlags} `;\n\n    let animationBreathing = entity.isBreathing ? `breathing ${this.randomTime} alternate infinite linear` : \"none\";\n\n    return (\n      <div\n        className=\"entity-pawn\"\n        key={entity.name}\n        style={{\n          left: squareDistance / 2 - 4 + squareDistance * entity.position.x,\n          top: squareDistance / 2 - 4 + squareDistance * entity.position.y,\n        }}\n      >\n        <div\n          className={className}\n          style={{\n            animation: animationBreathing,\n          }}\n        >\n          {entity.icon}\n        </div>\n        <ShootingVisualization entity={entity} />\n      </div>\n    );\n  }\n}\n","import React, { ReactElement } from \"react\";\n\nimport SquareComponent from \"../Square\";\nimport EntityPawnComponent from \"../EntityPawn\";\nimport * as Helpers from \"../../helpers\";\nimport { Entity } from \"../../services/EntitiesValues\";\nimport { Square } from \"../../services/SquaresService\";\n\nimport styles from \"./Board.module.scss\";\n\ninterface BoardProps {\n  onClick(i: number): void;\n  squares: Square[]; // updated every tick\n  entities: Entity[]; // updated every tick\n  size: number;\n  isRotated: boolean;\n}\n/**\n * @description Board component renders Squares and EntityPawns\n */\nexport default class Board extends React.Component<BoardProps> {\n  handleClick = (i: number) => {\n    console.log(\"Handles Click on Board\", i);\n    this.props.onClick(i);\n  };\n\n  renderSquare(i: number, rowId: number, colId: number) {\n    let square = this.props.squares[i];\n\n    return (\n      <SquareComponent // is a pureComponent\n        key={i}\n        squareId={i}\n        className={Helpers.getCssClassesForAGivenSquare(square)}\n        onClick={this.handleClick}\n        blood={square.blood}\n        items={square.items} // list of objects\n        itemsNumber={square.items && square.items.length}\n      ></SquareComponent>\n    );\n  }\n\n  EntityPawns = (): ReactElement[] => this.props.entities.map((entity) => <EntityPawnComponent entity={entity} />);\n\n  BoardSquares = () => {\n    let cellId: number = 0;\n    let rowId: number = 0;\n    let colId: number;\n\n    let rowsOfSquares = Array(this.props.size)\n      .fill(null)\n      .map((row, number) => {\n        colId = 0;\n        let cells = Array(this.props.size)\n          .fill(null)\n          .map((cell, number) => {\n            return this.renderSquare(cellId++, rowId, colId++);\n          });\n        return (\n          <div key={rowId++} className={styles[\"board__row\"]}>\n            {cells}\n          </div>\n        );\n      });\n\n    return rowsOfSquares;\n  }; // Board Squares\n\n  render() {\n    let className: string = styles.board;\n    if (this.props.isRotated) {\n      className += ` ${styles[\"board--rotated\"]}`;\n    }\n    return (\n      <div className={className}>\n        {this.BoardSquares()}\n        {this.EntityPawns()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./LinearDisplay.scss\";\n\ninterface LinearDisplayProps {\n  className?: string;\n  current: number;\n  max: number;\n  title?: string;\n  label?: string;\n}\n\nexport default function LinearDisplay(props: LinearDisplayProps) {\n  let className = `linear-display ${props.className || \"\"}`;\n  let percentage = ~~((props.current * 100) / props.max);\n  let overload = percentage > 100;\n  if (overload) {\n    percentage = 100;\n    className += \" linear-display--overloaded\";\n  }\n\n  let progressStyle = {\n    width: `${percentage}%`,\n  };\n  let title = props.title || `${props.current}/${props.max}`;\n\n  let amount = props.current;\n\n  let divider = 1;\n  if (props.max >= 40 && props.max < 100) {\n    divider = 5;\n  } else if (props.max >= 100) {\n    divider = 10;\n  }\n\n  amount = amount / divider;\n\n  let gridSize = 100 / amount;\n\n  let color = `rgba(200,200,200,0.4)`;\n  color = `black`;\n  let progressGridStyle = {\n    backgroundSize: `${gridSize}% 100%`,\n    backgroundImage: `\n      linear-gradient(to left, ${color} 1px, transparent 1px)\n    `,\n  };\n\n  Object.assign(progressStyle, progressGridStyle);\n\n  return (\n    <div className={className}>\n      <div className=\"linear-display__label\">{props.label}:&nbsp;</div>\n      <div className=\"linear-display__bar-container\" title={title}>\n        <div className=\"linear-display__bar-progress\" style={progressStyle}>\n          <span className=\"linear-display__bar-progress-text\">\n            {props.current}\n            {overload ? \"/\" + props.max : \"\"}&nbsp;\n          </span>\n        </div>\n      </div>\n      <div>&nbsp;</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { RangedWeapon, Item } from \"../../services/EntitiesValues\";\nimport LinearDisplay from \"./LinearDisplay\";\n\ninterface InventoryItemProps {\n  item: Item;\n  onDrop(itemName: string);\n  onClick(itemName: string);\n  processInterface: Function;\n}\n\nexport default function InventoryItem(props: InventoryItemProps) {\n  let { item } = props;\n  let reloadButton;\n  let dropButton;\n  let ammoCounter;\n\n  if (props.onDrop) {\n    dropButton = (\n      <button\n        className=\"inventory-list__drop-button\"\n        onClick={() => {\n          props.onDrop(item.name);\n        }}\n      >\n        Drop\n      </button>\n    );\n  }\n\n  if (item instanceof RangedWeapon) {\n    let weapon = item as RangedWeapon;\n\n    if (weapon.reload) {\n      // has reload capability\n      let className = \" inventory-list__reload-button \";\n\n      if (weapon.rounds === 0 || weapon.rounds === \"empty\") {\n        className += \" inventory-list__reload-button--empty \";\n      } else if (weapon.rounds < weapon.maxRounds) {\n        className += \" inventory-list__reload-button--partial \";\n      }\n      reloadButton = (\n        <button\n          className={className}\n          onClick={() => {\n            weapon.reload();\n            props.processInterface();\n          }}\n        >\n          Reload\n        </button>\n      );\n    } else {\n      reloadButton = null;\n    }\n\n    ammoCounter = weapon.reload ? (\n      <LinearDisplay label=\"Rounds\" current={weapon.rounds} max={weapon.maxRounds} />\n    ) : null;\n  }\n\n  return (\n    <div key={item.name}>\n      <div onClick={() => props.onClick(item.name)} key={item.name} className=\"inventory-list__item\">\n        <span>{item.name}</span>\n        <div>{ammoCounter}</div>\n      </div>\n      {reloadButton}\n      {dropButton}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./InventoryList.scss\";\nimport { Item } from \"../../services/EntitiesValues\";\nimport InventoryItem from \"./InventoryItem\";\n\ninterface InventoryListProps {\n  className?: string;\n  label: string;\n  title: string;\n  onClick(itemName: string);\n  onDrop(itemName: string);\n  inventory: Item[]; //\n  processInterface: Function;\n}\n\nexport default function InventoryList(props: InventoryListProps) {\n  const className = `inventory-list ${props.className || \"\"}`;\n\n  if (!props.inventory) {\n    return null;\n  }\n\n  const inventoryItems = props.inventory.map((item) => (\n    <InventoryItem\n      item={item}\n      onClick={props.onClick}\n      onDrop={props.onDrop}\n      processInterface={props.processInterface}\n    />\n  ));\n\n  return (\n    <div className={className}>\n      <div className=\"inventory-list__label\">\n        {props.label}\n        :&nbsp;\n      </div>\n      <div className=\"inventory-list__items\" title={props.title}>\n        {inventoryItems}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport LinearDisplay from \"./LinearDisplay\";\nimport InventoryList from \"./InventoryList\";\nimport \"./EntityCard.scss\";\nimport { Entity, Item } from \"../../services/EntitiesValues\";\n\ninterface EntityCardProps {\n  entity: Entity;\n  onInventoryClick?(entity: Entity, itemName: string);\n  processInterface?: Function;\n}\n\nclass EntityCard extends React.Component<EntityCardProps> {\n  renderCount = 0;\n  handleInventoryClick = (itemName: string): void => {\n    this.props.onInventoryClick(this.props.entity, itemName);\n  };\n\n  onDrop = (itemName: string) => {\n    let { entity } = this.props;\n    if (entity.equipment.hands && entity.equipment.hands.name === itemName) {\n      entity.unEquipFromHands();\n      entity.isShooting = false;\n    }\n    let item: Item = entity.takeFromInventory(itemName);\n    entity.square.addItem(item);\n    this.props.processInterface();\n  };\n\n  render() {\n    let { entity } = this.props;\n    if (!entity) return null;\n    // FIXME: Below should be separated into several sub-components\n    // Each sub-component should receive flat data (position, hp, ...)\n\n    let className = \"entity-card\";\n    if (entity.active) {\n      className += \" entity-card--active\";\n    }\n\n    if (entity.isFriendly) {\n      className += \" entity-card--friendly\";\n    }\n\n    if (entity.isDead) {\n      className += \" entity-card--dead\";\n    }\n\n    let inHands = entity.equipment && entity.equipment.hands;\n    let inHandsArray = inHands && [inHands];\n\n    return (\n      <div className={className}>\n        <div>\n          <div className=\"entity-card__position\" title=\"Position\">\n            <span>\n              {\" \"}\n              {entity.position.x} {entity.position.y}{\" \"}\n            </span>\n          </div>\n\n          <div className=\"entity-card__portrait\">{entity.icon}</div>\n        </div>\n        <strong title=\"Name\">{entity.name}</strong>\n        <br />\n        <div\n          style={{\n            clear: \"both\",\n            display: \"inline-block\",\n            textAlign: \"right\",\n          }}\n        >\n          <LinearDisplay label=\"HP\" current={entity.hp} max={entity.maxHp} />\n          <br />\n        </div>\n        <InventoryList\n          label=\"Equipped\"\n          title=\"In hands\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          inventory={inHandsArray}\n          processInterface={() => this.props.processInterface()}\n        />\n        <InventoryList\n          label=\"Inventory\"\n          title=\"In backpack\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          inventory={entity.inventory}\n          processInterface={() => this.props.processInterface()}\n        />\n      </div>\n    );\n  }\n}\n\nexport default EntityCard;\n","import React from \"react\";\nimport EntityCard from \"../EntityCard\";\nimport \"./EntitiesList.scss\";\nimport { Entity } from \"../../services/EntitiesValues\";\n\ninterface ListOfEntitiesProps {\n  entities: Entity[];\n  onInventoryClick: any;\n  processInterface: Function;\n}\n\nexport default class ListOfEntities extends React.Component<ListOfEntitiesProps> {\n  render() {\n    let entitiesFriendly = this.props.entities\n      .filter((entity) => entity.isFriendly)\n      .map((obj) => {\n        return (\n          <EntityCard\n            key={obj.name}\n            entity={obj}\n            onInventoryClick={this.props.onInventoryClick}\n            processInterface={() => this.props.processInterface()}\n          />\n        );\n      });\n\n    let entitiesUnfriendly = this.props.entities\n      .filter((entity) => !entity.isFriendly)\n      .map((obj) => {\n        return <EntityCard key={obj.name} entity={obj} processInterface={() => this.props.processInterface()} />;\n      });\n\n    return (\n      <>\n        <h4 className=\"entities-list__header\">List of Entities:</h4>\n        <div className=\"entities-list\">{entitiesFriendly}</div>\n        <div className=\"entities-list\">{entitiesUnfriendly}</div>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport * as Helpers from \"../../helpers/Helpers\";\nimport { SquaresService } from \"../../services\";\nimport EntityCard from \"../EntityCard/EntityCard\";\nimport { Square } from \"../../services/SquaresService\";\nimport { Entity, Position, structures, Item } from \"../../services/EntitiesValues\";\n\nimport InventoryList from \"../EntityCard/InventoryList\";\n\nimport GameStyles from \"./Game.module.scss\";\n\ninterface TargetedSquareInfoProps {\n  className: string;\n  squareNumber: number;\n  squares: Square[];\n  selected: Entity;\n  targeted: Square;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  processInterface: Function;\n}\n\nexport default class TargetedSquareInfo extends React.Component<TargetedSquareInfoProps> {\n  boxSerialNumber: number = 0;\n\n  onItemClick = (itemName: string): void => {\n    let { selected, targeted } = this.props;\n    if (Helpers.isSelectedTargeted(selected, targeted)) {\n      let item = targeted.takeFromInventory(itemName);\n      selected.addToInventory(item);\n    }\n    this.props.processInterface();\n  };\n\n  onMoveClick(selected: Entity, targetedSquarePosition: Position): void {\n    let targetedSquare: Square = SquaresService.getSquare(targetedSquarePosition.x, targetedSquarePosition.y);\n    selected.setMoveDestinationPosition(targetedSquarePosition);\n    targetedSquare.isChosenDestination = true;\n    this.props.processInterface();\n  }\n\n  onAttackClick(selected: Entity, targetedSquarePosition: Position): void {\n    selected.attackPosition(targetedSquarePosition);\n    this.props.processInterface();\n  }\n\n  onAddStructureClick(targetedSquarePosition: Position, structureType: string): void {\n    let box = Object.assign({}, structures[structureType]);\n    let targetPosition = Object.assign({}, targetedSquarePosition);\n    box.position = targetPosition;\n    box.name += this.boxSerialNumber++;\n    let newStructure = new Entity(box);\n    let square = SquaresService.getSquare(targetedSquarePosition.x, targetedSquarePosition.y);\n    square.entity = newStructure;\n    square.addToInventory(newStructure as Item); // TODO: FIXME: Stop forcing types, make a new list for scenery items.\n    //EntitiesService.entities.push(newBox);\n    this.props.processInterface();\n  }\n\n  render() {\n    let { targeted, selected, squareNumber } = this.props;\n\n    if (!targeted) {\n      return null;\n    }\n\n    let targetedSquarePosition = SquaresService.targetSquarePosition(squareNumber);\n\n    let entityInfo;\n    let distanceInfo;\n    let positionInfo;\n    let bloodInfo;\n    let availableActions = [];\n    let items;\n\n    let editorButtons = (\n      <div>\n        <button onClick={() => this.onAddStructureClick(targetedSquarePosition, \"box\")} className={GameStyles.button}>\n          Add box\n        </button>\n        <button\n          onClick={() => this.onAddStructureClick(targetedSquarePosition, \"redBarrel\")}\n          className={GameStyles.button}\n        >\n          Add barrel\n        </button>\n      </div>\n    );\n\n    if (targeted.entity && !Helpers.isSelectedTargeted(selected, targeted)) {\n      entityInfo = (\n        <EntityCard\n          onInventoryClick={this.props.onInventoryClick}\n          entity={targeted.entity}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (targeted.items) {\n      items = (\n        <InventoryList\n          label=\"Items in this location\"\n          title=\"On the floor\"\n          onClick={this.onItemClick}\n          onDrop={null}\n          inventory={targeted.items}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (selected) {\n      let distanceToSelected = Helpers.calculateDistance(\n        targetedSquarePosition.x - selected.position.x,\n        targetedSquarePosition.y - selected.position.y\n      );\n\n      distanceInfo = <li>Distance to selected: {distanceToSelected.toFixed(2)}</li>;\n\n      if (distanceToSelected !== 0) {\n        if (targeted.isAvailableDestination) {\n          availableActions[0] = (\n            <button onClick={() => this.onMoveClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Move\n            </button>\n          );\n        }\n        if (targeted.entity) {\n          availableActions[1] = (\n            <button onClick={() => this.onAttackClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Attack\n            </button>\n          );\n        }\n      }\n    }\n\n    if (targetedSquarePosition) {\n      positionInfo = (\n        <li>\n          Position: [ {targetedSquarePosition.x}, {targetedSquarePosition.y} ]{\" \"}\n        </li>\n      );\n    }\n\n    if (targeted.blood) {\n      bloodInfo = <li>Blood amount: {targeted.blood}</li>;\n    }\n\n    return (\n      <div className={this.props.className}>\n        <strong className={GameStyles.targeted__label}>Target square Info</strong>\n        <div>{entityInfo}</div>\n        <div>{availableActions}</div>\n        <ul>\n          {positionInfo}\n          {distanceInfo}\n          {bloodInfo}\n          {items}\n          {editorButtons}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { ReactElement } from \"react\";\nimport EntityCard from \"../EntityCard/EntityCard\";\nimport { Entity } from \"../../services/EntitiesValues\";\n\nimport GameStyles from \"./Game.module.scss\";\n\ninterface SelectedEntityInfoProperties {\n  selected: Entity;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  handleDeselectAllEntities: () => void;\n  processInterface: Function;\n}\n\nexport default class SelectedEntityInfo extends React.Component<SelectedEntityInfoProperties> {\n  render(): ReactElement {\n    if (!this.props.selected) {\n      return null;\n    }\n\n    return (\n      <div className={GameStyles.selected}>\n        <strong className={GameStyles.selected__label}>Selected entity </strong>\n        <div>\n          <EntityCard\n            onInventoryClick={this.props.onInventoryClick}\n            entity={this.props.selected}\n            processInterface={() => this.props.processInterface()}\n          />\n        </div>\n        <button onClick={this.props.handleDeselectAllEntities} className={GameStyles.button}>\n          {\" \"}\n          Deselect\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport MessageService from \"../../services/MessageService\";\n\nexport class MessageBox extends React.Component {\n  messages = MessageService.messages;\n  messageNumber;\n\n  shouldComponentUpdate() {\n    // don't update if there are no new messages since last render\n    return this.messages.length !== this.messageNumber;\n  }\n\n  renderMessage = (message: string, number: number) => {\n    return (\n      <li>\n        Message #[{number}]: {message}\n      </li>\n    );\n  };\n\n  render() {\n    if (!this.messages.length) return null;\n    let RenderedMessages = this.messages.map((message, number) => this.renderMessage(message, number));\n    // remember the number of messages rendered\n    this.messageNumber = this.messages.length;\n    return (\n      <ul className=\"messages\" id=\"messages\">\n        {RenderedMessages}\n      </ul>\n    );\n  }\n\n  scrollElement() {\n    window.requestAnimationFrame(() => {\n      var element = document.getElementById(\"messages\");\n      element.scrollTop = element.scrollHeight;\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.messages.length) this.scrollElement();\n  }\n}\n","import SquaresService, { Square } from \"./SquaresService\";\nimport EntitiesService from \"./EntitiesService\";\nimport tutorial_map_00 from \"../resources/maps/tutorial_map_00.json\"; // yes, it's a resource named with snake_case\n\nclass GameModelClass {\n  entities;\n  squares;\n\n  constructor() {\n    this.entities = EntitiesService.entities;\n    this.squares = SquaresService.squares;\n  }\n\n  saveMap = () => {\n    let squares: Square[] = JSON.parse(JSON.stringify(SquaresService.squares));\n    let squaresProcessedForSave = squares.map((square) => {\n      //let newSquare = { squareType: square.squareType, entity: square.entity };\n\n      return square;\n    });\n    let squaresStringified = JSON.stringify(squaresProcessedForSave);\n    console.log(squaresStringified);\n    let message = \"Enter the name of saved map.\";\n    let mapName = \"map00\";\n\n    let result = window.prompt(message, mapName);\n\n    localStorage[result] = squaresStringified;\n  };\n\n  loadMap = () => {\n    let mapNames = Object.keys(localStorage);\n    let message = `Enter the name of map to load. ${mapNames}`;\n    let mapName = \"map00\";\n    let result = window.prompt(message, mapName);\n    let squaresStringified = localStorage[result];\n\n    console.log(squaresStringified);\n    let squaresLoaded = JSON.parse(squaresStringified);\n    this.loadMapIntoBoard(squaresLoaded);\n  };\n\n  loadMapIntoBoard = (squaresLoaded) => {\n    SquaresService.squares.forEach((square, index) => {\n      let targetSquare = square;\n      let sourceSquare = squaresLoaded[index];\n      targetSquare.squareType = sourceSquare.squareType;\n    });\n  };\n\n  loadBuiltInMap = () => {\n    this.loadMapIntoBoard(tutorial_map_00);\n  };\n}\n\nlet GameModel = new GameModelClass();\n\nexport default GameModel;\n","import GameModel from \"./GameModelService\";\nimport SquaresService, { Square } from \"./SquaresService\";\nimport EntitiesService from \"./EntitiesService\";\nimport { Entity } from \"./EntitiesValues\";\nimport * as Helpers from \"../helpers\";\n\nimport { GameState } from \"../components/Game\";\nclass GameLogicClass {\n  model;\n\n  constructor() {\n    this.model = GameModel;\n  }\n\n  run = () => {\n    console.log(\"Running Game Logic\");\n    console.log(GameModel.entities);\n  };\n\n  calculateNextInterfaceState = (previousState: GameState) => {\n    let nextState = previousState;\n    let { entities, selected } = nextState;\n    entities.forEach((entity) => {\n      if (entity === selected) SquaresService.markAvailableDestinationsForSelectedEntity(selected);\n    });\n\n    return nextState;\n  };\n\n  /**\n   * Calculate WHAT EXACTLY? This should probably go into GameLogic\n   * @param previousState\n   */\n  calculateNextGameState(previousState: GameState) {\n    let nextState: GameState = previousState;\n    let { entities } = nextState;\n\n    EntitiesService.moveEntities();\n    //Helpers.resetGivenFieldsOnACollection(squares, \"isLit\", \"isInTwilightZone\");\n    //SquaresService.lightAllSquares();\n    entities.forEach((entity) => {\n      if (EntitiesService.isEntityShootingProperly(entity)) {\n        EntitiesService.fireAShot(entity);\n      }\n      entity.bleedExternally();\n\n      EntitiesService.stopBreathingForKilledEntity(entity);\n      SquaresService.markAvailableDestinationsForSelectedEntity(entity);\n      // SquaresService.castLightsFromFriendlyEntity(entity);\n    });\n\n    return nextState;\n  }\n\n  syncSquaresWithEntities = (previousState) => {\n    let squares: Square[] = Helpers.newCopyOfArray(previousState.squares);\n    /* \n    Reattach new squares array to the SquaresService \n    This might actually be not-needed, as elements of that array are objects \n    and are referenced in both arrays, so unless we're adding new squares, \n    everything should work without re-attaching\n    */\n    SquaresService.squares = squares;\n    let entities: Entity[] = previousState.entities;\n    if (entities.length) {\n      Helpers.resetGivenFieldsOnACollection(squares, \"entity\");\n    }\n    entities.forEach((entity) => {\n      SquaresService.setEntityWithinApropriateSquare(entity);\n    });\n\n    return { squares };\n  };\n\n  deselectAllEntities = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"active\");\n    Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\", \"isAvailableDestination\");\n  };\n\n  ceaseFire = () => {\n    Helpers.resetGivenFieldsOnACollection(GameModel.entities, \"isShooting\");\n  };\n}\n\nconst GameLogic = new GameLogicClass();\nexport default GameLogic;\n","import React from \"react\";\n\nimport Board from \"../Board\";\nimport EntitiesList from \"../EntitiesList\";\nimport TargetedSquareInfo from \"./TargetedSquareInfo\";\nimport SelectedEntityInfo from \"./SelectedEntityInfo\";\nimport { MessageBox } from \"./MessageBox\";\n\nimport { Entity } from \"../../services/EntitiesValues\";\nimport { Square } from \"../../services/SquaresService\";\n\nimport { EntitiesService, SquaresService } from \"../../services\";\nimport Entities from \"../../services/EntitiesValues\";\nimport * as Helpers from \"../../helpers\";\n\nimport GameLogic from \"../../services/GameLogicService\";\nimport GameModel from \"../../services/GameModelService\";\n\nimport styles from \"./Game.module.scss\";\n\n/** Type of GameState */\nexport interface GameState {\n  entities: Entity[];\n  squares: Square[];\n\n  selected: Entity;\n  targeted: Square;\n  targetedSquareNumber: number;\n\n  arenaSize: number;\n  autoLoop: boolean;\n  isBoardRotated: boolean;\n  isEditorOn: boolean;\n}\n\n/** Game composes all the parts of the interface */\nexport default class Game extends React.PureComponent<void, GameState> {\n  renderCounter: number = 0;\n  stepNumber: number = 0;\n\n  constructor(props: void) {\n    super(props);\n\n    // Initial VALUE of game state\n    EntitiesService.entities = Entities;\n\n    this.state = {\n      entities: EntitiesService.entities,\n      squares: SquaresService.squares,\n\n      selected: null,\n      targeted: null,\n      targetedSquareNumber: null,\n\n      arenaSize: 10,\n      autoLoop: true,\n      isBoardRotated: false,\n      isEditorOn: false,\n    };\n  }\n\n  componentDidMount() {\n    GameModel.loadBuiltInMap();\n    this.loop();\n  }\n\n  toggleEditorMode = () => {\n    if (!this.state.isEditorOn) {\n      Helpers.resetGivenFieldsOnACollection(this.state.squares, \"blood\", \"entity\");\n      this.setState((prevState) => {\n        return { entities: [], isEditorOn: true };\n      });\n    } else {\n      this.setState((prevState) => {\n        return { squares: SquaresService.squares, entities: EntitiesService.entities, isEditorOn: false };\n      });\n    }\n  };\n\n  loop = () => {\n    this.stepNumber++;\n    this.processEntities();\n    if (this.state.autoLoop) {\n      setTimeout(this.loop, 1000);\n    }\n  };\n\n  processEntities() {\n    this.setState(\n      (prevState) => GameLogic.calculateNextGameState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  processInterface() {\n    this.setState(\n      (prevState) => GameLogic.calculateNextInterfaceState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  /** Sets entities within apropriate squares, based on the value of their `position` field\n   * This might actually be not-needed, if movement of entities is reflected in their respectable squares\n   * Also: entities are no longer rendered within `Square` component\n   */\n  setSquaresAccordingToEntities() {\n    this.setState((prevState) => GameLogic.syncSquaresWithEntities(prevState));\n  }\n\n  nextTick = () => {\n    this.setState({ autoLoop: false });\n    this.loop();\n  };\n\n  newHandleClick = (squareIndex: number) => {\n    this.setState((state) => {\n      let { squares, entities, selected, targeted, isEditorOn, targetedSquareNumber: selectedSquareNumber } = state;\n      let previousTargeted = targeted;\n      targeted = squares[squareIndex];\n      selectedSquareNumber = squareIndex;\n      const doubleClick = () => previousTargeted === targeted;\n      SquaresService.markSquareAsTargeted(squareIndex);\n\n      if (isEditorOn) {\n        switch (targeted.squareType) {\n          case \"floor\":\n            targeted.squareType = \"wall\";\n            break;\n          case \"wall\":\n            targeted.squareType = \"nothing\";\n            break;\n          case \"nothing\":\n          default:\n            targeted.squareType = \"floor\";\n        }\n      }\n\n      /** Setting move destination while clicking on empty square */\n      if (doubleClick() && targeted.isAvailableDestination) {\n        selected.setMoveDestinationSquare(squareIndex);\n      }\n\n      /** To be able to deselect */\n      if (doubleClick() || selected) {\n        if (!selected && targeted.entity) {\n          // Selecting\n          selected = EntitiesService.selectEntityFromGivenSquare(selected, targeted);\n          //targeted = undefined;\n        } else if (Helpers.isSelectedTargeted(selected, targeted)) {\n          // Deselecting if not selecting\n          GameLogic.deselectAllEntities();\n          selected = undefined;\n        }\n      }\n\n      // setting attack\n      if (doubleClick() && selected && targeted.entity && selected !== targeted.entity) {\n        selected.attackPosition(SquaresService.targetSquarePosition(squareIndex));\n      }\n\n      return { squares, entities, selected, targeted, targetedSquareNumber: selectedSquareNumber };\n    }, this.processInterface);\n  };\n\n  nuke = (dmg: number) => {\n    this.setState(\n      (state) => {\n        let { entities } = state;\n\n        entities.forEach((entity) => {\n          entity.hp = entity.hp - dmg;\n        });\n\n        return { entities };\n      },\n      () => {\n        this.processEntities();\n      }\n    );\n  };\n\n  toggleRotateBoard = () => {\n    this.setState({ isBoardRotated: !this.state.isBoardRotated });\n  };\n\n  switchAutoLoop = () => {\n    this.setState(\n      (previousState) => {\n        return { autoLoop: !previousState.autoLoop };\n      },\n      () => {\n        if (this.state.autoLoop) {\n          this.loop();\n        }\n      }\n    );\n  };\n\n  onInventoryClick = (entity: Entity, itemName: string) => {\n    this.setState((prevState) => {\n      let entities = [].concat(prevState.entities);\n      EntitiesService.entities = entities;\n      let entityId = EntitiesService.getEntityId(entity);\n      let actualEntity = EntitiesService.findEntityById(entityId);\n      //let actualItem = EntitiesService.findItemOnEntity(actualEntity, itemName);\n\n      if (actualEntity.equipment.hands && actualEntity.equipment.hands.name === itemName) {\n        actualEntity.unEquipFromHands();\n      } else {\n        actualEntity.equipInHands(itemName);\n      }\n\n      return { entities };\n    });\n    console.log(entity, itemName);\n  };\n\n  handleDeselectAllEntities = () => {\n    this.setState(\n      (state) => {\n        let { squares, entities, selected } = state;\n\n        GameLogic.deselectAllEntities();\n        selected = undefined;\n\n        return { squares, entities, selected };\n      },\n      () => {\n        //this.processEntities();\n      }\n    );\n  };\n\n  ceaseFire = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"isShooting\");\n    this.processInterface();\n  };\n\n  render() {\n    // console.log(\"Rendering Game. #\", this.renderCounter++);\n    return (\n      <div className={styles.game}>\n        <p>\n          L2P: Click friendly entity on the map, twice. Then click a target square to move, or target entity to attack.\n        </p>\n        <div className={styles.game__board}>\n          <Board\n            squares={this.state.squares}\n            entities={this.state.entities}\n            onClick={(i) => this.newHandleClick(i)}\n            size={this.state.arenaSize}\n            isRotated={this.state.isBoardRotated}\n          />\n        </div>\n\n        <div className={styles.game__info}>\n          <div className={styles.actions}>\n            <button onClick={this.toggleEditorMode} className={styles.button}>\n              Editor Mode\n            </button>\n            <button onClick={GameModel.saveMap} className={styles.button}>\n              Save Map\n            </button>\n            <button onClick={GameModel.loadMap} className={styles.button}>\n              Load Map\n            </button>\n            <button\n              onClick={() => {\n                this.nuke(40);\n              }}\n              className={`${styles.button} ${styles[\"button-nuke\"]}`}\n            >\n              Nuke All\n            </button>\n            <button onClick={this.ceaseFire} className={styles.button}>\n              Cease Fire\n            </button>\n\n            <button onClick={this.toggleRotateBoard} className={styles.button}>\n              Rotate Board\n            </button>\n            <button onClick={this.nextTick} className={styles.button}>\n              Next Tick\n            </button>\n\n            <span className={styles[\"step-counter\"]}>Tick: {this.stepNumber}</span>\n\n            <label className={` ${styles.button} ${styles[\"auto-cycle\"]}`}>\n              <input type=\"checkbox\" checked={this.state.autoLoop} onChange={this.switchAutoLoop} />\n              <span>Auto Cycle</span>\n            </label>\n          </div>\n\n          <div className={styles[\"interaction-container\"]}>\n            <SelectedEntityInfo\n              selected={this.state.selected}\n              handleDeselectAllEntities={this.handleDeselectAllEntities}\n              onInventoryClick={this.onInventoryClick}\n              processInterface={() => this.processInterface()}\n            />\n\n            <TargetedSquareInfo\n              className={styles.targeted}\n              squareNumber={this.state.targetedSquareNumber}\n              squares={this.state.squares}\n              selected={this.state.selected}\n              targeted={this.state.targeted}\n              onInventoryClick={this.onInventoryClick}\n              processInterface={() => this.processInterface()}\n            />\n            <div></div>\n          </div>\n          <MessageBox />\n        </div>\n\n        <div className={styles.game__list}>\n          <EntitiesList\n            entities={this.state.entities}\n            onInventoryClick={this.onInventoryClick}\n            processInterface={() => this.processInterface()}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport Game from \"./components/Game\";\n\nimport \"./style.scss\";\n\nrender(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}