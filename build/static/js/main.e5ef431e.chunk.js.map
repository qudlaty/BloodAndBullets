{"version":3,"sources":["components/Game/Game.module.scss","components/Board/Board.module.scss","helpers/Helpers.ts","components/Board/Board.tsx","components/EntityCard/EntityCard.tsx","components/EntitiesList/EntitiesList.tsx","services/EntitiesService/EntityFeatures.ts","services/EntitiesService/EntityClass.ts","services/SquaresService/SquareClass.ts","services/SquaresService/SquaresService.ts","services/EntitiesService/EntitiesService.ts","services/ItemService/ItemClasses.ts","services/MessageService/MessageService.ts","resources/ItemDefinitions.ts","resources/CharacterDefinitions.ts","services/GameModelService/GameModelService.ts","services/GameLogicService/GameLogicService.ts","services/GameLogicService/GameState.tsx","services/GameActionsService/GameActionsService.tsx","components/EntityPawn/EntityPawn.tsx","resources/StructureDefinitions.ts","components/Game/TargetedSquareInfo.tsx","components/Game/SelectedEntityInfo.tsx","components/Game/Game.tsx","components/Square/Blood.tsx","components/Square/Items.tsx","components/Square/Square.tsx","components/LinearDisplay/LinearDisplay.tsx","components/HudPanel/HudPanel.tsx","components/Grid/Cell.tsx","components/Grid/Grid.tsx","components/Controls/Controls.tsx","components/MessageBox/MessageBox.tsx","components/InventoryItem/InventoryItem.tsx","components/InventoryList/InventoryList.tsx","components/HpBar/HpBar.tsx","components/ShootingVisualization/ShootingVisualization.tsx","screens/BlastZone/BlastZone.tsx","App.tsx","index.js"],"names":["module","exports","resetGivenFieldsOnACollection","collection","fieldNames","forEach","item","fieldName","undefined","getNumberWithinBoundaries","value","min","max","getRandomIntInclusive","Math","floor","random","calculateAngle","x","y","angle","atan","PI","calculateDistance","sqrt","pow","isSelectedTargeted","selected","targeted","entity","name","turnFlagsIntoClasses","flags","classNameBase","flagsToClassess","active","isAvailableDestination","isChosenDestination","isBreathing","isDead","isShooting","isTargeted","isAttacked","isLit","isInTwilightZone","className","Object","keys","key","getCssClassesForAGivenSquare","square","squareClassName","squareType","derivedCtor","Board","handleClick","i","console","log","props","onClick","EntityPawns","entities","map","BoardSquares","colId","cellId","rowId","Array","size","fill","row","number","cells","cell","renderSquare","styles","this","squares","squareId","Helpers","blood","items","itemsNumber","length","board","isRotated","style","React","Component","EntityCard","renderCount","handleInventoryClick","itemName","onInventoryClick","onDrop","equipment","hands","unEquipFromHands","takeFromInventory","addItem","processInterface","onReload","isFriendly","inHands","inHandsArray","onEntityClick","title","position","label","current","actionPoints","maxActionPoints","icon","clear","display","textAlign","hp","maxHp","inventory","Identifiable","Positionable","SquaresService","getSquareFromPosition","Movable","moveDestination","squareIndex","setMoveDestinationPosition","getSquarePositionFromIndex","targetPosition","targetSquare","MessageService","send","Mortal","isAlive","Bleedable","bleeding","bleedingReductionPerTurn","bloodReleased","bleed","addBloodToSquare","Breathing","isSupposedToBeBreathing","Combative","ceaseFire","hasWeapon","targetedSquarePosition","HavingInventory","actualItemIndex","findIndex","splice","push","Entity","assign","Weapon","addToInventory","baseCtor","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","Square","arenaSize","isSquareEnterableByFriendlyUnits","includes","initializeSquareAtIndexIfEmpty","getSquareIndexFromPosition","setEntityWithinASquareAtPosition","amount","j","setSquareValueAtPosition","EntitiesService","shouldEntityStopShooting","stopShooting","stopShootingWhenForbidden","id","filter","getEntityId","indexOfEntityToRemove","currentEntity","oldPositionX","oldPositionY","deltaX","deltaY","newSquare","potentialTargetEntity","getEntitiesAtGivenPosition","selectedInEntities","findEntityById","damageApplied","weapon","equippedWeapon","RangedWeapon","isAbleToFire","fire","rounds","checkAmmoAndCalculateDamageApplied","targetEntity","applyDamageToTargetEntity","damage","getEntitiesAtGivenPositionThatAreAlive","areThereAliveTargetEntities","bleedExternally","chosenDestinationSquare","moveEntityRandomly","causesBleeding","range","maxRounds","Rifle","type","Lazer","messages","message","M16","M40","L30","characterDefinitions","age","entry","GameModel","saveMap","squaresProcessedForSave","JSON","parse","stringify","squaresStringified","result","window","prompt","localStorage","loadMap","GameActions","mapNames","squaresLoaded","loadMapIntoBoard","index","sourceSquare","loadEntities","loadBuiltInMap","intro","loadPredefinedEntitities","GameLogic","model","run","calculateNextInterfaceState","previousState","nextState","markAvailableDestinationsForSelectedEntity","syncSquaresWithEntities","array","concat","setEntityWithinApropriateSquare","deselectAllEntities","givenEntity","processAnEntity","enemiesAlive","calculateNumberOfAliveEnemies","moveEntityIntoChosenDestination","isEntityTargettingSomethingAlive","fireAShot","ceaseFireNextTickIfNoAliveTargets","stopBreathingForKilledEntity","amountOfAliveEnemies","GameState","targetedSquareNumber","squareSize","isAutoLoopOn","isBoardRotated","isEditorOn","component","GameActionsClassForGameComponent","that","entitiesProcessingLoopIntervalHandle","toggleEditorMode","state","setState","prevState","loop","debug","isTurnInProgress","setTimeout","nextStep","nextTick","executeActions","calculeteNextGameStateAfterProcessingAGivenEntity","setSquaresAccordingToEntities","handleClickV2","selectedSquareNumber","previousTargeted","doubleClick","markSquareAtIndexAsTargeted","setMoveDestinationSquare","selectEntityFromGivenSquare","targetSquarePosition","attackPosition","markSquareAtIndexAsAttacked","aggro","entitiesToAttack","findEntitiesThatAreClose","closeEntity","firstAmongThem","nuke","dmg","processEntities","toggleRotateBoard","switchAutoLoop","info","entityId","actualEntity","equipInHands","handleDeselectAllEntities","stepNumber","refillActionPointsForAllEntities","drawAggro","setInterval","processNextUnprocessedEntity","entitiesForProcessing","entityForThisTurn","setNewStateAfterProcessingChosenEntity","clearInterval","newlyFoundEntities","EntityPawn","randomTime","toFixed","classessFromFlags","fof","color","zIndex","animationBreathing","left","boardPadding","top","animation","ShootingVisualization","structures","box","redBarrel","TargetedSquareInfo","boxSerialNumber","onItemClick","squareNumber","removeEntity","targetedSquare","structureType","newStructure","entityInfo","distanceInfo","positionInfo","bloodInfo","availableActions","editorButtons","onAddStructureClick","GameStyles","button","distanceToSelected","onMoveClick","onAttackClick","targeted__label","SelectedEntityInfo","selected__label","Game","renderCounter","startIfAutoLoopIsOn","game","game__board","fontSize","game__info","actions","action_row","zoomIn","zoomOut","execute_actions","checked","onChange","next_tick","PureComponent","Blood","bloodAmount","bloodDrops","background","Items","itemsIcons","SquareComponent","classPrefix","cuboidFaces","cuboid","LinearDisplay","percentage","overload","progressStyle","width","divider","progressGridStyle","backgroundSize","backgroundImage","HudPanel","children","Cell","Grid","gridReference","scroll","mapdrag","stateDriven","createRef","executeScroll","rows","height","sourceY","startAt","currentRow","sourceX","currentCell","ref","onMouseDown","e","onMouseUp","onMouseMove","handleMove","onContextMenu","preventDefault","onDrag","onMouseDrag","scrollRelativeXY","movementX","movementY","event","target","onChangeScrollX","onChangeScrollY","switchStateDriven","renderGrid","Controls","w","s","a","d","document","addEventListener","onKeyDown","onKeyUp","keyCode","onKeyPress","MessageBox","messageNumber","renderMessage","RenderedMessages","requestAnimationFrame","element","getElementById","scrollTop","scrollHeight","scrollElement","InventoryItem","reloadButton","dropButton","ammoCounter","reload","InventoryList","inventoryItems","HpBar","backgroundColor","calcNewAangle","targetCoords","projectileNumber","projectiles","localId","uniqueShootingAnimationId","customStyle","commonStyles","distanceToTargetXInUnits","distanceToTargetYInUnits","actualDistanceInUnits","weaponType","projectile","finalClassName","BlastZone","gridX","gridY","controls","onControlPress","statusIndicators","App","scenes","SelectedScene","handleChange","sceneToLoad","loadedScene","render"],"mappings":"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","file":"static/js/main.e5ef431e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"Game_game__229bL\",\"game__board\":\"Game_game__board__1KMto\",\"game__list\":\"Game_game__list__yMHF0\",\"button\":\"Game_button__1_Ze4\",\"actions\":\"Game_actions__2-VcJ\",\"auto-cycle\":\"Game_auto-cycle__1cp6W\",\"next_tick\":\"Game_next_tick__W3YYp\",\"execute_actions\":\"Game_execute_actions__OuWzh\",\"nuke\":\"Game_nuke__23ZLU\",\"game__info\":\"Game_game__info__3kjt8\",\"action_row\":\"Game_action_row__1mTrg\",\"interaction-container\":\"Game_interaction-container__3RZ7s\",\"selected\":\"Game_selected__ZRNAo\",\"targeted\":\"Game_targeted__3gJqr\",\"selected__label\":\"Game_selected__label__2d30g\",\"targeted__label\":\"Game_targeted__label__328kg\",\"step-counter\":\"Game_step-counter__hrmzE\",\"status\":\"Game_status__21KP9\",\"kbd-navigation\":\"Game_kbd-navigation__10pCT\",\"square\":\"Game_square__3r5qO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__1AthT\",\"board__row\":\"Board_board__row__1piKV\",\"board--rotated\":\"Board_board--rotated__be1H9\"};","import { Entity } from \"services/EntitiesService\";\nimport { Square } from \"services/SquaresService\";\n\n/** @description\n * Takes a collection and a list of strings describing object keys.\n * Sets all given fields on a collection to `undefined`\n */\nexport function resetGivenFieldsOnACollection(collection, ...fieldNames) {\n  collection.forEach((item) => {\n    fieldNames.forEach((fieldName) => {\n      item && (item[fieldName] = undefined);\n    });\n  });\n}\n\n/** @description Takes a number and fits it within given boundaries, then returns it */\nexport function getNumberWithinBoundaries(value: number, min: number, max: number): number {\n  if (value < min) value = min;\n  if (value > max) value = max;\n  return value;\n}\n\n/** @description Returns a random integer between min and max */\nexport function getRandomIntInclusive(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/** @description Returns angle (in degrees) of a given vector */\nexport function calculateAngle(x: number, y: number): number {\n  let angle: number;\n  if (y >= 0) {\n    angle = -Math.atan(x / y) * (180 / Math.PI);\n  } else if (y < 0) {\n    angle = (180 / Math.PI) * (Math.atan(x / -y) + Math.PI);\n  }\n  return angle;\n}\n\n/** @description Pitagorean distance between 0,0 and given coords */\nexport function calculateDistance(x: number, y: number): number {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n}\n\n/** @description Mixing classess together */\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  // see https://www.typescriptlang.org/docs/handbook/mixins.html\n  baseCtors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));\n    });\n  });\n}\n\n/** @description Checking if selected entity is on a targeted square */\nexport function isSelectedTargeted(selected: Entity, targeted: Square): boolean {\n  if (selected && targeted && targeted.entity && selected.name === targeted.entity.name) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * @description\n * Adding classess apropriate to the flags passed in by props\n * @param classNameBase - if given, it is added in front of the classname with \"--\"\n * Eg: classNameBase--class-from-flag\n */\nexport function turnFlagsIntoClasses(flags: object, classNameBase?: string) {\n  if(!flags) return '';\n  const flagsToClassess = {\n    active: \"active\",\n    isAvailableDestination: \"is-available-destination\",\n    isChosenDestination: \"is-chosen-destination\",\n    isBreathing: \"breathing\",\n    isDead: \"dead\",\n    isShooting: \"shooting\",\n    isTargeted: \"targeted\",\n    isAttacked: \"attacked\",\n    isLit: \"is-lit\",\n    isInTwilightZone: \"is-in-twilight-zone\",\n  };\n\n  let className = \"\";\n\n  if (classNameBase) {\n    classNameBase += \"--\";\n  } else {\n    classNameBase = \"\";\n  }\n\n  Object.keys(flagsToClassess).forEach((key) => {\n    if (flags[key]) {\n      className += ` ${classNameBase}${flagsToClassess[key]}`;\n    }\n  });\n  return className;\n}\n\n/**\n * @description\n * Creates a new array containing all the elements from a given array\n * @param array array to shallow-copy\n * @yields a new copy of the array\n */\nexport function newCopyOfArray(array: any[]) {\n  return [].concat(array);\n}\n\n/**\n * @description\n * Returns a string with set of CSS classes\n * based on the flags found in the given square.\n * @param square a square to style\n * @yields string with all classess applicable for the given square\n */\nexport function getCssClassesForAGivenSquare(square: Square): string {\n  if(!square) return;\n  let squareClassNameBase = \"square\";\n  let squareClassName = `${squareClassNameBase} ${square && square.squareType}`;\n  squareClassName += turnFlagsIntoClasses(square, squareClassNameBase);\n  if (square.entity) {\n    squareClassName += turnFlagsIntoClasses(square.entity, squareClassNameBase);\n  }\n  return squareClassName;\n}\n","import React, { ReactElement } from \"react\";\nimport { SquareComponent, EntityPawn } from \"components\";\nimport { Entity, Square } from \"services\";\nimport * as Helpers from \"helpers\";\n\nimport styles from \"./Board.module.scss\";\n\ninterface BoardProps {\n  onClick(i: number): void;\n  squares: Square[]; // updated every tick\n  entities: Entity[]; // updated every tick\n  size: number;\n  isRotated: boolean;\n  style: any;\n}\n/**\n * @description Board component renders Squares and EntityPawns\n */\nexport class Board extends React.Component<BoardProps> {\n  handleClick = (i: number) => {\n    console.log(\"Handles Click on Board\", i);\n    this.props.onClick(i);\n  };\n\n  renderSquare(i: number, rowId: number, colId: number) {\n    let square = this.props.squares[i];\n\n    return (\n      <SquareComponent // is a pureComponent\n        key={`r${rowId}_c${i}`}\n        squareId={i}\n        className={Helpers.getCssClassesForAGivenSquare(square)}\n        onClick={this.handleClick}\n        blood={square && square.blood} // number\n        items={square && square.items} // list of objects\n        itemsNumber={square && square.items && square.items.length}\n      ></SquareComponent>\n    );\n  }\n\n  EntityPawns = (): ReactElement[] => this.props.entities.map((entity) => <EntityPawn key={entity.name} entity={entity} />);\n\n  BoardSquares = () => {\n    let cellId: number = 0;\n    let rowId: number = 0;\n    let colId: number;\n\n    let rowsOfSquares = Array(this.props.size)\n      .fill(null)\n      .map((row, number) => {\n        colId = 0;\n        let cells = Array(this.props.size)\n          .fill(null)\n          .map((cell, number) => {\n            return this.renderSquare(cellId++, rowId, colId++);\n          });\n        return (\n          <div key={rowId++} className={styles[\"board__row\"]}>\n            {cells}\n          </div>\n        );\n      });\n\n    return rowsOfSquares;\n  }; // Board Squares\n\n  render() {\n    let className: string = styles.board;\n    if (this.props.isRotated) {\n      className += ` ${styles[\"board--rotated\"]} board--rotated`;\n    }\n    return (\n      <div className={className} style={this.props.style}>\n        {this.BoardSquares()}\n        {this.EntityPawns()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { LinearDisplay, InventoryList } from \"components\";\nimport { Entity, Item } from \"services\";\n\nimport \"./EntityCard.scss\";\n\ninterface EntityCardProps {\n  entity: Entity;\n  onInventoryClick?(entity: Entity, itemName: string);\n  onEntityClick?(entityName: string);\n  processInterface?: Function;\n}\n\nexport class EntityCard extends React.Component<EntityCardProps> {\n  renderCount = 0;\n  handleInventoryClick = (itemName: string): void => {\n    this.props.onInventoryClick(this.props.entity, itemName);\n  };\n\n  onDrop = (itemName: string) => {\n    let { entity } = this.props;\n    if (entity.equipment.hands && entity.equipment.hands.name === itemName) {\n      entity.unEquipFromHands();\n      entity.isShooting = false;\n    }\n    let item: Item = entity.takeFromInventory(itemName);\n    entity.square.addItem(item);\n    this.props.processInterface();\n  };\n\n  onReload = (itemName: string) => {\n    let { entity } = this.props;\n    if (entity.equipment.hands && entity.equipment.hands.name === itemName) {\n      entity.isShooting = false;\n    }\n    this.props.processInterface();\n  };\n\n  render() {\n    let { entity } = this.props;\n    if (!entity) return null;\n    // FIXME: Below should be separated into several sub-components\n    // Each sub-component should receive flat data (position, hp, ...)\n\n    let className = \"entity-card\";\n    if (entity.active) {\n      className += \" entity-card--active\";\n    }\n\n    if (entity.isFriendly) {\n      className += \" entity-card--friendly\";\n    }\n\n    if (entity.isDead) {\n      className += \" entity-card--dead\";\n    }\n\n    let inHands = entity.equipment && entity.equipment.hands;\n    let inHandsArray = inHands && [inHands];\n\n    return (\n      <div\n        className={className}\n      >\n        <button\n          className=\"inventory-list__drop-button\"\n          onClick={() => this.props.onEntityClick(entity.name)}\n        >\n          Pick up\n        </button>\n        <div>\n          <div className=\"entity-card__position\" title=\"Position\">\n            <span>\n              {\" \"}\n              {entity.position.x} {entity.position.y}{\" \"}\n            </span>\n          </div>\n\n          <LinearDisplay label=\"AP\" current={entity.actionPoints} max={entity.maxActionPoints} />\n\n          <div className=\"entity-card__portrait\">{entity.icon}</div>\n        </div>\n        <strong title=\"Name\">{entity.name}</strong>\n        <br />\n        <div\n          style={{\n            clear: \"both\",\n            display: \"inline-block\",\n            textAlign: \"right\",\n          }}\n        >\n          <LinearDisplay label=\"HP\" current={entity.hp} max={entity.maxHp} />\n          <br />\n        </div>\n        <InventoryList\n          label=\"Equipped\"\n          title=\"In hands\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          onReload={this.onReload}\n          inventory={inHandsArray}\n          processInterface={() => this.props.processInterface()}\n        />\n        <InventoryList\n          label=\"Inventory\"\n          title=\"In backpack\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          onReload={this.onReload}\n          inventory={entity.inventory}\n          processInterface={() => this.props.processInterface()}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { EntityCard } from \"components\";\nimport { Entity } from \"services\";\n\nimport \"./EntitiesList.scss\";\n\n\ninterface ListOfEntitiesProps {\n  entities: Entity[];\n  onInventoryClick: any;\n  processInterface: Function;\n}\n\nexport default class ListOfEntities extends React.Component<ListOfEntitiesProps> {\n  render() {\n    let entitiesFriendly = this.props.entities\n      .filter((entity) => entity.isFriendly)\n      .map((obj) => {\n        return (\n          <EntityCard\n            key={obj.name}\n            entity={obj}\n            onInventoryClick={this.props.onInventoryClick}\n            processInterface={() => this.props.processInterface()}\n          />\n        );\n      });\n\n    let entitiesUnfriendly = this.props.entities\n      .filter((entity) => !entity.isFriendly)\n      .map((obj) => {\n        return <EntityCard key={obj.name} entity={obj} processInterface={() => this.props.processInterface()} />;\n      });\n\n    return (\n      <>\n        <h4 className=\"entities-list__header\">List of Entities:</h4>\n        <div className=\"entities-list\">{entitiesFriendly}</div>\n        <div className=\"entities-list\">{entitiesUnfriendly}</div>\n      </>\n    );\n  }\n}\n","import { Item, Weapon, Square } from \"services\";\nimport { SquaresService, MessageService } from \"services\";\nimport * as Helpers from \"helpers\";\nimport { Entity } from \"./EntityClass\";\n\n/** Position on a grid */\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport class Identifiable {\n  name: string = \"An Entity\";\n  icon: string = \"E\";\n}\n\nexport class Actor {\n  actionPoints: number = 2;\n  maxActionPoints: number = 2;\n}\n\nexport class Positionable {\n  position: Position = { x: undefined, y: undefined };\n\n  get square(): Square {\n    let square: Square = SquaresService.getSquareFromPosition(this.position.x, this.position.y);\n    return square;\n  }\n}\n\nexport class Movable extends Identifiable {\n  moveDestination: Position;\n\n  setMoveDestinationSquare(squareIndex: number) {\n    this.setMoveDestinationPosition(SquaresService.getSquarePositionFromIndex(squareIndex));\n  }\n\n  setMoveDestinationPosition(targetPosition: Position) {\n    let targetSquare: Square = SquaresService.getSquareFromPosition(targetPosition.x, targetPosition.y);\n    if (!targetSquare.entity || targetSquare.entity.isDead) {\n      this.moveDestination = targetPosition;\n      Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\");\n      targetSquare.isChosenDestination = true;\n    } else {\n      MessageService.send(`${this.name} can't move into square (${targetPosition.x}, ${targetPosition.y})`);\n    }\n  }\n}\n\nexport class Mortal extends Positionable {\n  hp: number = 100;\n  maxHp: number = 100;\n  get isDead(): boolean {\n    return !this.isAlive;\n  }\n  get isAlive(): boolean {\n    return this.hp > 0;\n  }\n}\n\nexport class Bleedable extends Mortal {\n  bleeding: number;\n  bleedingReductionPerTurn: number = 1;\n  bleed(): number {\n    let entity = this;\n    let bloodReleased = 0;\n    if (entity.bleeding && entity.isAlive) {\n      bloodReleased = entity.bleeding;\n      entity.hp -= bloodReleased;\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n    }\n    return bloodReleased;\n  }\n\n  bleedExternally() {\n    if (!this.bleeding) return;\n    let entity = this;\n    let bloodReleased = this.bleed();\n    let square: Square = SquaresService.getSquareFromPosition(entity.position.x, entity.position.y);\n    SquaresService.addBloodToSquare(square, bloodReleased);\n  }\n}\n\nexport class Breathing extends Mortal {\n  isSupposedToBeBreathing: boolean = undefined;\n  get isBreathing(): boolean {\n    return this.isAlive && this.isSupposedToBeBreathing;\n  }\n  set isBreathing(value: boolean) {\n    this.isSupposedToBeBreathing = value;\n  }\n}\n\nexport class Combative extends Identifiable {\n  targetPosition: Position;\n  isShooting?: boolean;\n  ceaseFire?: boolean;\n  hasWeapon?: boolean;\n  attackPosition(targetedSquarePosition: Position) {\n    if (this.hasWeapon) {\n      this.targetPosition = targetedSquarePosition;\n      //this.isShooting = true;\n      this.ceaseFire = false;\n    } else {\n      MessageService.send(`${this.name} can't shoot - no weapon equipped`);\n    }\n    console.log(this.name, 'is attacking', targetedSquarePosition, this);\n  }\n}\n\ntype InventoryItem = Item|Entity;\nexport class HavingInventory extends Identifiable {\n\n  inventory: Array<InventoryItem>;\n  takeFromInventory(itemName: string): InventoryItem {\n    let actualItemIndex: number = this.inventory.findIndex((item) => item.name === itemName);\n    if(actualItemIndex === -1) return null;\n    let actualItem: InventoryItem = this.inventory.splice(actualItemIndex, 1)[0];\n\n    return actualItem;\n  }\n  addToInventory(item: InventoryItem) {\n    if (!this.inventory) {\n      this.inventory = [];\n    }\n    this.inventory.push(item);\n  }\n}\n\nexport class HavingEquipment extends HavingInventory {\n  equipment: {hands: Item};\n  hasWeapon?: boolean;\n\n  equipInHands(itemName: string) {\n    this.unEquipFromHands();\n    let item: Item = this.takeFromInventory(itemName);\n    this.equipment.hands = item;\n    if (item instanceof Weapon) {\n      this.hasWeapon = true;\n    } else {\n      this.hasWeapon = false;\n    }\n  }\n\n  unEquipFromHands() {\n    if (this.equipment.hands) {\n      this.addToInventory(this.equipment.hands);\n      this.equipment.hands = null;\n      this.hasWeapon = false;\n    }\n  }\n}\n","import { applyMixins } from \"helpers\";\nimport {\n  Identifiable,\n  Positionable,\n  Mortal,\n  Bleedable,\n  Movable,\n  Breathing,\n  Combative,\n  HavingInventory,\n  HavingEquipment,\n  Actor,\n} from \".\";\n\n/**\n * @description The base class for Entities on the board\n */\nexport class Entity {\n  // Extended by mixins below\n  constructor(...props) {\n    Object.assign(this, ...props);\n  }\n  isFriendly?: boolean;\n  active?: boolean;\n}\n\n/************************************************************/\n/* Always update both lists */\n\nexport interface Entity\n  extends Identifiable,\n    Positionable,\n    Mortal,\n    Bleedable,\n    Movable,\n    Breathing,\n    Combative,\n    HavingInventory,\n    HavingEquipment,\n    Actor {}\napplyMixins(Entity, [\n  Identifiable,\n  Positionable,\n  Mortal,\n  Bleedable,\n  Movable,\n  Breathing,\n  Combative,\n  HavingInventory,\n  HavingEquipment,\n  Actor,\n]);\n\n/************************************************************/\n","import { Item } from \"services/ItemService\";\nimport { Entity, HavingInventory, Identifiable } from \"services/EntitiesService\";\n\nexport interface Square {\n  entity?: Entity;\n  blood?: number;\n  squareType: string;\n  isAvailableDestination?: boolean;\n  isChosenDestination?: boolean;\n  isTargeted?: boolean;\n  isAttacked?: boolean;\n  isLit?: boolean;\n  isInTwilightZone?: boolean;\n  addItem(item: Item): void;\n}\n\nexport class Square extends HavingInventory implements Square {\n  public squareType: string = \"nothing\";\n  addItem(item: Item) {\n    this.addToInventory(item);\n  }\n  get items() {\n    return this.inventory;\n  }\n}\n","import * as Helpers from \"helpers\";\nimport { Square } from \"./SquareClass\";\nimport { Entity, Position } from \"services/EntitiesService\";\n\nclass SquaresServiceClass {\n  arenaSize: number = 10; // TODO: This should be defined ELSEWHERE\n\n  squares: Square[] = [];\n\n  constructor() {\n    let i = this.arenaSize * this.arenaSize;\n    while (i-- !== 0) {\n      this.initializeSquareAtIndexIfEmpty(i);\n    }\n  }\n\n  getSquareFromPosition(x: number, y: number): Square {\n    return this.squares[this.getSquareIndexFromPosition(x, y)];\n  }\n\n  setSquareValueAtPosition(x: number, y: number, value): void {\n    this.squares[this.getSquareIndexFromPosition(x, y)] = value;\n  }\n\n  getSquareIndexFromPosition(x: number, y: number): number {\n    return y * this.arenaSize + x;\n  }\n\n  getSquarePositionFromIndex(squareIndex: number): Position {\n    let x: number, y: number;\n    y = Math.floor(squareIndex / this.arenaSize);\n    x = squareIndex % this.arenaSize;\n    return { x, y };\n  }\n\n  setEntityWithinApropriateSquare(entity: Entity): void {\n    this.setEntityWithinASquareAtPosition(entity.position.x, entity.position.y, entity);\n  }\n\n  setEntityWithinASquareAtPosition(x: number, y: number, entity: Entity) {\n    let squareIndex: number = this.getSquareIndexFromPosition(x, y);\n    this.initializeSquareAtIndexIfEmpty(squareIndex);\n    this.squares[squareIndex].entity = entity;\n  }\n\n  addBloodToSquare(square: Square, amount: number) {\n    if (!square.blood) {\n      square.blood = amount;\n    } else {\n      square.blood += amount;\n    }\n  }\n\n  markSquareAtIndexAsTargeted(squareIndex: number): void {\n    Helpers.resetGivenFieldsOnACollection(this.squares, \"isTargeted\");\n    this.initializeSquareAtIndexIfEmpty(squareIndex);\n    this.squares[squareIndex].isTargeted = true;\n  }\n\n  markSquareAtIndexAsAttacked(squareIndex: number): void {\n    Helpers.resetGivenFieldsOnACollection(this.squares, \"isAttacked\");\n    this.initializeSquareAtIndexIfEmpty(squareIndex);\n    this.squares[squareIndex].isAttacked = true;\n  }\n\n\n  initializeSquareAtIndexIfEmpty(squareIndex: number) {\n    if (!this.squares[squareIndex]) {\n      this.squares[squareIndex] = new Square();\n    }\n  }\n\n  markAvailableDestinationsForSelectedEntity(entity: Entity): void {\n    if (entity.active) {\n      let { x, y } = entity.position;\n\n      Helpers.resetGivenFieldsOnACollection(this.squares, \"isAvailableDestination\");\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize || (i === x && j === y)) {\n            continue;\n          }\n\n          let square: Square = this.getSquareFromPosition(i, j);\n          if (this.isSquareEnterableByFriendlyUnits(square)) {\n            square.isAvailableDestination = true;\n          }\n\n          this.setSquareValueAtPosition(i, j, square);\n        }\n      }\n    }\n  }\n\n  isSquareEnterableByFriendlyUnits = square => [\n    'floor',\n    'monster-filter',\n  ].includes(square.squareType);\n\n  lightAllSquares(): void {\n    this.squares.forEach((square) => (square.isLit = true));\n  }\n  castLightsFromFriendlyEntity(entity: Entity): void {\n    if (entity.isFriendly) {\n      let { x, y } = entity.position;\n\n      for (let j = y - 2; j <= y + 2; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 2; i <= x + 2; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquareFromPosition(i, j);\n\n          square.isInTwilightZone = true;\n          this.setSquareValueAtPosition(i, j, square);\n        }\n      }\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquareFromPosition(i, j);\n\n          square.isLit = true;\n          this.setSquareValueAtPosition(i, j, square);\n        }\n      }\n    }\n  }\n}\n\nexport const SquaresService = new SquaresServiceClass();\n","import { Entity, Position, HavingInventory } from \".\";\nimport { SquaresService, Square } from \"services/SquaresService\";\nimport * as Helpers from \"helpers\";\nimport { RangedWeapon } from \"services\";\nimport { Identifiable } from \"./EntityFeatures\";\nimport { Item } from \"services/ItemService\";\nconst arenaSize: number = 10;\n\n/**\n * @description Set of functions to interact with Entities\n */\nclass EntitiesServiceClass {\n  entities: Entity[];\n  selected: Entity;\n\n  getEntityId(entity: Identifiable): string {\n    return entity.name;\n  }\n\n  findEntityById(id: string): Entity {\n    let result: Entity = this.entities.filter(entity => this.getEntityId(entity) === id)[0];\n    return result;\n  }\n\n  removeEntity(entity: Entity) {\n    let indexOfEntityToRemove = this.entities.findIndex(currentEntity => currentEntity.name === entity.name);\n    if(indexOfEntityToRemove === -1) return -1;\n    this.entities.splice(indexOfEntityToRemove,1);\n    return 0;\n  }\n\n  findItemOnEntity(entity: HavingInventory, id: string) {\n    let result = entity.inventory.filter(item => this.getEntityId(entity) === id)[0];\n    return result;\n  }\n\n  moveEntityRandomly(entity: Entity) {\n    if (entity.isDead || entity.isFriendly) return;\n\n    let oldPositionX = entity.position.x;\n    let oldPositionY = entity.position.y;\n\n    let deltaX = Helpers.getRandomIntInclusive(-1, 1);\n    let deltaY = Helpers.getRandomIntInclusive(-1, 1);\n\n    if(!entity.actionPoints) {\n      deltaX = 0;\n      deltaY = 0;\n    }\n    if(deltaX || deltaY) { // non-zero move\n      entity.actionPoints--;\n    } else {// zero ==> no move\n    }\n\n    entity.position.x = entity.position.x + deltaX;\n    entity.position.y = entity.position.y + deltaY;\n\n    entity.position.x = Helpers.getNumberWithinBoundaries(entity.position.x, 0, arenaSize - 1);\n    entity.position.y = Helpers.getNumberWithinBoundaries(entity.position.y, 0, arenaSize - 1);\n\n    let newSquare = SquaresService.getSquareFromPosition(entity.position.x, entity.position.y);\n\n    if ((newSquare && newSquare.entity) || (newSquare && newSquare.squareType !== \"floor\")) {\n      // if square occupiec, reverse the move\n      entity.position.x = oldPositionX;\n      entity.position.y = oldPositionY;\n    }\n  }\n\n  stopBreathingForKilledEntity(entity: Entity): Entity {\n    if (entity.isDead) {\n      entity.isBreathing = false;\n      this.stopShooting(entity);\n      entity.hp = 0;\n    }\n    return entity;\n  }\n\n  getEntitiesAtGivenPosition(targetPosition: Position): Entity[] {\n    return this.entities.filter((potentialTargetEntity: Entity): boolean => {\n      return (\n        potentialTargetEntity.position.x === targetPosition.x &&\n        potentialTargetEntity.position.y === targetPosition.y\n      );\n    });\n  }\n\n  getEntitiesAtGivenPositionThatAreAlive(targetPosition: Position): Entity[] {\n    const entitiesAtTargetSquare = this.getEntitiesAtGivenPosition(targetPosition);\n    const aliveEntitiesAtTargetSquare = entitiesAtTargetSquare.filter(entity => entity.isAlive);\n    return aliveEntitiesAtTargetSquare;\n  }\n\n  selectEntityFromGivenSquare(selected: Entity, targeted: Square): Entity {\n    if (selected && targeted && targeted.entity) {\n      selected.active = false;\n    }\n    if (targeted && targeted.entity) {\n      selected = targeted.entity;\n      selected.active = true;\n    }\n\n    return selected;\n  }\n\n  setSelected(selected: Entity, value: boolean): Entity {\n    let selectedInEntities = this.findEntityById(this.getEntityId(selected));\n    if (value) {\n      selected.active = value;\n    } else {\n      selected = null;\n      console.log(\"Nullified:\", selected);\n    }\n    selectedInEntities.active = value;\n    return selected;\n  }\n\n  checkAmmoAndCalculateDamageApplied(entity: Entity): number {\n    let damageApplied: number = 0;\n    let weapon: RangedWeapon = undefined;\n    let equippedWeapon: Item = entity.equipment && entity.equipment.hands;\n    if(!(equippedWeapon instanceof RangedWeapon)){\n      return 0;\n    } else {\n      weapon = equippedWeapon;\n    }\n\n    if (weapon.isAbleToFire) {\n      damageApplied = weapon.fire();\n      entity.isShooting = true;\n      entity.actionPoints--;\n    } else {\n      weapon.rounds = \"empty\";\n      this.stopShooting(entity);\n      return 0;\n    }\n\n    return damageApplied;\n  }\n\n  shouldEntityStopShooting = entity => entity.ceaseFire || entity.isDead;\n  stopShooting = entity => (entity.isShooting = false, entity.ceaseFire = false);\n  stopShootingWhenForbidden = entity => {\n    if (this.shouldEntityStopShooting(entity)) {\n      this.stopShooting(entity);\n    }\n  }\n\n  fireAShot(entity: Entity) {\n    if(!entity.actionPoints || entity.isDead) return;\n    let damageApplied = this.checkAmmoAndCalculateDamageApplied(entity);\n    let targetEntities = this.getEntitiesAtGivenPosition(entity.targetPosition);\n    targetEntities.forEach(targetEntity => {\n      this.applyDamageToTargetEntity(targetEntity, damageApplied);\n    });\n  }\n\n  applyDamageToTargetEntity(targetEntity: Entity, damage: number) {\n    if (damage) {\n      targetEntity.hp -= damage; // TODO: This should go through a method to calc armor in\n      targetEntity.bleeding = 5; // TODO: This should be defined elsewhere (on a weapon)\n    }\n  }\n\n  ceaseFireNextTickIfNoAliveTargets(entity: Entity): void {\n    if(!entity.targetPosition) return;\n    const areThereAliveTargetEntities = !!EntitiesService.getEntitiesAtGivenPositionThatAreAlive(entity.targetPosition).length;\n    if (!areThereAliveTargetEntities) {\n      entity.ceaseFire = true;\n    }\n  }\n\n  isEntityTargettingSomethingAlive(entity: Entity): boolean {\n    const areThereAliveTargetEntities: boolean = entity.targetPosition && !!EntitiesService.getEntitiesAtGivenPositionThatAreAlive(entity.targetPosition).length;\n\n    return (\n      entity.targetPosition &&\n      (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y) &&\n      areThereAliveTargetEntities\n    );\n  }\n\n  applyEffectsOfBleeding(entity: Entity): Entity {\n    // TODO: move to a \"bleed\" method\n    entity.bleedExternally();\n    return entity;\n  }\n\n  moveEntityIntoChosenDestination(entity: Entity): Entity {\n    if (!entity.actionPoints) return entity;\n    if (!entity.isDead && entity.moveDestination) {\n      let chosenDestinationSquare: Square = SquaresService.getSquareFromPosition(\n        entity.moveDestination.x,\n        entity.moveDestination.y\n      );\n\n      entity.position = entity.moveDestination;\n      delete entity.moveDestination;\n      chosenDestinationSquare.isChosenDestination = undefined;\n      entity.actionPoints--;\n    }\n    return entity;\n  }\n\n  setMoveDestinationOnASelectedEntity(selected: Entity, targetedSquarePosition: Position): void {\n    selected.moveDestination = targetedSquarePosition;\n  }\n\n  moveEntities(): void {\n    // this.entities.forEach((entity) => this.moveEntityIntoChosenDestination(entity));\n    // let OP: Entity = this.findEntityById(\"Squid\");\n    // let OC: Entity = this.findEntityById(\"Octo\");\n    // //this.moveEntityRandomly(JR);\n    // this.moveEntityRandomly(OP);\n    // this.moveEntityRandomly(OC);\n    this.entities.filter(entity => !entity.isFriendly).forEach((entity) => {\n      this.moveEntityRandomly(entity);\n    });\n  }\n\n  refillActionPointsForAllEntities() {\n    this.entities.forEach(entity => {entity.actionPoints = entity.maxActionPoints})\n  }\n}\n\nexport const EntitiesService = new EntitiesServiceClass();\n","export class Item {\n  name: string = \"\";\n}\n\nexport class Weapon extends Item {\n  causesBleeding = 0;\n  range = 0;\n  damage = 0;\n}\n\nexport class RangedWeapon extends Weapon {\n  rounds: number | any = 0;\n  maxRounds = 5;\n\n  fire() {\n    this.rounds--;\n    console.log(\"Firing ranged weapon. Damage: \", this.damage);\n    return this.damage;\n  }\n\n  get isAbleToFire() {\n    return this.rounds > 0;\n  }\n\n  reload() {\n    this.rounds = this.maxRounds;\n  }\n}\n\n// TODO: Should add kinetic/thermal damage\nexport class Rifle extends RangedWeapon {\n  type = \"projectile\";\n  range = 4;\n  damage = 1;\n  causesBleeding = 2;\n}\n\nexport class Lazer extends RangedWeapon {\n  type = \"lazer\";\n  range = 6;\n  damage = 5;\n  causesBleeding = 0;\n}\n","export class MessageServiceClass {\r\n  messages: string[] = [];\r\n  send(message: string) {\r\n    this.messages.push(message);\r\n  }\r\n}\r\n\r\nexport const MessageService = new MessageServiceClass();\r\n","import { Rifle, Lazer } from \"services\";\n\nexport class M16 extends Rifle {\n  name = \"M16\";\n  rounds = 15;\n  maxRounds = 20;\n  damage = 2;\n}\n\nexport class M40 extends Rifle {\n  name = \"M41A Pulse Rifle\";\n  rounds = 40;\n  maxRounds = 40;\n  damage = 1;\n}\n\nexport class L30 extends Lazer {\n  name = \"Assault Lazer Cannon\";\n  rounds = 30;\n  maxRounds = 30;\n  damage = 3;\n}\n","import { M16, M40, L30 } from \"./ItemDefinitions\";\nimport { Entity } from \"services\";\n\nexport const entitiesInitialValues = [\n  {\n    name: \"Lazer Blady\",\n    age: 60,\n    hp: 75,\n    maxHp: 100,\n    icon: \"🧑🏻\",\n    isBreathing: true,\n    isFriendly: true,\n    hasWeapon: true,\n    position: { x: 4, y: 8 },\n    inventory: [new M16()],\n    equipment: {hands: new L30()},\n    actionPoints: 2,\n    maxActionPoints: 2\n  },\n  {\n    name: \"Robot\",\n    age: 1,\n    hp: 50,\n    maxHp: 50,\n    icon: \"🤖\",\n    isBreathing: false,\n    position: { x: 3, y: 5 },\n    equipment: {hands: new L30()},\n    inventory: [],\n    hasWeapon: true,\n    actionPoints: 2,\n    maxActionPoints: 2\n  },\n  {\n    name: \"Octo\",\n    age: 8,\n    hp: 200,\n    maxHp: 200,\n    icon: \"🐙\",\n    isBreathing: true,\n    position: { x: 8, y: 2 },\n    bleedingReductionPerTurn: 0,\n    bleeding: 1,\n    equipment: {hands: new L30()},\n    inventory: [],\n    hasWeapon: true,\n    actionPoints: 2,\n    maxActionPoints: 2\n  },\n  {\n    name: \"Squid\",\n    age: 5,\n    hp: 100,\n    maxHp: 100,\n    icon: \"🦑\",\n    isBreathing: true,\n    position: { x: 5, y: 5 },\n    equipment: {hands: new M40()},\n    inventory: [],\n    hasWeapon: true,\n    actionPoints: 2,\n    maxActionPoints: 2\n  },\n  {\n    name: \"Ant\",\n    age: 1,\n    hp: 45,\n    maxHp: 50,\n    icon: \"🐜\",\n    isBreathing: true,\n    position: { x: 7, y: 6 },\n    equipment: {hands: new M40()},\n    inventory: [],\n    hasWeapon: true,\n    actionPoints: 2,\n    maxActionPoints: 2\n  },\n  {\n    name: \"Henry The Spider\",\n    age: 1,\n    hp: 100,\n    maxHp: 150,\n    icon: \"🕷️\",\n    isBreathing: true,\n    position: { x: 9, y: 3 },\n    bleedingReductionPerTurn: 1,\n    equipment: {hands: new L30()},\n    inventory: [],\n    hasWeapon: true,\n    actionPoints: 2,\n    maxActionPoints: 2\n  },\n  {\n    name: \"Mosquito\",\n    age: 1,\n    hp: 12,\n    maxHp: 20,\n    icon: \"🦟\",\n    isBreathing: true,\n    position: { x: 2, y: 7 },\n    equipment: {hands: new M16()},\n    inventory: [],\n    hasWeapon: true,\n    actionPoints: 1,\n    maxActionPoints: 1\n  },\n  {\n    name: \"Microbe\",\n    age: 1,\n    hp: 1,\n    maxHp: 5,\n    icon: \"🦠\",\n    isBreathing: true,\n    position: { x: 1, y: 5 },\n    equipment: {hands: new L30()},\n    inventory: [],\n    hasWeapon: true,\n    actionPoints: 2,\n    maxActionPoints: 2\n  },\n];\n\nexport const characterDefinitions = entitiesInitialValues.map((entry) => new Entity(entry));\nexport default characterDefinitions;\n","import { SquaresService, Square } from \"services/SquaresService\";\nimport { EntitiesService, Entity } from \"services/EntitiesService\";\n\nimport { characterDefinitions } from \"resources/CharacterDefinitions\";\nimport tutorial_map_00 from \"resources/maps/tutorial_map_00.json\"; // yes, it's a resource named with snake_case\nimport intro from \"resources/maps/intro.json\";\n\n\n/**\n * @description Handles loading and saving of the map and entities\n */\nexport class GameModelClass {\n  entities;\n  squares;\n  selected;\n\n  constructor() {\n    this.entities = EntitiesService.entities;\n    this.squares = SquaresService.squares;\n  }\n\n  saveMap = () => {\n    let squares: Square[] = JSON.parse(JSON.stringify(SquaresService.squares));\n    let squaresProcessedForSave = squares.map((square) => {\n      //let newSquare = { squareType: square.squareType, entity: square.entity };\n\n      return square;\n    });\n    let squaresStringified = JSON.stringify(squaresProcessedForSave);\n    console.log(squaresStringified);\n    let message = \"Enter the name of saved map.\";\n    let mapName = \"map00\";\n\n    let result = window.prompt(message, mapName);\n\n    localStorage[result] = squaresStringified;\n  };\n\n  loadMap = (GameActions) => {\n    let mapNames: any = Object.keys(localStorage);\n    let message = `Enter the name of map to load. ${mapNames}`;\n    let mapName = \"map00\";\n    console.log(mapNames);\n    let result = window.prompt(message, mapNames);\n    let squaresStringified = localStorage[result];\n\n    console.log(squaresStringified);\n    let squaresLoaded = JSON.parse(squaresStringified);\n    this.loadMapIntoBoard(squaresLoaded);\n    GameActions.processInterface();\n  };\n\n  loadMapIntoBoard = (squaresLoaded) => {\n    SquaresService.squares.forEach((square, index) => {\n      let targetSquare = square;\n      let sourceSquare = squaresLoaded[index];\n      targetSquare.squareType = (sourceSquare && sourceSquare.squareType) || 'floor';\n    });\n  };\n\n  loadEntities = (entities: Entity[]) => {\n    EntitiesService.entities = entities;\n  };\n\n  loadBuiltInMap = () => {\n    this.loadMapIntoBoard(intro);\n  };\n\n  loadPredefinedEntitities = () => {\n    this.loadEntities(characterDefinitions);\n  };\n}\n\nexport const GameModel = new GameModelClass();\n","import { GameModel, GameModelClass } from \"services/GameModelService\";\nimport { GameState } from \"./GameState\";\n\nimport { SquaresService, Square } from \"services/SquaresService\";\nimport { EntitiesService, Entity } from \"services/EntitiesService\";\nimport * as Helpers from \"helpers\";\n\n/**\n * @description Assorted methods required to run the game logic\n */\nclass GameLogicClass {\n  model: GameModelClass;\n\n  constructor() {\n    this.model = GameModel;\n  }\n\n  run = () => {\n    console.log(\"Running Game Logic\");\n    console.log(GameModel.entities);\n  };\n\n  calculateNextInterfaceState = (previousState: GameState) => {\n    let nextState = previousState;\n    let { entities, selected } = nextState;\n    entities.forEach((entity) => {\n      if (entity === selected) SquaresService.markAvailableDestinationsForSelectedEntity(selected);\n    });\n\n    return nextState;\n  };\n\n  /**\n   * Calculate WHAT EXACTLY? This should probably go into GameLogic\n   * @param previousState\n   */\n\n  calculeteNextGameStateAfterProcessingAGivenEntity(\n      previousState: GameState,\n      givenEntity: Entity\n    ): GameState{\n    if(previousState.selected.actionPoints == 0) return previousState;\n    let nextState: GameState = previousState;\n    let { entities } = nextState;\n    this.processAnEntity(givenEntity);\n    nextState.enemiesAlive = this.calculateNumberOfAliveEnemies(entities);\n    return nextState;\n  }\n\n  processAnEntity(entity) { // Entity processing function\n    console.log('start procesing', entity);\n    EntitiesService.moveEntityRandomly(entity);\n    EntitiesService.moveEntityIntoChosenDestination(entity);\n    EntitiesService.stopShootingWhenForbidden(entity);\n    if (EntitiesService.isEntityTargettingSomethingAlive(entity)) {\n      EntitiesService.fireAShot(entity);\n    }\n    EntitiesService.ceaseFireNextTickIfNoAliveTargets(entity);\n\n    entity.bleedExternally();\n\n    EntitiesService.stopBreathingForKilledEntity(entity);\n\n    SquaresService.markAvailableDestinationsForSelectedEntity(entity);\n    console.log('end procesing', entity)\n    // SquaresService.castLightsFromFriendlyEntity(entity);\n  }\n\n  calculateNumberOfAliveEnemies(entities: Entity[]):number {\n    let amountOfAliveEnemies = 0;\n    entities.forEach((entity) => {\n      if(entity.isFriendly) {\n        return;\n      } else if(entity.isAlive) {\n        amountOfAliveEnemies++;\n      }\n    });\n\n    return amountOfAliveEnemies;\n  }\n\n  syncSquaresWithEntities = (previousState) => {\n    let squares: Square[] = Helpers.newCopyOfArray(previousState.squares);\n    /*\n    Reattach new squares array to the SquaresService\n    This might actually be not-needed, as elements of that array are objects\n    and are referenced in both arrays, so unless we're adding new squares,\n    everything should work without re-attaching\n    */\n    SquaresService.squares = squares;\n    let entities: Entity[] = previousState.entities;\n    if (entities.length) {\n      Helpers.resetGivenFieldsOnACollection(squares, \"entity\");\n    }\n    entities.forEach((entity) => {\n      SquaresService.setEntityWithinApropriateSquare(entity);\n    });\n\n    return { squares };\n  };\n\n  deselectAllEntities = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"active\");\n    Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\", \"isAvailableDestination\");\n  };\n\n  ceaseFire = () => {\n    Helpers.resetGivenFieldsOnACollection(GameModel.entities, \"isShooting\");\n  };\n}\n\nexport const GameLogic = new GameLogicClass();\nexport default GameLogic;\n","import { Entity, Square, EntitiesService, SquaresService } from \"services\";\n\n/**\n * @description Interface of GameState used in Game Component as state\n *\n */\nexport interface GameState {\n  entities: Entity[];\n  squares: Square[];\n  selected: Entity;\n  targeted: Square;\n  targetedSquareNumber: number;\n\n  arenaSize: number;\n  squareSize: number;\n  enemiesAlive: number;\n\n  isAutoLoopOn: boolean;\n  isBoardRotated: boolean;\n  isEditorOn: boolean;\n}\n\nexport class GameState implements GameState{\n  constructor() {\n    Object.assign(this,\n      {\n        entities: EntitiesService.entities,\n        squares: SquaresService.squares,\n        selected: EntitiesService.findEntityById(\"Lazer Blady\"),\n        targeted: null,\n        targetedSquareNumber: null,\n\n        arenaSize: 10,\n        squareSize: 40,\n        enemiesAlive: null,\n\n        isAutoLoopOn: true,\n        isBoardRotated: false,\n        isEditorOn: false,\n      }\n    );\n  }\n}\n","/** This file contains most of the click-handling logic for the Game */\n/* Handling of particular events is delegated to proper services */\n\nimport * as Helpers from \"helpers\";\nimport { Entity, EntitiesService, SquaresService, GameLogic, Position } from \"services\";\nimport { GameState } from \"services/GameLogicService\";\n\nlet component = null;\n/**\n * @description Class with methods designed to operate on Game Component state.\n * @requires Game component to be passed to constructor.\n * @example let gameActions = new GameActionsClass(this); // run inside the GameComponent\n */\nexport class GameActionsClassForGameComponent {\n  constructor(that) {\n    component = that;\n  }\n\n  entitiesProcessingLoopIntervalHandle = null;\n\n  toggleEditorMode = () => {\n    if (!component.state.isEditorOn) {\n      Helpers.resetGivenFieldsOnACollection(component.state.squares, \"blood\", \"entity\");\n      component.setState((prevState) => {\n        return { entities: [], isEditorOn: true };\n      });\n    } else {\n      component.setState((prevState) => {\n        return { squares: SquaresService.squares, entities: EntitiesService.entities, isEditorOn: false };\n      });\n    }\n  };\n\n  zoomIn() {\n    component.setState((prevState) => {\n      return { squareSize: prevState.squareSize + 5 };\n    });\n  }\n\n  zoomOut() {\n    component.setState((prevState) => {\n      return { squareSize: prevState.squareSize - 5 };\n    });\n  }\n\n  get isTurnInProgress() {return this.entitiesProcessingLoopIntervalHandle};\n\n  loop = () => {\n    console.debug('Attempting loop')\n    if(this.isTurnInProgress) {\n      setTimeout(this.loop, 1000);\n      return;\n    };\n    console.debug('Executing nextStep')\n    this.nextStep();\n    if (component.state.isAutoLoopOn) {\n      console.debug('Scheduling next loop step in 1s');\n      setTimeout(this.loop, 1000);\n    }\n  };\n\n  nextTick = () => {\n    component.setState({ isAutoLoopOn: false });\n    this.nextStep();\n  };\n\n  nextStep() {\n    component.stepNumber++;\n    console.info('Starting processing turn #', component.stepNumber)\n    EntitiesService.refillActionPointsForAllEntities();\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, 'targetPosition', 'isShooting');\n    Helpers.resetGivenFieldsOnACollection(SquaresService.squares, 'isAttacked');\n    this.processEntities();\n  }\n\n  processEntities() {\n    this.drawAggro();\n    // EntitiesService.moveEntities();\n    this.entitiesProcessingLoopIntervalHandle = setInterval(\n      () => this.processNextUnprocessedEntity(),\n      100\n    );\n  }\n\n  processNextUnprocessedEntity() {\n    let entitiesForProcessing = EntitiesService.entities.filter(\n      entity =>\n        (!entity.isFriendly && entity.isAlive) &&\n        (entity.actionPoints > 0)\n    );\n    if(entitiesForProcessing.length) {\n      let entityForThisTurn = entitiesForProcessing[0];\n      this.setNewStateAfterProcessingChosenEntity(entityForThisTurn)\n    } else {// all are processed\n      clearInterval(this.entitiesProcessingLoopIntervalHandle);\n      this.entitiesProcessingLoopIntervalHandle = null;\n      console.log('All entities processed.')\n    }\n  }\n\n  setNewStateAfterProcessingChosenEntity(entity) {\n    component.setState(\n      (prevState) => GameLogic.calculeteNextGameStateAfterProcessingAGivenEntity(prevState, entity),\n      () => this.setSquaresAccordingToEntities()\n    );\n    this.processInterface();\n  }\n\n  executeActions = () => {\n    component.setState(\n      (prevState) => GameLogic.calculeteNextGameStateAfterProcessingAGivenEntity(prevState, prevState.selected),\n      () => this.setSquaresAccordingToEntities()\n    );\n    this.processInterface();\n  }\n\n  processInterface() {\n    component.setState(\n      (prevState) => GameLogic.calculateNextInterfaceState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  /** Sets entities within apropriate squares, based on the value of their `position` field\n   * This might actually be not-needed, if movement of entities is reflected in their respectable squares\n   * Also: entities are no longer rendered within `Square` component\n   */\n  setSquaresAccordingToEntities() {\n    component.setState((prevState) => GameLogic.syncSquaresWithEntities(prevState));\n  }\n\n  handleClickV2 = (squareIndex: number) => {\n    component.setState(\n      (state: GameState) => {\n        let { squares, entities, selected, targeted, isEditorOn, targetedSquareNumber: selectedSquareNumber } = state;\n        let previousTargeted = targeted;\n        targeted = squares[squareIndex];\n        selectedSquareNumber = squareIndex;\n        const doubleClick = () => previousTargeted === targeted;\n        SquaresService.markSquareAtIndexAsTargeted(squareIndex);\n\n        if (isEditorOn) {\n          switch (targeted.squareType) {\n            case \"floor\":\n              targeted.squareType = \"wall\";\n              break;\n            case \"wall\":\n              targeted.squareType = \"nothing\";\n              break;\n            case \"nothing\":\n              targeted.squareType = \"monster-filter\";\n              break;\n            case \"monster-filter\":\n              targeted.squareType = \"floor\";\n              break;\n          }\n        }\n\n        /** Setting move destination while clicking on empty square */\n        if (doubleClick() && targeted.isAvailableDestination) {\n          selected.setMoveDestinationSquare(squareIndex);\n          delete selected.targetPosition;\n          delete selected.isShooting;\n          Helpers.resetGivenFieldsOnACollection(squares,'isAttacked')\n        }\n\n        /** To be able to deselect */\n        if (doubleClick() || selected) {\n          if (!selected && targeted.entity) {\n            // Selecting\n            selected = EntitiesService.selectEntityFromGivenSquare(selected, targeted);\n            //targeted = undefined;\n          } else if (Helpers.isSelectedTargeted(selected, targeted)) {\n            // Deselecting if not selecting\n            /* // DISABLE DOUBLECLICK DESELECT\n            GameLogic.deselectAllEntities();\n            selected = undefined;\n            // */\n          }\n        }\n\n        // setting attack\n        if (doubleClick() && selected && targeted.entity && selected !== targeted.entity) {\n          let targetSquarePosition = SquaresService.getSquarePositionFromIndex(squareIndex);\n          selected.attackPosition(targetSquarePosition);\n          SquaresService.markSquareAtIndexAsAttacked(squareIndex);\n          delete selected.moveDestination;\n          delete selected.isShooting;\n          Helpers.resetGivenFieldsOnACollection(squares, 'isChosenDestination');\n        }\n\n        return { squares, entities, selected, targeted, targetedSquareNumber: selectedSquareNumber };\n      },\n      () => this.processInterface()\n    );\n  };\n\n  drawAggro() {\n    EntitiesService.entities.forEach((entity)=>{\n      if(entity.isFriendly) return;\n      entity.isShooting = false;\n      this.aggro(entity);\n    })\n  }\n\n  aggro = (entity: Entity) => {\n    // let actor = EntitiesService.findEntityById(name);\n    let position = entity.position;\n    let closeEntities = this.findEntitiesThatAreClose(position);\n    let entitiesToAttack = closeEntities.filter(closeEntity => closeEntity.hp > 0);\n    if(entitiesToAttack.length) {\n      let firstAmongThem = entitiesToAttack[0];\n      entity.attackPosition(firstAmongThem.position);\n    }\n  }\n\n  findEntitiesThatAreClose(position: Position){\n    let {x, y} = position;\n    let entities: Entity[] = [];\n    for (let j = y - 1; j <= y + 1; j++) {\n      if (j < 0 || j >= SquaresService.arenaSize) {\n        continue;\n      }\n      for (let i = x - 1; i <= x + 1; i++) {\n        if (i < 0 || i >= SquaresService.arenaSize || (i === x && j === y)) {\n          continue;\n        }\n        let newlyFoundEntities = EntitiesService.getEntitiesAtGivenPosition({x: i, y: j})\n        entities = entities.concat(newlyFoundEntities);\n      }\n    }\n\n    return entities;\n  }\n\n  nuke = (dmg: number) => {\n    component.setState(\n      (state) => {\n        let { entities } = state;\n\n        entities.forEach((entity) => {\n          entity.hp = entity.hp - dmg;\n        });\n\n        return { entities };\n      },\n      () => {\n        this.processEntities();\n      }\n    );\n  };\n\n  toggleRotateBoard = () => {\n    component.setState({ isBoardRotated: !component.state.isBoardRotated });\n  };\n\n  switchAutoLoop = () => {\n    component.setState(\n      (previousState: GameState) => {\n        let isAutoLoopOn = !previousState.isAutoLoopOn\n        console.info('Switching auto loop to', isAutoLoopOn);\n        return { isAutoLoopOn };\n      },\n      () => {\n        if (component.state.isAutoLoopOn) {\n          this.loop();\n        }\n      }\n    );\n  };\n\n  onInventoryClick = (entity: Entity, itemName: string) => {\n    component.setState((prevState) => {\n      let entities = [].concat(prevState.entities);\n      EntitiesService.entities = entities;\n      let entityId = EntitiesService.getEntityId(entity);\n      let actualEntity = EntitiesService.findEntityById(entityId);\n      //let actualItem = EntitiesService.findItemOnEntity(actualEntity, itemName);\n\n      if (actualEntity.equipment.hands && actualEntity.equipment.hands.name === itemName) {\n        actualEntity.unEquipFromHands();\n      } else {\n        actualEntity.equipInHands(itemName);\n      }\n\n      return { entities };\n    });\n    console.log(entity, itemName);\n  };\n\n  handleDeselectAllEntities = () => {\n    component.setState(\n      (state) => {\n        let { squares, entities, selected } = state;\n\n        GameLogic.deselectAllEntities();\n        selected = undefined;\n\n        return { squares, entities, selected };\n      },\n      () => {\n        //this.processEntities();\n      }\n    );\n  };\n\n  ceaseFire = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"isShooting\");\n    this.processInterface();\n  };\n}\n","import React from \"react\";\nimport { SquaresService, Entity } from \"services\";\nimport { HpBar, ShootingVisualization } from \"components\";\nimport * as Helpers from \"helpers\";\nimport \"./EntityPawn.scss\";\n\ninterface EntityPawnProps {\n  entity: Entity;\n}\n\nexport class EntityPawn extends React.Component<EntityPawnProps> {\n  randomTime = `${(Math.random() + 0.5).toFixed(2)}s`;\n\n  render() {\n    let { entity } = this.props;\n    let square = SquaresService.getSquareFromPosition(entity.position.x, entity.position.y);\n\n    let classNameBase = \"entity-pawn__icon\";\n    let className = `${classNameBase}`;\n    let classessFromFlags = Helpers.turnFlagsIntoClasses(entity, classNameBase);\n    classessFromFlags += Helpers.turnFlagsIntoClasses(square, classNameBase);\n    className += ` ${classessFromFlags} `;\n    let fof = entity.isFriendly ? 'friendly' : 'hostile';\n    let color = entity.isFriendly ? 'green' : 'red';\n    let zIndex = entity.isShooting ? 5 : 1;\n    let animationBreathing = entity.isBreathing ? `breathing ${this.randomTime} alternate infinite linear` : \"none\";\n\n    let boardPadding = 10;\n    let squareMargin = 2;\n    return (\n      <div\n        className=\"entity-pawn\"\n        key={entity.name}\n        style={{\n          left: `calc(${boardPadding + 3}px + ${entity.position.x * squareMargin * 2}px + ${entity.position.x}em)`,\n          top: `calc(${boardPadding + 3}px + ${entity.position.y * squareMargin * 2}px + ${entity.position.y}em)`,\n          zIndex: zIndex,\n        }}\n      >\n        <div\n          className={`entity-pawn__health-display ` + fof}\n        >\n\n          <HpBar\n            current={entity.hp}\n            max={entity.maxHp}\n            color={color}\n          />\n        </div>\n\n        <div\n          className={className}\n          style={{\n            animation: animationBreathing,\n          }}\n        >\n          {entity.icon}\n        </div>\n        <ShootingVisualization entity={entity} />\n      </div>\n    );\n  }\n}\n","export const structures = {\r\n  box: {\r\n    name: \"box\",\r\n    icon: \"📦\",\r\n    hp: 50,\r\n    maxHp: 70,\r\n    isBreathing: false,\r\n    position: { x: 4, y: 5 },\r\n  },\r\n  redBarrel: {\r\n    name: \"redBarrel\",\r\n    icon: \"🛢️\",\r\n    hp: 50,\r\n    maxHp: 70,\r\n    isBreathing: false,\r\n    position: { x: 4, y: 5 },\r\n  },\r\n};\r\n","import React from \"react\";\n// services\nimport { SquaresService, EntitiesService } from \"services\";\nimport { Entity, Square, Position, Item } from \"services\";\n// components\nimport { EntityCard, InventoryList } from \"components\";\n// others\nimport { structures } from \"resources\";\nimport * as Helpers from \"helpers\";\nimport GameStyles from \"./Game.module.scss\";\n\ninterface TargetedSquareInfoProps {\n  className: string;\n  squareNumber: number;\n  squares: Square[];\n  selected: Entity;\n  targeted: Square;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  processInterface: Function;\n}\n\n// TODO: Refactor, does it really need all this logic.\nexport default class TargetedSquareInfo extends React.Component<TargetedSquareInfoProps> {\n  boxSerialNumber: number = 0;\n\n  onItemClick = (itemName: string): void => {\n    let { selected, targeted, squareNumber } = this.props;\n    let targetedSquarePosition = SquaresService.getSquarePositionFromIndex(squareNumber);\n    if (selected && targeted &&\n      selected.position.x === targetedSquarePosition.x &&\n      selected.position.y === targetedSquarePosition.y\n      ) {\n      let item = targeted.takeFromInventory(itemName);\n      if (!item) {\n        item = targeted.entity;\n        let square = SquaresService.getSquareFromPosition(targetedSquarePosition.x, targetedSquarePosition.y);\n        square.entity = null;\n        EntitiesService.removeEntity(item as Entity);\n      }\n      selected.addToInventory(item);\n    }\n    this.props.processInterface();\n  };\n\n  onMoveClick(selected: Entity, targetedSquarePosition: Position): void {\n    let targetedSquare: Square = SquaresService.getSquareFromPosition(targetedSquarePosition.x, targetedSquarePosition.y);\n    selected.setMoveDestinationPosition(targetedSquarePosition);\n    targetedSquare.isChosenDestination = true;\n    this.props.processInterface();\n  }\n\n  onAttackClick(selected: Entity, targetedSquarePosition: Position): void {\n    selected.attackPosition(targetedSquarePosition);\n    this.props.processInterface();\n  }\n\n  onAddStructureClick(targetedSquarePosition: Position, structureType: string): void {\n    let box = Object.assign({}, structures[structureType]);\n    let targetPosition = Object.assign({}, targetedSquarePosition);\n    box.position = targetPosition;\n    box.name += this.boxSerialNumber++;\n    let square = SquaresService.getSquareFromPosition(targetedSquarePosition.x, targetedSquarePosition.y);\n\n    let newStructure = new Entity(box);\n\n    // TODO: FIXME: Stop forcing types, make a new list for scenery items.\n    square.entity = newStructure;\n    EntitiesService.entities.push(newStructure);\n\n    square.addToInventory(newStructure as Item);\n\n\n    this.props.processInterface();\n  }\n\n  render() {\n    let { targeted, selected, squareNumber } = this.props;\n\n    if (!targeted) {\n      return null;\n    }\n\n    let targetedSquarePosition = SquaresService.getSquarePositionFromIndex(squareNumber);\n\n    let entityInfo;\n    let distanceInfo;\n    let positionInfo;\n    let bloodInfo;\n    let availableActions = [];\n    let items;\n\n    let editorButtons = (\n      <div>\n        <button onClick={() => this.onAddStructureClick(targetedSquarePosition, \"box\")} className={GameStyles.button}>\n          Add box\n        </button>\n        <button\n          onClick={() => this.onAddStructureClick(targetedSquarePosition, \"redBarrel\")}\n          className={GameStyles.button}\n        >\n          Add barrel\n        </button>\n      </div>\n    );\n\n    if (targeted.entity && !Helpers.isSelectedTargeted(selected, targeted)) {\n      entityInfo = (\n        <EntityCard\n          onEntityClick={this.onItemClick}\n          onInventoryClick={this.props.onInventoryClick}\n          entity={targeted.entity}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (targeted.items) {\n      items = (\n        <InventoryList\n          label=\"Items in this location\"\n          title=\"On the floor\"\n          onClick={this.onItemClick}\n          onDrop={null}\n          onReload={null}\n          inventory={targeted.items}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (selected) {\n      let distanceToSelected = Helpers.calculateDistance(\n        targetedSquarePosition.x - selected.position.x,\n        targetedSquarePosition.y - selected.position.y\n      );\n\n      distanceInfo = <li>Distance to selected: {distanceToSelected.toFixed(2)}</li>;\n\n      if (distanceToSelected !== 0) {\n        if (targeted.isAvailableDestination) {\n          availableActions[0] = (\n            <button key=\"move\" onClick={() => this.onMoveClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Move\n            </button>\n          );\n        }\n        if (targeted.entity) {\n          availableActions[1] = (\n            <button key=\"attack\" onClick={() => this.onAttackClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Attack\n            </button>\n          );\n        }\n      }\n    }\n\n    if (targetedSquarePosition) {\n      positionInfo = (\n        <li>\n          Position: [ {targetedSquarePosition.x}, {targetedSquarePosition.y} ]{\" \"}\n        </li>\n      );\n    }\n\n    if (targeted.blood) {\n      bloodInfo = <li>Blood amount: {targeted.blood}</li>;\n    }\n\n    return (\n      <div className={this.props.className}>\n        <strong className={GameStyles.targeted__label}>Target square Info</strong>\n        <div>{entityInfo}</div>\n        <div>{availableActions}</div>\n        <ul>\n          {positionInfo}\n          {distanceInfo}\n          {bloodInfo}\n          {items}\n          {editorButtons}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { ReactElement } from \"react\";\n// services\nimport { Entity } from \"services\";\n// components\nimport { EntityCard } from \"components/EntityCard\";\n// others\nimport GameStyles from \"./Game.module.scss\";\n\ninterface SelectedEntityInfoProperties {\n  selected: Entity;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  handleDeselectAllEntities: () => void;\n  processInterface: Function;\n}\n\n// TODO: Change this into HOC, as it doesn't really need half of it's props for itself\nexport default class SelectedEntityInfo extends React.Component<SelectedEntityInfoProperties> {\n  render(): ReactElement {\n    if (!this.props.selected) {\n      return null;\n    }\n\n    return (\n      <div className={GameStyles.selected}>\n        <strong className={GameStyles.selected__label}>Selected entity </strong>\n        <div>\n          <EntityCard\n            onInventoryClick={this.props.onInventoryClick}\n            entity={this.props.selected}\n            processInterface={() => this.props.processInterface()}\n          />\n        </div>\n        <button onClick={this.props.handleDeselectAllEntities} className={GameStyles.button}>\n          {\" \"}\n          Deselect\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\n// services\nimport { EntitiesService, SquaresService, GameModel, GameActionsClassForGameComponent, GameState } from \"services\";\n\n// components\nimport { Board, MessageBox } from \"components\";\nimport TargetedSquareInfo from \"./TargetedSquareInfo\";\nimport SelectedEntityInfo from \"./SelectedEntityInfo\";\n\n// others\nimport styles from \"./Game.module.scss\";\n\nlet GameActions = null;\n\n/** Game composes all the parts of the interface together */\nexport class Game extends React.PureComponent<void, GameState> {\n  renderCounter: number = 0;\n  stepNumber: number = 0;\n\n  constructor(props: void) {\n    super(props);\n\n    GameModel.loadBuiltInMap();\n    GameModel.loadPredefinedEntitities();\n    this.state = new GameState();\n    this.state.selected.active = true;\n    GameActions = new GameActionsClassForGameComponent(this);\n  }\n\n  componentDidMount() {\n    this.startIfAutoLoopIsOn();\n  }\n\n  startIfAutoLoopIsOn(){\n    if(this.state.isAutoLoopOn){\n      GameActions.loop();\n    }\n  }\n\n  render() {\n    // console.log(\"Rendering Game. #\", this.renderCounter++);\n    return (\n      <div className={styles.game}>\n        <div className={styles.game__board}>\n          <Board\n            squares={this.state.squares}\n            entities={this.state.entities}\n            onClick={(i) => GameActions.handleClickV2(i)}\n            size={this.state.arenaSize}\n            isRotated={this.state.isBoardRotated}\n            style={{fontSize: `${this.state.squareSize}px`}}\n          />\n        </div>\n\n        <div className={styles.game__info}>\n          <div className={styles.actions}>\n            <div className={styles.action_row}>\n              <button onClick={GameActions.toggleEditorMode}>\n                Editor Mode\n              </button>\n              <button onClick={GameModel.saveMap}>\n                Save Map\n              </button>\n              <button onClick={()=> GameModel.loadMap(GameActions)}>\n                Load Map\n              </button>\n            </div>\n\n            <div className={styles.action_row}>\n              <button onClick={GameActions.toggleRotateBoard}>\n                Rotate Board\n              </button>\n              <button onClick={GameActions.zoomIn}>\n                Zoom In (+)\n              </button>\n              <button onClick={GameActions.zoomOut}>\n                Zoom Out (-)\n              </button>\n            </div>\n            <div className={styles.action_row}>\n              <button onClick={() => GameActions.nuke(40)} className={styles[\"button-nuke\"]}>\n                Nuke All\n              </button>\n              <button onClick={GameActions.ceaseFire}>\n                Cease Fire\n              </button>\n              <button onClick={GameActions.executeActions} className={styles.execute_actions}>\n                Execute Actions\n              </button>\n            </div>\n\n            <div className={styles.action_row}>\n              <span className={styles[\"step-counter\"]}>Tick: {this.stepNumber}</span>\n\n              <label className={` ${styles.button} ${styles[\"auto-cycle\"]}`}>\n                <input type=\"checkbox\" checked={this.state.isAutoLoopOn} onChange={GameActions.switchAutoLoop} />\n                <span>Auto Cycle</span>\n              </label>\n\n              <button onClick={GameActions.nextTick} className={styles.button + ' '+ styles.next_tick}>\n                Next Tick\n              </button>\n\n            </div>\n\n            <div className={styles.action_row}>\n            <span>\n                Enemies to kill: {this.state.enemiesAlive}\n                {this.state.enemiesAlive ? '' : \" Great Job. YOU WON.\" }\n                {this.state.selected.isAlive ? '' : \" Damn. YOU DIED.\" }\n              </span>\n              &nbsp;\n              <p className=\"instructions\">\n\n              </p>\n              <span>Actions points: {this.state.selected.actionPoints} </span>\n\n            </div>\n          </div>\n          <div className={styles[\"interaction-container\"]}>\n            <SelectedEntityInfo\n              selected={this.state.selected}\n              handleDeselectAllEntities={GameActions.handleDeselectAllEntities}\n              onInventoryClick={GameActions.onInventoryClick}\n              processInterface={() => GameActions.processInterface()}\n            />\n\n            <TargetedSquareInfo\n              className={styles.targeted}\n              squareNumber={this.state.targetedSquareNumber}\n              squares={this.state.squares}\n              selected={this.state.selected}\n              targeted={this.state.targeted}\n              onInventoryClick={GameActions.onInventoryClick}\n              processInterface={() => GameActions.processInterface()}\n            />\n            <div></div>\n          </div>\n          <MessageBox />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\n\ninterface BloodProps {\n  bloodAmount: number; // receives amount of blood ONLY\n}\n\n/**\n * @description\n * Visualises blood by adding red background\n * and a little number in the corner.\n *\n * @param bloodAmount - number representing the amount of blood.\n */\nclass Blood extends React.PureComponent<BloodProps> {\n  render() {\n    let { bloodAmount } = this.props;\n\n    let bloodDrops = [];\n    let i = bloodAmount;\n    let marginForDropsInPercent = 0;\n    let mfd = marginForDropsInPercent;\n    let dropSizeVariance = 3;\n    let dsv = dropSizeVariance;\n\n\n    while(i--) {\n      bloodDrops.push(\n        <span className=\"blood__drop\" style={{\n          position: 'absolute',\n          fontSize: `${1 + Math.random() * dsv}em`,\n          left: `calc(${mfd + Math.random() * (100-2*mfd)}% - 0.4em)`,\n          top: `calc(${mfd + Math.random() * (100-2*mfd)}% - 0.5em)`,\n        }}>o</span>\n      );\n    }\n\n    return (\n      <div\n        className=\"square__blood\"\n        style={{\n          background: `rgba(255, 0, 0, 0)`,//${(bloodAmount / 50).toFixed(2)})`,\n          position: 'relative'\n        }}\n      >\n        {bloodDrops}\n        <span className=\"blood__text\">\n          {bloodAmount}\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default Blood;\n","import React from \"react\";\nimport { Entity, Item } from \"services\";\n\ninterface ItemsProps {\n  items: Item[];\n  itemsNumber: number; // here to trigger update when list length changes\n}\n// FIXME: I have a strange feeling this doesn't update when contents of items list change but not the number of elements\n/**\n * @description\n * Displays icons of items on the square, as well as little number in the corner.\n * @param itemsNumber - number of items on the square\n * @param items - array of items on the square\n */\nclass Items extends React.PureComponent<ItemsProps> {\n  itemsIcons = [];\n\n  render() {\n    let { items, itemsNumber } = this.props;\n\n    if (!items) return null;\n\n    items.forEach((item) => {\n      let entity = item as Entity;\n      if (entity.icon) {\n        this.itemsIcons.push(<div className=\"square__item-icon\">{entity.icon}</div>);\n      }\n    });\n\n    return (\n      <div className=\"square__items\">\n        <div className=\"square__items-icons\">{this.itemsIcons}</div>\n        <div className=\"square__items-number\">{itemsNumber}</div>\n      </div>\n    );\n  }\n}\n\nexport default Items;\n","import React, { ReactElement } from \"react\";\n// services\nimport { Item } from \"services\";\n// components\nimport Blood from \"./Blood\";\nimport Items from \"./Items\";\n// others\nimport \"./Square.scss\";\n\n// TODO: This should really take less props\ninterface SquareProps {\n  squareId: number;\n  className?: string;\n  onClick: (squareIndex: number) => void;\n  blood: number;\n  items: Item[]; // collection of objects\n  itemsNumber: number; // here to trigger update when list length changes\n}\n\n/**\n * @description Displays a square with blood and items on it.\n * @param squareId - unique numerical id\n * @param className - string with CSS clasess\n * @param onClick - callback to call when square is clicked\n * @param blood - amount of blood\n * @param items - array of items\n * @param itemsNumber - numberof items\n */\nexport class SquareComponent extends React.PureComponent<SquareProps> {\n  onClick = () => {\n    this.props.onClick(this.props.squareId);\n  };\n\n  render() {\n    // console.log(\"Render Square\", this.props.squareId);\n    // TODO: Extract into separate component\n    function cuboid(classPrefix:string):ReactElement {\n      let i = 6;\n      let cuboidFaces: ReactElement[] = [];\n\n      while(i--){\n        cuboidFaces.push(<div key={i} className={`${classPrefix}__cuboid-face`}></div>);\n      }\n\n      return <div className={`${classPrefix}__cuboid`}>\n        {cuboidFaces}\n      </div>\n    }\n\n    return (\n      <button className={this.props.className} onClick={this.onClick}>\n        <Blood bloodAmount={this.props.blood} />\n        <Items items={this.props.items} itemsNumber={this.props.itemsNumber} />\n        <div className=\"square__content\">&nbsp;</div>\n        {cuboid('square')}\n      </button>\n    );\n  }\n}\n\n","import React from \"react\";\nimport \"./LinearDisplay.scss\";\n\ninterface LinearDisplayProps {\n  className?: string;\n  current: number;\n  max: number;\n  title?: string;\n  label?: string;\n}\n\nexport function LinearDisplay(props: LinearDisplayProps) {\n  let className = `linear-display ${props.className || \"\"}`;\n  let percentage = ~~((props.current * 100) / props.max);\n  let overload = percentage > 100;\n  if (overload) {\n    percentage = 100;\n    className += \" linear-display--overloaded\";\n  }\n\n  let progressStyle = {\n    width: `${percentage}%`,\n  };\n  let title = props.title || `${props.current}/${props.max}`;\n\n  let amount = props.current;\n\n  let divider = 1;\n  if (props.max >= 40 && props.max < 100) {\n    divider = 5;\n  } else if (props.max >= 100) {\n    divider = 10;\n  }\n\n  amount = amount / divider;\n\n  let gridSize = 100 / amount;\n\n  let color = `rgba(200,200,200,0.4)`;\n  color = `black`;\n  let progressGridStyle = {\n    backgroundSize: `${gridSize}% 100%`,\n    backgroundImage: `\n      linear-gradient(to left, ${color} 1px, transparent 1px)\n    `,\n  };\n\n  Object.assign(progressStyle, progressGridStyle);\n\n  return (\n    <div className={className}>\n      <div className=\"linear-display__label\">{props.label}:&nbsp;</div>\n      <div className=\"linear-display__bar-container\" title={title}>\n        <div className=\"linear-display__bar-progress\" style={progressStyle}>\n          <span className=\"linear-display__bar-progress-text\">\n            {props.current}\n            {overload ? \"/\" + props.max : \"\"}&nbsp;\n          </span>\n        </div>\n      </div>\n      <div>&nbsp;</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./HudPanel.scss\";\n\ninterface HudPanelProps {\n  title: string;\n  children: JSX.Element;\n}\n\nexport class HudPanel extends React.Component<HudPanelProps> {\n\n    render() {\n        return <div className=\"hud-panel\">\n            <div className=\"hud-panel__title\">{this.props.title}</div>\n            <div className=\"hud-panel__content\">{this.props.children}</div>\n        </div>;\n    }\n}","import React from \"react\";\n//import \"./Cell.scss\";\n\ninterface CellProps {\n}\n\ninterface CellState {\n}\n\nexport class Cell extends React.PureComponent<CellProps, CellState> {\n\n  state = {}\n\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //   }\n  // }\n\n  render() {\n    //console.log(`Rendering [${this.props.children}]`);\n    return <div className=\"cell\">{this.props.children}</div>\n  }\n}","import React from \"react\";\nimport { Cell } from \"./Cell\";\nimport \"./Grid.scss\";\n\ninterface GridProps {\n  width: number;\n  height: number;\n  startAt: [number, number];\n}\n\ninterface GridState {\n  mapdrag: boolean,\n  scroll: {\n    x: number,\n    y: number,\n  }\n}\n\nexport class Grid extends React.Component<GridProps, GridState> {\n  gridReference;\n  scroll = {\n    x: 0,\n    y: 0,\n  }\n\n  mapdrag = false;\n\n  stateDriven = false;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      mapdrag: false,\n      scroll: {\n        x: 0,\n        y: 0,\n      }\n    }\n\n    this.gridReference = React.createRef();\n  }\n\n  scrollRelativeXY(deltaX: number, deltaY: number) {\n    this.scroll.x -= deltaX;\n    this.scroll.y -= deltaY;\n\n    if(this.scroll.x <= 0) {\n      this.scroll.x = 0;\n    }\n    if(this.scroll.y <= 0) {\n      this.scroll.y = 0;\n    }\n\n    if(this.stateDriven) {\n      this.setState({\n        scroll: {\n          x: this.scroll.x,\n          y: this.scroll.y,\n      }})\n    }\n    this.executeScroll();\n  }\n\n  renderGrid() {\n    let rows = [];\n    for(let y = 0; y <= this.props.height; y++) {\n      let sourceY = this.props.startAt[1] + y;\n      let currentRow = [];\n\n      for(let x = 0; x <= this.props.width; x++) {\n        let sourceX = this.props.startAt[0] + x;\n        let currentCell = <Cell key={`$key_${sourceX}_${sourceY}`}>{sourceX}, {sourceY}</Cell>\n        currentRow.push(currentCell);\n      }\n      rows.push(<div className=\"row\"  key={`$key_X_${sourceY}`}>{currentRow}</div>);\n    }\n    return <div\n      className=\"grid\"\n      ref={this.gridReference}\n      onMouseDown={(e) => this.onMouseDown(e)}\n      onMouseUp={(e) => this.onMouseUp(e)}\n      onMouseMove={(e) => this.handleMove(e)}\n      onContextMenu={(e)=>e.preventDefault()}\n      onDrag={(e)=>this.onMouseDrag(e)}\n      //onMouseOut={(e)=>this.onMouseOut(e)}\n    >{rows}</div>;\n  }\n\n  handleMove(e) {\n    if(!this.mapdrag) return;\n    this.scrollRelativeXY(e.movementX, e.movementY);\n  }\n\n  onMouseDrag(e){\n    console.log(e);\n  }\n\n  onMouseDown(e) {\n    console.log(e.button);\n    if(e.button === 2) {\n      this.mapdrag = true;\n    }\n    e.preventDefault();\n    console.log(this.mapdrag);\n  }\n\n  onMouseOut(e) {\n    console.log(\"MOUSE OUT\")\n    this.mapdrag = false;\n  }\n\n  startDragging(e){\n      this.mapdrag = true;\n  }\n\n  onMouseUp(e){\n    console.log(e.button);\n    if(e.button === 2) {\n      this.mapdrag = false;\n    }\n    e.preventDefault();\n    console.log(this.mapdrag);\n  }\n\n  onChangeScrollX(event) {\n    console.log(event.target.value);\n    this.scroll.x = event.target.value;\n    this.executeScroll();\n  }\n  onChangeScrollY(event) {\n    console.log(event.target.value)\n    this.scroll.y = event.target.value;\n    this.executeScroll();\n  }\n\n  executeScroll() {\n    this.gridReference.current.scroll({\n      top: this.scroll.y,\n      left: this.scroll.x,\n    });\n  }\n\n  switchStateDriven(e) {\n    console.log(e.target.checked);\n    this.stateDriven = e.target.checked;\n  }\n\n  render() {\n    return <div className=\"grid-container\">\n      <pre className=\"gridDebugData\">\n        Width: {this.props.width}<br/>\n        Height: {this.props.height}<br/>\n        StartAt: {this.props.startAt[0]}, {this.props.startAt[1]}<br/>\n        ScrollX: <input onChange={(e) => this.onChangeScrollX(e)}></input><br/>\n        ScrollY: <input onChange={(e) => this.onChangeScrollY(e)}></input><br/>\n        StateDriven: <input type=\"checkbox\" onChange={(e)=>this.switchStateDriven(e)}></input><br/>\n\n        State mapdrag: {this.state.mapdrag}<br/>\n        State scrollX: {this.state.scroll.x}<br/>\n        State scrollY: {this.state.scroll.y}<br/>\n      </pre>\n      {this.renderGrid()}\n    </div>;\n  }\n}","import React from \"react\";\nimport \"./Controls.scss\";\n\ninterface ControlsProps {\n    keys: string[],\n    onKeyPress: Function,\n}\n\ninterface ControlsState {\n    w: boolean,\n    s: boolean,\n    a: boolean,\n    d: boolean,\n}\n\nexport class Controls extends React.Component<ControlsProps, ControlsState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            w: false,\n            s: false,\n            a: false,\n            d: false,\n        }\n    }\n\n    componentDidMount(){\n        document.addEventListener(\"keydown\", (e) => this.onKeyDown(e), false);\n        document.addEventListener(\"keyup\", (e) => this.onKeyUp(e), false);\n    }\n\n    onKeyDown(event) {\n        console.log(event)\n        switch(event.keyCode) {\n            case 87: // W\n                this.setState({w: true});\n                this.props.onKeyPress('w');\n                break;\n            case 83: // S\n                this.setState({s: true});\n                this.props.onKeyPress('s');\n                break;\n            case 65: // A\n                this.setState({a: true});\n                this.props.onKeyPress('a');\n                break;\n            case 68: // D\n                this.setState({d: true});\n                this.props.onKeyPress('d');\n                break;\n        }\n    }\n\n    onKeyUp(event) {\n        console.log(event)\n        switch(event.keyCode) {\n            case 87: // W\n                this.setState({w: false});\n                break;\n            case 83: // S\n                this.setState({s: false});\n                break;\n            case 65: // A\n                this.setState({a: false});\n                break;\n            case 68: // D\n                this.setState({d: false});\n                break;\n        }\n    }\n\n    render() {\n        return <div className=\"controls\">\n            [<span className={`${this.state.w ? 'pressed' : ''} key` }>W</span>]\n            [<span className={`${this.state.s ? 'pressed' : ''} key` }>S</span>]\n            [<span className={`${this.state.a ? 'pressed' : ''} key` }>A</span>]\n            [<span className={`${this.state.d ? 'pressed' : ''} key` }>D</span>]\n        </div>;\n    }\n}","import React from \"react\";\n// services\nimport \"./MessageBox.scss\";\nimport { MessageService } from \"services\";\n\nexport class MessageBox extends React.Component {\n  messages = MessageService.messages;\n  messageNumber;\n\n  shouldComponentUpdate() {\n    // don't update if there are no new messages since last render\n    return this.messages.length !== this.messageNumber;\n  }\n\n  renderMessage = (message: string, number: number) => {\n    return (\n      <li key={`msg${number}`}>\n        Message #[{number}]: {message}\n      </li>\n    );\n  };\n\n  render() {\n    if (!this.messages.length) return null;\n    let RenderedMessages = this.messages.map((message, number) => this.renderMessage(message, number));\n    // remember the number of messages rendered\n    this.messageNumber = this.messages.length;\n    return (\n      <ul className=\"messages\" id=\"messages\">\n        {RenderedMessages}\n      </ul>\n    );\n  }\n\n  scrollElement() {\n    window.requestAnimationFrame(() => {\n      var element = document.getElementById(\"messages\");\n      element.scrollTop = element.scrollHeight;\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.messages.length) this.scrollElement();\n  }\n}\n","import React from \"react\";\nimport { Item, RangedWeapon } from \"services\";\nimport { LinearDisplay } from \"components/LinearDisplay\";\n\ninterface InventoryItemProps {\n  item: Item;\n  onDrop(itemName: string);\n  onReload(itemName: string);\n  onClick(itemName: string);\n  processInterface: Function;\n}\n\nexport function InventoryItem(props: InventoryItemProps) {\n  let { item } = props;\n  let reloadButton;\n  let dropButton;\n  let ammoCounter;\n\n  if (props.onDrop) {\n    dropButton = (\n      <button\n        className=\"inventory-list__drop-button\"\n        onClick={() => {\n          props.onDrop(item.name);\n        }}\n      >\n        Drop\n      </button>\n    );\n  }\n\n  if (item instanceof RangedWeapon) {\n    let weapon = item as RangedWeapon;\n\n    if (weapon.reload) {\n      // has reload capability\n      let className = \" inventory-list__reload-button \";\n\n      if (weapon.rounds === 0 || weapon.rounds === \"empty\") {\n        className += \" inventory-list__reload-button--empty \";\n      } else if (weapon.rounds < weapon.maxRounds) {\n        className += \" inventory-list__reload-button--partial \";\n      }\n      reloadButton = (\n        <button\n          className={className}\n          onClick={() => {\n            weapon.reload();\n            props.onReload && props.onReload(item.name);\n            props.processInterface();\n          }}\n        >\n          Reload\n        </button>\n      );\n    } else {\n      reloadButton = null;\n    }\n\n    ammoCounter = weapon.reload ? (\n      <LinearDisplay label=\"Rounds\" current={weapon.rounds} max={weapon.maxRounds} />\n    ) : null;\n  }\n\n  return (\n    <div key={item.name}>\n      <div onClick={() => props.onClick(item.name)} key={item.name} className=\"inventory-list__item\">\n        <span>{item.name}</span>\n        <div>{ammoCounter}</div>\n      </div>\n      {reloadButton}\n      {dropButton}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./InventoryList.scss\";\nimport { Item } from \"services\";\nimport { InventoryItem } from \"components/InventoryItem\";\n\ninterface InventoryListProps {\n  className?: string;\n  label: string;\n  title: string;\n  onClick(itemName: string);\n  onDrop(itemName: string);\n  onReload(itemName: string);\n  inventory: Item[]; //\n  processInterface: Function;\n}\n\nexport function InventoryList(props: InventoryListProps) {\n  const className = `inventory-list ${props.className || \"\"}`;\n\n  if (!props.inventory) {\n    return null;\n  }\n\n  const inventoryItems = props.inventory.map((item) => (\n    <InventoryItem\n      key={`i${item.name}`}\n      item={item}\n      onClick={props.onClick}\n      onDrop={props.onDrop}\n      onReload={props.onReload}\n      processInterface={props.processInterface}\n    />\n  ));\n\n  return (\n    <div className={className}>\n      <div className=\"inventory-list__label\">\n        {props.label}\n        :&nbsp;\n      </div>\n      <div className=\"inventory-list__items\" title={props.title}>\n        {inventoryItems}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./HpBar.scss\";\n\ninterface HpBarProps {\n    current: number;\n    max: number;\n    color: string;\n}\n\nexport class HpBar extends React.Component<HpBarProps> {\n\n    render() {\n        let percentage = ~~((this.props.current * 100) / this.props.max);\n        let progressStyle = {\n            width: `${percentage}%`,\n            backgroundColor: this.props.color\n        };\n        return(\n            <div className=\"hpbar\">\n                <div className=\"hpbar__indicator\" style={progressStyle}>\n\n                </div>\n                <span className=\"hpbar__text\">\n                        {this.props.current}\n                </span>\n            </div>\n        );\n    }\n}","import * as Helpers from \"helpers\";\nimport React, { ReactElement } from \"react\";\n\nexport function ShootingVisualization(props): ReactElement {\n  let { entity } = props;\n\n  let calcNewAangle = Helpers.calculateAngle;\n  let targetCoords = entity.targetPosition;\n  let projectileNumber = 5;\n  let projectiles = [];\n  let localId = `Entity${entity.icon}`;\n  let uniqueShootingAnimationId = `shooting-animation-${localId}-ap-${entity.actionPoints}`;\n  let customStyle = \"\";\n  let commonStyles = \"\";\n\n  if (\n    targetCoords &&\n    entity.position &&\n    entity.hasWeapon &&\n    entity.isShooting &&\n    (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\n  ) {\n    if (targetCoords) {\n      let distanceToTargetXInUnits = (targetCoords.x - entity.position.x);\n      let distanceToTargetYInUnits = (targetCoords.y - entity.position.y);\n\n      let actualDistanceInUnits = Helpers.calculateDistance(distanceToTargetXInUnits, distanceToTargetYInUnits);\n      let weaponType = entity && entity.equipment && entity.equipment.hands && entity.equipment.hands.type;\n      let angle = calcNewAangle(distanceToTargetXInUnits, distanceToTargetYInUnits);\n      commonStyles = `\n      @keyframes fading${uniqueShootingAnimationId} {\n        0%  {opacity: 1;}\n        95% {opacity: 1;}\n        100%  {opacity: 0;}\n      }\n\n      .fading-after-1s-for-${uniqueShootingAnimationId} {\n        animation: fading${uniqueShootingAnimationId} 1s linear normal forwards 1;\n      }\n      `;\n\n      if (weaponType === \"lazer\") {\n        // TODO: perhaps call to `visualizeShooting(from,to,weaponType)`\n        let className = `projectile${localId}_beam`;\n        let projectile = \"\";\n        const distanceWhereBeamBegins = 20;//in pixels\n        //actualDistance = actualDistance - distanceWhereBeamBegins;\n        // do above within template\n        customStyle = `\n          @keyframes pulsing${localId} {\n            0%  {opacity: 0.1;}\n            100%  {opacity: 1;}\n          }\n\n          @keyframes elongating${localId} {\n            0%  { width: calc(${actualDistanceInUnits}em + ${actualDistanceInUnits} * 4px - 20px); }\n            100%  {width: calc(${actualDistanceInUnits}em + ${actualDistanceInUnits} * 4px - 20px); }\n          }\n\n          @keyframes swiping${localId} {\n            0%  {transform: rotate(${angle + 90 -1}deg) translateX(${distanceWhereBeamBegins}px);}\n            50%  {transform: rotate(${angle + 90 + 1}deg) translateX(${distanceWhereBeamBegins}px);}\n            100%  {transform: rotate(${angle + 90 - 1}deg) translateX(${distanceWhereBeamBegins}px);}\n          }\n\n          .${className} {\n            width: ${actualDistanceInUnits}em;\n            height: 3px;\n            border-radius: 5px;\n            background: #F00;\n            position: absolute;\n            top: 0.5em;\n            left: 0.5em;\n            transform: rotate(${angle + 90}deg);/* overriden by swiping keyframes */\n            transform-origin: left 0px;\n            animation: pulsing${localId} 0.1s ease infinite,\n            elongating${localId} 0.7s ease alternate infinite,\n            swiping${localId} 1s ease alternate infinite;\n            box-shadow: 0 0 5px 5px white;\n            z-index: 10;\n          }\n          `;\n        projectiles.push(\n          <div key={className} className={className}>\n            {projectile}\n          </div>\n        );\n      } else {\n        customStyle = `\n          @keyframes shooting${localId} {\n            0%   {transform: translate(0,0) rotate(${angle}deg) scaleY(0.3)}\n            100% {transform: translate(\n              ${36 * (targetCoords.x - entity.position.x)}px,\n              ${36 * (targetCoords.y - entity.position.y)}px\n            ) rotate(${angle}deg) scaleY(2)}\n          }\n          `;\n\n        while (projectileNumber--) {\n          customStyle += `\n          .projectile${localId}_${projectileNumber} {\n            transform: rotate(${angle}deg);\n            animation: shooting${localId} 0.8s linear infinite;\n            animation-delay: ${projectileNumber - 1 * 0.3}s;\n          }`;\n        }\n        let projectile = entity.isShooting ? \"|\" : \"\";\n\n        projectileNumber = 3;\n\n        while (projectileNumber--) {\n          let className = `projectile projectile${localId}_${projectileNumber}`;\n          projectiles.push(\n            <div key={className} className={className}>\n              {projectile}\n            </div>\n          );\n        }\n      }\n    }\n  }\n  let finalClassName = `shooting-visualization fading-after-1s-for-${uniqueShootingAnimationId}`;\n  return (\n    <div className={finalClassName}>\n      <style>{customStyle + commonStyles}</style>\n      {projectiles}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { HudPanel, Grid, Controls } from \"components\";\nimport \"./BlastZone.scss\";\n\ninterface BlastZoneState {\n  gridX: number,\n  gridY: number,\n}\nexport class BlastZone extends React.Component<void, BlastZoneState> {\n  constructor(props: void) {\n    super(props);\n    this.state = {\n      gridX: 0,\n      gridY: 0,\n    }\n  }\n  componentDidMount() {\n  }\n\n  onControlPress(key) {\n    let deltaX = 0;\n    let deltaY = 0;\n    switch(key) {\n      case \"w\":\n        deltaY = -1;\n        break;\n      case \"s\":\n        deltaY = 1;\n        break;\n\n      case \"a\":\n        deltaX = -1;\n        break;\n      case \"d\":\n        deltaX = 1;\n        break;\n    }\n\n    console.log(key);\n    this.setState(prevState => {\n      return {\n        gridX: prevState.gridX + deltaX,\n        gridY: prevState.gridY + deltaY\n      };\n    })\n  }\n\n  render() {\n\n    const controls = <Controls\n      keys={['W', 'S', 'A', 'D']}\n      onKeyPress={(e) => this.onControlPress(e)}\n      ></Controls>\n    const console = <></>;\n    const statusIndicators = <></>;\n\n    return <div className=\"blast-zone\">\n      <div className=\"top-row\">\n        <HudPanel title=\"Controls\">\n          {controls}\n        </HudPanel>\n        <HudPanel title=\"Console\">\n          {console}\n        </HudPanel>\n        <HudPanel title=\"Status Indicators\">\n          {statusIndicators}\n        </HudPanel>\n      </div>\n      <div className=\"mid-row\">\n        <HudPanel title=\"Tactical Grid\">\n          <Grid width={100} height={100} startAt={[this.state.gridX,this.state.gridY]}></Grid>\n        </HudPanel>\n      </div>\n\n      <div className=\"bottom-row\">\n        <HudPanel title=\"OhWell\">\n          <span>:)</span>\n        </HudPanel>\n      </div>\n    </div>;\n  }\n}","import React from \"react\";\nimport { Game } from \"./components\";\nimport { BlastZone }  from \"screens/BlastZone\";\nimport \"App.scss\";\n\ninterface AppState {\n  loadedScene: string\n}\nexport default class App extends React.Component<void, AppState> {\n\n  scenes:{} = {\n    BlastZone,\n    Game,\n  }\n  SelectedScene = null;\n  constructor(props: void) {\n    super(props);\n    this.state = {\n      loadedScene: 'Game'\n    }\n  }\n  componentDidMount() {\n  }\n\n  handleChange = (e) => {\n    // e.target.value;\n    console.log(e)\n    console.log(e.target)\n    console.log(e.target.value)\n    const sceneToLoad = e.target.value;\n    this.setState(prevState => {return {loadedScene: sceneToLoad}});\n  }\n\n  render() {\n    let SelectedScene = this.scenes[this.state.loadedScene];\n    return <div className=\"app\">\n\n      <div className=\"meta-bar\">\n\n        <div className=\"app-name\">\n          <span className=\"be\">B</span>lood and <span className=\"be\">B</span>u<span className=\"el\">ll</span>ets\n        </div>\n\n        <div className=\"screen-switch\">\n          <span>Select screen: </span>\n          <select value={this.state.loadedScene} onChange={(e)=>this.handleChange(e)}>\n            <option value=\"BlastZone\">BlastZone</option>\n            <option value=\"Game\">Game</option>\n          </select>\n        </div>\n\n      </div>\n\n      <SelectedScene/>\n\n    </div>\n  }\n}","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./style.scss\";\n\n// Rendering the top-level Game component\n// render(<Game />, document.getElementById(\"root\"));\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}