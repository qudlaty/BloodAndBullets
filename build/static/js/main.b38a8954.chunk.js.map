{"version":3,"sources":["components/Game/Game.module.scss","components/Board/Board.module.scss","helpers/Helpers.ts","components/Board/Board.tsx","components/EntityCard/EntityCard.tsx","components/EntitiesList/EntitiesList.tsx","services/EntitiesService/EntityFeatures.ts","services/EntitiesService/EntityClass.ts","services/SquaresService/SquareClass.ts","services/SquaresService/SquaresService.ts","services/EntitiesService/EntitiesService.ts","services/ItemService/ItemClasses.ts","services/MessageService/MessageService.ts","resources/ItemDefinitions.ts","resources/CharacterDefinitions.ts","services/GameModelService/GameModelService.ts","services/GameLogicService/GameLogicService.ts","services/GameActionsService/GameActionsService.tsx","components/EntityPawn/EntityPawn.tsx","resources/StructureDefinitions.ts","components/Game/TargetedSquareInfo.tsx","components/Game/SelectedEntityInfo.tsx","components/Game/Game.tsx","components/Square/Blood.tsx","components/Square/Items.tsx","components/Square/Square.tsx","components/LinearDisplay/LinearDisplay.tsx","components/HudPanel/HudPanel.tsx","components/Grid/Cell.tsx","components/Grid/Grid.tsx","components/Controls/Controls.tsx","components/MessageBox/MessageBox.tsx","components/InventoryItem/InventoryItem.tsx","components/InventoryList/InventoryList.tsx","components/HpBar/HpBar.tsx","components/ShootingVisualization/ShootingVisualization.tsx","screens/BlastZone/BlastZone.tsx","App.tsx","index.js"],"names":["module","exports","resetGivenFieldsOnACollection","collection","fieldNames","forEach","item","fieldName","undefined","getNumberWithinBoundaries","value","min","max","getRandomIntInclusive","Math","floor","random","calculateAngle","x","y","angle","atan","PI","calculateDistance","sqrt","pow","isSelectedTargeted","selected","targeted","entity","name","turnFlagsIntoClasses","flags","classNameBase","flagsToClassess","active","isAvailableDestination","isChosenDestination","isBreathing","isDead","isShooting","isTargeted","isLit","isInTwilightZone","className","Object","keys","key","getCssClassesForAGivenSquare","square","squareClassName","squareType","derivedCtor","Board","handleClick","i","console","log","props","onClick","EntityPawns","entities","map","BoardSquares","colId","cellId","rowId","Array","size","fill","row","number","cells","cell","renderSquare","styles","this","squares","squareId","Helpers","blood","items","itemsNumber","length","board","isRotated","style","React","Component","EntityCard","renderCount","handleInventoryClick","itemName","onInventoryClick","onDrop","equipment","hands","unEquipFromHands","takeFromInventory","addItem","processInterface","onReload","isFriendly","inHands","inHandsArray","title","position","icon","clear","display","textAlign","label","current","hp","maxHp","inventory","Identifiable","Positionable","SquaresService","getSquareFromPosition","Movable","moveDestination","squareIndex","setMoveDestinationPosition","getSquarePositionFromIndex","targetPosition","targetSquare","MessageService","send","Mortal","isAlive","Bleedable","bleeding","bleedingReductionPerTurn","bloodReleased","bleed","addBloodToSquare","Breathing","isSupposedToBeBreathing","Combative","ceaseFire","hasWeapon","targetedSquarePosition","HavingInventory","actualItemIndex","findIndex","splice","push","Entity","assign","Weapon","addToInventory","baseCtor","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","Square","arenaSize","initializeSquareAtIndexIfEmpty","getSquareIndexFromPosition","setEntityWithinASquareAtPosition","amount","j","setSquareValueAtPosition","EntitiesService","id","filter","getEntityId","oldPositionX","oldPositionY","newSquare","potentialTargetEntity","selectedInEntities","findEntityById","weapon","equippedWeapon","RangedWeapon","isAbleToFire","fire","rounds","damageApplied","checkAmmoAndCalculateDamageApplied","getEntitiesAtGivenPosition","targetEntity","applyDamageToTargetEntity","ceaseFireNextTickIfTargetIsKilled","damage","bleedExternally","chosenDestinationSquare","moveEntityIntoChosenDestination","moveEntityRandomly","causesBleeding","range","maxRounds","Rifle","type","Lazer","messages","message","M16","M40","L30","characterDefinitions","age","entry","GameModel","saveMap","squaresProcessedForSave","JSON","parse","stringify","squaresStringified","result","window","prompt","localStorage","loadMap","mapNames","squaresLoaded","loadMapIntoBoard","index","sourceSquare","loadEntities","loadBuiltInMap","tutorial_map_00","loadPredefinedEntitities","GameLogic","model","run","calculateNextInterfaceState","previousState","nextState","markAvailableDestinationsForSelectedEntity","syncSquaresWithEntities","array","concat","setEntityWithinApropriateSquare","deselectAllEntities","moveEntities","isEntityShootingProperly","fireAShot","stopBreathingForKilledEntity","enemiesAlive","calculateNumberOfAliveEnemies","amountOfAliveEnemies","component","GameActionsClassForGameComponent","that","toggleEditorMode","state","isEditorOn","setState","prevState","loop","stepNumber","drawAggro","processEntities","autoLoop","setTimeout","nextTick","handleClickV2","selectedSquareNumber","targetedSquareNumber","previousTargeted","doubleClick","markSquareAtIndexAsTargeted","setMoveDestinationSquare","selectEntityFromGivenSquare","attackPosition","aggro","actor","entitiesToAttack","findEntitiesThatAreClose","firstAmongThem","nuke","dmg","toggleRotateBoard","isBoardRotated","switchAutoLoop","entityId","actualEntity","equipInHands","handleDeselectAllEntities","calculateNextGameState","setSquaresAccordingToEntities","newlyFoundEntities","EntityPawn","randomTime","toFixed","classessFromFlags","fof","color","zIndex","animationBreathing","left","boardPadding","top","animation","ShootingVisualization","structures","box","redBarrel","TargetedSquareInfo","boxSerialNumber","onItemClick","squareNumber","targetedSquare","structureType","newStructure","entityInfo","distanceInfo","positionInfo","bloodInfo","availableActions","editorButtons","onAddStructureClick","GameStyles","button","distanceToSelected","onMoveClick","onAttackClick","targeted__label","SelectedEntityInfo","selected__label","GameActions","Game","renderCounter","squareSize","game","status","game__board","fontSize","game__info","actions","zoomIn","zoomOut","checked","onChange","PureComponent","Blood","bloodAmount","bloodNumbers","background","Items","itemsIcons","SquareComponent","classPrefix","cuboidFaces","cuboid","LinearDisplay","percentage","overload","progressStyle","width","divider","progressGridStyle","backgroundSize","backgroundImage","HudPanel","children","Cell","Grid","gridReference","scroll","mapdrag","stateDriven","createRef","deltaX","deltaY","executeScroll","rows","height","sourceY","startAt","currentRow","sourceX","currentCell","ref","onMouseDown","e","onMouseUp","onMouseMove","handleMove","onContextMenu","preventDefault","onDrag","onMouseDrag","scrollRelativeXY","movementX","movementY","event","target","onChangeScrollX","onChangeScrollY","switchStateDriven","renderGrid","Controls","w","s","a","d","document","addEventListener","onKeyDown","onKeyUp","keyCode","onKeyPress","MessageBox","messageNumber","renderMessage","RenderedMessages","requestAnimationFrame","element","getElementById","scrollTop","scrollHeight","scrollElement","InventoryItem","reloadButton","dropButton","ammoCounter","reload","InventoryList","inventoryItems","HpBar","backgroundColor","calcNewAangle","targetCoords","projectileNumber","projectiles","localId","customStyle","distanceToTargetXInUnits","distanceToTargetYInUnits","actualDistanceInUnits","weaponType","projectile","BlastZone","gridX","gridY","controls","onControlPress","statusIndicators","App","scenes","SelectedScene","loadedScene","handleChange","bind","sceneToLoad","render"],"mappings":"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","file":"static/js/main.b38a8954.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"Game_game__229bL\",\"game__board\":\"Game_game__board__1KMto\",\"game__info\":\"Game_game__info__3kjt8\",\"game__list\":\"Game_game__list__yMHF0\",\"status\":\"Game_status__21KP9\",\"button\":\"Game_button__1_Ze4\",\"button-nuke\":\"Game_button-nuke__xGjPs\",\"actions\":\"Game_actions__2-VcJ\",\"interaction-container\":\"Game_interaction-container__3RZ7s\",\"selected\":\"Game_selected__ZRNAo\",\"targeted\":\"Game_targeted__3gJqr\",\"selected__label\":\"Game_selected__label__2d30g\",\"targeted__label\":\"Game_targeted__label__328kg\",\"step-counter\":\"Game_step-counter__hrmzE\",\"auto-cycle\":\"Game_auto-cycle__1cp6W\",\"kbd-navigation\":\"Game_kbd-navigation__10pCT\",\"square\":\"Game_square__3r5qO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__1AthT\",\"board__row\":\"Board_board__row__1piKV\",\"board--rotated\":\"Board_board--rotated__be1H9\"};","import { Entity } from \"services/EntitiesService\";\nimport { Square } from \"services/SquaresService\";\n\n/** @description\n * Takes a collection and a list of strings describing object keys.\n * Sets all given fields on a collection to `undefined`\n */\nexport function resetGivenFieldsOnACollection(collection, ...fieldNames) {\n  collection.forEach((item) => {\n    fieldNames.forEach((fieldName) => {\n      item && (item[fieldName] = undefined);\n    });\n  });\n}\n\n/** @description Takes a number and fits it within given boundaries, then returns it */\nexport function getNumberWithinBoundaries(value: number, min: number, max: number): number {\n  if (value < min) value = min;\n  if (value > max) value = max;\n  return value;\n}\n\n/** @description Returns a random integer between min and max */\nexport function getRandomIntInclusive(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/** @description Returns angle (in degrees) of a given vector */\nexport function calculateAngle(x: number, y: number): number {\n  let angle: number;\n  if (y >= 0) {\n    angle = -Math.atan(x / y) * (180 / Math.PI);\n  } else if (y < 0) {\n    angle = (180 / Math.PI) * (Math.atan(x / -y) + Math.PI);\n  }\n  return angle;\n}\n\n/** @description Pitagorean distance between 0,0 and given coords */\nexport function calculateDistance(x: number, y: number): number {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n}\n\n/** @description Mixing classess together */\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  // see https://www.typescriptlang.org/docs/handbook/mixins.html\n  baseCtors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));\n    });\n  });\n}\n\n/** @description Checking if selected entity is on a targeted square */\nexport function isSelectedTargeted(selected: Entity, targeted: Square): boolean {\n  if (selected && targeted && targeted.entity && selected.name === targeted.entity.name) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * @description\n * Adding classess apropriate to the flags passed in by props\n * @param classNameBase - if given, it is added in front of the classname with \"--\"\n * Eg: classNameBase--class-from-flag\n */\nexport function turnFlagsIntoClasses(flags: object, classNameBase?: string) {\n  if(!flags) return '';\n  const flagsToClassess = {\n    active: \"active\",\n    isAvailableDestination: \"is-available-destination\",\n    isChosenDestination: \"is-chosen-destination\",\n    isBreathing: \"breathing\",\n    isDead: \"dead\",\n    isShooting: \"shooting\",\n    isTargeted: \"targeted\",\n    isLit: \"is-lit\",\n    isInTwilightZone: \"is-in-twilight-zone\",\n  };\n\n  let className = \"\";\n\n  if (classNameBase) {\n    classNameBase += \"--\";\n  } else {\n    classNameBase = \"\";\n  }\n\n  Object.keys(flagsToClassess).forEach((key) => {\n    if (flags[key]) {\n      className += ` ${classNameBase}${flagsToClassess[key]}`;\n    }\n  });\n  return className;\n}\n\n/**\n * @description\n * Creates a new array containing all the elements from a given array\n * @param array array to shallow-copy\n * @yields a new copy of the array\n */\nexport function newCopyOfArray(array: any[]) {\n  return [].concat(array);\n}\n\n/**\n * @description\n * Returns a string with set of CSS classes\n * based on the flags found in the given square.\n * @param square a square to style\n * @yields string with all classess applicable for the given square\n */\nexport function getCssClassesForAGivenSquare(square: Square): string {\n  if(!square) return;\n  let squareClassNameBase = \"square\";\n  let squareClassName = `${squareClassNameBase} ${square && square.squareType}`;\n  squareClassName += turnFlagsIntoClasses(square, squareClassNameBase);\n  if (square.entity) {\n    squareClassName += turnFlagsIntoClasses(square.entity, squareClassNameBase);\n  }\n  return squareClassName;\n}\n","import React, { ReactElement } from \"react\";\nimport { SquareComponent, EntityPawn } from \"components\";\nimport { Entity, Square } from \"services\";\nimport * as Helpers from \"helpers\";\n\nimport styles from \"./Board.module.scss\";\n\ninterface BoardProps {\n  onClick(i: number): void;\n  squares: Square[]; // updated every tick\n  entities: Entity[]; // updated every tick\n  size: number;\n  isRotated: boolean;\n  style: any;\n}\n/**\n * @description Board component renders Squares and EntityPawns\n */\nexport class Board extends React.Component<BoardProps> {\n  handleClick = (i: number) => {\n    console.log(\"Handles Click on Board\", i);\n    this.props.onClick(i);\n  };\n\n  renderSquare(i: number, rowId: number, colId: number) {\n    let square = this.props.squares[i];\n\n    return (\n      <SquareComponent // is a pureComponent\n        key={`r${rowId}_c${i}`}\n        squareId={i}\n        className={Helpers.getCssClassesForAGivenSquare(square)}\n        onClick={this.handleClick}\n        blood={square && square.blood} // number\n        items={square && square.items} // list of objects\n        itemsNumber={square && square.items && square.items.length}\n      ></SquareComponent>\n    );\n  }\n\n  EntityPawns = (): ReactElement[] => this.props.entities.map((entity) => <EntityPawn key={entity.name} entity={entity} />);\n\n  BoardSquares = () => {\n    let cellId: number = 0;\n    let rowId: number = 0;\n    let colId: number;\n\n    let rowsOfSquares = Array(this.props.size)\n      .fill(null)\n      .map((row, number) => {\n        colId = 0;\n        let cells = Array(this.props.size)\n          .fill(null)\n          .map((cell, number) => {\n            return this.renderSquare(cellId++, rowId, colId++);\n          });\n        return (\n          <div key={rowId++} className={styles[\"board__row\"]}>\n            {cells}\n          </div>\n        );\n      });\n\n    return rowsOfSquares;\n  }; // Board Squares\n\n  render() {\n    let className: string = styles.board;\n    if (this.props.isRotated) {\n      className += ` ${styles[\"board--rotated\"]} board--rotated`;\n    }\n    return (\n      <div className={className} style={this.props.style}>\n        {this.BoardSquares()}\n        {this.EntityPawns()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { LinearDisplay, InventoryList } from \"components\";\nimport { Entity, Item } from \"services\";\n\nimport \"./EntityCard.scss\";\n\ninterface EntityCardProps {\n  entity: Entity;\n  onInventoryClick?(entity: Entity, itemName: string);\n  processInterface?: Function;\n}\n\nexport class EntityCard extends React.Component<EntityCardProps> {\n  renderCount = 0;\n  handleInventoryClick = (itemName: string): void => {\n    this.props.onInventoryClick(this.props.entity, itemName);\n  };\n\n  onDrop = (itemName: string) => {\n    let { entity } = this.props;\n    if (entity.equipment.hands && entity.equipment.hands.name === itemName) {\n      entity.unEquipFromHands();\n      entity.isShooting = false;\n    }\n    let item: Item = entity.takeFromInventory(itemName);\n    entity.square.addItem(item);\n    this.props.processInterface();\n  };\n\n  onReload = (itemName: string) => {\n    let { entity } = this.props;\n    if (entity.equipment.hands && entity.equipment.hands.name === itemName) {\n      entity.isShooting = false;\n    }\n    this.props.processInterface();\n  };\n\n  render() {\n    let { entity } = this.props;\n    if (!entity) return null;\n    // FIXME: Below should be separated into several sub-components\n    // Each sub-component should receive flat data (position, hp, ...)\n\n    let className = \"entity-card\";\n    if (entity.active) {\n      className += \" entity-card--active\";\n    }\n\n    if (entity.isFriendly) {\n      className += \" entity-card--friendly\";\n    }\n\n    if (entity.isDead) {\n      className += \" entity-card--dead\";\n    }\n\n    let inHands = entity.equipment && entity.equipment.hands;\n    let inHandsArray = inHands && [inHands];\n\n    return (\n      <div className={className}>\n        <div>\n          <div className=\"entity-card__position\" title=\"Position\">\n            <span>\n              {\" \"}\n              {entity.position.x} {entity.position.y}{\" \"}\n            </span>\n          </div>\n\n          <div className=\"entity-card__portrait\">{entity.icon}</div>\n        </div>\n        <strong title=\"Name\">{entity.name}</strong>\n        <br />\n        <div\n          style={{\n            clear: \"both\",\n            display: \"inline-block\",\n            textAlign: \"right\",\n          }}\n        >\n          <LinearDisplay label=\"HP\" current={entity.hp} max={entity.maxHp} />\n          <br />\n        </div>\n        <InventoryList\n          label=\"Equipped\"\n          title=\"In hands\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          onReload={this.onReload}\n          inventory={inHandsArray}\n          processInterface={() => this.props.processInterface()}\n        />\n        <InventoryList\n          label=\"Inventory\"\n          title=\"In backpack\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          onReload={this.onReload}\n          inventory={entity.inventory}\n          processInterface={() => this.props.processInterface()}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { EntityCard } from \"components\";\nimport { Entity } from \"services\";\n\nimport \"./EntitiesList.scss\";\n\n\ninterface ListOfEntitiesProps {\n  entities: Entity[];\n  onInventoryClick: any;\n  processInterface: Function;\n}\n\nexport default class ListOfEntities extends React.Component<ListOfEntitiesProps> {\n  render() {\n    let entitiesFriendly = this.props.entities\n      .filter((entity) => entity.isFriendly)\n      .map((obj) => {\n        return (\n          <EntityCard\n            key={obj.name}\n            entity={obj}\n            onInventoryClick={this.props.onInventoryClick}\n            processInterface={() => this.props.processInterface()}\n          />\n        );\n      });\n\n    let entitiesUnfriendly = this.props.entities\n      .filter((entity) => !entity.isFriendly)\n      .map((obj) => {\n        return <EntityCard key={obj.name} entity={obj} processInterface={() => this.props.processInterface()} />;\n      });\n\n    return (\n      <>\n        <h4 className=\"entities-list__header\">List of Entities:</h4>\n        <div className=\"entities-list\">{entitiesFriendly}</div>\n        <div className=\"entities-list\">{entitiesUnfriendly}</div>\n      </>\n    );\n  }\n}\n","import { Item, Weapon, Square } from \"services\";\nimport { SquaresService, MessageService } from \"services\";\nimport * as Helpers from \"helpers\";\n\n/** Position on a grid */\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport class Identifiable {\n  name: string = \"An Entity\";\n  icon: string = \"E\";\n}\n\nexport class Positionable {\n  position: Position = { x: undefined, y: undefined };\n\n  get square(): Square {\n    let square: Square = SquaresService.getSquareFromPosition(this.position.x, this.position.y);\n    return square;\n  }\n}\n\nexport class Movable extends Identifiable {\n  moveDestination: Position;\n\n  setMoveDestinationSquare(squareIndex: number) {\n    this.setMoveDestinationPosition(SquaresService.getSquarePositionFromIndex(squareIndex));\n  }\n\n  setMoveDestinationPosition(targetPosition: Position) {\n    let targetSquare: Square = SquaresService.getSquareFromPosition(targetPosition.x, targetPosition.y);\n    if (!targetSquare.entity || targetSquare.entity.isDead) {\n      this.moveDestination = targetPosition;\n      Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\");\n      targetSquare.isChosenDestination = true;\n    } else {\n      MessageService.send(`${this.name} can't move into square (${targetPosition.x}, ${targetPosition.y})`);\n    }\n  }\n}\n\nexport class Mortal extends Positionable {\n  hp: number = 100;\n  maxHp: number = 100;\n  get isDead(): boolean {\n    return !this.isAlive;\n  }\n  get isAlive(): boolean {\n    return this.hp > 0;\n  }\n}\n\nexport class Bleedable extends Mortal {\n  bleeding: number;\n  bleedingReductionPerTurn: number = 1;\n  bleed(): number {\n    let entity = this;\n    let bloodReleased = 0;\n    if (entity.bleeding && entity.isAlive) {\n      bloodReleased = entity.bleeding;\n      entity.hp -= bloodReleased;\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n    }\n    return bloodReleased;\n  }\n\n  bleedExternally() {\n    if (!this.bleeding) return;\n    let entity = this;\n    let bloodReleased = this.bleed();\n    let square: Square = SquaresService.getSquareFromPosition(entity.position.x, entity.position.y);\n    SquaresService.addBloodToSquare(square, bloodReleased);\n  }\n}\n\nexport class Breathing extends Mortal {\n  isSupposedToBeBreathing: boolean = undefined;\n  get isBreathing(): boolean {\n    return this.isAlive && this.isSupposedToBeBreathing;\n  }\n  set isBreathing(value: boolean) {\n    this.isSupposedToBeBreathing = value;\n  }\n}\n\nexport class Combative extends Identifiable {\n  targetPosition: Position;\n  isShooting?: boolean;\n  ceaseFire?: boolean;\n  hasWeapon?: boolean;\n  attackPosition(targetedSquarePosition: Position) {\n    if (this.hasWeapon) {\n      this.targetPosition = targetedSquarePosition;\n      this.isShooting = true;\n    } else {\n      MessageService.send(`${this.name} can't shoot - no weapon equipped`);\n    }\n  }\n}\n\nexport class HavingInventory extends Identifiable {\n  inventory: Item[];\n  takeFromInventory(itemName: string): Item {\n    let actualItemIndex: number = this.inventory.findIndex((item) => item.name === itemName);\n    let actualItem: Item = this.inventory.splice(actualItemIndex, 1)[0];\n\n    return actualItem;\n  }\n  addToInventory(item: Item) {\n    if (!this.inventory) {\n      this.inventory = [];\n    }\n    this.inventory.push(item);\n  }\n}\n\nexport class HavingEquipment extends HavingInventory {\n  equipment: {hands: Item};\n  hasWeapon?: boolean;\n\n  equipInHands(itemName: string) {\n    this.unEquipFromHands();\n    let item: Item = this.takeFromInventory(itemName);\n    this.equipment.hands = item;\n    if (item instanceof Weapon) {\n      this.hasWeapon = true;\n    } else {\n      this.hasWeapon = false;\n    }\n  }\n\n  unEquipFromHands() {\n    if (this.equipment.hands) {\n      this.addToInventory(this.equipment.hands);\n      this.equipment.hands = null;\n      this.hasWeapon = false;\n    }\n  }\n}\n","import { applyMixins } from \"helpers\";\nimport {\n  Identifiable,\n  Positionable,\n  Mortal,\n  Bleedable,\n  Movable,\n  Breathing,\n  Combative,\n  HavingInventory,\n  HavingEquipment,\n} from \".\";\n\n/**\n * @description The base class for Entities on the board\n */\nexport class Entity {\n  // Extended by mixins below\n  constructor(...props) {\n    Object.assign(this, ...props);\n  }\n  isFriendly?: boolean;\n  active?: boolean;\n}\n\n/************************************************************/\n/* Always update both lists */\n\nexport interface Entity\n  extends Identifiable,\n    Positionable,\n    Mortal,\n    Bleedable,\n    Movable,\n    Breathing,\n    Combative,\n    HavingInventory,\n    HavingEquipment {}\napplyMixins(Entity, [\n  Identifiable,\n  Positionable,\n  Mortal,\n  Bleedable,\n  Movable,\n  Breathing,\n  Combative,\n  HavingInventory,\n  HavingEquipment,\n]);\n\n/************************************************************/\n","import { Item } from \"services/ItemService\";\nimport { Entity, HavingInventory, Identifiable } from \"services/EntitiesService\";\n\nexport interface Square {\n  entity?: Entity;\n  blood?: number;\n  squareType: string;\n  isAvailableDestination?: boolean;\n  isChosenDestination?: boolean;\n  isTargeted?: boolean;\n  isLit?: boolean;\n  isInTwilightZone?: boolean;\n  addItem(item: Item): void;\n}\n\nexport class Square extends HavingInventory implements Square {\n  public squareType: string = \"nothing\";\n  addItem(item: Item) {\n    this.addToInventory(item);\n  }\n  get items() {\n    return this.inventory;\n  }\n}\n","import * as Helpers from \"helpers\";\nimport { Square } from \"./SquareClass\";\nimport { Entity, Position } from \"services/EntitiesService\";\n\nclass SquaresServiceClass {\n  arenaSize: number = 10; // TODO: This should be defined ELSEWHERE\n\n  squares: Square[] = [];\n\n  constructor() {\n    let i = this.arenaSize * this.arenaSize;\n    while (i-- !== 0) {\n      this.initializeSquareAtIndexIfEmpty(i);\n    }\n  }\n\n  getSquareFromPosition(x: number, y: number): Square {\n    return this.squares[this.getSquareIndexFromPosition(x, y)];\n  }\n\n  setSquareValueAtPosition(x: number, y: number, value): void {\n    this.squares[this.getSquareIndexFromPosition(x, y)] = value;\n  }\n\n  getSquareIndexFromPosition(x: number, y: number): number {\n    return y * this.arenaSize + x;\n  }\n\n  getSquarePositionFromIndex(squareIndex: number): Position {\n    let x: number, y: number;\n    y = Math.floor(squareIndex / this.arenaSize);\n    x = squareIndex % this.arenaSize;\n    return { x, y };\n  }\n\n  setEntityWithinApropriateSquare(entity: Entity): void {\n    this.setEntityWithinASquareAtPosition(entity.position.x, entity.position.y, entity);\n  }\n\n  setEntityWithinASquareAtPosition(x: number, y: number, entity: Entity) {\n    let squareIndex: number = this.getSquareIndexFromPosition(x, y);\n    this.initializeSquareAtIndexIfEmpty(squareIndex);\n    this.squares[squareIndex].entity = entity;\n  }\n\n  addBloodToSquare(square: Square, amount: number) {\n    if (!square.blood) {\n      square.blood = amount;\n    } else {\n      square.blood += amount;\n    }\n  }\n\n  markSquareAtIndexAsTargeted(squareIndex: number): void {\n    Helpers.resetGivenFieldsOnACollection(this.squares, \"isTargeted\");\n    this.initializeSquareAtIndexIfEmpty(squareIndex);\n    this.squares[squareIndex].isTargeted = true;\n  }\n\n  initializeSquareAtIndexIfEmpty(squareIndex: number) {\n    if (!this.squares[squareIndex]) {\n      this.squares[squareIndex] = new Square();\n    }\n  }\n\n  markAvailableDestinationsForSelectedEntity(entity: Entity): void {\n    if (entity.active) {\n      let { x, y } = entity.position;\n\n      Helpers.resetGivenFieldsOnACollection(this.squares, \"isAvailableDestination\");\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize || (i === x && j === y)) {\n            continue;\n          }\n\n          let square: Square = this.getSquareFromPosition(i, j);\n          if (square.squareType === \"floor\") {\n            square.isAvailableDestination = true;\n          }\n\n          this.setSquareValueAtPosition(i, j, square);\n        }\n      }\n    }\n  }\n  lightAllSquares(): void {\n    this.squares.forEach((square) => (square.isLit = true));\n  }\n  castLightsFromFriendlyEntity(entity: Entity): void {\n    if (entity.isFriendly) {\n      let { x, y } = entity.position;\n\n      for (let j = y - 2; j <= y + 2; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 2; i <= x + 2; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquareFromPosition(i, j);\n\n          square.isInTwilightZone = true;\n          this.setSquareValueAtPosition(i, j, square);\n        }\n      }\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquareFromPosition(i, j);\n\n          square.isLit = true;\n          this.setSquareValueAtPosition(i, j, square);\n        }\n      }\n    }\n  }\n}\n\nexport const SquaresService = new SquaresServiceClass();\n","import { Entity, Position, HavingInventory } from \".\";\nimport { SquaresService, Square } from \"services/SquaresService\";\nimport * as Helpers from \"helpers\";\nimport { RangedWeapon } from \"services\";\nimport { Identifiable } from \"./EntityFeatures\";\nimport { Item } from \"services/ItemService\";\nconst arenaSize: number = 10;\n\n/**\n * @description Set of functions to interact with Entities\n */\nclass EntitiesServiceClass {\n  entities: Entity[];\n  selected: Entity;\n\n  getEntityId(entity: Identifiable): string {\n    return entity.name;\n  }\n\n  findEntityById(id: string): Entity {\n    let result: Entity = this.entities.filter(entity => this.getEntityId(entity) === id)[0];\n    return result;\n  }\n\n  findItemOnEntity(entity: HavingInventory, id: string) {\n    let result = entity.inventory.filter(item => this.getEntityId(entity) === id)[0];\n    return result;\n  }\n\n  moveEntityRandomly(entity: Entity) {\n    if (entity.isDead) return;\n\n    let oldPositionX = entity.position.x;\n    let oldPositionY = entity.position.y;\n\n    entity.position.x = entity.position.x + Helpers.getRandomIntInclusive(-1, 1);\n    entity.position.y = entity.position.y + Helpers.getRandomIntInclusive(-1, 1);\n\n    entity.position.x = Helpers.getNumberWithinBoundaries(entity.position.x, 0, arenaSize - 1);\n    entity.position.y = Helpers.getNumberWithinBoundaries(entity.position.y, 0, arenaSize - 1);\n\n    let newSquare = SquaresService.getSquareFromPosition(entity.position.x, entity.position.y);\n\n    if ((newSquare && newSquare.entity) || (newSquare && newSquare.squareType !== \"floor\")) {\n      // if square occupiec, reverse the move\n      entity.position.x = oldPositionX;\n      entity.position.y = oldPositionY;\n    }\n  }\n\n  stopBreathingForKilledEntity(entity: Entity): Entity {\n    if (entity.isDead) {\n      entity.isBreathing = false;\n      entity.isShooting = false;\n      entity.hp = 0;\n    }\n    return entity;\n  }\n\n  getEntitiesAtGivenPosition(targetPosition: Position): Entity[] {\n    return this.entities.filter((potentialTargetEntity: Entity): boolean => {\n      return (\n        potentialTargetEntity.position.x === targetPosition.x &&\n        potentialTargetEntity.position.y === targetPosition.y\n      );\n    });\n  }\n\n  selectEntityFromGivenSquare(selected: Entity, targeted: Square): Entity {\n    if (selected && targeted && targeted.entity) {\n      selected.active = false;\n    }\n    if (targeted && targeted.entity) {\n      selected = targeted.entity;\n      selected.active = true;\n    }\n\n    return selected;\n  }\n\n  setSelected(selected: Entity, value: boolean): Entity {\n    let selectedInEntities = this.findEntityById(this.getEntityId(selected));\n    if (value) {\n      selected.active = value;\n    } else {\n      selected = null;\n      console.log(\"Nullified:\", selected);\n    }\n    selectedInEntities.active = value;\n    return selected;\n  }\n\n  checkAmmoAndCalculateDamageApplied(entity: Entity): number {\n    let damageApplied: number = 0;\n    let weapon: RangedWeapon = undefined;\n    let equippedWeapon: Item = entity.equipment && entity.equipment.hands;\n    if(!(equippedWeapon instanceof RangedWeapon)){\n      return 0;\n    } else {\n      weapon = equippedWeapon;\n    }\n\n    if (weapon.isAbleToFire) {\n      damageApplied = weapon.fire();\n    } else {\n      weapon.rounds = \"empty\";\n      entity.isShooting = false;\n      return 0;\n    }\n\n    return damageApplied;\n  }\n\n  fireAShot(entity: Entity) {\n    if (entity.ceaseFire) {\n      entity.isShooting = false;\n      entity.ceaseFire = false;\n      return;\n    }\n    let damageApplied = this.checkAmmoAndCalculateDamageApplied(entity);\n    let targetEntities = this.getEntitiesAtGivenPosition(entity.targetPosition);\n    targetEntities.forEach((targetEntity) => {\n      this.applyDamageToTargetEntity(targetEntity, damageApplied);\n      this.ceaseFireNextTickIfTargetIsKilled(entity, targetEntity);\n    });\n  }\n\n  applyDamageToTargetEntity(targetEntity: Entity, damage: number) {\n    if (damage) {\n      targetEntity.hp -= damage; // TODO: This should go through a method to calc armor in\n      targetEntity.bleeding = 5; // TODO: This should be defined elsewhere (on a weapon)\n    }\n  }\n\n  ceaseFireNextTickIfTargetIsKilled(entity: Entity, targetEntity: Entity): void {\n    if (targetEntity.isDead) {\n      entity.ceaseFire = true;\n    }\n  }\n\n  isEntityShootingProperly(entity: Entity): boolean {\n    return (\n      entity.isShooting &&\n      entity.targetPosition &&\n      (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\n    );\n  }\n\n  applyEffectsOfBleeding(entity: Entity): Entity {\n    // TODO: move to a \"bleed\" method\n    entity.bleedExternally();\n    return entity;\n  }\n\n  moveEntityIntoChosenDestination(entity: Entity): Entity {\n    if (!entity.isDead && entity.moveDestination) {\n      let chosenDestinationSquare: Square = SquaresService.getSquareFromPosition(\n        entity.moveDestination.x,\n        entity.moveDestination.y\n      );\n\n      entity.position = entity.moveDestination;\n      delete entity.moveDestination;\n      chosenDestinationSquare.isChosenDestination = undefined;\n    }\n    return entity;\n  }\n\n  setMoveDestinationOnASelectedEntity(selected: Entity, targetedSquarePosition: Position): void {\n    selected.moveDestination = targetedSquarePosition;\n  }\n\n  moveEntities(): void {\n    this.entities.forEach((entity) => this.moveEntityIntoChosenDestination(entity));\n    // let OP: Entity = this.findEntityById(\"Squid\");\n    // let OC: Entity = this.findEntityById(\"Octo\");\n    // //this.moveEntityRandomly(JR);\n    // this.moveEntityRandomly(OP);\n    // this.moveEntityRandomly(OC);\n    this.entities.filter(entity => !entity.isFriendly).forEach((entity) => {\n      this.moveEntityRandomly(entity);\n    });\n  }\n}\n\nexport const EntitiesService = new EntitiesServiceClass();\n","export class Item {\n  name: string = \"\";\n}\n\nexport class Weapon extends Item {\n  causesBleeding = 0;\n  range = 0;\n  damage = 0;\n}\n\nexport class RangedWeapon extends Weapon {\n  rounds: number | any = 0;\n  maxRounds = 5;\n\n  fire() {\n    this.rounds--;\n    console.log(\"Firing ranged weapon. Damage: \", this.damage);\n    return this.damage;\n  }\n\n  get isAbleToFire() {\n    return this.rounds > 0;\n  }\n\n  reload() {\n    this.rounds = this.maxRounds;\n  }\n}\n\n// TODO: Should add kinetic/thermal damage\nexport class Rifle extends RangedWeapon {\n  type = \"projectile\";\n  range = 4;\n  damage = 1;\n  causesBleeding = 2;\n}\n\nexport class Lazer extends RangedWeapon {\n  type = \"lazer\";\n  range = 6;\n  damage = 5;\n  causesBleeding = 0;\n}\n","export class MessageServiceClass {\r\n  messages: string[] = [];\r\n  send(message: string) {\r\n    this.messages.push(message);\r\n  }\r\n}\r\n\r\nexport const MessageService = new MessageServiceClass();\r\n","import { Rifle, Lazer } from \"services\";\n\nexport class M16 extends Rifle {\n  name = \"M16\";\n  rounds = 15;\n  maxRounds = 20;\n  damage = 2;\n}\n\nexport class M40 extends Rifle {\n  name = \"M41A Pulse Rifle\";\n  rounds = 40;\n  maxRounds = 40;\n  damage = 1;\n}\n\nexport class L30 extends Lazer {\n  name = \"Assault Lazer Cannon\";\n  rounds = 30;\n  maxRounds = 30;\n  damage = 3;\n}\n","import { M16, M40, L30 } from \"./ItemDefinitions\";\nimport { Entity } from \"services\";\n\nexport const entitiesInitialValues = [\n  {\n    name: \"Lazer Blady\",\n    age: 60,\n    hp: 75,\n    maxHp: 100,\n    icon: \"🧑🏻\",\n    isBreathing: true,\n    isFriendly: true,\n    hasWeapon: true,\n    position: { x: 4, y: 8 },\n    inventory: [new M16()],\n    equipment: {hands: new L30()},\n  },\n  {\n    name: \"Robot\",\n    age: 1,\n    hp: 50,\n    maxHp: 50,\n    icon: \"🤖\",\n    isBreathing: false,\n    position: { x: 3, y: 5 },\n    equipment: {hands: new L30()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Octo\",\n    age: 8,\n    hp: 200,\n    maxHp: 200,\n    icon: \"🐙\",\n    isBreathing: true,\n    position: { x: 8, y: 2 },\n    bleedingReductionPerTurn: 0,\n    bleeding: 1,\n    equipment: {hands: new L30()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Squid\",\n    age: 5,\n    hp: 100,\n    maxHp: 100,\n    icon: \"🦑\",\n    isBreathing: true,\n    position: { x: 5, y: 5 },\n    equipment: {hands: new M40()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Ant\",\n    age: 1,\n    hp: 45,\n    maxHp: 50,\n    icon: \"🐜\",\n    isBreathing: true,\n    position: { x: 7, y: 6 },\n    equipment: {hands: new M40()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Henry The Spider\",\n    age: 1,\n    hp: 100,\n    maxHp: 150,\n    icon: \"🕷️\",\n    isBreathing: true,\n    position: { x: 9, y: 3 },\n    bleedingReductionPerTurn: 1,\n    equipment: {hands: new L30()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Mosquito\",\n    age: 1,\n    hp: 12,\n    maxHp: 20,\n    icon: \"🦟\",\n    isBreathing: true,\n    position: { x: 2, y: 7 },\n    equipment: {hands: new M16()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Microbe\",\n    age: 1,\n    hp: 1,\n    maxHp: 5,\n    icon: \"🦠\",\n    isBreathing: true,\n    position: { x: 1, y: 5 },\n    equipment: {hands: new L30()},\n    inventory: [],\n    hasWeapon: true,\n  },\n];\n\nexport const characterDefinitions = entitiesInitialValues.map((entry) => new Entity(entry));\nexport default characterDefinitions;\n","import { SquaresService, Square } from \"services/SquaresService\";\nimport { EntitiesService, Entity } from \"services/EntitiesService\";\n\nimport { characterDefinitions } from \"resources/CharacterDefinitions\";\nimport tutorial_map_00 from \"resources/maps/tutorial_map_00.json\"; // yes, it's a resource named with snake_case\n\n/**\n * @description Handles loading and saving of the map and entities\n */\nexport class GameModelClass {\n  entities;\n  squares;\n  selected;\n\n  constructor() {\n    this.entities = EntitiesService.entities;\n    this.squares = SquaresService.squares;\n  }\n\n  saveMap = () => {\n    let squares: Square[] = JSON.parse(JSON.stringify(SquaresService.squares));\n    let squaresProcessedForSave = squares.map((square) => {\n      //let newSquare = { squareType: square.squareType, entity: square.entity };\n\n      return square;\n    });\n    let squaresStringified = JSON.stringify(squaresProcessedForSave);\n    console.log(squaresStringified);\n    let message = \"Enter the name of saved map.\";\n    let mapName = \"map00\";\n\n    let result = window.prompt(message, mapName);\n\n    localStorage[result] = squaresStringified;\n  };\n\n  loadMap = () => {\n    let mapNames = Object.keys(localStorage);\n    let message = `Enter the name of map to load. ${mapNames}`;\n    let mapName = \"map00\";\n    let result = window.prompt(message, mapName);\n    let squaresStringified = localStorage[result];\n\n    console.log(squaresStringified);\n    let squaresLoaded = JSON.parse(squaresStringified);\n    this.loadMapIntoBoard(squaresLoaded);\n  };\n\n  loadMapIntoBoard = (squaresLoaded) => {\n    SquaresService.squares.forEach((square, index) => {\n      let targetSquare = square;\n      let sourceSquare = squaresLoaded[index];\n      targetSquare.squareType = (sourceSquare && sourceSquare.squareType) || 'floor';\n    });\n  };\n\n  loadEntities = (entities: Entity[]) => {\n    EntitiesService.entities = entities;\n  };\n\n  loadBuiltInMap = () => {\n    this.loadMapIntoBoard(tutorial_map_00);\n  };\n\n  loadPredefinedEntitities = () => {\n    this.loadEntities(characterDefinitions);\n  };\n}\n\nexport const GameModel = new GameModelClass();\n","import { GameModel, GameModelClass } from \"services/GameModelService\";\nimport { GameState } from \"./GameState\";\n\nimport { SquaresService, Square } from \"services/SquaresService\";\nimport { EntitiesService, Entity } from \"services/EntitiesService\";\nimport * as Helpers from \"helpers\";\n\n/**\n * @description Assorted methods required to run the game logic\n */\nclass GameLogicClass {\n  model: GameModelClass;\n\n  constructor() {\n    this.model = GameModel;\n  }\n\n  run = () => {\n    console.log(\"Running Game Logic\");\n    console.log(GameModel.entities);\n  };\n\n  calculateNextInterfaceState = (previousState: GameState) => {\n    let nextState = previousState;\n    let { entities, selected } = nextState;\n    entities.forEach((entity) => {\n      if (entity === selected) SquaresService.markAvailableDestinationsForSelectedEntity(selected);\n    });\n\n    return nextState;\n  };\n\n  /**\n   * Calculate WHAT EXACTLY? This should probably go into GameLogic\n   * @param previousState\n   */\n  calculateNextGameState(previousState: GameState) {\n    let nextState: GameState = previousState;\n    let { entities } = nextState;\n\n    EntitiesService.moveEntities();\n    //Helpers.resetGivenFieldsOnACollection(squares, \"isLit\", \"isInTwilightZone\");\n    //SquaresService.lightAllSquares();\n    entities.forEach((entity) => {\n      if (EntitiesService.isEntityShootingProperly(entity)) {\n        EntitiesService.fireAShot(entity);\n      }\n      entity.bleedExternally();\n\n      EntitiesService.stopBreathingForKilledEntity(entity);\n\n      SquaresService.markAvailableDestinationsForSelectedEntity(entity);\n      // SquaresService.castLightsFromFriendlyEntity(entity);\n    });\n\n    nextState.enemiesAlive = this.calculateNumberOfAliveEnemies(entities);\n    console.log(nextState.enemiesAlive);\n    return nextState;\n  }\n\n  calculateNumberOfAliveEnemies(entities: Entity[]):number {\n    let amountOfAliveEnemies = 0;\n    entities.forEach((entity) => {\n      if(entity.isFriendly) {\n        return;\n      } else if(entity.isAlive) {\n        amountOfAliveEnemies++;\n      }\n    });\n\n    return amountOfAliveEnemies;\n  }\n\n  syncSquaresWithEntities = (previousState) => {\n    let squares: Square[] = Helpers.newCopyOfArray(previousState.squares);\n    /*\n    Reattach new squares array to the SquaresService\n    This might actually be not-needed, as elements of that array are objects\n    and are referenced in both arrays, so unless we're adding new squares,\n    everything should work without re-attaching\n    */\n    SquaresService.squares = squares;\n    let entities: Entity[] = previousState.entities;\n    if (entities.length) {\n      Helpers.resetGivenFieldsOnACollection(squares, \"entity\");\n    }\n    entities.forEach((entity) => {\n      SquaresService.setEntityWithinApropriateSquare(entity);\n    });\n\n    return { squares };\n  };\n\n  deselectAllEntities = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"active\");\n    Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\", \"isAvailableDestination\");\n  };\n\n  ceaseFire = () => {\n    Helpers.resetGivenFieldsOnACollection(GameModel.entities, \"isShooting\");\n  };\n}\n\nexport const GameLogic = new GameLogicClass();\nexport default GameLogic;\n","/** This file contains most of the click-handling logic for the Game */\n/* Handling of particular events is delegated to proper services */\n\nimport * as Helpers from \"helpers\";\nimport { Entity, EntitiesService, SquaresService, GameLogic, Position } from \"services\";\n\nlet component = null;\n/**\n * @description Class with methods designed to operate on Game Component state.\n * @requires Game component to be passed to constructor.\n * @example let gameActions = new GameActionsClass(this);\n */\nexport class GameActionsClassForGameComponent {\n  constructor(that) {\n    component = that;\n  }\n  toggleEditorMode = () => {\n    if (!component.state.isEditorOn) {\n      Helpers.resetGivenFieldsOnACollection(component.state.squares, \"blood\", \"entity\");\n      component.setState((prevState) => {\n        return { entities: [], isEditorOn: true };\n      });\n    } else {\n      component.setState((prevState) => {\n        return { squares: SquaresService.squares, entities: EntitiesService.entities, isEditorOn: false };\n      });\n    }\n  };\n\n  loop = () => {\n    component.stepNumber++;\n    this.drawAggro();\n    this.processEntities();\n    if (component.state.autoLoop) {\n      setTimeout(this.loop, 1000);\n    }\n  };\n\n  processEntities() {\n    component.setState(\n      (prevState) => GameLogic.calculateNextGameState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  processInterface() {\n    component.setState(\n      (prevState) => GameLogic.calculateNextInterfaceState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  /** Sets entities within apropriate squares, based on the value of their `position` field\n   * This might actually be not-needed, if movement of entities is reflected in their respectable squares\n   * Also: entities are no longer rendered within `Square` component\n   */\n  setSquaresAccordingToEntities() {\n    component.setState((prevState) => GameLogic.syncSquaresWithEntities(prevState));\n  }\n\n  nextTick = () => {\n    component.setState({ autoLoop: false });\n    this.loop();\n  };\n\n  handleClickV2 = (squareIndex: number) => {\n    component.setState(\n      (state) => {\n        let { squares, entities, selected, targeted, isEditorOn, targetedSquareNumber: selectedSquareNumber } = state;\n        let previousTargeted = targeted;\n        targeted = squares[squareIndex];\n        selectedSquareNumber = squareIndex;\n        const doubleClick = () => previousTargeted === targeted;\n        SquaresService.markSquareAtIndexAsTargeted(squareIndex);\n\n        if (isEditorOn) {\n          switch (targeted.squareType) {\n            case \"floor\":\n              targeted.squareType = \"wall\";\n              break;\n            case \"wall\":\n              targeted.squareType = \"nothing\";\n              break;\n            case \"nothing\":\n            default:\n              targeted.squareType = \"floor\";\n          }\n        }\n\n        /** Setting move destination while clicking on empty square */\n        if (doubleClick() && targeted.isAvailableDestination) {\n          selected.setMoveDestinationSquare(squareIndex);\n        }\n\n        /** To be able to deselect */\n        if (doubleClick() || selected) {\n          if (!selected && targeted.entity) {\n            // Selecting\n            selected = EntitiesService.selectEntityFromGivenSquare(selected, targeted);\n            //targeted = undefined;\n          } else if (Helpers.isSelectedTargeted(selected, targeted)) {\n            // Deselecting if not selecting\n            /* // DISABLE DOUBLECLICK DESELECT\n            GameLogic.deselectAllEntities();\n            selected = undefined;\n            // */\n          }\n        }\n\n        // setting attack\n        if (doubleClick() && selected && targeted.entity && selected !== targeted.entity) {\n          selected.attackPosition(SquaresService.getSquarePositionFromIndex(squareIndex));\n        }\n\n        return { squares, entities, selected, targeted, targetedSquareNumber: selectedSquareNumber };\n      },\n      () => this.processInterface()\n    );\n  };\n\n  drawAggro() {\n    EntitiesService.entities.forEach((entity)=>{\n      if(entity.isFriendly) return;\n      entity.isShooting = false;\n      this.aggro(entity.name);\n    })\n  }\n\n  aggro = (name) => {\n    let actor = EntitiesService.findEntityById(name);\n    let position = actor.position;\n    let closeEntities = this.findEntitiesThatAreClose(position);\n    let entitiesToAttack = closeEntities.filter(entity => entity.hp > 0);\n    if(entitiesToAttack.length) {\n      let firstAmongThem = entitiesToAttack[0];\n      actor.attackPosition(firstAmongThem.position);\n    }\n  }\n\n  findEntitiesThatAreClose(position: Position){\n    let {x, y} = position;\n    let entities: Entity[] = [];\n    for (let j = y - 1; j <= y + 1; j++) {\n      if (j < 0 || j >= SquaresService.arenaSize) {\n        continue;\n      }\n      for (let i = x - 1; i <= x + 1; i++) {\n        if (i < 0 || i >= SquaresService.arenaSize || (i === x && j === y)) {\n          continue;\n        }\n        let newlyFoundEntities = EntitiesService.getEntitiesAtGivenPosition({x: i, y: j})\n        entities = entities.concat(newlyFoundEntities);\n      }\n    }\n\n    return entities;\n  }\n\n  nuke = (dmg: number) => {\n    component.setState(\n      (state) => {\n        let { entities } = state;\n\n        entities.forEach((entity) => {\n          entity.hp = entity.hp - dmg;\n        });\n\n        return { entities };\n      },\n      () => {\n        this.processEntities();\n      }\n    );\n  };\n\n  toggleRotateBoard = () => {\n    component.setState({ isBoardRotated: !component.state.isBoardRotated });\n  };\n\n  switchAutoLoop = () => {\n    component.setState(\n      (previousState) => {\n        return { autoLoop: !previousState.autoLoop };\n      },\n      () => {\n        if (component.state.autoLoop) {\n          this.loop();\n        }\n      }\n    );\n  };\n\n  onInventoryClick = (entity: Entity, itemName: string) => {\n    component.setState((prevState) => {\n      let entities = [].concat(prevState.entities);\n      EntitiesService.entities = entities;\n      let entityId = EntitiesService.getEntityId(entity);\n      let actualEntity = EntitiesService.findEntityById(entityId);\n      //let actualItem = EntitiesService.findItemOnEntity(actualEntity, itemName);\n\n      if (actualEntity.equipment.hands && actualEntity.equipment.hands.name === itemName) {\n        actualEntity.unEquipFromHands();\n      } else {\n        actualEntity.equipInHands(itemName);\n      }\n\n      return { entities };\n    });\n    console.log(entity, itemName);\n  };\n\n  handleDeselectAllEntities = () => {\n    component.setState(\n      (state) => {\n        let { squares, entities, selected } = state;\n\n        GameLogic.deselectAllEntities();\n        selected = undefined;\n\n        return { squares, entities, selected };\n      },\n      () => {\n        //this.processEntities();\n      }\n    );\n  };\n\n  ceaseFire = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"isShooting\");\n    this.processInterface();\n  };\n}\n","import React from \"react\";\nimport { SquaresService, Entity } from \"services\";\nimport { HpBar, ShootingVisualization } from \"components\";\nimport * as Helpers from \"helpers\";\nimport \"./EntityPawn.scss\";\n\ninterface EntityPawnProps {\n  entity: Entity;\n}\n\nexport class EntityPawn extends React.Component<EntityPawnProps> {\n  randomTime = `${(Math.random() + 0.5).toFixed(2)}s`;\n\n  render() {\n    let { entity } = this.props;\n    let square = SquaresService.getSquareFromPosition(entity.position.x, entity.position.y);\n\n    let classNameBase = \"entity-pawn__icon\";\n    let className = `${classNameBase}`;\n    let classessFromFlags = Helpers.turnFlagsIntoClasses(entity, classNameBase);\n    classessFromFlags += Helpers.turnFlagsIntoClasses(square, classNameBase);\n    className += ` ${classessFromFlags} `;\n    let fof = entity.isFriendly ? 'friendly' : 'hostile';\n    let color = entity.isFriendly ? 'green' : 'red';\n    let zIndex = entity.isShooting ? 5 : 1;\n    let animationBreathing = entity.isBreathing ? `breathing ${this.randomTime} alternate infinite linear` : \"none\";\n\n    let boardPadding = 10;\n    let squareMargin = 2;\n    return (\n      <div\n        className=\"entity-pawn\"\n        key={entity.name}\n        style={{\n          left: `calc(${boardPadding + 3}px + ${entity.position.x * squareMargin * 2}px + ${entity.position.x}em)`,\n          top: `calc(${boardPadding + 3}px + ${entity.position.y * squareMargin * 2}px + ${entity.position.y}em)`,\n          zIndex: zIndex,\n        }}\n      >\n        <div\n          className={`entity-pawn__health-display ` + fof}\n        >\n\n          <HpBar\n            current={entity.hp}\n            max={entity.maxHp}\n            color={color}\n          />\n        </div>\n\n        <div\n          className={className}\n          style={{\n            animation: animationBreathing,\n          }}\n        >\n          {entity.icon}\n        </div>\n        <ShootingVisualization entity={entity} />\n      </div>\n    );\n  }\n}\n","export const structures = {\r\n  box: {\r\n    name: \"box\",\r\n    icon: \"📦\",\r\n    hp: 50,\r\n    maxHp: 70,\r\n    isBreathing: false,\r\n    position: { x: 4, y: 5 },\r\n  },\r\n  redBarrel: {\r\n    name: \"redBarrel\",\r\n    icon: \"🛢️\",\r\n    hp: 50,\r\n    maxHp: 70,\r\n    isBreathing: false,\r\n    position: { x: 4, y: 5 },\r\n  },\r\n};\r\n","import React from \"react\";\n// services\nimport { SquaresService } from \"services\";\nimport { Entity, Square, Position, Item } from \"services\";\n// components\nimport { EntityCard, InventoryList } from \"components\";\n// others\nimport { structures } from \"resources\";\nimport * as Helpers from \"helpers\";\nimport GameStyles from \"./Game.module.scss\";\n\ninterface TargetedSquareInfoProps {\n  className: string;\n  squareNumber: number;\n  squares: Square[];\n  selected: Entity;\n  targeted: Square;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  processInterface: Function;\n}\n\n// TODO: Refactor, does it really need all this logic.\nexport default class TargetedSquareInfo extends React.Component<TargetedSquareInfoProps> {\n  boxSerialNumber: number = 0;\n\n  onItemClick = (itemName: string): void => {\n    let { selected, targeted, squareNumber } = this.props;\n    let targetedSquarePosition = SquaresService.getSquarePositionFromIndex(squareNumber);\n    if (selected && targeted &&\n      selected.position.x === targetedSquarePosition.x &&\n      selected.position.y === targetedSquarePosition.y\n      ) {\n      let item = targeted.takeFromInventory(itemName);\n      selected.addToInventory(item);\n    }\n    this.props.processInterface();\n  };\n\n  onMoveClick(selected: Entity, targetedSquarePosition: Position): void {\n    let targetedSquare: Square = SquaresService.getSquareFromPosition(targetedSquarePosition.x, targetedSquarePosition.y);\n    selected.setMoveDestinationPosition(targetedSquarePosition);\n    targetedSquare.isChosenDestination = true;\n    this.props.processInterface();\n  }\n\n  onAttackClick(selected: Entity, targetedSquarePosition: Position): void {\n    selected.attackPosition(targetedSquarePosition);\n    this.props.processInterface();\n  }\n\n  onAddStructureClick(targetedSquarePosition: Position, structureType: string): void {\n    let box = Object.assign({}, structures[structureType]);\n    let targetPosition = Object.assign({}, targetedSquarePosition);\n    box.position = targetPosition;\n    box.name += this.boxSerialNumber++;\n    let newStructure = new Entity(box);\n    let square = SquaresService.getSquareFromPosition(targetedSquarePosition.x, targetedSquarePosition.y);\n    square.entity = newStructure;\n    square.addToInventory(newStructure as Item); // TODO: FIXME: Stop forcing types, make a new list for scenery items.\n    //EntitiesService.entities.push(newBox);\n    this.props.processInterface();\n  }\n\n  render() {\n    let { targeted, selected, squareNumber } = this.props;\n\n    if (!targeted) {\n      return null;\n    }\n\n    let targetedSquarePosition = SquaresService.getSquarePositionFromIndex(squareNumber);\n\n    let entityInfo;\n    let distanceInfo;\n    let positionInfo;\n    let bloodInfo;\n    let availableActions = [];\n    let items;\n\n    let editorButtons = (\n      <div>\n        <button onClick={() => this.onAddStructureClick(targetedSquarePosition, \"box\")} className={GameStyles.button}>\n          Add box\n        </button>\n        <button\n          onClick={() => this.onAddStructureClick(targetedSquarePosition, \"redBarrel\")}\n          className={GameStyles.button}\n        >\n          Add barrel\n        </button>\n      </div>\n    );\n\n    if (targeted.entity && !Helpers.isSelectedTargeted(selected, targeted)) {\n      entityInfo = (\n        <EntityCard\n          onInventoryClick={this.props.onInventoryClick}\n          entity={targeted.entity}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (targeted.items) {\n      items = (\n        <InventoryList\n          label=\"Items in this location\"\n          title=\"On the floor\"\n          onClick={this.onItemClick}\n          onDrop={null}\n          onReload={null}\n          inventory={targeted.items}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (selected) {\n      let distanceToSelected = Helpers.calculateDistance(\n        targetedSquarePosition.x - selected.position.x,\n        targetedSquarePosition.y - selected.position.y\n      );\n\n      distanceInfo = <li>Distance to selected: {distanceToSelected.toFixed(2)}</li>;\n\n      if (distanceToSelected !== 0) {\n        if (targeted.isAvailableDestination) {\n          availableActions[0] = (\n            <button key=\"move\" onClick={() => this.onMoveClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Move\n            </button>\n          );\n        }\n        if (targeted.entity) {\n          availableActions[1] = (\n            <button key=\"attack\" onClick={() => this.onAttackClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Attack\n            </button>\n          );\n        }\n      }\n    }\n\n    if (targetedSquarePosition) {\n      positionInfo = (\n        <li>\n          Position: [ {targetedSquarePosition.x}, {targetedSquarePosition.y} ]{\" \"}\n        </li>\n      );\n    }\n\n    if (targeted.blood) {\n      bloodInfo = <li>Blood amount: {targeted.blood}</li>;\n    }\n\n    return (\n      <div className={this.props.className}>\n        <strong className={GameStyles.targeted__label}>Target square Info</strong>\n        <div>{entityInfo}</div>\n        <div>{availableActions}</div>\n        <ul>\n          {positionInfo}\n          {distanceInfo}\n          {bloodInfo}\n          {items}\n          {editorButtons}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { ReactElement } from \"react\";\n// services\nimport { Entity } from \"services\";\n// components\nimport { EntityCard } from \"components/EntityCard\";\n// others\nimport GameStyles from \"./Game.module.scss\";\n\ninterface SelectedEntityInfoProperties {\n  selected: Entity;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  handleDeselectAllEntities: () => void;\n  processInterface: Function;\n}\n\n// TODO: Change this into HOC, as it doesn't really need half of it's props for itself\nexport default class SelectedEntityInfo extends React.Component<SelectedEntityInfoProperties> {\n  render(): ReactElement {\n    if (!this.props.selected) {\n      return null;\n    }\n\n    return (\n      <div className={GameStyles.selected}>\n        <strong className={GameStyles.selected__label}>Selected entity </strong>\n        <div>\n          <EntityCard\n            onInventoryClick={this.props.onInventoryClick}\n            entity={this.props.selected}\n            processInterface={() => this.props.processInterface()}\n          />\n        </div>\n        <button onClick={this.props.handleDeselectAllEntities} className={GameStyles.button}>\n          {\" \"}\n          Deselect\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n//import * as dat from \"dat.gui\";\n\n// services\nimport { EntitiesService, SquaresService, GameModel, GameActionsClassForGameComponent, GameState } from \"services\";\n\n// components\nimport { Board, MessageBox } from \"components\";\nimport TargetedSquareInfo from \"./TargetedSquareInfo\";\nimport SelectedEntityInfo from \"./SelectedEntityInfo\";\n\n\n// others\nimport styles from \"./Game.module.scss\";\n\nlet GameActions = null;\n\n/** Game composes all the parts of the interface */\nexport class Game extends React.PureComponent<void, GameState> {\n  renderCounter: number = 0;\n  stepNumber: number = 0;\n  //dat;\n\n  constructor(props: void) {\n    super(props);\n\n    GameModel.loadBuiltInMap();\n    GameModel.loadPredefinedEntitities();\n    //this.dat = new dat.GUI();\n    this.state = {\n      entities: EntitiesService.entities,\n      squares: SquaresService.squares,\n      squareSize: 40,\n      selected: EntitiesService.findEntityById(\"Lazer Blady\"),\n      targeted: null,\n      targetedSquareNumber: null,\n      enemiesAlive: null,\n      arenaSize: 10,\n      autoLoop: true,\n      isBoardRotated: false,\n      isEditorOn: false,\n    };\n    this.state.selected.active = true;\n    GameActions = new GameActionsClassForGameComponent(this);\n  }\n\n  componentDidMount() {\n    GameActions.loop();\n  }\n\n  zoomIn() {\n    this.setState((prevState) => {\n      return { squareSize: prevState.squareSize + 5 };\n    });\n  }\n  zoomOut() {\n    this.setState((prevState) => {\n      return { squareSize: prevState.squareSize - 5 };\n    });\n  }\n  render() {\n    // console.log(\"Rendering Game. #\", this.renderCounter++);\n    return (\n      <div className={styles.game}>\n        <div className={styles.status}>\n          Enemies to kill: {this.state.enemiesAlive}<br></br>\n          {this.state.enemiesAlive ? '' : \" Great Job. YOU WON.\" }\n          {this.state.selected.isAlive ? '' : \" Damn. YOU DIED.\" }\n        </div>\n        <p>\n          L2P: Click friendly entity on the map, twice. Then click a target square to move, or target entity to attack.\n        </p>\n        <div className={styles.game__board}>\n          <Board\n            squares={this.state.squares}\n            entities={this.state.entities}\n            onClick={(i) => GameActions.handleClickV2(i)}\n            size={this.state.arenaSize}\n            isRotated={this.state.isBoardRotated}\n            style={{fontSize: `${this.state.squareSize}px`}}\n          />\n        </div>\n\n        <div className={styles.game__info}>\n          <div className={styles.actions}>\n            <button onClick={GameActions.toggleEditorMode} className={styles.button}>\n              Editor Mode\n            </button>\n            <button onClick={GameModel.saveMap} className={styles.button}>\n              Save Map\n            </button>\n            <button onClick={GameModel.loadMap} className={styles.button}>\n              Load Map\n            </button>\n            <button\n              onClick={() => {\n                GameActions.nuke(40);\n              }}\n              className={`${styles.button} ${styles[\"button-nuke\"]}`}\n            >\n              Nuke All\n            </button>\n            <button onClick={GameActions.ceaseFire} className={styles.button}>\n              Cease Fire\n            </button>\n\n            <button onClick={GameActions.toggleRotateBoard} className={styles.button}>\n              Rotate Board\n            </button>\n\n            <button onClick={() => this.zoomIn()} className={styles.button}>\n              Zoom In (+)\n            </button>\n            <button onClick={() => this.zoomOut()} className={styles.button}>\n              Zoom Out (-)\n            </button>\n\n            <button onClick={GameActions.nextTick} className={styles.button}>\n              Next Tick\n            </button>\n\n            <span className={styles[\"step-counter\"]}>Tick: {this.stepNumber}</span>\n\n            <label className={` ${styles.button} ${styles[\"auto-cycle\"]}`}>\n              <input type=\"checkbox\" checked={this.state.autoLoop} onChange={GameActions.switchAutoLoop} />\n              <span>Auto Cycle</span>\n            </label>\n          </div>\n          <div className={styles[\"interaction-container\"]}>\n            <SelectedEntityInfo\n              selected={this.state.selected}\n              handleDeselectAllEntities={GameActions.handleDeselectAllEntities}\n              onInventoryClick={GameActions.onInventoryClick}\n              processInterface={() => GameActions.processInterface()}\n            />\n\n            <TargetedSquareInfo\n              className={styles.targeted}\n              squareNumber={this.state.targetedSquareNumber}\n              squares={this.state.squares}\n              selected={this.state.selected}\n              targeted={this.state.targeted}\n              onInventoryClick={GameActions.onInventoryClick}\n              processInterface={() => GameActions.processInterface()}\n            />\n            <div></div>\n          </div>\n          <MessageBox />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\n\ninterface BloodProps {\n  bloodAmount: number; // receives amount of blood ONLY\n}\n\n/**\n * @description\n * Visualises blood by adding red background\n * and a little number in the corner.\n *\n * @param bloodAmount - number representing the amount of blood.\n */\nclass Blood extends React.PureComponent<BloodProps> {\n  render() {\n    console.log('BLOOD', this.props);\n    let { bloodAmount } = this.props;\n\n    let bloodNumbers = [];\n    let i = bloodAmount;\n\n    while(i--) {\n      bloodNumbers.push(\n        <span style={{\n          position: 'absolute',\n          left: `${Math.random() * 90}%`,\n          top: `${Math.random() * 90 -15}%`,\n        }}>o</span>\n      );\n    }\n\n    return (\n      <div\n        className=\"square__blood\"\n        style={{\n          background: `rgba(255, 0, 0, ${(bloodAmount / 50).toFixed(2)})`,\n          position: 'relative'\n        }}\n      >\n        {bloodNumbers}\n        {bloodAmount}\n      </div>\n    );\n  }\n}\n\nexport default Blood;\n","import React from \"react\";\nimport { Entity, Item } from \"services\";\n\ninterface ItemsProps {\n  items: Item[];\n  itemsNumber: number; // here to trigger update when list length changes\n}\n// FIXME: I have a strange feeling this doesn't update when contents of items list change but not the number of elements\n/**\n * @description\n * Displays icons of items on the square, as well as little number in the corner.\n * @param itemsNumber - number of items on the square\n * @param items - array of items on the square\n */\nclass Items extends React.PureComponent<ItemsProps> {\n  itemsIcons = [];\n\n  render() {\n    let { items, itemsNumber } = this.props;\n\n    if (!items) return null;\n\n    items.forEach((item) => {\n      let entity = item as Entity;\n      if (entity.icon) {\n        this.itemsIcons.push(<div className=\"square__item-icon\">{entity.icon}</div>);\n      }\n    });\n\n    return (\n      <div className=\"square__items\">\n        <div className=\"square__items-icons\">{this.itemsIcons}</div>\n        <div className=\"square__items-number\">{itemsNumber}</div>\n      </div>\n    );\n  }\n}\n\nexport default Items;\n","import React, { ReactElement } from \"react\";\n// services\nimport { Item } from \"services\";\n// components\nimport Blood from \"./Blood\";\nimport Items from \"./Items\";\n// others\nimport \"./Square.scss\";\n\n// TODO: This should really take less props\ninterface SquareProps {\n  squareId: number;\n  className?: string;\n  onClick: (squareIndex: number) => void;\n  blood: number;\n  items: Item[]; // collection of objects\n  itemsNumber: number; // here to trigger update when list length changes\n}\n\n/**\n * @description Displays a square with blood and items on it.\n * @param squareId - unique numerical id\n * @param className - string with CSS clasess\n * @param onClick - callback to call when square is clicked\n * @param blood - amount of blood\n * @param items - array of items\n * @param itemsNumber - numberof items\n */\nexport class SquareComponent extends React.PureComponent<SquareProps> {\n  onClick = () => {\n    this.props.onClick(this.props.squareId);\n  };\n\n  render() {\n    // console.log(\"Render Square\", this.props.squareId);\n    // TODO: Extract into separate component\n    function cuboid(classPrefix:string):ReactElement {\n      let i = 6;\n      let cuboidFaces: ReactElement[] = [];\n\n      while(i--){\n        cuboidFaces.push(<div key={i} className={`${classPrefix}__cuboid-face`}></div>);\n      }\n\n      return <div className={`${classPrefix}__cuboid`}>\n        {cuboidFaces}\n      </div>\n    }\n\n    return (\n      <button className={this.props.className} onClick={this.onClick}>\n        <Blood bloodAmount={this.props.blood} />\n        <Items items={this.props.items} itemsNumber={this.props.itemsNumber} />\n        <div className=\"square__content\">&nbsp;</div>\n        {cuboid('square')}\n      </button>\n    );\n  }\n}\n\n","import React from \"react\";\nimport \"./LinearDisplay.scss\";\n\ninterface LinearDisplayProps {\n  className?: string;\n  current: number;\n  max: number;\n  title?: string;\n  label?: string;\n}\n\nexport function LinearDisplay(props: LinearDisplayProps) {\n  let className = `linear-display ${props.className || \"\"}`;\n  let percentage = ~~((props.current * 100) / props.max);\n  let overload = percentage > 100;\n  if (overload) {\n    percentage = 100;\n    className += \" linear-display--overloaded\";\n  }\n\n  let progressStyle = {\n    width: `${percentage}%`,\n  };\n  let title = props.title || `${props.current}/${props.max}`;\n\n  let amount = props.current;\n\n  let divider = 1;\n  if (props.max >= 40 && props.max < 100) {\n    divider = 5;\n  } else if (props.max >= 100) {\n    divider = 10;\n  }\n\n  amount = amount / divider;\n\n  let gridSize = 100 / amount;\n\n  let color = `rgba(200,200,200,0.4)`;\n  color = `black`;\n  let progressGridStyle = {\n    backgroundSize: `${gridSize}% 100%`,\n    backgroundImage: `\n      linear-gradient(to left, ${color} 1px, transparent 1px)\n    `,\n  };\n\n  Object.assign(progressStyle, progressGridStyle);\n\n  return (\n    <div className={className}>\n      <div className=\"linear-display__label\">{props.label}:&nbsp;</div>\n      <div className=\"linear-display__bar-container\" title={title}>\n        <div className=\"linear-display__bar-progress\" style={progressStyle}>\n          <span className=\"linear-display__bar-progress-text\">\n            {props.current}\n            {overload ? \"/\" + props.max : \"\"}&nbsp;\n          </span>\n        </div>\n      </div>\n      <div>&nbsp;</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./HudPanel.scss\";\n\ninterface HudPanelProps {\n  title: string;\n  children: JSX.Element;\n}\n\nexport class HudPanel extends React.Component<HudPanelProps> {\n\n    render() {\n        return <div className=\"hud-panel\">\n            <div className=\"hud-panel__title\">{this.props.title}</div>\n            <div className=\"hud-panel__content\">{this.props.children}</div>\n        </div>;\n    }\n}","import React from \"react\";\n//import \"./Cell.scss\";\n\ninterface CellProps {\n}\n\ninterface CellState {\n}\n\nexport class Cell extends React.PureComponent<CellProps, CellState> {\n\n  state = {}\n\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //   }\n  // }\n\n  render() {\n    //console.log(`Rendering [${this.props.children}]`);\n    return <div className=\"cell\">{this.props.children}</div>\n  }\n}","import React from \"react\";\nimport { Cell } from \"./Cell\";\nimport \"./Grid.scss\";\n\ninterface GridProps {\n  width: number;\n  height: number;\n  startAt: [number, number];\n}\n\ninterface GridState {\n  mapdrag: boolean,\n  scroll: {\n    x: number,\n    y: number,\n  }\n}\n\nexport class Grid extends React.Component<GridProps, GridState> {\n  gridReference;\n  scroll = {\n    x: 0,\n    y: 0,\n  }\n\n  mapdrag = false;\n\n  stateDriven = false;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      mapdrag: false,\n      scroll: {\n        x: 0,\n        y: 0,\n      }\n    }\n\n    this.gridReference = React.createRef();\n  }\n\n  scrollRelativeXY(deltaX: number, deltaY: number) {\n    this.scroll.x -= deltaX;\n    this.scroll.y -= deltaY;\n\n    if(this.scroll.x <= 0) {\n      this.scroll.x = 0;\n    }\n    if(this.scroll.y <= 0) {\n      this.scroll.y = 0;\n    }\n\n    if(this.stateDriven) {\n      this.setState({\n        scroll: {\n          x: this.scroll.x,\n          y: this.scroll.y,\n      }})\n    }\n    this.executeScroll();\n  }\n\n  renderGrid() {\n    let rows = [];\n    for(let y = 0; y <= this.props.height; y++) {\n      let sourceY = this.props.startAt[1] + y;\n      let currentRow = [];\n\n      for(let x = 0; x <= this.props.width; x++) {\n        let sourceX = this.props.startAt[0] + x;\n        let currentCell = <Cell key={`$key_${sourceX}_${sourceY}`}>{sourceX}, {sourceY}</Cell>\n        currentRow.push(currentCell);\n      }\n      rows.push(<div className=\"row\"  key={`$key_X_${sourceY}`}>{currentRow}</div>);\n    }\n    return <div\n      className=\"grid\"\n      ref={this.gridReference}\n      onMouseDown={(e) => this.onMouseDown(e)}\n      onMouseUp={(e) => this.onMouseUp(e)}\n      onMouseMove={(e) => this.handleMove(e)}\n      onContextMenu={(e)=>e.preventDefault()}\n      onDrag={(e)=>this.onMouseDrag(e)}\n      //onMouseOut={(e)=>this.onMouseOut(e)}\n    >{rows}</div>;\n  }\n\n  handleMove(e) {\n    if(!this.mapdrag) return;\n    this.scrollRelativeXY(e.movementX, e.movementY);\n  }\n\n  onMouseDrag(e){\n    console.log(e);\n  }\n\n  onMouseDown(e) {\n    console.log(e.button);\n    if(e.button === 2) {\n      this.mapdrag = true;\n    }\n    e.preventDefault();\n    console.log(this.mapdrag);\n  }\n\n  onMouseOut(e) {\n    console.log(\"MOUSE OUT\")\n    this.mapdrag = false;\n  }\n\n  startDragging(e){\n      this.mapdrag = true;\n  }\n\n  onMouseUp(e){\n    console.log(e.button);\n    if(e.button === 2) {\n      this.mapdrag = false;\n    }\n    e.preventDefault();\n    console.log(this.mapdrag);\n  }\n\n  onChangeScrollX(event) {\n    console.log(event.target.value);\n    this.scroll.x = event.target.value;\n    this.executeScroll();\n  }\n  onChangeScrollY(event) {\n    console.log(event.target.value)\n    this.scroll.y = event.target.value;\n    this.executeScroll();\n  }\n\n  executeScroll() {\n    this.gridReference.current.scroll({\n      top: this.scroll.y,\n      left: this.scroll.x,\n    });\n  }\n\n  switchStateDriven(e) {\n    console.log(e.target.checked);\n    this.stateDriven = e.target.checked;\n  }\n\n  render() {\n    return <div className=\"grid-container\">\n      <pre className=\"gridDebugData\">\n        Width: {this.props.width}<br/>\n        Height: {this.props.height}<br/>\n        StartAt: {this.props.startAt[0]}, {this.props.startAt[1]}<br/>\n        ScrollX: <input onChange={(e) => this.onChangeScrollX(e)}></input><br/>\n        ScrollY: <input onChange={(e) => this.onChangeScrollY(e)}></input><br/>\n        StateDriven: <input type=\"checkbox\" onChange={(e)=>this.switchStateDriven(e)}></input><br/>\n\n        State mapdrag: {this.state.mapdrag}<br/>\n        State scrollX: {this.state.scroll.x}<br/>\n        State scrollY: {this.state.scroll.y}<br/>\n      </pre>\n      {this.renderGrid()}\n    </div>;\n  }\n}","import React from \"react\";\nimport \"./Controls.scss\";\n\ninterface ControlsProps {\n    keys: string[],\n    onKeyPress: Function,\n}\n\ninterface ControlsState {\n    w: boolean,\n    s: boolean,\n    a: boolean,\n    d: boolean,\n}\n\nexport class Controls extends React.Component<ControlsProps, ControlsState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            w: false,\n            s: false,\n            a: false,\n            d: false,\n        }\n    }\n\n    componentDidMount(){\n        document.addEventListener(\"keydown\", (e) => this.onKeyDown(e), false);\n        document.addEventListener(\"keyup\", (e) => this.onKeyUp(e), false);\n    }\n\n    onKeyDown(event) {\n        console.log(event)\n        switch(event.keyCode) {\n            case 87: // W\n                this.setState({w: true});\n                this.props.onKeyPress('w');\n                break;\n            case 83: // S\n                this.setState({s: true});\n                this.props.onKeyPress('s');\n                break;\n            case 65: // A\n                this.setState({a: true});\n                this.props.onKeyPress('a');\n                break;\n            case 68: // D\n                this.setState({d: true});\n                this.props.onKeyPress('d');\n                break;\n        }\n    }\n\n    onKeyUp(event) {\n        console.log(event)\n        switch(event.keyCode) {\n            case 87: // W\n                this.setState({w: false});\n                break;\n            case 83: // S\n                this.setState({s: false});\n                break;\n            case 65: // A\n                this.setState({a: false});\n                break;\n            case 68: // D\n                this.setState({d: false});\n                break;\n        }\n    }\n\n    render() {\n        return <div className=\"controls\">\n            [<span className={`${this.state.w ? 'pressed' : ''} key` }>W</span>]\n            [<span className={`${this.state.s ? 'pressed' : ''} key` }>S</span>]\n            [<span className={`${this.state.a ? 'pressed' : ''} key` }>A</span>]\n            [<span className={`${this.state.d ? 'pressed' : ''} key` }>D</span>]\n        </div>;\n    }\n}","import React from \"react\";\n// services\nimport \"./MessageBox.scss\";\nimport { MessageService } from \"services\";\n\nexport class MessageBox extends React.Component {\n  messages = MessageService.messages;\n  messageNumber;\n\n  shouldComponentUpdate() {\n    // don't update if there are no new messages since last render\n    return this.messages.length !== this.messageNumber;\n  }\n\n  renderMessage = (message: string, number: number) => {\n    return (\n      <li key={`msg${number}`}>\n        Message #[{number}]: {message}\n      </li>\n    );\n  };\n\n  render() {\n    if (!this.messages.length) return null;\n    let RenderedMessages = this.messages.map((message, number) => this.renderMessage(message, number));\n    // remember the number of messages rendered\n    this.messageNumber = this.messages.length;\n    return (\n      <ul className=\"messages\" id=\"messages\">\n        {RenderedMessages}\n      </ul>\n    );\n  }\n\n  scrollElement() {\n    window.requestAnimationFrame(() => {\n      var element = document.getElementById(\"messages\");\n      element.scrollTop = element.scrollHeight;\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.messages.length) this.scrollElement();\n  }\n}\n","import React from \"react\";\nimport { Item, RangedWeapon } from \"services\";\nimport { LinearDisplay } from \"components/LinearDisplay\";\n\ninterface InventoryItemProps {\n  item: Item;\n  onDrop(itemName: string);\n  onReload(itemName: string);\n  onClick(itemName: string);\n  processInterface: Function;\n}\n\nexport function InventoryItem(props: InventoryItemProps) {\n  let { item } = props;\n  let reloadButton;\n  let dropButton;\n  let ammoCounter;\n\n  if (props.onDrop) {\n    dropButton = (\n      <button\n        className=\"inventory-list__drop-button\"\n        onClick={() => {\n          props.onDrop(item.name);\n        }}\n      >\n        Drop\n      </button>\n    );\n  }\n\n  if (item instanceof RangedWeapon) {\n    let weapon = item as RangedWeapon;\n\n    if (weapon.reload) {\n      // has reload capability\n      let className = \" inventory-list__reload-button \";\n\n      if (weapon.rounds === 0 || weapon.rounds === \"empty\") {\n        className += \" inventory-list__reload-button--empty \";\n      } else if (weapon.rounds < weapon.maxRounds) {\n        className += \" inventory-list__reload-button--partial \";\n      }\n      reloadButton = (\n        <button\n          className={className}\n          onClick={() => {\n            weapon.reload();\n            props.onReload && props.onReload(item.name);\n            props.processInterface();\n          }}\n        >\n          Reload\n        </button>\n      );\n    } else {\n      reloadButton = null;\n    }\n\n    ammoCounter = weapon.reload ? (\n      <LinearDisplay label=\"Rounds\" current={weapon.rounds} max={weapon.maxRounds} />\n    ) : null;\n  }\n\n  return (\n    <div key={item.name}>\n      <div onClick={() => props.onClick(item.name)} key={item.name} className=\"inventory-list__item\">\n        <span>{item.name}</span>\n        <div>{ammoCounter}</div>\n      </div>\n      {reloadButton}\n      {dropButton}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./InventoryList.scss\";\nimport { Item } from \"services\";\nimport { InventoryItem } from \"components/InventoryItem\";\n\ninterface InventoryListProps {\n  className?: string;\n  label: string;\n  title: string;\n  onClick(itemName: string);\n  onDrop(itemName: string);\n  onReload(itemName: string);\n  inventory: Item[]; //\n  processInterface: Function;\n}\n\nexport function InventoryList(props: InventoryListProps) {\n  const className = `inventory-list ${props.className || \"\"}`;\n\n  if (!props.inventory) {\n    return null;\n  }\n\n  const inventoryItems = props.inventory.map((item) => (\n    <InventoryItem\n      key={`i${item.name}`}\n      item={item}\n      onClick={props.onClick}\n      onDrop={props.onDrop}\n      onReload={props.onReload}\n      processInterface={props.processInterface}\n    />\n  ));\n\n  return (\n    <div className={className}>\n      <div className=\"inventory-list__label\">\n        {props.label}\n        :&nbsp;\n      </div>\n      <div className=\"inventory-list__items\" title={props.title}>\n        {inventoryItems}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./HpBar.scss\";\n\ninterface HpBarProps {\n    current: number;\n    max: number;\n    color: string;\n}\n\nexport class HpBar extends React.Component<HpBarProps> {\n\n    render() {\n        let percentage = ~~((this.props.current * 100) / this.props.max);\n        let progressStyle = {\n            width: `${percentage}%`,\n            backgroundColor: this.props.color\n        };\n        return(\n            <div className=\"hpbar\">\n                <div className=\"hpbar__indicator\" style={progressStyle}>\n\n                </div>\n                <span className=\"hpbar__text\">\n                        {this.props.current}\n                </span>\n            </div>\n        );\n    }\n}","import * as Helpers from \"helpers\";\nimport React, { ReactElement } from \"react\";\n\nexport function ShootingVisualization(props): ReactElement {\n  let { entity } = props;\n\n  let calcNewAangle = Helpers.calculateAngle;\n  let targetCoords = entity.targetPosition;\n  let projectileNumber = 5;\n  let projectiles = [];\n  let localId = `Entity${entity.icon}`;\n  let customStyle = \"\";\n\n  if (\n    targetCoords &&\n    entity.position &&\n    entity.hasWeapon &&\n    entity.isShooting &&\n    (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\n  ) {\n    if (targetCoords) {\n      let distanceToTargetXInUnits = (targetCoords.x - entity.position.x);\n      let distanceToTargetYInUnits = (targetCoords.y - entity.position.y);\n\n      let actualDistanceInUnits = Helpers.calculateDistance(distanceToTargetXInUnits, distanceToTargetYInUnits);\n      let weaponType = entity && entity.equipment && entity.equipment.hands && entity.equipment.hands.type;\n      let angle = calcNewAangle(distanceToTargetXInUnits, distanceToTargetYInUnits);\n\n      if (weaponType === \"lazer\") {\n        // TODO: perhaps call to `visualizeShooting(from,to,weaponType)`\n        let className = `projectile${localId}_beam`;\n        let projectile = \"\";\n        const distanceWhereBeamBegins = 20;//in pixels\n        //actualDistance = actualDistance - distanceWhereBeamBegins;\n        // do above within template\n        customStyle = `\n          @keyframes pulsing${localId} {\n            0%  {opacity: 0.1;}\n            100%  {opacity: 1;}\n          }\n\n          @keyframes elongating${localId} {\n            0%  { width: calc(${actualDistanceInUnits}em + ${actualDistanceInUnits} * 4px - 20px); }\n            100%  {width: calc(${actualDistanceInUnits}em + ${actualDistanceInUnits} * 4px - 20px); }\n          }\n\n          @keyframes swiping${localId} {\n            0%  {transform: rotate(${angle + 90 -1}deg) translateX(${distanceWhereBeamBegins}px);}\n            50%  {transform: rotate(${angle + 90 + 1}deg) translateX(${distanceWhereBeamBegins}px);}\n            100%  {transform: rotate(${angle + 90 - 1}deg) translateX(${distanceWhereBeamBegins}px);}\n          }\n\n          .${className} {\n            width: ${actualDistanceInUnits}em;\n            height: 3px;\n            border-radius: 5px;\n            background: #F00;\n            position: absolute;\n            top: 0.5em;\n            left: 0.5em;\n            transform: rotate(${angle + 90}deg);/* overriden by swiping keyframes */\n            transform-origin: left 0px;\n            animation: pulsing${localId} 0.1s ease infinite,\n            elongating${localId} 0.7s ease alternate infinite,\n            swiping${localId} 1s ease alternate infinite;\n            box-shadow: 0 0 5px 5px white;\n            z-index: 10;\n          }\n          `;\n        projectiles.push(\n          <div key={className} className={className}>\n            {projectile}\n          </div>\n        );\n      } else {\n        customStyle = `\n          @keyframes shooting${localId} {\n            0%   {transform: translate(0,0) rotate(${angle}deg) scaleY(0.3)}\n            100% {transform: translate(\n              ${36 * (targetCoords.x - entity.position.x)}px,\n              ${36 * (targetCoords.y - entity.position.y)}px\n            ) rotate(${angle}deg) scaleY(2)}\n          }\n          `;\n\n        while (projectileNumber--) {\n          customStyle += `\n          .projectile${localId}_${projectileNumber} {\n            transform: rotate(${angle}deg);\n            animation: shooting${localId} 0.8s linear infinite;\n            animation-delay: ${projectileNumber - 1 * 0.3}s;\n          }`;\n        }\n        let projectile = entity.isShooting ? \"|\" : \"\";\n\n        projectileNumber = 3;\n\n        while (projectileNumber--) {\n          let className = `projectile projectile${localId}_${projectileNumber}`;\n          projectiles.push(\n            <div key={className} className={className}>\n              {projectile}\n            </div>\n          );\n        }\n      }\n    }\n  }\n  return (\n    <div className=\"shooting-visualization\">\n      <style>{customStyle}</style>\n      {projectiles}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { HudPanel, Grid, Controls } from \"components\";\nimport \"./BlastZone.scss\";\n\ninterface BlastZoneState {\n  gridX: number,\n  gridY: number,\n}\nexport class BlastZone extends React.Component<void, BlastZoneState> {\n  constructor(props: void) {\n    super(props);\n    this.state = {\n      gridX: 0,\n      gridY: 0,\n    }\n  }\n  componentDidMount() {\n  }\n\n  onControlPress(key) {\n    let deltaX = 0;\n    let deltaY = 0;\n    switch(key) {\n      case \"w\":\n        deltaY = -1;\n        break;\n      case \"s\":\n        deltaY = 1;\n        break;\n\n      case \"a\":\n        deltaX = -1;\n        break;\n      case \"d\":\n        deltaX = 1;\n        break;\n    }\n\n    console.log(key);\n    this.setState(prevState => {\n      return {\n        gridX: prevState.gridX + deltaX,\n        gridY: prevState.gridY + deltaY\n      };\n    })\n  }\n\n  render() {\n\n    const controls = <Controls\n      keys={['W', 'S', 'A', 'D']}\n      onKeyPress={(e) => this.onControlPress(e)}\n      ></Controls>\n    const console = <></>;\n    const statusIndicators = <></>;\n\n    return <div className=\"blast-zone\">\n      <div className=\"top-row\">\n        <HudPanel title=\"Controls\">\n          {controls}\n        </HudPanel>\n        <HudPanel title=\"Console\">\n          {console}\n        </HudPanel>\n        <HudPanel title=\"Status Indicators\">\n          {statusIndicators}\n        </HudPanel>\n      </div>\n      <div className=\"mid-row\">\n        <HudPanel title=\"Tactical Grid\">\n          <Grid width={100} height={100} startAt={[this.state.gridX,this.state.gridY]}></Grid>\n        </HudPanel>\n      </div>\n\n      <div className=\"bottom-row\">\n        <HudPanel title=\"OhWell\">\n          <span>:)</span>\n        </HudPanel>\n      </div>\n    </div>;\n  }\n}","import React from \"react\";\nimport { Game } from \"./components\";\nimport { BlastZone }  from \"screens/BlastZone\";\ninterface AppState {\n  loadedScene: string\n}\nexport default class App extends React.Component<void, AppState> {\n\n  scenes:{} = {\n    BlastZone,\n    Game,\n  }\n  SelectedScene = null;\n  constructor(props: void) {\n    super(props);\n    this.state = {\n      loadedScene: 'Game'\n    }\n    this.handleChange.bind(this);\n  }\n  componentDidMount() {\n  }\n\n  handleChange(e) {\n    // e.target.value;\n    console.log(e)\n    console.log(e.target)\n    console.log(e.target.value)\n    const sceneToLoad = e.target.value;\n    this.setState(prevState => {return {loadedScene: sceneToLoad}});\n  }\n\n  render() {\n    let SelectedScene = this.scenes[this.state.loadedScene];\n    return <div className=\"app\">\n      <div className=\"meta-bar\">\n        <div className=\"screen-switch\">\n          <span>Select screen: </span>\n          <select value={this.state.loadedScene} onChange={(e)=>this.handleChange(e)}>\n            <option value=\"BlastZone\">BlastZone</option>\n            <option value=\"Game\">Game</option>\n          </select>\n        </div>\n      </div>\n      <SelectedScene/>\n    </div>\n  }\n}","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./style.scss\";\n\n// Rendering the top-level Game component\n// render(<Game />, document.getElementById(\"root\"));\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}