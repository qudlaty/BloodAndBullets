{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/EntityView/LinearDisplay.js","components/EntityView/EntityView.js","components/EntitiesList/EntitiesList.js","components/Game/EntitiesValues.js","components/Game/Game.js","index.js"],"names":["Square","renderCounter","nextProps","nextState","JSON","stringify","this","props","className","localId","squareId","active","icon","isBreathing","isShooting","randomTime","Math","random","toFixed","animationBreathing","targetCoords","targetPosition","projectileNumber","projectiles","customStyle","position","x","y","distanceToTargetX","distanceToTargetY","actualDistance","sqrt","pow","weaponType","angle","atan","PI","calcNewAangle","push","key","projectile","onClick","blood","style","animation","React","Component","Board","handleClick","bind","i","console","log","rowId","colId","square","squares","entity","rowNumber","colNumber","inventory","cellId","rows","Array","size","fill","map","row","number","cells","cell","renderSquare","PureComponent","LinearDisplay","percentage","current","max","overload","progressStyle","width","title","label","EntityView","renderCount","lifeSigns","name","age","clear","display","textAlign","hp","maxHp","rounds","maxRounds","ListOfEntities","entities","obj","isFriendly","equipment","head","damage","hasWeapon","Game","stepNumber","nextTurn","setState","autoLoop","loop","addBlood","amount","switchAutoLoop","previousState","state","selected","arenaSize","isBoardRotated","EntitiesValues","getSquare","setSquare","setEntityWithinASquare","toggleRotateBoard","parse","forEach","targetSquareIndex","value","localCopyOfPreviousState","JR","OP","findEntityById","moveEntityRandomly","processEntities","setTimeout","oldPositionX","oldPositionY","floor","localCopyOfEntities","localCopyOfSquares","damageApplied","filter","potentialTargetEntity","targetEntity","isBleeding","setSquaresAccordingToEntities","id","selectedInEntities","getEntityId","deselectAllEntities","setSelected","selectedEntity","dmg","boardClassName","handleBoardClick","nuke","type","checked","onChange","render","document","getElementById"],"mappings":"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","file":"static/js/main.7ff47e2e.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Square.scss\";\r\n\r\nclass Square extends React.Component {\r\n  /*\r\n    We use PureComponent, so it compares new props with previous props,\r\n    and only re-renders when props changed.\r\n   */\r\n  renderCounter = 0\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if(JSON.stringify(nextProps) === JSON.stringify(this.props)) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    this.renderCounter++;\r\n    //console.log(\"Rendering Square\", this.renderCounter, this.props);\r\n\r\n    let className = \"square\";\r\n    let localId = `Sq${this.props.squareId}`;\r\n\r\n    if(this.props.active) {\r\n      className += \" active\";\r\n    }\r\n    if(this.props.icon){\r\n      if(this.props.isBreathing) {\r\n        className += \" breathing\";\r\n      } else {\r\n        className += \" dead\";\r\n      }\r\n      if(this.props.isShooting) {\r\n        className += \" shooting\";\r\n      }\r\n    }\r\n\r\n    let randomTime = `${(Math.random()+0.5).toFixed(2)}s`\r\n    let animationBreathing = this.props.isBreathing ?\r\n        `breathing ${randomTime} alternate infinite linear` : 'none';\r\n\r\n    let targetCoords = this.props.targetPosition;\r\n    let projectileNumber = 5;\r\n    let projectiles = [];\r\n    let customStyle = \"\";\r\n\r\n    let calcNewAangle = function(x, y){\r\n      let angle;\r\n      if(y >= 0) {\r\n        angle = - Math.atan(\r\n          x/y\r\n        ) * (180/Math.PI);\r\n      } else if(y < 0) {\r\n        angle = (180/Math.PI) *\r\n          (\r\n            Math.atan(\r\n              x/-y\r\n            ) + Math.PI\r\n          )\r\n      }\r\n      return angle;\r\n    }\r\n\r\n    if((this.props.targetPosition && this.props.position && this.props.isShooting) &&\r\n      (this.props.targetPosition.x !== this.props.position.x ||\r\n      this.props.targetPosition.y !== this.props.position.y)) {\r\n\r\n      if(targetCoords) {\r\n\r\n        let distanceToTargetX = 38*(targetCoords.x-this.props.position.x);\r\n        let distanceToTargetY = 38*(targetCoords.y-this.props.position.y);\r\n        let actualDistance = Math.sqrt(Math.pow(distanceToTargetX, 2) + Math.pow(distanceToTargetY, 2));\r\n        if(this.props.weaponType === 'Lazer') {\r\n\r\n          let className=`projectile${localId}_beam`;\r\n          let projectile= \"\";\r\n          let angle = calcNewAangle(distanceToTargetX, distanceToTargetY);\r\n          customStyle = `\r\n            @keyframes pulsing${localId} {\r\n              0%  {opacity: 0.1;}\r\n              100%  {opacity: 1;}\r\n            }\r\n\r\n            @keyframes elongating${localId} {\r\n              0%  {width: ${actualDistance - 20};}\r\n              100%  {width: ${actualDistance + 20};}\r\n            }\r\n\r\n            .${className} {\r\n              width: ${actualDistance}px;\r\n              height: 3px;\r\n              border-radius: 5px;\r\n              background: #F00;\r\n              position: absolute;\r\n              top: 16px;\r\n              left: 16px;\r\n\r\n              transform: rotate(${angle + 90}deg);\r\n              transform-origin: left 0px;\r\n              animation: pulsing${localId} 0.1s linear infinite,\r\n              elongating${localId} 1s linear alternate infinite;\r\n              box-shadow: 0 0 5px 5px white;\r\n              z-index: 10;\r\n            }\r\n\r\n            `;\r\n\r\n          projectiles.push(<div key={className} className={className}>{projectile}</div>);\r\n        }else {\r\n\r\n          customStyle = `\r\n            @keyframes shooting${localId} {\r\n              0%   {transform: scale(1);}\r\n              100% {transform: translate(\r\n                ${36*(targetCoords.x-this.props.position.x)}px,\r\n                ${36*(targetCoords.y-this.props.position.y)}px\r\n              )}\r\n            }\r\n\r\n            `;\r\n\r\n          while(projectileNumber--) {\r\n            customStyle += `\r\n            .projectile${localId}_${projectileNumber} {\r\n              position: absolute;\r\n              top: 5px;\r\n              left: 0px;\r\n              width: 100%;\r\n              height: 100%;\r\n              line-height: 34px;\r\n              font-size: 17px;\r\n              animation: shooting${localId} 0.5s linear infinite;\r\n              animation-delay: ${projectileNumber  * 0.5}s;\r\n              color: white;\r\n            }`;\r\n          };\r\n          let projectile = this.props.isShooting ? \"*\" : \"\";\r\n\r\n          projectileNumber = 5;\r\n\r\n          while(projectileNumber--) {\r\n            let className=`projectile projectile${localId}_${projectileNumber}`\r\n            projectiles.push(<div key={className} className={className}>{projectile}</div>);\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <button className={className} onClick={() => this.props.onClick(this.props.squareId)}>\r\n        <div className=\"blood\">{this.props.blood}</div>\r\n        <div className=\"content\" style={{\r\n          animation: animationBreathing\r\n        }}>{this.props.icon}</div>\r\n        <style>\r\n            {customStyle}\r\n        </style>\r\n        {projectiles}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from '../Square';\r\nimport './Board.scss';\r\n\r\nexport default class Board extends React.PureComponent {\r\n  renderCounter = 0\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(i) {\r\n    console.log(\"Handles Click on Board\", i);\r\n    this.props.onClick(i);\r\n  }\r\n\r\n  renderSquare(i, rowId, colId) {\r\n    /*\r\n    We pass one and the same function to all the Squares when rendering,\r\n    so they do not detect getting a new fat-arrow function as a change of props.\r\n\r\n    This is CRUCIAL to only rerender squares with changed values.\r\n\r\n    Additionally, we need to ensure that Unchanged squares have the same values of objects passed down here.\r\n    */\r\n    let square = this.props.squares[i];\r\n    let entity = this.props.squares[i] && this.props.squares[i].entity;\r\n    return (\r\n      <Square\r\n        key={i}\r\n        squareId={i}\r\n        rowNumber={rowId}\r\n        colNumber={colId}\r\n\r\n        onClick={this.handleClick}\r\n\r\n        icon={entity && entity.icon}\r\n        active={entity && entity.active}\r\n        isBreathing={entity && entity.isBreathing}\r\n\r\n        blood={square && square.blood}\r\n\r\n        isShooting={entity && entity.isShooting}\r\n        weaponType={entity && entity.inventory && entity.inventory[0]}\r\n\r\n        position={entity && entity.position}\r\n        targetPosition={entity && entity.targetPosition}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // console.log(\"Rendering Board. #\", this.renderCounter++);\r\n\r\n    // Initial values for the Board\r\n    let cellId=0;\r\n    let rowId=0;\r\n    let colId;\r\n\r\n    let rows = Array(this.props.size).fill(null).map((row, number) => {\r\n      colId = 0;\r\n      let cells = Array(this.props.size).fill(null).map((cell, number) => {\r\n        return this.renderSquare(cellId++, rowId, colId++);\r\n      });\r\n      return (\r\n        <div key={rowId++} className=\"board-row\">\r\n          {cells}\r\n        </div>\r\n      );\r\n    });\r\n\r\n    let className = \"board \" + this.props.className;\r\n    return (\r\n      <div className={className}>\r\n        {rows}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './LinearDisplay.scss';\nexport default function LinearDisplay(props) {\n  let className=`linear-display ${props.className || ''}`\n  let percentage = ~~(props.current * 100 / props.max);\n  let overload = percentage > 100;\n  if(overload) {\n    percentage = 100;\n    className += \" overload \";\n  }\n\n  let progressStyle = {\n    width: `${percentage}%`,\n  }\n  let title = props.title || `${props.current}/${props.max}`;\n  return (\n    <div className={className}>\n      <div className=\"linear-display__label\">{props.label}:&nbsp;</div>\n      <div className=\"linear-display__bar-container\"\n        title={title}\n      >\n        <div className=\"linear-display__bar-progress\" style={progressStyle}>\n          <span className=\"linear-display__bar-progress-text\">{props.current}{overload ? '/'+props.max : ''}&nbsp;</span>\n        </div>\n      </div>\n      <div>&nbsp;</div>\n    </div>\n  );\n}\n","import React from 'react';\r\nimport LinearDisplay from './LinearDisplay';\r\n\r\nimport './EntityView.scss';\r\n\r\nclass EntityView extends React.Component {\r\n  renderCount = 0\r\n\r\n  render() {\r\n    // console.log(\"Rendering EntityView. #\", this.renderCount++);\r\n    let { entity } = this.props;\r\n    /*\r\n      FIXME: Below should be separated into several sub-components\r\n      Each sub-component should receive flat data (position, hp, ...)\r\n     */\r\n    let className = \"entity\";\r\n    if(entity.active) {\r\n      className+=\" active\";\r\n    }\r\n\r\n    let { isBreathing } = entity;\r\n    let lifeSigns = isBreathing ? \"ALIVE\" : \"DEAD\";\r\n    return (\r\n\r\n      <div className={className}>\r\n        <div>\r\n          <div className=\"portrait\">\r\n            {entity.icon}\r\n          </div>\r\n          <div className=\"position\" title=\"Position\">\r\n            <span>[{entity.position.x}, {entity.position.y}]</span>\r\n          </div>\r\n\r\n        </div>\r\n        <strong title=\"Name\">{entity.name}</strong>\r\n        <em title=\"Age\"> ({entity.age})</em>\r\n        <br />\r\n        {` `}{lifeSigns}\r\n        <br />\r\n\r\n        <div style={{\r\n          clear: \"both\",\r\n          display: \"inline-block\",\r\n          textAlign: \"right\",\r\n        }}>\r\n          <LinearDisplay label=\"HP\" current={entity.hp} max={entity.maxHp} /><br/>\r\n          <LinearDisplay label=\"Rounds\" current={entity.rounds} max={entity.maxRounds} />\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EntityView;\r\n","import React from 'react';\nimport EntityView from '../EntityView';\nimport './EntitiesList.scss';\n\nexport default class ListOfEntities extends React.Component {\n  renderCounter = 0\n  render() {\n    // console.log(\"Rendering EntitiesList #\", this.renderCounter++);\n    var entities = this.props.entities.map(obj => {\n      return (\n        <EntityView entity={obj} key={obj.name}/>\n      )\n    });\n    return (\n      <>\n        <h4 className=\"list-of-entities__header\">List of Entities:</h4>\n        <div className=\"list-of-entities\">\n            {entities}\n        </div>\n      </>\n    );\n  }\n}\n","const entities = [\r\n  {\r\n    name: \"John Rambo\", age: 40, hp: 95, maxHp: 100,\r\n    icon: \"😠\",\r\n    isBreathing: true,\r\n    isFriendly: true,\r\n    position: {x:0, y:0},\r\n    inventory: ['KA-BAR', 'M16'],\r\n    equipment: {head: 'Red Bandana'},\r\n    damage: 1, rounds: 10, maxRounds: 15, hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Ellen Replay\", age: 30, hp: 50, maxHp: 65,\r\n    icon: \"👩\",\r\n    isBreathing: true,\r\n    isFriendly: true,\r\n    position: {x:0, y:1},\r\n    inventory: ['Lazer', 'Motion Detector'],\r\n    equipment: {head: 'Afro'},\r\n    damage: 1, rounds: 10, maxRounds: 10, hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Lazer Blady\", age: 60, hp: 75, maxHp: 100,\r\n    icon: \"🧑🏻\",\r\n    isBreathing: true,\r\n    isFriendly: true,\r\n    position: {x:4, y:8},\r\n    inventory: ['Lazer'],\r\n    equipment: {},\r\n    damage: 10, rounds: 3, maxRounds: 3, hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Octo\", age: 8, hp: 288, maxHp: 300,\r\n    icon: \"🐙\",\r\n    isBreathing: true,\r\n    position: {x:8, y:8},\r\n  },\r\n  {\r\n    name: \"Squid\", age: 5, hp: 55, maxHp: 55,\r\n    icon: \"🦑\",\r\n    isBreathing: true,\r\n    position: {x:5, y:5},\r\n  },\r\n  {\r\n    name: \"Ant\", age: 1, hp: 35, maxHp: 40,\r\n    icon: \"🐜\",\r\n    isBreathing: true,\r\n    position: {x:7, y:6},\r\n  },\r\n  {\r\n    name: \"Spider\", age: 1, hp: 60, maxHp: 50,\r\n    icon: \"🕷️\",\r\n    isBreathing: true,\r\n    position: {x:9, y:3},\r\n  },\r\n  {\r\n    name: \"Mosquito\", age: 1, hp: 12, maxHp: 20,\r\n    icon: \"🦟\",\r\n    isBreathing: true,\r\n    position: {x:2, y:7},\r\n  },\r\n  {\r\n    name: \"Microbe\", age: 1, hp: 1, maxHp: 5,\r\n    icon: \"🦠\",\r\n    isBreathing: true,\r\n    position: {x:3, y:5},\r\n  },\r\n\r\n];\r\n\r\nexport default entities;\r\n","import React from 'react';\r\nimport Board from '../Board';\r\nimport EntitiesList from '../EntitiesList';\r\nimport EntitiesValues from './EntitiesValues';\r\nimport './Game.scss';\r\n\r\nexport default class Game extends React.PureComponent {\r\n  /*\r\n    We have `state.entities` and we have `squares`,\r\n    both of which are representing the actual state of the game.\r\n    Perhaps we should keep squares within the state.\r\n  */\r\n  renderCounter = 0\r\n  stepNumber = 0\r\n  //squares = Array(5*5).fill(null)\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Initial value of game state\r\n    this.state = {\r\n      selected: null,\r\n      arenaSize: 10,\r\n      isBoardRotated: false,\r\n      entities: EntitiesValues,\r\n      squares: [],\r\n      autoLoop: true,\r\n    }\r\n\r\n    this.loop = this.loop.bind(this);\r\n    this.getSquare = this.getSquare.bind(this);\r\n    this.setSquare = this.setSquare.bind(this);\r\n    this.setEntityWithinASquare = this.setEntityWithinASquare.bind(this);\r\n    this.toggleRotateBoard = this.toggleRotateBoard.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.loop();\r\n  }\r\n\r\n  setSquaresAccordingToEntities() {\r\n    this.setState((previousState)=>{\r\n      let squares = JSON.parse(JSON.stringify(previousState.squares));\r\n      //let squares = previousState.squares;\r\n\r\n      previousState.entities.forEach((entity)=>{\r\n        this.setEntityWithinASquare(squares, entity.position.x, entity.position.y, entity);\r\n      });\r\n\r\n      return {squares};\r\n    });\r\n  }\r\n\r\n  getSquare(squares, x, y) {\r\n    return squares[this.targetSquareIndex(x, y)];\r\n  }\r\n\r\n  setSquare(squares, x, y, value) {\r\n    squares[this.targetSquareIndex(x, y)] = value;\r\n  }\r\n\r\n  setEntityWithinASquare(squares, x, y, entity) {\r\n    let targetSquareIndex = this.targetSquareIndex(x, y);\r\n    if(!squares[targetSquareIndex]) {\r\n      squares[targetSquareIndex] = {};\r\n    }\r\n    squares[targetSquareIndex].entity = entity;\r\n  }\r\n\r\n  targetSquareIndex(x, y) {\r\n    return y * this.state.arenaSize + x;\r\n  }\r\n\r\n  loop() {\r\n    this.stepNumber++;\r\n    this.setState( (previousState) => {\r\n      // new copy of entities based on up-to-date state\r\n      let localCopyOfPreviousState = JSON.parse(JSON.stringify(previousState));\r\n      let { entities, squares } = localCopyOfPreviousState;\r\n\r\n      let JR = entities[0];// a reference to JR\r\n      let OP = this.findEntityById(entities, \"Squid\");\r\n      if(JR.isBreathing){\r\n        // John Rambo AI\r\n        // changing the original JR entity within entities array\r\n        this.moveEntityRandomly(squares, JR);\r\n        this.moveEntityRandomly(squares, OP);\r\n      }\r\n      //console.log(entities);\r\n      return {entities: entities, squares: squares};\r\n    });\r\n\r\n    this.processEntities();\r\n    if(this.state.autoLoop) {\r\n      setTimeout(this.loop, 1000);\r\n    }\r\n  }\r\n\r\n  nextTurn = () => {\r\n    this.setState({autoLoop: false});\r\n    this.loop();\r\n  }\r\n\r\n  moveEntityRandomly(squares, entity) {\r\n    // modifies entity in-place\r\n    let oldPositionX = entity.position.x;\r\n    let oldPositionY = entity.position.y;\r\n\r\n    entity.position.x = entity.position.x +\r\n      (Math.floor(Math.random()*2)) -\r\n      (Math.floor(Math.random()*2));\r\n    entity.position.y = entity.position.y +\r\n      (Math.floor(Math.random()*2)) -\r\n      (Math.floor(Math.random()*2));\r\n\r\n    if(entity.position.x < 0) entity.position.x = 0;\r\n    if(entity.position.y < 0) entity.position.y = 0;\r\n    if(entity.position.x > this.state.arenaSize - 1) entity.position.x = this.state.arenaSize - 1;\r\n    if(entity.position.y > this.state.arenaSize - 1) entity.position.y = this.state.arenaSize - 1;\r\n\r\n    let newSquare = this.getSquare(squares, entity.position.x, entity.position.y);\r\n\r\n    if (newSquare) {\r\n      entity.position.x = oldPositionX;\r\n      entity.position.y = oldPositionY;\r\n    }\r\n\r\n    if(\r\n      oldPositionX !== entity.position.x ||\r\n      oldPositionY !== entity.position.y\r\n    ) {\r\n      this.setEntityWithinASquare(squares, oldPositionX, oldPositionY, null);\r\n    }\r\n\r\n    // NO RETURN AS IT'S MODIFIED IN-PLACE return entity;\r\n    // WHICH IS A BAD HABIT, BUT OH SO COMFY.\r\n  }\r\n\r\n  processEntities(){\r\n    //console.log(\"Processing entities\");\r\n    this.setState((state) => {\r\n      let localCopyOfEntities = JSON.parse(JSON.stringify(state.entities));\r\n      let localCopyOfSquares = JSON.parse(JSON.stringify(state.squares));\r\n      localCopyOfEntities.forEach(entity => {\r\n\r\n        if(entity.isShooting && entity.targetPosition && (\r\n          entity.targetPosition.x !== entity.position.x ||\r\n          entity.targetPosition.y !== entity.position.y\r\n        )) {// We are shooting and not targetting ourselves\r\n\r\n          // should probably call a \"calculateDamageApplied\" method\r\n          let damageApplied = 0;\r\n          if(entity.rounds !== \"empty\" && entity.rounds > 0) {// if we still have ammo\r\n            // spending ammo\r\n            console.log(\"firing\");\r\n            entity.rounds--;\r\n            damageApplied = entity.damage;\r\n          } else if(entity.rounds === 0) {\r\n            // stop shooting when magazine is empty\r\n            entity.rounds = \"empty\";\r\n            entity.isShooting = false;\r\n            entity.damageApplied = 0;\r\n          } else if(entity.rounds === \"empty\") {\r\n            // when ordered to shoot with \"empty\" magazine state, load ammo instead\r\n            entity.rounds = entity.maxRounds;\r\n            entity.isShooting = false;\r\n            entity.damageApplied = 0;\r\n          }\r\n\r\n          /*\r\n          Searching for such an entity that its position is equal to our target position.\r\n          */\r\n          let targetEntities = localCopyOfEntities.filter((potentialTargetEntity) => {\r\n            return (\r\n              potentialTargetEntity.position.x === entity.targetPosition.x &&\r\n              potentialTargetEntity.position.y === entity.targetPosition.y\r\n            );\r\n          });\r\n          // console.log(targetEntities);\r\n          // Processing found target entities\r\n          targetEntities.forEach((targetEntity) => {\r\n            // should probably call a \"shoot\" method\r\n            // console.log(\"applying damage\")\r\n            if(damageApplied) {\r\n              targetEntity.isBleeding = true;\r\n            };\r\n            targetEntity.hp -= damageApplied;\r\n            if(targetEntity.hp <= 0) {\r\n              entity.isShooting = false;\r\n              console.log(\"target eliminated\");\r\n              return;\r\n            }\r\n          });\r\n\r\n        }\r\n\r\n        if(entity.isBleeding){\r\n          if(entity.hp > 0){\r\n            entity.hp -= 1;\r\n            let square = this.getSquare(localCopyOfSquares, entity.position.x, entity.position.y);\r\n            this.addBlood(square, 1);\r\n          }\r\n          console.log(entity.position.x, entity.position.y);\r\n        }\r\n\r\n        if(entity.hp <= 0){\r\n          entity.hp = 0;\r\n          entity.isBreathing = false;\r\n        }\r\n\r\n      });\r\n      return {entities: localCopyOfEntities, squares: localCopyOfSquares}\r\n    },\r\n      () => {\r\n        this.setSquaresAccordingToEntities();\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  addBlood = (square, amount) => {\r\n    if(!square) return;\r\n    if(!square.blood) {\r\n      square.blood = 1;\r\n    } else {\r\n      square.blood++;\r\n    }\r\n  }\r\n\r\n  getEntityId(entity) {\r\n    return entity.name;\r\n  }\r\n\r\n  findEntityById(entities, id) {\r\n    let result = entities.filter((entity) => entity.name === id)[0];\r\n    //console.log(\"found entity:\", result);\r\n    return result;\r\n  }\r\n\r\n  setSelected(entities, selected, value) {\r\n    let selectedInEntities = this.findEntityById(entities, this.getEntityId(selected));\r\n    if(value) {\r\n      selected.active = value;\r\n    } else {\r\n      selected = null;\r\n      console.log(\"Nullified:\", selected);\r\n    }\r\n    selectedInEntities.active = value;\r\n    return selected;\r\n  }\r\n\r\n  handleBoardClick(i) {\r\n    //console.log(\"CLICKED \", i);\r\n    const deselectAllEntities = (entities) => {\r\n      entities.forEach((entity) => {\r\n        entity.active = false;\r\n      });\r\n    };\r\n    this.setState((previousState) => {\r\n      let localCopyOfPreviousState = JSON.parse(JSON.stringify(previousState));\r\n      let { entities, squares, selected } = localCopyOfPreviousState;\r\n\r\n      if(squares[i] && squares[i].entity) {\r\n        if(selected && !squares[i].entity.isFriendly) {\r\n          if(selected.name === previousState.squares[i].entity.name) {\r\n            selected = this.setSelected(entities, selected, false);\r\n            console.log(selected);\r\n          } else {\r\n            let selectedEntity = this.findEntityById(entities, this.getEntityId(selected));\r\n            selectedEntity.targetPosition = previousState.squares[i].entity.position;\r\n            if(selectedEntity.hasWeapon ) {\r\n              selectedEntity.isShooting = true;\r\n            }\r\n          }\r\n        } else {\r\n          deselectAllEntities(entities);\r\n          selected = squares[i].entity;\r\n          this.setSelected(entities, selected, true);\r\n        }\r\n\r\n      } else {\r\n        /* Deselecting and stopping fire on all entities */\r\n        deselectAllEntities(entities);\r\n        entities.forEach(entity => {\r\n          entity.isShooting = false;\r\n        })\r\n        selected = null;\r\n      }\r\n\r\n      return {entities, squares, selected}\r\n    }, ()=> {\r\n      this.processEntities();\r\n    });\r\n\r\n  }\r\n\r\n  nuke(dmg){\r\n    //console.log(\"Nuking\")\r\n    this.setState( (state) => {\r\n      let localCopyOfEntities = JSON.parse(JSON.stringify(state.entities));\r\n      localCopyOfEntities.forEach(entity => {\r\n        entity.hp = entity.hp - dmg;\r\n      });\r\n      return {entities: localCopyOfEntities}\r\n    }, () => {\r\n      this.processEntities();\r\n    });\r\n  }\r\n\r\n\r\n  toggleRotateBoard(){\r\n    this.setState({isBoardRotated: !this.state.isBoardRotated});\r\n  }\r\n\r\n  switchAutoLoop = () => {\r\n    this.setState((previousState) => {\r\n      return {autoLoop: !previousState.autoLoop};\r\n    },()=>{\r\n      if(this.state.autoLoop) {\r\n        this.loop();\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let boardClassName = this.state.isBoardRotated ? \"rotated-board\" : \"\";\r\n    //console.log(\"Rendering Game. #\", this.renderCounter++);\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={this.state.squares}\r\n            onClick={(i) => this.handleBoardClick(i)}\r\n            size={this.state.arenaSize}\r\n            className={boardClassName}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"game-info\">\r\n\r\n          <span className=\"selected\">Selected: {this.state.selected && this.state.selected.name}</span>\r\n          <button\r\n            onClick={\r\n              ()=>{\r\n                this.nuke(40);\r\n              }\r\n            }\r\n            className=\"button button-nuke\"\r\n          >Nuke All</button>\r\n          <button onClick={this.toggleRotateBoard} className=\"button\">Rotate Board</button>\r\n          <button onClick={this.nextTurn} className=\"button\">Next Step</button>\r\n          <span className=\"step-counter\">Turn: {this.stepNumber}</span>\r\n          <label className=\"auto-cycle button\">\r\n            <input type=\"checkbox\" checked={this.state.autoLoop ? 'checked' : ''} onChange={this.switchAutoLoop}/>\r\n            <span>Auto Cycle</span>\r\n          </label>\r\n          <ul>\r\n            <li>Click Ellen Ripley on the board, to select her.</li>\r\n            <li>Click a target to shoot it.</li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"game-list\">\r\n          <EntitiesList\r\n            entities={this.state.entities}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\nimport { render } from 'react-dom';\nimport Game from './components/Game';\n\nimport './style.scss';\n\nrender(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}