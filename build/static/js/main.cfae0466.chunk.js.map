{"version":3,"sources":["services/index.ts","components/Game/Game.module.scss","helpers/index.ts","services/SquaresService/SquareClass.ts","services/SquaresService/SquaresService.ts","services/SquaresService/index.ts","services/EntitiesService/EntityFeatures.ts","services/EntitiesService/EntityClass.ts","services/EntitiesService/EntitiesService.ts","services/EntitiesService/index.ts","resources/ItemDefinitions.ts","helpers/Helpers.ts","services/GameModelService/GameModelService.ts","services/GameModelService/index.ts","resources/CharacterDefinitions.ts","components/Board/Board.module.scss","services/GameLogicService/index.ts","services/GameLogicService/GameLogicService.ts","services/ItemService/ItemClasses.ts","services/ItemService/index.ts","services/MessageService/MessageService.ts","services/MessageService/index.ts","services/GameActionsService/GameActionsService.tsx","services/GameActionsService/index.ts","components/Square/Blood.tsx","components/Square/Items.tsx","components/Square/Square.tsx","components/HpBar/HpBar.tsx","components/ShootingVisualization/ShootingVisualization.tsx","components/EntityPawn/EntityPawn.tsx","components/Board/Board.tsx","components/LinearDisplay/LinearDisplay.tsx","components/InventoryItem/InventoryItem.tsx","components/InventoryList/InventoryList.tsx","components/EntityCard/EntityCard.tsx","resources/StructureDefinitions.ts","components/Game/TargetedSquareInfo.tsx","components/Game/SelectedEntityInfo.tsx","components/MessageBox/MessageBox.tsx","components/Game/Game.tsx","components/HudPanel/HudPanel.tsx","components/EntitiesList/EntitiesList.tsx","components/Grid/Cell.tsx","components/Grid/Grid.tsx","components/Controls/Controls.tsx","screens/BlastZone/BlastZone.tsx","App.tsx","index.js"],"names":["module","exports","Square","squareType","item","this","addToInventory","inventory","HavingInventory","SquaresService","arenaSize","squares","i","initializeSquareIfEmpty","x","y","targetSquareIndex","value","squareIndex","Math","floor","entity","setEntityWithinASquare","position","square","amount","blood","Helpers","isTargeted","active","j","getSquare","isAvailableDestination","setSquare","forEach","isLit","isFriendly","isInTwilightZone","Identifiable","name","icon","Positionable","undefined","Movable","moveDestination","setMoveDestinationPosition","targetSquarePosition","targetPosition","targetSquare","isDead","isChosenDestination","MessageService","send","Mortal","hp","maxHp","Bleedable","bleeding","bleedingReductionPerTurn","bloodReleased","isAlive","bleed","addBlood","Breathing","isSupposedToBeBreathing","Combative","isShooting","ceaseFire","hasWeapon","targetedSquarePosition","itemName","actualItemIndex","findIndex","splice","push","HavingEquipment","equipment","unEquipFromHands","takeFromInventory","hands","Weapon","Entity","props","Object","assign","applyMixins","EntitiesService","entities","selected","id","filter","oldPositionX","oldPositionY","newSquare","isBreathing","potentialTargetEntity","targeted","selectedInEntities","findEntityById","getEntityId","console","log","damageApplied","weapon","isAbleToFire","fire","rounds","checkAmmoAndCalculateDamageApplied","getEntitiesAtGivenPosition","targetEntity","applyDamageToTargetEntity","ceaseFireNextTickIfTargetIsKilled","damage","chosenDestinationSquare","moveEntityIntoChosenDestination","moveEntityRandomly","M16","maxRounds","Rifle","M40","L30","Lazer","resetGivenFieldsOnACollection","collection","fieldNames","fieldName","getNumberWithinBoundaries","min","max","getRandomIntInclusive","random","calculateAngle","angle","atan","PI","calculateDistance","sqrt","pow","derivedCtor","baseCtors","baseCtor","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","isSelectedTargeted","turnFlagsIntoClasses","flags","classNameBase","flagsToClassess","className","keys","key","newCopyOfArray","array","concat","getCssClassesForAGivenSquare","squareClassName","GameModel","saveMap","squaresProcessedForSave","JSON","parse","stringify","map","squaresStringified","result","window","prompt","localStorage","loadMap","mapNames","message","squaresLoaded","loadMapIntoBoard","index","sourceSquare","loadEntities","loadBuiltInMap","tutorial_map_00","loadPredefinedEntitities","characterDefinitions","age","entry","GameLogic","model","run","calculateNextInterfaceState","previousState","nextState","markAvailableDestinationsForSelectedEntity","syncSquaresWithEntities","length","setEntityWithinApropriateSquare","deselectAllEntities","moveEntities","isEntityShootingProperly","fireAShot","bleedExternally","stopBreathingForKilledEntity","enemiesAlive","calculateNumberOfAliveEnemies","amountOfAliveEnemies","causesBleeding","range","RangedWeapon","type","messages","component","GameActionsClass","that","toggleEditorMode","state","isEditorOn","setState","prevState","loop","stepNumber","drawAggro","processEntities","autoLoop","setTimeout","nextTick","handleClickV2","selectedSquareNumber","targetedSquareNumber","previousTargeted","doubleClick","markSquareAsTargeted","setMoveDestinationSquare","selectEntityFromGivenSquare","attackPosition","processInterface","aggro","actor","entitiesToAttack","findEntitiesThatAreClose","firstAmongThem","nuke","dmg","toggleRotateBoard","isBoardRotated","switchAutoLoop","onInventoryClick","entityId","actualEntity","equipInHands","handleDeselectAllEntities","calculateNextGameState","setSquaresAccordingToEntities","newlyFoundEntities","Blood","bloodAmount","bloodNumbers","style","left","top","React","PureComponent","Items","itemsIcons","items","itemsNumber","SquareComponent","onClick","squareId","classPrefix","cuboidFaces","cuboid","HpBar","percentage","current","progressStyle","width","backgroundColor","color","Component","ShootingVisualization","calcNewAangle","targetCoords","projectileNumber","projectiles","localId","customStyle","distanceToTargetXInUnits","distanceToTargetYInUnits","actualDistanceInUnits","weaponType","projectile","EntityPawn","randomTime","toFixed","classessFromFlags","fof","zIndex","animationBreathing","boardPadding","animation","Board","handleClick","EntityPawns","BoardSquares","colId","cellId","rowId","Array","size","fill","row","number","cells","cell","renderSquare","styles","board","isRotated","LinearDisplay","overload","title","divider","progressGridStyle","backgroundSize","backgroundImage","label","InventoryItem","reloadButton","dropButton","ammoCounter","onDrop","reload","onReload","InventoryList","inventoryItems","EntityCard","renderCount","handleInventoryClick","addItem","inHands","inHandsArray","clear","display","textAlign","structures","box","redBarrel","TargetedSquareInfo","boxSerialNumber","onItemClick","squareNumber","targetedSquare","structureType","newStructure","entityInfo","distanceInfo","positionInfo","bloodInfo","availableActions","editorButtons","onAddStructureClick","GameStyles","button","distanceToSelected","onMoveClick","onAttackClick","targeted__label","SelectedEntityInfo","selected__label","MessageBox","messageNumber","renderMessage","RenderedMessages","requestAnimationFrame","element","document","getElementById","scrollTop","scrollHeight","scrollElement","GameActions","Game","renderCounter","squareSize","game","status","game__board","fontSize","game__info","actions","zoomIn","zoomOut","checked","onChange","HudPanel","children","Cell","Grid","gridReference","scroll","mapdrag","stateDriven","createRef","deltaX","deltaY","executeScroll","rows","height","sourceY","startAt","currentRow","sourceX","currentCell","ref","onMouseDown","e","onMouseUp","onMouseMove","handleMove","onContextMenu","preventDefault","onDrag","onMouseDrag","scrollRelativeXY","movementX","movementY","event","target","onChangeScrollX","onChangeScrollY","switchStateDriven","renderGrid","Controls","w","s","a","d","addEventListener","onKeyDown","onKeyUp","keyCode","onKeyPress","BlastZone","gridX","gridY","controls","onControlPress","statusIndicators","App","scenes","SelectedScene","loadedScene","handleChange","bind","sceneToLoad","render"],"mappings":"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","file":"static/js/main.cfae0466.chunk.js","sourcesContent":["// Services - handlers of abstractions\nexport * from \"./EntitiesService\";\nexport * from \"./SquaresService\";\nexport * from \"./ItemService\";\nexport * from \"./MessageService\";\nexport * from \"./GameLogicService\";\nexport * from \"./GameModelService\";\nexport * from \"./GameActionsService\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"Game_game__229bL\",\"game__board\":\"Game_game__board__1KMto\",\"game__info\":\"Game_game__info__3kjt8\",\"game__list\":\"Game_game__list__yMHF0\",\"status\":\"Game_status__21KP9\",\"button\":\"Game_button__1_Ze4\",\"button-nuke\":\"Game_button-nuke__xGjPs\",\"actions\":\"Game_actions__2-VcJ\",\"interaction-container\":\"Game_interaction-container__3RZ7s\",\"selected\":\"Game_selected__ZRNAo\",\"targeted\":\"Game_targeted__3gJqr\",\"selected__label\":\"Game_selected__label__2d30g\",\"targeted__label\":\"Game_targeted__label__328kg\",\"step-counter\":\"Game_step-counter__hrmzE\",\"auto-cycle\":\"Game_auto-cycle__1cp6W\",\"kbd-navigation\":\"Game_kbd-navigation__10pCT\",\"square\":\"Game_square__3r5qO\"};","// Helpers - various assorted tasks not fit to be in a service\r\nexport * from \"./Helpers\";\r\n","import { Item } from \"../ItemService\";\nimport { Entity, HavingInventory } from \"../EntitiesService\";\n\nexport interface Square {\n  entity?: Entity;\n  blood?: number;\n  squareType: string;\n  isAvailableDestination?: boolean;\n  isChosenDestination?: boolean;\n  isTargeted?: boolean;\n  isLit?: boolean;\n  isInTwilightZone?: boolean;\n  addItem(item: Item): void;\n}\n\nexport class Square extends HavingInventory implements Square {\n  public squareType: string = \"nothing\";\n  addItem(item: Item) {\n    this.addToInventory(item);\n  }\n  get items() {\n    return this.inventory;\n  }\n}\n","import * as Helpers from \"../../helpers/Helpers\";\nimport { Square } from \"./SquareClass\";\nimport { Entity, Position } from \"../EntitiesService\";\n\nclass SquaresServiceClass {\n  arenaSize: number = 10;\n\n  squares: Square[] = [];\n\n  constructor() {\n    let i = this.arenaSize * this.arenaSize;\n    while (i-- !== 0) {\n      this.initializeSquareIfEmpty(i);\n    }\n  }\n\n  getSquare(x: number, y: number): Square {\n    return this.squares[this.targetSquareIndex(x, y)];\n  }\n\n  setSquare(x: number, y: number, value): void {\n    this.squares[this.targetSquareIndex(x, y)] = value;\n  }\n\n  targetSquareIndex(x: number, y: number): number {\n    return y * this.arenaSize + x;\n  }\n\n  targetSquarePosition(squareIndex: number): Position {\n    let x: number, y: number;\n    y = Math.floor(squareIndex / this.arenaSize);\n    x = squareIndex % this.arenaSize;\n    return { x, y };\n  }\n\n  setEntityWithinApropriateSquare(entity: Entity): void {\n    this.setEntityWithinASquare(entity.position.x, entity.position.y, entity);\n  }\n\n  setEntityWithinASquare(x: number, y: number, entity: Entity) {\n    let squareIndex: number = this.targetSquareIndex(x, y);\n    this.initializeSquareIfEmpty(squareIndex);\n    this.squares[squareIndex].entity = entity;\n  }\n\n  addBlood(square: Square, amount: number) {\n    if (!square.blood) {\n      square.blood = amount;\n    } else {\n      square.blood += amount;\n    }\n  }\n\n  markSquareAsTargeted(squareIndex: number): void {\n    Helpers.resetGivenFieldsOnACollection(this.squares, \"isTargeted\");\n    this.initializeSquareIfEmpty(squareIndex);\n    this.squares[squareIndex].isTargeted = true;\n  }\n\n  initializeSquareIfEmpty(squareIndex: number) {\n    if (!this.squares[squareIndex]) {\n      this.squares[squareIndex] = new Square();\n    }\n  }\n\n  markAvailableDestinationsForSelectedEntity(entity: Entity): void {\n    if (entity.active) {\n      let { x, y } = entity.position;\n\n      Helpers.resetGivenFieldsOnACollection(this.squares, \"isAvailableDestination\");\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize || (i === x && j === y)) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n          if (square.squareType === \"floor\") {\n            square.isAvailableDestination = true;\n          }\n\n          this.setSquare(i, j, square);\n        }\n      }\n    }\n  }\n  lightAllSquares(): void {\n    this.squares.forEach((square) => (square.isLit = true));\n  }\n  castLightsFromFriendlyEntity(entity: Entity): void {\n    if (entity.isFriendly) {\n      let { x, y } = entity.position;\n\n      for (let j = y - 2; j <= y + 2; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 2; i <= x + 2; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n\n          square.isInTwilightZone = true;\n          this.setSquare(i, j, square);\n        }\n      }\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n\n          square.isLit = true;\n          this.setSquare(i, j, square);\n        }\n      }\n    }\n  }\n}\n\nexport const SquaresService = new SquaresServiceClass();\n","export * from \"./SquaresService\";\r\nexport * from \"./SquareClass\";\r\n","import { Item, Weapon, Square } from \"..\";\nimport { SquaresService, MessageService } from \"..\";\nimport * as Helpers from \"../../helpers\";\n\n/** Position on a grid */\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport class Identifiable {\n  name: string = \"An Entity\";\n  icon: string = \"E\";\n}\n\nexport class Positionable {\n  position: Position = { x: undefined, y: undefined };\n\n  get square(): Square {\n    let square = SquaresService.getSquare(this.position.x, this.position.y);\n    return square;\n  }\n}\n\nexport class Movable extends Identifiable {\n  moveDestination: Position;\n\n  setMoveDestinationSquare(squareIndex: number) {\n    this.setMoveDestinationPosition(SquaresService.targetSquarePosition(squareIndex));\n  }\n\n  setMoveDestinationPosition(targetPosition: Position) {\n    let targetSquare = SquaresService.getSquare(targetPosition.x, targetPosition.y);\n    if (!targetSquare.entity || targetSquare.entity.isDead) {\n      this.moveDestination = targetPosition;\n      Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\");\n      targetSquare.isChosenDestination = true;\n    } else {\n      MessageService.send(`${this.name} can't move into square (${targetPosition.x}, ${targetPosition.y})`);\n    }\n  }\n}\n\nexport class Mortal extends Positionable {\n  hp: number = 100;\n  maxHp: number = 100;\n  get isDead(): boolean {\n    return this.hp <= 0;\n  }\n  get isAlive(): boolean {\n    return this.hp > 0;\n  }\n}\n\nexport class Bleedable extends Mortal {\n  bleeding: number;\n  bleedingReductionPerTurn: number = 1;\n  bleed(): number {\n    let entity = this;\n    let bloodReleased = 0;\n    if (entity.bleeding && entity.isAlive) {\n      bloodReleased = entity.bleeding;\n      entity.hp -= bloodReleased;\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n    }\n    return bloodReleased;\n  }\n\n  bleedExternally() {\n    if (!this.bleeding) return;\n    let entity = this;\n    let bloodReleased = this.bleed();\n    let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\n    SquaresService.addBlood(square, bloodReleased);\n  }\n}\n\nexport class Breathing extends Mortal {\n  isSupposedToBeBreathing: boolean = undefined;\n  get isBreathing(): boolean {\n    return this.isAlive && this.isSupposedToBeBreathing;\n  }\n  set isBreathing(value: boolean) {\n    this.isSupposedToBeBreathing = value;\n  }\n}\n\nexport class Combative extends Identifiable {\n  targetPosition: Position;\n  isShooting?: boolean;\n  ceaseFire?: boolean;\n  hasWeapon?: boolean;\n  attackPosition(targetedSquarePosition: Position) {\n    if (this.hasWeapon) {\n      this.targetPosition = targetedSquarePosition;\n      this.isShooting = true;\n    } else {\n      MessageService.send(`${this.name} can't shoot - no weapon equipped`);\n    }\n  }\n}\n\nexport class HavingInventory {\n  inventory: Item[];\n  takeFromInventory(itemName: string): Item {\n    let actualItemIndex = this.inventory.findIndex((item) => item.name === itemName);\n    let actualItem = this.inventory.splice(actualItemIndex, 1)[0];\n\n    return actualItem;\n  }\n  addToInventory(item: Item) {\n    if (!this.inventory) {\n      this.inventory = [];\n    }\n    this.inventory.push(item);\n  }\n}\n\nexport class HavingEquipment extends HavingInventory {\n  equipment: any;\n  hasWeapon?: boolean;\n\n  equipInHands(itemName: string) {\n    this.unEquipFromHands();\n    let item = this.takeFromInventory(itemName);\n    this.equipment.hands = item;\n    if (item instanceof Weapon) {\n      this.hasWeapon = true;\n    } else {\n      this.hasWeapon = false;\n    }\n  }\n\n  unEquipFromHands() {\n    if (this.equipment.hands) {\n      this.inventory.push(this.equipment.hands);\n      this.equipment.hands = null;\n      this.hasWeapon = false;\n    }\n  }\n}\n","import { applyMixins } from \"../../helpers\";\nimport {\n  Identifiable,\n  Positionable,\n  Mortal,\n  Bleedable,\n  Movable,\n  Breathing,\n  Combative,\n  HavingInventory,\n  HavingEquipment,\n} from \".\";\n\nexport class Entity {\n  // Extended by mixins below\n  constructor(...props) {\n    Object.assign(this, ...props);\n  }\n  isFriendly?: boolean;\n  active?: boolean;\n}\n\n/************************************************************/\n/* Always update both lists */\n\nexport interface Entity\n  extends Identifiable,\n    Positionable,\n    Mortal,\n    Bleedable,\n    Movable,\n    Breathing,\n    Combative,\n    HavingInventory,\n    HavingEquipment {}\napplyMixins(Entity, [\n  Identifiable,\n  Positionable,\n  Mortal,\n  Bleedable,\n  Movable,\n  Breathing,\n  Combative,\n  HavingInventory,\n  HavingEquipment,\n]);\n\n/************************************************************/\n","import { Entity, Position, HavingInventory } from \".\";\nimport { SquaresService, Square } from \"../SquaresService\";\nimport * as Helpers from \"../../helpers/Helpers\";\nimport { RangedWeapon } from \"../\";\nconst arenaSize: number = 10;\n\nclass EntitiesServiceClass {\n  entities: Entity[];\n  selected: Entity;\n\n  getEntityId(entity: Entity): string {\n    return entity.name;\n  }\n\n  findEntityById(id: string): Entity {\n    let result: Entity = this.entities.filter((entity) => entity.name === id)[0];\n    return result;\n  }\n\n  findItemOnEntity(entity: HavingInventory, id: string) {\n    let result = entity.inventory.filter((item) => item.name === id)[0];\n    return result;\n  }\n\n  moveEntityRandomly(entity: Entity) {\n    if (entity.isDead) return;\n\n    let oldPositionX = entity.position.x;\n    let oldPositionY = entity.position.y;\n\n    entity.position.x = entity.position.x + Helpers.getRandomIntInclusive(-1, 1);\n    entity.position.y = entity.position.y + Helpers.getRandomIntInclusive(-1, 1);\n\n    entity.position.x = Helpers.getNumberWithinBoundaries(entity.position.x, 0, arenaSize - 1);\n    entity.position.y = Helpers.getNumberWithinBoundaries(entity.position.y, 0, arenaSize - 1);\n\n    let newSquare = SquaresService.getSquare(entity.position.x, entity.position.y);\n\n    if ((newSquare && newSquare.entity) || (newSquare && newSquare.squareType !== \"floor\")) {\n      // if square occupiec, reverse the move\n      entity.position.x = oldPositionX;\n      entity.position.y = oldPositionY;\n    }\n  }\n\n  stopBreathingForKilledEntity(entity: Entity): Entity {\n    if (entity && entity.hp <= 0) {\n      entity.isBreathing = false;\n      entity.isShooting = false;\n      entity.hp = 0;\n    }\n    return entity;\n  }\n\n  getEntitiesAtGivenPosition(targetPosition: Position): Entity[] {\n    return this.entities.filter((potentialTargetEntity: Entity): boolean => {\n      return (\n        potentialTargetEntity.position.x === targetPosition.x && potentialTargetEntity.position.y === targetPosition.y\n      );\n    });\n  }\n\n  selectEntityFromGivenSquare(selected: Entity, targeted: Square): Entity {\n    if (selected && targeted && targeted.entity) {\n      selected.active = false;\n    }\n    if (targeted && targeted.entity) {\n      selected = targeted.entity;\n      selected.active = true;\n    }\n\n    return selected;\n  }\n\n  setSelected(selected: Entity, value: boolean): Entity {\n    let selectedInEntities = this.findEntityById(this.getEntityId(selected));\n    if (value) {\n      selected.active = value;\n    } else {\n      selected = null;\n      console.log(\"Nullified:\", selected);\n    }\n    selectedInEntities.active = value;\n    return selected;\n  }\n\n  checkAmmoAndCalculateDamageApplied(entity: Entity): number {\n    let damageApplied: number = 0;\n    let weapon: RangedWeapon = entity.equipment && entity.equipment.hands;\n\n    if (!weapon) return 0;\n\n    if (weapon.isAbleToFire) {\n      damageApplied = weapon.fire();\n    } else {\n      weapon.rounds = \"empty\";\n      entity.isShooting = false;\n    }\n\n    return damageApplied;\n  }\n\n  fireAShot(entity: Entity) {\n    if (entity.ceaseFire) {\n      entity.isShooting = false;\n      entity.ceaseFire = false;\n      return;\n    }\n    let damageApplied = this.checkAmmoAndCalculateDamageApplied(entity);\n    let targetEntities = this.getEntitiesAtGivenPosition(entity.targetPosition);\n    targetEntities.forEach((targetEntity) => {\n      this.applyDamageToTargetEntity(targetEntity, damageApplied);\n      this.ceaseFireNextTickIfTargetIsKilled(entity, targetEntity);\n    });\n  }\n\n  applyDamageToTargetEntity(targetEntity: Entity, damage: number) {\n    if (damage) {\n      targetEntity.hp -= damage;\n      targetEntity.bleeding = 5;\n    }\n  }\n\n  ceaseFireNextTickIfTargetIsKilled(entity: Entity, targetEntity: Entity): void {\n    if (targetEntity.hp < 0) {\n      entity.ceaseFire = true;\n    }\n  }\n\n  isEntityShootingProperly(entity: Entity): boolean {\n    return (\n      entity.isShooting &&\n      entity.targetPosition &&\n      (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\n    );\n  }\n\n  applyEffectsOfBleeding(entity: Entity): Entity {\n    // TODO: move to a \"bleed\" method\n    if (entity.bleeding && entity.hp > 0) {\n      entity.hp -= entity.bleeding;\n      let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\n      SquaresService.addBlood(square, entity.bleeding);\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n    }\n    return entity;\n  }\n\n  moveEntityIntoChosenDestination(entity: Entity): Entity {\n    if (!entity.isDead && entity.moveDestination) {\n      let chosenDestinationSquare: Square = SquaresService.getSquare(\n        entity.moveDestination.x,\n        entity.moveDestination.y\n      );\n\n      entity.position = entity.moveDestination;\n      delete entity.moveDestination;\n      chosenDestinationSquare.isChosenDestination = undefined;\n    }\n    return entity;\n  }\n\n  setMoveDestinationOnASelectedEntity(selected: Entity, targetedSquarePosition: Position): void {\n    selected.moveDestination = targetedSquarePosition;\n  }\n\n  moveEntities(): void {\n    this.entities.forEach((entity) => this.moveEntityIntoChosenDestination(entity));\n    // let OP: Entity = this.findEntityById(\"Squid\");\n    // let OC: Entity = this.findEntityById(\"Octo\");\n    // //this.moveEntityRandomly(JR);\n    // this.moveEntityRandomly(OP);\n    // this.moveEntityRandomly(OC);\n    this.entities.filter(entity => !entity.isFriendly).forEach((entity) => {\n      this.moveEntityRandomly(entity);\n    });\n  }\n}\n\nexport const EntitiesService = new EntitiesServiceClass();\n","export * from \"./EntityFeatures\";\r\nexport * from \"./EntityClass\";\r\nexport * from \"./EntitiesService\";\r\n","import { Rifle, Lazer } from \"../services\";\n\nexport class M16 extends Rifle {\n  name = \"M16\";\n  rounds = 15;\n  maxRounds = 20;\n  damage = 2;\n}\n\nexport class M40 extends Rifle {\n  name = \"M41A Pulse Rifle\";\n  rounds = 40;\n  maxRounds = 40;\n  damage = 1;\n}\n\nexport class L30 extends Lazer {\n  name = \"Assault Lazer Cannon\";\n  rounds = 30;\n  maxRounds = 30;\n  damage = 3;\n}\n","import { Entity } from \"../services/EntitiesService\";\nimport { Square } from \"../services/SquaresService\";\n\n/** @description\n * Takes a collection and a list of strings describing object keys.\n * Sets all given fields on a collection to `undefined`\n */\nexport function resetGivenFieldsOnACollection(collection, ...fieldNames) {\n  collection.forEach((item) => {\n    fieldNames.forEach((fieldName) => {\n      item && (item[fieldName] = undefined);\n    });\n  });\n}\n\n/** @description Takes a number and fits it within given boundaries, then returns it */\nexport function getNumberWithinBoundaries(value: number, min: number, max: number): number {\n  if (value < min) value = min;\n  if (value > max) value = max;\n  return value;\n}\n\n/** @description Returns a random integer between min and max */\nexport function getRandomIntInclusive(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/** @description Returns angle (in degrees) of a given vector */\nexport function calculateAngle(x: number, y: number): number {\n  let angle: number;\n  if (y >= 0) {\n    angle = -Math.atan(x / y) * (180 / Math.PI);\n  } else if (y < 0) {\n    angle = (180 / Math.PI) * (Math.atan(x / -y) + Math.PI);\n  }\n  return angle;\n}\n\n/** @description Pitagorean distance between 0,0 and given coords */\nexport function calculateDistance(x: number, y: number): number {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n}\n\n/** @description Mixing classess together */\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  // see https://www.typescriptlang.org/docs/handbook/mixins.html\n  baseCtors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));\n    });\n  });\n}\n\n/** @description Checking if selected entity is on a targeted square */\nexport function isSelectedTargeted(selected: Entity, targeted: Square): boolean {\n  if (selected && targeted && targeted.entity && selected.name === targeted.entity.name) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * @description\n * Adding classess apropriate to the flags passed in by props\n * @param classNameBase - if given, it is added in front of the classname with \"--\"\n * Eg: classNameBase--class-from-flag\n */\nexport function turnFlagsIntoClasses(flags: object, classNameBase?: string) {\n  if(!flags) return '';\n  const flagsToClassess = {\n    active: \"active\",\n    isAvailableDestination: \"is-available-destination\",\n    isChosenDestination: \"is-chosen-destination\",\n    isBreathing: \"breathing\",\n    isDead: \"dead\",\n    isShooting: \"shooting\",\n    isTargeted: \"targeted\",\n    isLit: \"is-lit\",\n    isInTwilightZone: \"is-in-twilight-zone\",\n  };\n\n  let className = \"\";\n\n  if (classNameBase) {\n    classNameBase += \"--\";\n  } else {\n    classNameBase = \"\";\n  }\n\n  Object.keys(flagsToClassess).forEach((key) => {\n    if (flags[key]) {\n      className += ` ${classNameBase}${flagsToClassess[key]}`;\n    }\n  });\n  return className;\n}\n\n/**\n * @description\n * Creates a new array containing all the elements from a given array\n * @param array array to shallow-copy\n * @yields a new copy of the array\n */\nexport function newCopyOfArray(array: any[]) {\n  return [].concat(array);\n}\n\n/**\n * @description\n * Returns a string with set of CSS classes\n * based on the flags found in the given square.\n * @param square a square to style\n * @yields string with all classess applicable for the given square\n */\nexport function getCssClassesForAGivenSquare(square: Square): string {\n  if(!square) return;\n  let squareClassNameBase = \"square\";\n  let squareClassName = `${squareClassNameBase} ${square && square.squareType}`;\n  squareClassName += turnFlagsIntoClasses(square, squareClassNameBase);\n  if (square.entity) {\n    squareClassName += turnFlagsIntoClasses(square.entity, squareClassNameBase);\n  }\n  return squareClassName;\n}\n","import { SquaresService, Square } from \"../SquaresService\";\nimport { EntitiesService } from \"../EntitiesService\";\nimport tutorial_map_00 from \"../../resources/maps/tutorial_map_00.json\"; // yes, it's a resource named with snake_case\nimport { characterDefinitions } from \"../../resources/CharacterDefinitions\";\nimport { Entity } from \"../EntitiesService\";\n\nclass GameModelClass {\n  entities;\n  squares;\n  selected;\n\n  constructor() {\n    this.entities = EntitiesService.entities;\n    this.squares = SquaresService.squares;\n  }\n\n  saveMap = () => {\n    let squares: Square[] = JSON.parse(JSON.stringify(SquaresService.squares));\n    let squaresProcessedForSave = squares.map((square) => {\n      //let newSquare = { squareType: square.squareType, entity: square.entity };\n\n      return square;\n    });\n    let squaresStringified = JSON.stringify(squaresProcessedForSave);\n    console.log(squaresStringified);\n    let message = \"Enter the name of saved map.\";\n    let mapName = \"map00\";\n\n    let result = window.prompt(message, mapName);\n\n    localStorage[result] = squaresStringified;\n  };\n\n  loadMap = () => {\n    let mapNames = Object.keys(localStorage);\n    let message = `Enter the name of map to load. ${mapNames}`;\n    let mapName = \"map00\";\n    let result = window.prompt(message, mapName);\n    let squaresStringified = localStorage[result];\n\n    console.log(squaresStringified);\n    let squaresLoaded = JSON.parse(squaresStringified);\n    this.loadMapIntoBoard(squaresLoaded);\n  };\n\n  loadMapIntoBoard = (squaresLoaded) => {\n    SquaresService.squares.forEach((square, index) => {\n      let targetSquare = square;\n      let sourceSquare = squaresLoaded[index];\n      targetSquare.squareType = sourceSquare && sourceSquare.squareType || 'floor';\n    });\n  };\n\n  loadEntities = (entities: Entity[]) => {\n    EntitiesService.entities = entities;\n  };\n\n  loadBuiltInMap = () => {\n    this.loadMapIntoBoard(tutorial_map_00);\n  };\n\n  loadPredefinedEntitities = () => {\n    this.loadEntities(characterDefinitions);\n  };\n}\n\nexport const GameModel = new GameModelClass();\n\nexport default GameModel;\n","export * from \"./GameModelService\";\r\n","import { M16, M40, L30 } from \"./ItemDefinitions\";\nimport { Entity } from \"../services\";\n\nexport const entitiesInitialValues = [\n  {\n    name: \"Lazer Blady\",\n    age: 60,\n    hp: 75,\n    maxHp: 100,\n    icon: \"🧑🏻\",\n    isBreathing: true,\n    isFriendly: true,\n    hasWeapon: true,\n    position: { x: 4, y: 8 },\n    inventory: [new M16()],\n    equipment: {hands: new L30()},\n  },\n  {\n    name: \"Robot\",\n    age: 1,\n    hp: 50,\n    maxHp: 50,\n    icon: \"🤖\",\n    isBreathing: false,\n    position: { x: 3, y: 5 },\n    equipment: {hands: new L30()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Octo\",\n    age: 8,\n    hp: 200,\n    maxHp: 200,\n    icon: \"🐙\",\n    isBreathing: true,\n    position: { x: 8, y: 2 },\n    bleedingReductionPerTurn: 0,\n    bleeding: 1,\n    equipment: {hands: new L30()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Squid\",\n    age: 5,\n    hp: 100,\n    maxHp: 100,\n    icon: \"🦑\",\n    isBreathing: true,\n    position: { x: 5, y: 5 },\n    equipment: {hands: new M40()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Ant\",\n    age: 1,\n    hp: 45,\n    maxHp: 50,\n    icon: \"🐜\",\n    isBreathing: true,\n    position: { x: 7, y: 6 },\n    equipment: {hands: new M40()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Henry The Spider\",\n    age: 1,\n    hp: 100,\n    maxHp: 150,\n    icon: \"🕷️\",\n    isBreathing: true,\n    position: { x: 9, y: 3 },\n    bleedingReductionPerTurn: 1,\n    equipment: {hands: new L30()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Mosquito\",\n    age: 1,\n    hp: 12,\n    maxHp: 20,\n    icon: \"🦟\",\n    isBreathing: true,\n    position: { x: 2, y: 7 },\n    equipment: {hands: new M16()},\n    inventory: [],\n    hasWeapon: true,\n  },\n  {\n    name: \"Microbe\",\n    age: 1,\n    hp: 1,\n    maxHp: 5,\n    icon: \"🦠\",\n    isBreathing: true,\n    position: { x: 1, y: 5 },\n    equipment: {hands: new L30()},\n    inventory: [],\n    hasWeapon: true,\n  },\n];\n\nexport const characterDefinitions = entitiesInitialValues.map((entry) => new Entity(entry));\nexport default characterDefinitions;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__1AthT\",\"board__row\":\"Board_board__row__1piKV\",\"board--rotated\":\"Board_board--rotated__be1H9\"};","export * from \"./GameLogicService\";\nexport * from \"./GameState\";","import { GameModel } from \"../GameModelService\";\nimport { SquaresService, Square } from \"../SquaresService\";\nimport { EntitiesService } from \"../EntitiesService\";\nimport { Entity } from \"../EntitiesService\";\nimport * as Helpers from \"../../helpers\";\n\nimport { GameState } from \"./GameState\";\nclass GameLogicClass {\n  model;\n\n  constructor() {\n    this.model = GameModel;\n  }\n\n  run = () => {\n    console.log(\"Running Game Logic\");\n    console.log(GameModel.entities);\n  };\n\n  calculateNextInterfaceState = (previousState: GameState) => {\n    let nextState = previousState;\n    let { entities, selected } = nextState;\n    entities.forEach((entity) => {\n      if (entity === selected) SquaresService.markAvailableDestinationsForSelectedEntity(selected);\n    });\n\n    return nextState;\n  };\n\n  /**\n   * Calculate WHAT EXACTLY? This should probably go into GameLogic\n   * @param previousState\n   */\n  calculateNextGameState(previousState: GameState) {\n    let nextState: GameState = previousState;\n    let { entities } = nextState;\n\n    EntitiesService.moveEntities();\n    //Helpers.resetGivenFieldsOnACollection(squares, \"isLit\", \"isInTwilightZone\");\n    //SquaresService.lightAllSquares();\n    entities.forEach((entity) => {\n      if (EntitiesService.isEntityShootingProperly(entity)) {\n        EntitiesService.fireAShot(entity);\n      }\n      entity.bleedExternally();\n\n      EntitiesService.stopBreathingForKilledEntity(entity);\n\n      SquaresService.markAvailableDestinationsForSelectedEntity(entity);\n      // SquaresService.castLightsFromFriendlyEntity(entity);\n    });\n\n    nextState.enemiesAlive = this.calculateNumberOfAliveEnemies(entities);\n    console.log(nextState.enemiesAlive);\n    return nextState;\n  }\n\n  calculateNumberOfAliveEnemies(entities: Entity[]):number {\n    let amountOfAliveEnemies = 0;\n    entities.forEach((entity) => {\n      if(entity.isFriendly) {\n        return;\n      } else if(entity.hp > 0) {\n        amountOfAliveEnemies++;\n      }\n    });\n\n    return amountOfAliveEnemies;\n  }\n\n  syncSquaresWithEntities = (previousState) => {\n    let squares: Square[] = Helpers.newCopyOfArray(previousState.squares);\n    /*\n    Reattach new squares array to the SquaresService\n    This might actually be not-needed, as elements of that array are objects\n    and are referenced in both arrays, so unless we're adding new squares,\n    everything should work without re-attaching\n    */\n    SquaresService.squares = squares;\n    let entities: Entity[] = previousState.entities;\n    if (entities.length) {\n      Helpers.resetGivenFieldsOnACollection(squares, \"entity\");\n    }\n    entities.forEach((entity) => {\n      SquaresService.setEntityWithinApropriateSquare(entity);\n    });\n\n    return { squares };\n  };\n\n  deselectAllEntities = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"active\");\n    Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\", \"isAvailableDestination\");\n  };\n\n  ceaseFire = () => {\n    Helpers.resetGivenFieldsOnACollection(GameModel.entities, \"isShooting\");\n  };\n}\n\nexport const GameLogic = new GameLogicClass();\nexport default GameLogic;\n","export class Item {\n  name: string = \"\";\n}\n\nexport class Weapon extends Item {\n  causesBleeding = 0;\n  range = 0;\n  damage = 0;\n}\n\nexport class RangedWeapon extends Weapon {\n  rounds: number | any = 0;\n  maxRounds = 5;\n\n  fire() {\n    this.rounds--;\n    console.log(\"Firing ranged weapon. Damage: \", this.damage);\n    return this.damage;\n  }\n\n  get isAbleToFire() {\n    return this.rounds > 0;\n  }\n\n  reload() {\n    this.rounds = this.maxRounds;\n  }\n}\n\n// TODO: Should add kinetic/thermal damage\nexport class Rifle extends RangedWeapon {\n  type = \"projectile\";\n  range = 4;\n  damage = 1;\n  causesBleeding = 2;\n}\n\nexport class Lazer extends RangedWeapon {\n  type = \"lazer\";\n  range = 6;\n  damage = 5;\n  causesBleeding = 0;\n}\n","export * from \"./ItemClasses\";\r\n","class MessageServiceClass {\r\n  messages: string[] = [];\r\n  send(message: string) {\r\n    this.messages.push(message);\r\n  }\r\n}\r\n\r\nexport const MessageService = new MessageServiceClass();\r\n\r\nexport default MessageService;\r\n","export * from \"./MessageService\";\r\n","/** This file contains most of the click-handling logic for the Game */\n/* Handling of particular events is delegated to proper services */\n\nimport * as Helpers from \"../../helpers\";\nimport { Entity, EntitiesService, SquaresService, GameLogic, Position } from \"../../services\";\n\nlet component = null;\nexport class GameActionsClass {\n  constructor(that) {\n    component = that;\n  }\n  toggleEditorMode = () => {\n    if (!component.state.isEditorOn) {\n      Helpers.resetGivenFieldsOnACollection(component.state.squares, \"blood\", \"entity\");\n      component.setState((prevState) => {\n        return { entities: [], isEditorOn: true };\n      });\n    } else {\n      component.setState((prevState) => {\n        return { squares: SquaresService.squares, entities: EntitiesService.entities, isEditorOn: false };\n      });\n    }\n  };\n\n  loop = () => {\n    component.stepNumber++;\n    this.drawAggro();\n    this.processEntities();\n    if (component.state.autoLoop) {\n      setTimeout(this.loop, 1000);\n    }\n  };\n\n  processEntities() {\n    component.setState(\n      (prevState) => GameLogic.calculateNextGameState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  processInterface() {\n    component.setState(\n      (prevState) => GameLogic.calculateNextInterfaceState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  /** Sets entities within apropriate squares, based on the value of their `position` field\n   * This might actually be not-needed, if movement of entities is reflected in their respectable squares\n   * Also: entities are no longer rendered within `Square` component\n   */\n  setSquaresAccordingToEntities() {\n    component.setState((prevState) => GameLogic.syncSquaresWithEntities(prevState));\n  }\n\n  nextTick = () => {\n    component.setState({ autoLoop: false });\n    this.loop();\n  };\n\n  handleClickV2 = (squareIndex: number) => {\n    component.setState(\n      (state) => {\n        let { squares, entities, selected, targeted, isEditorOn, targetedSquareNumber: selectedSquareNumber } = state;\n        let previousTargeted = targeted;\n        targeted = squares[squareIndex];\n        selectedSquareNumber = squareIndex;\n        const doubleClick = () => previousTargeted === targeted;\n        SquaresService.markSquareAsTargeted(squareIndex);\n\n        if (isEditorOn) {\n          switch (targeted.squareType) {\n            case \"floor\":\n              targeted.squareType = \"wall\";\n              break;\n            case \"wall\":\n              targeted.squareType = \"nothing\";\n              break;\n            case \"nothing\":\n            default:\n              targeted.squareType = \"floor\";\n          }\n        }\n\n        /** Setting move destination while clicking on empty square */\n        if (doubleClick() && targeted.isAvailableDestination) {\n          selected.setMoveDestinationSquare(squareIndex);\n        }\n\n        /** To be able to deselect */\n        if (doubleClick() || selected) {\n          if (!selected && targeted.entity) {\n            // Selecting\n            selected = EntitiesService.selectEntityFromGivenSquare(selected, targeted);\n            //targeted = undefined;\n          } else if (Helpers.isSelectedTargeted(selected, targeted)) {\n            // Deselecting if not selecting\n            /* // DISABLE DOUBLECLICK DESELECT\n            GameLogic.deselectAllEntities();\n            selected = undefined;\n            // */\n          }\n        }\n\n        // setting attack\n        if (doubleClick() && selected && targeted.entity && selected !== targeted.entity) {\n          selected.attackPosition(SquaresService.targetSquarePosition(squareIndex));\n        }\n\n        return { squares, entities, selected, targeted, targetedSquareNumber: selectedSquareNumber };\n      },\n      () => this.processInterface()\n    );\n  };\n\n  drawAggro() {\n    EntitiesService.entities.forEach((entity)=>{\n      if(entity.isFriendly) return;\n      entity.isShooting = false;\n      this.aggro(entity.name);\n    })\n  }\n\n  aggro = (name) => {\n    let actor = EntitiesService.findEntityById(name);\n    let position = actor.position;\n    let closeEntities = this.findEntitiesThatAreClose(position);\n    let entitiesToAttack = closeEntities.filter(entity => entity.hp > 0);\n    if(entitiesToAttack.length) {\n      let firstAmongThem = entitiesToAttack[0];\n      actor.attackPosition(firstAmongThem.position);\n    }\n  }\n\n  findEntitiesThatAreClose(position: Position){\n    let {x, y} = position;\n    let entities: Entity[] = [];\n    for (let j = y - 1; j <= y + 1; j++) {\n      if (j < 0 || j >= SquaresService.arenaSize) {\n        continue;\n      }\n      for (let i = x - 1; i <= x + 1; i++) {\n        if (i < 0 || i >= SquaresService.arenaSize || (i === x && j === y)) {\n          continue;\n        }\n        let newlyFoundEntities = EntitiesService.getEntitiesAtGivenPosition({x: i, y: j})\n        entities = entities.concat(newlyFoundEntities);\n      }\n    }\n\n    return entities;\n  }\n\n  nuke = (dmg: number) => {\n    component.setState(\n      (state) => {\n        let { entities } = state;\n\n        entities.forEach((entity) => {\n          entity.hp = entity.hp - dmg;\n        });\n\n        return { entities };\n      },\n      () => {\n        this.processEntities();\n      }\n    );\n  };\n\n  toggleRotateBoard = () => {\n    component.setState({ isBoardRotated: !component.state.isBoardRotated });\n  };\n\n  switchAutoLoop = () => {\n    component.setState(\n      (previousState) => {\n        return { autoLoop: !previousState.autoLoop };\n      },\n      () => {\n        if (component.state.autoLoop) {\n          this.loop();\n        }\n      }\n    );\n  };\n\n  onInventoryClick = (entity: Entity, itemName: string) => {\n    component.setState((prevState) => {\n      let entities = [].concat(prevState.entities);\n      EntitiesService.entities = entities;\n      let entityId = EntitiesService.getEntityId(entity);\n      let actualEntity = EntitiesService.findEntityById(entityId);\n      //let actualItem = EntitiesService.findItemOnEntity(actualEntity, itemName);\n\n      if (actualEntity.equipment.hands && actualEntity.equipment.hands.name === itemName) {\n        actualEntity.unEquipFromHands();\n      } else {\n        actualEntity.equipInHands(itemName);\n      }\n\n      return { entities };\n    });\n    console.log(entity, itemName);\n  };\n\n  handleDeselectAllEntities = () => {\n    component.setState(\n      (state) => {\n        let { squares, entities, selected } = state;\n\n        GameLogic.deselectAllEntities();\n        selected = undefined;\n\n        return { squares, entities, selected };\n      },\n      () => {\n        //this.processEntities();\n      }\n    );\n  };\n\n  ceaseFire = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"isShooting\");\n    this.processInterface();\n  };\n}\n","export * from \"./GameActionsService\";\n","import React from \"react\";\n\ninterface BloodProps {\n  bloodAmount: number; // receives amount of blood ONLY\n}\n\n/**\n * @description\n * Visualises blood by adding red background\n * and a little number in the corner.\n *\n * @param bloodAmount - number representing the amount of blood.\n */\nclass Blood extends React.PureComponent<BloodProps> {\n  render() {\n    console.log('BLOOD', this.props);\n    let { bloodAmount } = this.props;\n\n    let bloodNumbers = [];\n    let i = bloodAmount;\n\n    while(i--) {\n      bloodNumbers.push(\n        <span style={{\n          position: 'absolute',\n          left: `${Math.random() * 90}%`,\n          top: `${Math.random() * 90 -15}%`,\n        }}>o</span>\n      );\n    }\n\n    return (\n      <div\n        className=\"square__blood\"\n        style={{\n          //background: `rgba(255, 0, 0, ${(bloodAmount / 50).toFixed(2)})`,\n          position: 'relative'\n        }}\n      >\n        {bloodNumbers}\n        {bloodAmount}\n      </div>\n    );\n  }\n}\n\nexport default Blood;\n","import React from \"react\";\nimport { Entity, Item } from \"../../services\";\n\ninterface ItemsProps {\n  items: Item[];\n  itemsNumber: number; // here to trigger update when list length changes\n}\n// FIXME: I have a strange feeling this doesn't update when contents of items list change but not the number of elements\n/**\n * @description\n * Displays icons of items on the square, as well as little number in the corner.\n * @param itemsNumber - number of items on the square\n * @param items - array of items on the square\n */\nclass Items extends React.PureComponent<ItemsProps> {\n  itemsIcons = [];\n\n  render() {\n    let { items, itemsNumber } = this.props;\n\n    if (!items) return null;\n\n    items.forEach((item) => {\n      let entity = item as Entity;\n      if (entity.icon) {\n        this.itemsIcons.push(<div className=\"square__item-icon\">{entity.icon}</div>);\n      }\n    });\n\n    return (\n      <div className=\"square__items\">\n        <div className=\"square__items-icons\">{this.itemsIcons}</div>\n        <div className=\"square__items-number\">{itemsNumber}</div>\n      </div>\n    );\n  }\n}\n\nexport default Items;\n","import React, { ReactElement } from \"react\";\n// services\nimport { Item } from \"../../services\";\n// components\nimport Blood from \"../Square/Blood\";\nimport Items from \"../Square/Items\";\n// others\nimport \"./Square.scss\";\n\n// TODO: This should really take less props\ninterface SquareProps {\n  squareId: number;\n  className?: string;\n  onClick: (squareIndex: number) => void;\n  blood: number;\n  items: Item[]; // collection of objects\n  itemsNumber: number; // here to trigger update when list length changes\n}\n\n/**\n * @description Displays a square with blood and items on it.\n * @param squareId - unique numerical id\n * @param className - string with CSS clasess\n * @param onClick - callback to call when square is clicked\n * @param blood - amount of blood\n * @param items - array of items\n * @param itemsNumber - numberof items\n */\nclass SquareComponent extends React.PureComponent<SquareProps> {\n  onClick = () => {\n    this.props.onClick(this.props.squareId);\n  };\n\n  render() {\n    // console.log(\"Render Square\", this.props.squareId);\n    // TODO: Extract into separate component\n    function cuboid(classPrefix:string):ReactElement {\n      let i = 6;\n      let cuboidFaces: ReactElement[] = [];\n\n      while(i--){\n        cuboidFaces.push(<div key={i} className={`${classPrefix}__cuboid-face`}></div>);\n      }\n\n      return <div className={`${classPrefix}__cuboid`}>\n        {cuboidFaces}\n      </div>\n    }\n\n    return (\n      <button className={this.props.className} onClick={this.onClick}>\n        <Blood bloodAmount={this.props.blood} />\n        <Items items={this.props.items} itemsNumber={this.props.itemsNumber} />\n        <div className=\"square__content\">&nbsp;</div>\n        {cuboid('square')}\n      </button>\n    );\n  }\n}\n\nexport default SquareComponent;\n","import React from \"react\";\nimport \"./HpBar.scss\";\n\ninterface HpBarProps {\n    current: number;\n    max: number;\n    color: string;\n}\n\nexport class HpBar extends React.Component<HpBarProps> {\n\n    render() {\n        let percentage = ~~((this.props.current * 100) / this.props.max);\n        let progressStyle = {\n            width: `${percentage}%`,\n            backgroundColor: this.props.color\n        };\n        return(\n            <div className=\"hpbar\">\n                <div className=\"hpbar__indicator\" style={progressStyle}>\n\n                </div>\n                <span className=\"hpbar__text\">\n                        {this.props.current}\n                </span>\n            </div>\n        );\n    }\n}","import * as Helpers from \"../../helpers\";\nimport React, { ReactElement } from \"react\";\n\nexport function ShootingVisualization(props): ReactElement {\n  const DISTANCE_BETWEEN_TILES = 54;\n  let { entity } = props;\n\n  let calcNewAangle = Helpers.calculateAngle;\n  let targetCoords = entity.targetPosition;\n  let projectileNumber = 5;\n  let projectiles = [];\n  let localId = `Entity${entity.icon}`;\n  let customStyle = \"\";\n\n  if (\n    targetCoords &&\n    entity.position &&\n    entity.hasWeapon &&\n    entity.isShooting &&\n    (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\n  ) {\n    if (targetCoords) {\n      let distanceToTargetXInUnits = (targetCoords.x - entity.position.x);\n      let distanceToTargetYInUnits = (targetCoords.y - entity.position.y);\n\n      let actualDistanceInUnits = Helpers.calculateDistance(distanceToTargetXInUnits, distanceToTargetYInUnits);\n      let weaponType = entity && entity.equipment && entity.equipment.hands && entity.equipment.hands.type;\n      let angle = calcNewAangle(distanceToTargetXInUnits, distanceToTargetYInUnits);\n\n      if (weaponType === \"lazer\") {\n        // TODO: perhaps call to `visualizeShooting(from,to,weaponType)`\n        let className = `projectile${localId}_beam`;\n        let projectile = \"\";\n        const distanceWhereBeamBegins = 20;//in pixels\n        //actualDistance = actualDistance - distanceWhereBeamBegins;\n        // do above within template\n        customStyle = `\n          @keyframes pulsing${localId} {\n            0%  {opacity: 0.1;}\n            100%  {opacity: 1;}\n          }\n\n          @keyframes elongating${localId} {\n            0%  { width: calc(${actualDistanceInUnits}em + ${actualDistanceInUnits} * 4px - 20px); }\n            100%  {width: calc(${actualDistanceInUnits}em + ${actualDistanceInUnits} * 4px - 20px); }\n          }\n\n          @keyframes swiping${localId} {\n            0%  {transform: rotate(${angle + 90 -1}deg) translateX(${distanceWhereBeamBegins}px);}\n            50%  {transform: rotate(${angle + 90 + 1}deg) translateX(${distanceWhereBeamBegins}px);}\n            100%  {transform: rotate(${angle + 90 - 1}deg) translateX(${distanceWhereBeamBegins}px);}\n          }\n\n          .${className} {\n            width: ${actualDistanceInUnits}em;\n            height: 3px;\n            border-radius: 5px;\n            background: #F00;\n            position: absolute;\n            top: 0.5em;\n            left: 0.5em;\n            transform: rotate(${angle + 90}deg);/* overriden by swiping keyframes */\n            transform-origin: left 0px;\n            animation: pulsing${localId} 0.1s ease infinite,\n            elongating${localId} 0.7s ease alternate infinite,\n            swiping${localId} 1s ease alternate infinite;\n            box-shadow: 0 0 5px 5px white;\n            z-index: 10;\n          }\n          `;\n        projectiles.push(\n          <div key={className} className={className}>\n            {projectile}\n          </div>\n        );\n      } else {\n        customStyle = `\n          @keyframes shooting${localId} {\n            0%   {transform: translate(0,0) rotate(${angle}deg) scaleY(0.3)}\n            100% {transform: translate(\n              ${36 * (targetCoords.x - entity.position.x)}px,\n              ${36 * (targetCoords.y - entity.position.y)}px\n            ) rotate(${angle}deg) scaleY(2)}\n          }\n          `;\n\n        while (projectileNumber--) {\n          customStyle += `\n          .projectile${localId}_${projectileNumber} {\n            transform: rotate(${angle}deg);\n            animation: shooting${localId} 0.8s linear infinite;\n            animation-delay: ${projectileNumber - 1 * 0.3}s;\n          }`;\n        }\n        let projectile = entity.isShooting ? \"|\" : \"\";\n\n        projectileNumber = 3;\n\n        while (projectileNumber--) {\n          let className = `projectile projectile${localId}_${projectileNumber}`;\n          projectiles.push(\n            <div key={className} className={className}>\n              {projectile}\n            </div>\n          );\n        }\n      }\n    }\n  }\n  return (\n    <div className=\"shooting-visualization\">\n      <style>{customStyle}</style>\n      {projectiles}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { SquaresService } from \"../../services\";\nimport { Entity } from \"../../services/EntitiesService\";\nimport { HpBar } from \"../HpBar\";\nimport { ShootingVisualization } from \"../ShootingVisualization\";\nimport * as Helpers from \"../../helpers\";\nimport \"./EntityPawn.scss\";\n\ninterface EntityPawnProps {\n  entity: Entity;\n}\n\nexport default class EntityPawn extends React.Component<EntityPawnProps> {\n  randomTime = `${(Math.random() + 0.5).toFixed(2)}s`;\n\n  render() {\n    let { entity } = this.props;\n    let square = SquaresService.getSquare(entity.position.x, entity.position.y);\n\n    let classNameBase = \"entity-pawn__icon\";\n    let className = `${classNameBase}`;\n    let classessFromFlags = Helpers.turnFlagsIntoClasses(entity, classNameBase);\n    classessFromFlags += Helpers.turnFlagsIntoClasses(square, classNameBase);\n    className += ` ${classessFromFlags} `;\n    let fof = entity.isFriendly ? 'friendly' : 'hostile';\n    let color = entity.isFriendly ? 'green' : 'red';\n    let zIndex = entity.isShooting ? 5 : 1;\n    let animationBreathing = entity.isBreathing ? `breathing ${this.randomTime} alternate infinite linear` : \"none\";\n\n    let boardPadding = 10;\n    let squareMargin = 2;\n    return (\n      <div\n        className=\"entity-pawn\"\n        key={entity.name}\n        style={{\n          left: `calc(${boardPadding + 3}px + ${entity.position.x * squareMargin * 2}px + ${entity.position.x}em)`,\n          top: `calc(${boardPadding + 3}px + ${entity.position.y * squareMargin * 2}px + ${entity.position.y}em)`,\n          zIndex: zIndex,\n        }}\n      >\n        <div\n          className={`entity-pawn__health-display ` + fof}\n        >\n\n          <HpBar\n            current={entity.hp}\n            max={entity.maxHp}\n            color={color}\n          />\n        </div>\n\n        <div\n          className={className}\n          style={{\n            animation: animationBreathing,\n          }}\n        >\n          {entity.icon}\n        </div>\n        <ShootingVisualization entity={entity} />\n      </div>\n    );\n  }\n}\n","import React, { ReactElement } from \"react\";\n\nimport SquareComponent from \"../Square\";\nimport EntityPawnComponent from \"../EntityPawn\";\nimport * as Helpers from \"../../helpers\";\nimport { Entity } from \"../../services/EntitiesService\";\nimport { Square } from \"../../services/SquaresService\";\n\nimport styles from \"./Board.module.scss\";\n\ninterface BoardProps {\n  onClick(i: number): void;\n  squares: Square[]; // updated every tick\n  entities: Entity[]; // updated every tick\n  size: number;\n  isRotated: boolean;\n  style: any;\n}\n/**\n * @description Board component renders Squares and EntityPawns\n */\nexport default class Board extends React.Component<BoardProps> {\n  handleClick = (i: number) => {\n    console.log(\"Handles Click on Board\", i);\n    this.props.onClick(i);\n  };\n\n  renderSquare(i: number, rowId: number, colId: number) {\n    let square = this.props.squares[i];\n\n    return (\n      <SquareComponent // is a pureComponent\n        key={`r${rowId}_c${i}`}\n        squareId={i}\n        className={Helpers.getCssClassesForAGivenSquare(square)}\n        onClick={this.handleClick}\n        blood={square && square.blood} // number\n        items={square && square.items} // list of objects\n        itemsNumber={square && square.items && square.items.length}\n      ></SquareComponent>\n    );\n  }\n\n  EntityPawns = (): ReactElement[] => this.props.entities.map((entity) => <EntityPawnComponent key={entity.name} entity={entity} />);\n\n  BoardSquares = () => {\n    let cellId: number = 0;\n    let rowId: number = 0;\n    let colId: number;\n\n    let rowsOfSquares = Array(this.props.size)\n      .fill(null)\n      .map((row, number) => {\n        colId = 0;\n        let cells = Array(this.props.size)\n          .fill(null)\n          .map((cell, number) => {\n            return this.renderSquare(cellId++, rowId, colId++);\n          });\n        return (\n          <div key={rowId++} className={styles[\"board__row\"]}>\n            {cells}\n          </div>\n        );\n      });\n\n    return rowsOfSquares;\n  }; // Board Squares\n\n  render() {\n    let className: string = styles.board;\n    if (this.props.isRotated) {\n      className += ` ${styles[\"board--rotated\"]} board--rotated`;\n    }\n    return (\n      <div className={className} style={this.props.style}>\n        {this.BoardSquares()}\n        {this.EntityPawns()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./LinearDisplay.scss\";\n\ninterface LinearDisplayProps {\n  className?: string;\n  current: number;\n  max: number;\n  title?: string;\n  label?: string;\n}\n\nexport function LinearDisplay(props: LinearDisplayProps) {\n  let className = `linear-display ${props.className || \"\"}`;\n  let percentage = ~~((props.current * 100) / props.max);\n  let overload = percentage > 100;\n  if (overload) {\n    percentage = 100;\n    className += \" linear-display--overloaded\";\n  }\n\n  let progressStyle = {\n    width: `${percentage}%`,\n  };\n  let title = props.title || `${props.current}/${props.max}`;\n\n  let amount = props.current;\n\n  let divider = 1;\n  if (props.max >= 40 && props.max < 100) {\n    divider = 5;\n  } else if (props.max >= 100) {\n    divider = 10;\n  }\n\n  amount = amount / divider;\n\n  let gridSize = 100 / amount;\n\n  let color = `rgba(200,200,200,0.4)`;\n  color = `black`;\n  let progressGridStyle = {\n    backgroundSize: `${gridSize}% 100%`,\n    backgroundImage: `\n      linear-gradient(to left, ${color} 1px, transparent 1px)\n    `,\n  };\n\n  Object.assign(progressStyle, progressGridStyle);\n\n  return (\n    <div className={className}>\n      <div className=\"linear-display__label\">{props.label}:&nbsp;</div>\n      <div className=\"linear-display__bar-container\" title={title}>\n        <div className=\"linear-display__bar-progress\" style={progressStyle}>\n          <span className=\"linear-display__bar-progress-text\">\n            {props.current}\n            {overload ? \"/\" + props.max : \"\"}&nbsp;\n          </span>\n        </div>\n      </div>\n      <div>&nbsp;</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Item, RangedWeapon } from \"../../services\";\nimport { LinearDisplay } from \"../LinearDisplay\";\n\ninterface InventoryItemProps {\n  item: Item;\n  onDrop(itemName: string);\n  onReload(itemName: string);\n  onClick(itemName: string);\n  processInterface: Function;\n}\n\nexport function InventoryItem(props: InventoryItemProps) {\n  let { item } = props;\n  let reloadButton;\n  let dropButton;\n  let ammoCounter;\n\n  if (props.onDrop) {\n    dropButton = (\n      <button\n        className=\"inventory-list__drop-button\"\n        onClick={() => {\n          props.onDrop(item.name);\n        }}\n      >\n        Drop\n      </button>\n    );\n  }\n\n  if (item instanceof RangedWeapon) {\n    let weapon = item as RangedWeapon;\n\n    if (weapon.reload) {\n      // has reload capability\n      let className = \" inventory-list__reload-button \";\n\n      if (weapon.rounds === 0 || weapon.rounds === \"empty\") {\n        className += \" inventory-list__reload-button--empty \";\n      } else if (weapon.rounds < weapon.maxRounds) {\n        className += \" inventory-list__reload-button--partial \";\n      }\n      reloadButton = (\n        <button\n          className={className}\n          onClick={() => {\n            weapon.reload();\n            props.onReload && props.onReload(item.name);\n            props.processInterface();\n          }}\n        >\n          Reload\n        </button>\n      );\n    } else {\n      reloadButton = null;\n    }\n\n    ammoCounter = weapon.reload ? (\n      <LinearDisplay label=\"Rounds\" current={weapon.rounds} max={weapon.maxRounds} />\n    ) : null;\n  }\n\n  return (\n    <div key={item.name}>\n      <div onClick={() => props.onClick(item.name)} key={item.name} className=\"inventory-list__item\">\n        <span>{item.name}</span>\n        <div>{ammoCounter}</div>\n      </div>\n      {reloadButton}\n      {dropButton}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./InventoryList.scss\";\nimport { Item } from \"../../services\";\nimport { InventoryItem } from \"../InventoryItem\";\n\ninterface InventoryListProps {\n  className?: string;\n  label: string;\n  title: string;\n  onClick(itemName: string);\n  onDrop(itemName: string);\n  onReload(itemName: string);\n  inventory: Item[]; //\n  processInterface: Function;\n}\n\nexport function InventoryList(props: InventoryListProps) {\n  const className = `inventory-list ${props.className || \"\"}`;\n\n  if (!props.inventory) {\n    return null;\n  }\n\n  const inventoryItems = props.inventory.map((item) => (\n    <InventoryItem\n      key={`i${item.name}`}\n      item={item}\n      onClick={props.onClick}\n      onDrop={props.onDrop}\n      onReload={props.onReload}\n      processInterface={props.processInterface}\n    />\n  ));\n\n  return (\n    <div className={className}>\n      <div className=\"inventory-list__label\">\n        {props.label}\n        :&nbsp;\n      </div>\n      <div className=\"inventory-list__items\" title={props.title}>\n        {inventoryItems}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { LinearDisplay } from \"../LinearDisplay\";\nimport { InventoryList } from \"../InventoryList\";\nimport \"./EntityCard.scss\";\nimport { Entity, Item } from \"../../services\";\n\ninterface EntityCardProps {\n  entity: Entity;\n  onInventoryClick?(entity: Entity, itemName: string);\n  processInterface?: Function;\n}\n\nexport class EntityCard extends React.Component<EntityCardProps> {\n  renderCount = 0;\n  handleInventoryClick = (itemName: string): void => {\n    this.props.onInventoryClick(this.props.entity, itemName);\n  };\n\n  onDrop = (itemName: string) => {\n    let { entity } = this.props;\n    if (entity.equipment.hands && entity.equipment.hands.name === itemName) {\n      entity.unEquipFromHands();\n      entity.isShooting = false;\n    }\n    let item: Item = entity.takeFromInventory(itemName);\n    entity.square.addItem(item);\n    this.props.processInterface();\n  };\n\n  onReload = (itemName: string) => {\n    let { entity } = this.props;\n    if (entity.equipment.hands && entity.equipment.hands.name === itemName) {\n      entity.isShooting = false;\n    }\n    this.props.processInterface();\n  };\n\n  render() {\n    let { entity } = this.props;\n    if (!entity) return null;\n    // FIXME: Below should be separated into several sub-components\n    // Each sub-component should receive flat data (position, hp, ...)\n\n    let className = \"entity-card\";\n    if (entity.active) {\n      className += \" entity-card--active\";\n    }\n\n    if (entity.isFriendly) {\n      className += \" entity-card--friendly\";\n    }\n\n    if (entity.isDead) {\n      className += \" entity-card--dead\";\n    }\n\n    let inHands = entity.equipment && entity.equipment.hands;\n    let inHandsArray = inHands && [inHands];\n\n    return (\n      <div className={className}>\n        <div>\n          <div className=\"entity-card__position\" title=\"Position\">\n            <span>\n              {\" \"}\n              {entity.position.x} {entity.position.y}{\" \"}\n            </span>\n          </div>\n\n          <div className=\"entity-card__portrait\">{entity.icon}</div>\n        </div>\n        <strong title=\"Name\">{entity.name}</strong>\n        <br />\n        <div\n          style={{\n            clear: \"both\",\n            display: \"inline-block\",\n            textAlign: \"right\",\n          }}\n        >\n          <LinearDisplay label=\"HP\" current={entity.hp} max={entity.maxHp} />\n          <br />\n        </div>\n        <InventoryList\n          label=\"Equipped\"\n          title=\"In hands\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          onReload={this.onReload}\n          inventory={inHandsArray}\n          processInterface={() => this.props.processInterface()}\n        />\n        <InventoryList\n          label=\"Inventory\"\n          title=\"In backpack\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          onReload={this.onReload}\n          inventory={entity.inventory}\n          processInterface={() => this.props.processInterface()}\n        />\n      </div>\n    );\n  }\n}\n","export const structures = {\r\n  box: {\r\n    name: \"box\",\r\n    icon: \"📦\",\r\n    hp: 50,\r\n    maxHp: 70,\r\n    isBreathing: false,\r\n    position: { x: 4, y: 5 },\r\n  },\r\n  redBarrel: {\r\n    name: \"redBarrel\",\r\n    icon: \"🛢️\",\r\n    hp: 50,\r\n    maxHp: 70,\r\n    isBreathing: false,\r\n    position: { x: 4, y: 5 },\r\n  },\r\n};\r\n","import React from \"react\";\n// services\nimport { SquaresService } from \"../../services\";\nimport { Entity, Square, Position, Item } from \"../../services\";\n// components\nimport { EntityCard } from \"../EntityCard\";\nimport { InventoryList } from \"../InventoryList\";\n// others\nimport { structures } from \"../../resources\";\nimport * as Helpers from \"../../helpers\";\nimport GameStyles from \"./Game.module.scss\";\n\ninterface TargetedSquareInfoProps {\n  className: string;\n  squareNumber: number;\n  squares: Square[];\n  selected: Entity;\n  targeted: Square;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  processInterface: Function;\n}\n\n// TODO: Refactor, does it really need all this logic.\nexport default class TargetedSquareInfo extends React.Component<TargetedSquareInfoProps> {\n  boxSerialNumber: number = 0;\n\n  onItemClick = (itemName: string): void => {\n    let { selected, targeted, squareNumber } = this.props;\n    let targetedSquarePosition = SquaresService.targetSquarePosition(squareNumber);\n    if (selected && targeted &&\n      selected.position.x == targetedSquarePosition.x &&\n      selected.position.y == targetedSquarePosition.y\n      ) {\n      let item = targeted.takeFromInventory(itemName);\n      selected.addToInventory(item);\n    }\n    this.props.processInterface();\n  };\n\n  onMoveClick(selected: Entity, targetedSquarePosition: Position): void {\n    let targetedSquare: Square = SquaresService.getSquare(targetedSquarePosition.x, targetedSquarePosition.y);\n    selected.setMoveDestinationPosition(targetedSquarePosition);\n    targetedSquare.isChosenDestination = true;\n    this.props.processInterface();\n  }\n\n  onAttackClick(selected: Entity, targetedSquarePosition: Position): void {\n    selected.attackPosition(targetedSquarePosition);\n    this.props.processInterface();\n  }\n\n  onAddStructureClick(targetedSquarePosition: Position, structureType: string): void {\n    let box = Object.assign({}, structures[structureType]);\n    let targetPosition = Object.assign({}, targetedSquarePosition);\n    box.position = targetPosition;\n    box.name += this.boxSerialNumber++;\n    let newStructure = new Entity(box);\n    let square = SquaresService.getSquare(targetedSquarePosition.x, targetedSquarePosition.y);\n    square.entity = newStructure;\n    square.addToInventory(newStructure as Item); // TODO: FIXME: Stop forcing types, make a new list for scenery items.\n    //EntitiesService.entities.push(newBox);\n    this.props.processInterface();\n  }\n\n  render() {\n    let { targeted, selected, squareNumber } = this.props;\n\n    if (!targeted) {\n      return null;\n    }\n\n    let targetedSquarePosition = SquaresService.targetSquarePosition(squareNumber);\n\n    let entityInfo;\n    let distanceInfo;\n    let positionInfo;\n    let bloodInfo;\n    let availableActions = [];\n    let items;\n\n    let editorButtons = (\n      <div>\n        <button onClick={() => this.onAddStructureClick(targetedSquarePosition, \"box\")} className={GameStyles.button}>\n          Add box\n        </button>\n        <button\n          onClick={() => this.onAddStructureClick(targetedSquarePosition, \"redBarrel\")}\n          className={GameStyles.button}\n        >\n          Add barrel\n        </button>\n      </div>\n    );\n\n    if (targeted.entity && !Helpers.isSelectedTargeted(selected, targeted)) {\n      entityInfo = (\n        <EntityCard\n          onInventoryClick={this.props.onInventoryClick}\n          entity={targeted.entity}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (targeted.items) {\n      items = (\n        <InventoryList\n          label=\"Items in this location\"\n          title=\"On the floor\"\n          onClick={this.onItemClick}\n          onDrop={null}\n          onReload={null}\n          inventory={targeted.items}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (selected) {\n      let distanceToSelected = Helpers.calculateDistance(\n        targetedSquarePosition.x - selected.position.x,\n        targetedSquarePosition.y - selected.position.y\n      );\n\n      distanceInfo = <li>Distance to selected: {distanceToSelected.toFixed(2)}</li>;\n\n      if (distanceToSelected !== 0) {\n        if (targeted.isAvailableDestination) {\n          availableActions[0] = (\n            <button key=\"move\" onClick={() => this.onMoveClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Move\n            </button>\n          );\n        }\n        if (targeted.entity) {\n          availableActions[1] = (\n            <button key=\"attack\" onClick={() => this.onAttackClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Attack\n            </button>\n          );\n        }\n      }\n    }\n\n    if (targetedSquarePosition) {\n      positionInfo = (\n        <li>\n          Position: [ {targetedSquarePosition.x}, {targetedSquarePosition.y} ]{\" \"}\n        </li>\n      );\n    }\n\n    if (targeted.blood) {\n      bloodInfo = <li>Blood amount: {targeted.blood}</li>;\n    }\n\n    return (\n      <div className={this.props.className}>\n        <strong className={GameStyles.targeted__label}>Target square Info</strong>\n        <div>{entityInfo}</div>\n        <div>{availableActions}</div>\n        <ul>\n          {positionInfo}\n          {distanceInfo}\n          {bloodInfo}\n          {items}\n          {editorButtons}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { ReactElement } from \"react\";\n// services\nimport { Entity } from \"../../services\";\n// components\nimport { EntityCard } from \"../EntityCard\";\n// others\nimport GameStyles from \"./Game.module.scss\";\n\ninterface SelectedEntityInfoProperties {\n  selected: Entity;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  handleDeselectAllEntities: () => void;\n  processInterface: Function;\n}\n\n// TODO: Change this into HOC, as it doesn't really need half of it's props for itself\nexport default class SelectedEntityInfo extends React.Component<SelectedEntityInfoProperties> {\n  render(): ReactElement {\n    if (!this.props.selected) {\n      return null;\n    }\n\n    return (\n      <div className={GameStyles.selected}>\n        <strong className={GameStyles.selected__label}>Selected entity </strong>\n        <div>\n          <EntityCard\n            onInventoryClick={this.props.onInventoryClick}\n            entity={this.props.selected}\n            processInterface={() => this.props.processInterface()}\n          />\n        </div>\n        <button onClick={this.props.handleDeselectAllEntities} className={GameStyles.button}>\n          {\" \"}\n          Deselect\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n// services\nimport \"./MessageBox.scss\";\nimport { MessageService } from \"../../services\";\n\nexport class MessageBox extends React.Component {\n  messages = MessageService.messages;\n  messageNumber;\n\n  shouldComponentUpdate() {\n    // don't update if there are no new messages since last render\n    return this.messages.length !== this.messageNumber;\n  }\n\n  renderMessage = (message: string, number: number) => {\n    return (\n      <li key={`msg${number}`}>\n        Message #[{number}]: {message}\n      </li>\n    );\n  };\n\n  render() {\n    if (!this.messages.length) return null;\n    let RenderedMessages = this.messages.map((message, number) => this.renderMessage(message, number));\n    // remember the number of messages rendered\n    this.messageNumber = this.messages.length;\n    return (\n      <ul className=\"messages\" id=\"messages\">\n        {RenderedMessages}\n      </ul>\n    );\n  }\n\n  scrollElement() {\n    window.requestAnimationFrame(() => {\n      var element = document.getElementById(\"messages\");\n      element.scrollTop = element.scrollHeight;\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.messages.length) this.scrollElement();\n  }\n}\n","import React from \"react\";\n//import * as dat from \"dat.gui\";\n\n// services\nimport { EntitiesService, SquaresService, GameModel, GameActionsClass, GameState } from \"../../services\";\n\n// components\nimport Board from \"../Board\";\nimport EntitiesList from \"../EntitiesList\";\nimport TargetedSquareInfo from \"./TargetedSquareInfo\";\nimport SelectedEntityInfo from \"./SelectedEntityInfo\";\nimport { MessageBox } from \"../MessageBox\";\n\n// others\nimport styles from \"./Game.module.scss\";\n\nlet GameActions = null;\n\n/** Game composes all the parts of the interface */\nexport class Game extends React.PureComponent<void, GameState> {\n  renderCounter: number = 0;\n  stepNumber: number = 0;\n  //dat;\n\n  constructor(props: void) {\n    super(props);\n\n    GameModel.loadBuiltInMap();\n    GameModel.loadPredefinedEntitities();\n    //this.dat = new dat.GUI();\n    this.state = {\n      entities: EntitiesService.entities,\n      squares: SquaresService.squares,\n      squareSize: 40,\n      selected: EntitiesService.findEntityById(\"Lazer Blady\"),\n      targeted: null,\n      targetedSquareNumber: null,\n      enemiesAlive: null,\n      arenaSize: 10,\n      autoLoop: true,\n      isBoardRotated: false,\n      isEditorOn: false,\n    };\n    this.state.selected.active = true;\n    GameActions = new GameActionsClass(this);\n  }\n\n  componentDidMount() {\n    GameActions.loop();\n  }\n\n  zoomIn() {\n    this.setState((prevState) => {\n      return { squareSize: prevState.squareSize + 5 };\n    });\n  }\n  zoomOut() {\n    this.setState((prevState) => {\n      return { squareSize: prevState.squareSize - 5 };\n    });\n  }\n  render() {\n    // console.log(\"Rendering Game. #\", this.renderCounter++);\n    return (\n      <div className={styles.game}>\n        <div className={styles.status}>\n          Enemies to kill: {this.state.enemiesAlive}<br></br>\n          {this.state.enemiesAlive ? '' : \" Great Job. YOU WON.\" }\n          {this.state.selected.isAlive ? '' : \" Damn. YOU DIED.\" }\n        </div>\n        <p>\n          L2P: Click friendly entity on the map, twice. Then click a target square to move, or target entity to attack.\n        </p>\n        <div className={styles.game__board}>\n          <Board\n            squares={this.state.squares}\n            entities={this.state.entities}\n            onClick={(i) => GameActions.handleClickV2(i)}\n            size={this.state.arenaSize}\n            isRotated={this.state.isBoardRotated}\n            style={{fontSize: `${this.state.squareSize}px`}}\n          />\n        </div>\n\n        <div className={styles.game__info}>\n          <div className={styles.actions}>\n            <button onClick={GameActions.toggleEditorMode} className={styles.button}>\n              Editor Mode\n            </button>\n            <button onClick={GameModel.saveMap} className={styles.button}>\n              Save Map\n            </button>\n            <button onClick={GameModel.loadMap} className={styles.button}>\n              Load Map\n            </button>\n            <button\n              onClick={() => {\n                GameActions.nuke(40);\n              }}\n              className={`${styles.button} ${styles[\"button-nuke\"]}`}\n            >\n              Nuke All\n            </button>\n            <button onClick={GameActions.ceaseFire} className={styles.button}>\n              Cease Fire\n            </button>\n\n            <button onClick={GameActions.toggleRotateBoard} className={styles.button}>\n              Rotate Board\n            </button>\n\n            <button onClick={() => this.zoomIn()} className={styles.button}>\n              Zoom In (+)\n            </button>\n            <button onClick={() => this.zoomOut()} className={styles.button}>\n              Zoom Out (-)\n            </button>\n\n            <button onClick={GameActions.nextTick} className={styles.button}>\n              Next Tick\n            </button>\n\n            <span className={styles[\"step-counter\"]}>Tick: {this.stepNumber}</span>\n\n            <label className={` ${styles.button} ${styles[\"auto-cycle\"]}`}>\n              <input type=\"checkbox\" checked={this.state.autoLoop} onChange={GameActions.switchAutoLoop} />\n              <span>Auto Cycle</span>\n            </label>\n          </div>\n          <div className={styles[\"interaction-container\"]}>\n            <SelectedEntityInfo\n              selected={this.state.selected}\n              handleDeselectAllEntities={GameActions.handleDeselectAllEntities}\n              onInventoryClick={GameActions.onInventoryClick}\n              processInterface={() => GameActions.processInterface()}\n            />\n\n            <TargetedSquareInfo\n              className={styles.targeted}\n              squareNumber={this.state.targetedSquareNumber}\n              squares={this.state.squares}\n              selected={this.state.selected}\n              targeted={this.state.targeted}\n              onInventoryClick={GameActions.onInventoryClick}\n              processInterface={() => GameActions.processInterface()}\n            />\n            <div></div>\n          </div>\n          <MessageBox />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\nimport \"./HudPanel.scss\";\n\ninterface HudPanelProps {\n  title: string;\n  children: JSX.Element;\n}\n\nexport class HudPanel extends React.Component<HudPanelProps> {\n\n    render() {\n        return <div className=\"hud-panel\">\n            <div className=\"hud-panel__title\">{this.props.title}</div>\n            <div className=\"hud-panel__content\">{this.props.children}</div>\n        </div>;\n    }\n}","import React from \"react\";\nimport { EntityCard } from \"../EntityCard\";\nimport \"./EntitiesList.scss\";\nimport { Entity } from \"../../services/EntitiesService\";\n\ninterface ListOfEntitiesProps {\n  entities: Entity[];\n  onInventoryClick: any;\n  processInterface: Function;\n}\n\nexport default class ListOfEntities extends React.Component<ListOfEntitiesProps> {\n  render() {\n    let entitiesFriendly = this.props.entities\n      .filter((entity) => entity.isFriendly)\n      .map((obj) => {\n        return (\n          <EntityCard\n            key={obj.name}\n            entity={obj}\n            onInventoryClick={this.props.onInventoryClick}\n            processInterface={() => this.props.processInterface()}\n          />\n        );\n      });\n\n    let entitiesUnfriendly = this.props.entities\n      .filter((entity) => !entity.isFriendly)\n      .map((obj) => {\n        return <EntityCard key={obj.name} entity={obj} processInterface={() => this.props.processInterface()} />;\n      });\n\n    return (\n      <>\n        <h4 className=\"entities-list__header\">List of Entities:</h4>\n        <div className=\"entities-list\">{entitiesFriendly}</div>\n        <div className=\"entities-list\">{entitiesUnfriendly}</div>\n      </>\n    );\n  }\n}\n","import React from \"react\";\n//import \"./Cell.scss\";\n\ninterface CellProps {\n}\n\ninterface CellState {\n}\n\nexport class Cell extends React.PureComponent<CellProps, CellState> {\n\n  state = {}\n\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //   }\n  // }\n\n  render() {\n    //console.log(`Rendering [${this.props.children}]`);\n    return <div className=\"cell\">{this.props.children}</div>\n  }\n}","import React from \"react\";\nimport { Cell } from \"./Cell\";\nimport \"./Grid.scss\";\n\ninterface GridProps {\n  width: number;\n  height: number;\n  startAt: [number, number];\n}\n\ninterface GridState {\n  mapdrag: boolean,\n  scroll: {\n    x: number,\n    y: number,\n  }\n}\n\nexport class Grid extends React.Component<GridProps, GridState> {\n  gridReference;\n  scroll = {\n    x: 0,\n    y: 0,\n  }\n\n  mapdrag = false;\n\n  stateDriven = false;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      mapdrag: false,\n      scroll: {\n        x: 0,\n        y: 0,\n      }\n    }\n\n    this.gridReference = React.createRef();\n  }\n\n  scrollRelativeXY(deltaX: number, deltaY: number) {\n    this.scroll.x -= deltaX;\n    this.scroll.y -= deltaY;\n\n    if(this.scroll.x <= 0) {\n      this.scroll.x = 0;\n    }\n    if(this.scroll.y <= 0) {\n      this.scroll.y = 0;\n    }\n\n    if(this.stateDriven) {\n      this.setState({\n        scroll: {\n          x: this.scroll.x,\n          y: this.scroll.y,\n      }})\n    }\n    this.executeScroll();\n  }\n\n  renderGrid() {\n    let rows = [];\n    for(let y = 0; y <= this.props.height; y++) {\n      let sourceY = this.props.startAt[1] + y;\n      let currentRow = [];\n\n      for(let x = 0; x <= this.props.width; x++) {\n        let sourceX = this.props.startAt[0] + x;\n        let currentCell = <Cell key={`$key_${sourceX}_${sourceY}`}>{sourceX}, {sourceY}</Cell>\n        currentRow.push(currentCell);\n      }\n      rows.push(<div className=\"row\"  key={`$key_X_${sourceY}`}>{currentRow}</div>);\n    }\n    return <div\n      className=\"grid\"\n      ref={this.gridReference}\n      onMouseDown={(e) => this.onMouseDown(e)}\n      onMouseUp={(e) => this.onMouseUp(e)}\n      onMouseMove={(e) => this.handleMove(e)}\n      onContextMenu={(e)=>e.preventDefault()}\n      onDrag={(e)=>this.onMouseDrag(e)}\n      //onMouseOut={(e)=>this.onMouseOut(e)}\n    >{rows}</div>;\n  }\n\n  handleMove(e) {\n    if(!this.mapdrag) return;\n    this.scrollRelativeXY(e.movementX, e.movementY);\n  }\n\n  onMouseDrag(e){\n    console.log(e);\n  }\n\n  onMouseDown(e) {\n    console.log(e.button);\n    if(e.button === 2) {\n      this.mapdrag = true;\n    }\n    e.preventDefault();\n    console.log(this.mapdrag);\n  }\n\n  onMouseOut(e) {\n    console.log(\"MOUSE OUT\")\n    this.mapdrag = false;\n  }\n\n  startDragging(e){\n      this.mapdrag = true;\n  }\n\n  onMouseUp(e){\n    console.log(e.button);\n    if(e.button === 2) {\n      this.mapdrag = false;\n    }\n    e.preventDefault();\n    console.log(this.mapdrag);\n  }\n\n  onChangeScrollX(event) {\n    console.log(event.target.value);\n    this.scroll.x = event.target.value;\n    this.executeScroll();\n  }\n  onChangeScrollY(event) {\n    console.log(event.target.value)\n    this.scroll.y = event.target.value;\n    this.executeScroll();\n  }\n\n  executeScroll() {\n    this.gridReference.current.scroll({\n      top: this.scroll.y,\n      left: this.scroll.x,\n    });\n  }\n\n  switchStateDriven(e) {\n    console.log(e.target.checked);\n    this.stateDriven = e.target.checked;\n  }\n\n  render() {\n    return <div className=\"grid-container\">\n      <pre className=\"gridDebugData\">\n        Width: {this.props.width}<br/>\n        Height: {this.props.height}<br/>\n        StartAt: {this.props.startAt[0]}, {this.props.startAt[1]}<br/>\n        ScrollX: <input onChange={(e) => this.onChangeScrollX(e)}></input><br/>\n        ScrollY: <input onChange={(e) => this.onChangeScrollY(e)}></input><br/>\n        StateDriven: <input type=\"checkbox\" onChange={(e)=>this.switchStateDriven(e)}></input><br/>\n\n        State mapdrag: {this.state.mapdrag}<br/>\n        State scrollX: {this.state.scroll.x}<br/>\n        State scrollY: {this.state.scroll.y}<br/>\n      </pre>\n      {this.renderGrid()}\n    </div>;\n  }\n}","import React from \"react\";\nimport \"./Controls.scss\";\n\ninterface ControlsProps {\n    keys: string[],\n    onKeyPress: Function,\n}\n\ninterface ControlsState {\n    w: boolean,\n    s: boolean,\n    a: boolean,\n    d: boolean,\n}\n\nexport class Controls extends React.Component<ControlsProps, ControlsState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            w: false,\n            s: false,\n            a: false,\n            d: false,\n        }\n    }\n\n    componentDidMount(){\n        document.addEventListener(\"keydown\", (e) => this.onKeyDown(e), false);\n        document.addEventListener(\"keyup\", (e) => this.onKeyUp(e), false);\n    }\n\n    onKeyDown(event) {\n        console.log(event)\n        switch(event.keyCode) {\n            case 87: // W\n                this.setState({w: true});\n                this.props.onKeyPress('w');\n                break;\n            case 83: // S\n                this.setState({s: true});\n                this.props.onKeyPress('s');\n                break;\n            case 65: // A\n                this.setState({a: true});\n                this.props.onKeyPress('a');\n                break;\n            case 68: // D\n                this.setState({d: true});\n                this.props.onKeyPress('d');\n                break;\n        }\n    }\n\n    onKeyUp(event) {\n        console.log(event)\n        switch(event.keyCode) {\n            case 87: // W\n                this.setState({w: false});\n                break;\n            case 83: // S\n                this.setState({s: false});\n                break;\n            case 65: // A\n                this.setState({a: false});\n                break;\n            case 68: // D\n                this.setState({d: false});\n                break;\n        }\n    }\n\n    render() {\n        return <div className=\"controls\">\n            [<span className={`${this.state.w ? 'pressed' : ''} key` }>W</span>]\n            [<span className={`${this.state.s ? 'pressed' : ''} key` }>S</span>]\n            [<span className={`${this.state.a ? 'pressed' : ''} key` }>A</span>]\n            [<span className={`${this.state.d ? 'pressed' : ''} key` }>D</span>]\n        </div>;\n    }\n}","import React from \"react\";\nimport { HudPanel, Grid, Controls } from \"../../components\";\nimport \"./BlastZone.scss\";\n\ninterface BlastZoneState {\n  gridX: number,\n  gridY: number,\n}\nexport default class BlastZone extends React.Component<void, BlastZoneState> {\n  constructor(props: void) {\n    super(props);\n    this.state = {\n      gridX: 0,\n      gridY: 0,\n    }\n  }\n  componentDidMount() {\n  }\n\n  onControlPress(key) {\n    let deltaX = 0;\n    let deltaY = 0;\n    switch(key) {\n      case \"w\":\n        deltaY = -1;\n        break;\n      case \"s\":\n        deltaY = 1;\n        break;\n\n      case \"a\":\n        deltaX = -1;\n        break;\n      case \"d\":\n        deltaX = 1;\n        break;\n    }\n\n    console.log(key);\n    this.setState(prevState => {\n      return {\n        gridX: prevState.gridX + deltaX,\n        gridY: prevState.gridY + deltaY\n      };\n    })\n  }\n\n  render() {\n\n    const controls = <Controls\n      keys={['W', 'S', 'A', 'D']}\n      onKeyPress={(e) => this.onControlPress(e)}\n      ></Controls>\n    const console = <></>;\n    const statusIndicators = <></>;\n\n    return <div className=\"blast-zone\">\n      <div className=\"top-row\">\n        <HudPanel title=\"Controls\">\n          {controls}\n        </HudPanel>\n        <HudPanel title=\"Console\">\n          {console}\n        </HudPanel>\n        <HudPanel title=\"Status Indicators\">\n          {statusIndicators}\n        </HudPanel>\n      </div>\n      <div className=\"mid-row\">\n        <HudPanel title=\"Tactical Grid\">\n          <Grid width={100} height={100} startAt={[this.state.gridX,this.state.gridY]}></Grid>\n        </HudPanel>\n      </div>\n\n      <div className=\"bottom-row\">\n        <HudPanel title=\"OhWell\">\n          <span>:)</span>\n        </HudPanel>\n      </div>\n    </div>;\n  }\n}","import React from \"react\";\nimport { HudPanel, Grid, Controls, Game } from \"./components\";\nimport BlastZone from \"./screens/BlastZone\";\ninterface AppState {\n  loadedScene: string\n}\nexport default class App extends React.Component<void, AppState> {\n\n  scenes:{} = {\n    BlastZone,\n    Game,\n  }\n  SelectedScene = null;\n  constructor(props: void) {\n    super(props);\n    this.state = {\n      loadedScene: 'Game'\n    }\n    this.handleChange.bind(this);\n  }\n  componentDidMount() {\n  }\n\n  handleChange(e) {\n    // e.target.value;\n    console.log(e)\n    console.log(e.target)\n    console.log(e.target.value)\n    const sceneToLoad = e.target.value;\n    this.setState(prevState => {return {loadedScene: sceneToLoad}});\n  }\n\n  render() {\n    let SelectedScene = this.scenes[this.state.loadedScene];\n    return <div className=\"app\">\n      <div className=\"meta-bar\">\n        <div className=\"screen-switch\">\n          <span>Select screen: </span>\n          <select value={this.state.loadedScene} onChange={(e)=>this.handleChange(e)}>\n            <option value=\"BlastZone\">BlastZone</option>\n            <option value=\"Game\">Game</option>\n          </select>\n        </div>\n      </div>\n      <SelectedScene/>\n    </div>\n  }\n}","import React from \"react\";\nimport { render } from \"react-dom\";\nimport Game from \"./components/Game\";\nimport BlastZone from \"./screens/BlastZone\";\nimport App from \"./App\";\n\nimport \"./style.scss\";\n\n// Rendering the top-level Game component\n// render(<Game />, document.getElementById(\"root\"));\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}