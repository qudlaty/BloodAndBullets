{"version":3,"sources":["components/Game/Game.module.scss","components/Board/Board.module.scss","helpers/Helpers.ts","components/Square/Square.tsx","services/MessageService.ts","services/EntitiesValues.ts","services/SquaresService.ts","services/index.ts","services/EntitiesService.ts","components/EntityPawn/ShootingVisualization.tsx","components/EntityPawn/EntityPawn.tsx","components/Board/Board.tsx","components/EntityCard/LinearDisplay.tsx","components/EntityCard/InventoryItem.tsx","components/EntityCard/InventoryList.tsx","components/EntityCard/EntityCard.tsx","components/EntitiesList/EntitiesList.tsx","components/Game/TargetedSquareInfo.tsx","components/Game/SelectedEntityInfo.tsx","components/Game/MessageBox.tsx","services/GameModelService.ts","components/Game/Game.tsx","index.js"],"names":["module","exports","resetGivenFieldsOnACollection","collection","fieldNames","forEach","item","fieldName","undefined","getNumberWithinBoundaries","value","min","max","getRandomIntInclusive","Math","floor","random","calculateAngle","x","y","angle","atan","PI","calculateDistance","sqrt","pow","isSelectedTargeted","selected","targeted","entity","name","turnFlagsIntoClasses","flags","classNameBase","flagsToClassess","active","isAvailableDestination","isChosenDestination","isBreathing","isDead","isShooting","isTargeted","isLit","isInTwilightZone","className","Object","keys","key","derivedCtor","Square","renderCounter","shouldComponentUpdate","nextProps","JSON","stringify","props","localId","this","squareId","squareClassName","Helpers","itemsNumber","customStyle","items","blood","rowId","colId","bloodClassName","itemsClassName","toFixed","length","onClick","style","color","React","Component","MessageService","messages","message","push","Weapon","causesBleeding","range","damage","RangedWeapon","rounds","maxRounds","console","log","Rifle","type","Lazer","M16","L30","M40","Identifiable","icon","Positionable","position","SquaresService","getSquare","Movable","moveDestination","squareIndex","setMoveDestinationPosition","targetSquarePosition","targetPosition","targetSquare","squares","Message","send","Mortal","hp","maxHp","Bleedable","bleeding","bleedingReductionPerTurn","bloodReleased","bleed","square","addBlood","Breathing","isSupposedToBeBreathing","Combative","ceaseFire","hasWeapon","targetedSquarePosition","HavingInventory","inventory","itemName","actualItemIndex","findIndex","splice","Entity","isFriendly","assign","equipment","unEquipFromHands","takeFromInventory","hands","baseCtor","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","entitiesInitialValues","age","head","structures","entities","map","entry","addToInventory","arenaSize","i","initializeSquareIfEmpty","targetSquareIndex","setEntityWithinASquare","amount","j","setSquare","EntitiesService","id","filter","oldPositionX","oldPositionY","newSquare","potentialTargetEntity","selectedInEntities","findEntityById","getEntityId","damageApplied","weapon","isAbleToFire","fire","checkAmmoAndCalculateDamageApplied","getEntitiesAtGivenPosition","targetEntity","applyDamageToTargetEntity","ceaseFireNextTickIfTargetIsKilled","chosenDestinationSquare","moveEntityIntoChosenDestination","JR","OP","OC","moveEntityRandomly","squaresService","ShootingVisualization","calcNewAangle","targetCoords","projectileNumber","projectiles","distanceToTargetX","distanceToTargetY","actualDistance","weaponType","projectile","EntityPawn","randomTime","classessFromFlags","animationBreathing","left","squareDistance","top","animation","Board","renderEntityPawns","handleClick","bind","cellId","rowsOfSquares","Array","size","fill","row","number","cells","cell","renderSquare","styles","entityPawns","board","isRotated","PureComponent","LinearDisplay","percentage","current","overload","progressStyle","width","title","divider","progressGridStyle","backgroundSize","backgroundImage","label","InventoryItem","reloadButton","dropButton","ammoCounter","onDrop","reload","processInterface","InventoryList","inventoryItems","EntityCard","renderCount","handleInventoryClick","onInventoryClick","addItem","inHands","inHandsArray","clear","display","textAlign","ListOfEntities","entitiesFriendly","obj","entitiesUnfriendly","TargetedSquareInfo","boxSerialNumber","onItemClick","targetedSquare","attackPosition","box","newBox","squareNumber","entityInfo","distanceInfo","positionInfo","bloodInfo","availableActions","editorButtons","onAddStructureClick","GameStyles","button","distanceToSelected","onMoveClick","onAttackClick","targeted__label","SelectedEntityInfo","selected__label","handleDeselectAllEntities","MessageBox","messageNumber","renderMessage","RenderedMessages","window","requestAnimationFrame","element","document","getElementById","scrollTop","scrollHeight","scrollElement","GameModel","Entities","Game","stepNumber","loop","processEntities","state","autoLoop","setTimeout","nextTick","setState","newHandleClick","selectedSquareNumber","targetedSquareNumber","previousTargeted","doubleClick","markSquareAsTargeted","setMoveDestinationSquare","selectEntityFromGivenSquare","deselectAllEntities","nuke","dmg","toggleRotateBoard","isBoardRotated","switchAutoLoop","previousState","prevState","concat","entityId","actualEntity","findItemOnEntity","equipInHands","calculateNextGameState","setSquaresAccordingToEntities","nextState","moveEntities","isEntityShootingProperly","fireAShot","bleedExternally","stopBreathingForKilledEntity","markAvailableDestinationsForSelectedEntity","castLightsFromFriendlyEntity","calculateNextInterfaceState","array","setEntityWithinApropriateSquare","game","game__board","game__info","actions","checked","onChange","game__list","render"],"mappings":"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","file":"static/js/main.35411449.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"Game_game__2BmQU\",\"game__board\":\"Game_game__board__1AR5E\",\"game__info\":\"Game_game__info__2XuYT\",\"game__list\":\"Game_game__list__3Ltux\",\"button\":\"Game_button__2usZ6\",\"button-nuke\":\"Game_button-nuke__37qkj\",\"actions\":\"Game_actions__2RncO\",\"interaction-container\":\"Game_interaction-container__14p5W\",\"selected\":\"Game_selected__Vfr4N\",\"targeted\":\"Game_targeted__2kJbA\",\"selected__label\":\"Game_selected__label__QlKmT\",\"targeted__label\":\"Game_targeted__label__3dceM\",\"step-counter\":\"Game_step-counter__3OklF\",\"auto-cycle\":\"Game_auto-cycle__16n4Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__3vjsK\",\"board__row\":\"Board_board__row__1-mls\",\"board--rotated\":\"Board_board--rotated__2eonB\"};","import { Entity } from \"../services/EntitiesValues\";\nimport { Square } from \"../services/SquaresService\";\n\n/** Takes a collection and a list of strings describing object keys. Sets all given fields on a collection to `undefined` */\nexport function resetGivenFieldsOnACollection(collection, ...fieldNames) {\n  collection.forEach((item) => {\n    fieldNames.forEach((fieldName) => {\n      item && (item[fieldName] = undefined);\n    });\n  });\n}\n\n/** Takes a number and fits it within given boundaries, then returns it */\nexport function getNumberWithinBoundaries(value: number, min: number, max: number): number {\n  if (value < min) value = min;\n  if (value > max) value = max;\n  return value;\n}\n\n/** Returns an integer between min and max */\nexport function getRandomIntInclusive(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/** Returns angle (in degrees) of a given vector */\nexport function calculateAngle(x: number, y: number): number {\n  let angle: number;\n  if (y >= 0) {\n    angle = -Math.atan(x / y) * (180 / Math.PI);\n  } else if (y < 0) {\n    angle = (180 / Math.PI) * (Math.atan(x / -y) + Math.PI);\n  }\n  return angle;\n}\n\n/** Pitagorean distance between 0,0 and given coords */\nexport function calculateDistance(x: number, y: number): number {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n}\n\n/** Mixing classess together */\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  // see https://www.typescriptlang.org/docs/handbook/mixins.html\n  baseCtors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));\n    });\n  });\n}\n\n/** Checking if selected entity is on a targeted square */\nexport function isSelectedTargeted(selected: Entity, targeted: Square): boolean {\n  if (selected && targeted && targeted.entity && selected.name === targeted.entity.name) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/** Adding classess apropriate to the flags passed in by props\n * If @classNameBase is given, it is added in front of the classname with \"--\"\n * Eg: classNameBase--class-from-flag\n */\nexport function turnFlagsIntoClasses(flags: object, classNameBase?: string) {\n  const flagsToClassess = {\n    active: \"active\",\n    isAvailableDestination: \"is-available-destination\",\n    isChosenDestination: \"is-chosen-destination\",\n    isBreathing: \"breathing\",\n    isDead: \"dead\",\n    isShooting: \"shooting\",\n    isTargeted: \"targeted\",\n    isLit: \"is-lit\",\n    isInTwilightZone: \"is-in-twilight-zone\",\n  };\n\n  let className = \"\";\n\n  if (classNameBase) {\n    classNameBase += \"--\";\n  } else {\n    classNameBase = \"\";\n  }\n\n  Object.keys(flagsToClassess).forEach((key) => {\n    if (flags[key]) {\n      className += ` ${classNameBase}${flagsToClassess[key]}`;\n    }\n  });\n  return className;\n}\n\n/**\n * Creates a new array containing all the elements from a given array\n * @param array array to shallow-copy\n * @yields a new copy of the array\n */\nexport function newCopyOfArray(array: any[]) {\n  return [].concat(array);\n}\n","import React from \"react\";\nimport * as Helpers from \"../../helpers\";\nimport { Item } from \"../../services/EntitiesValues\";\nimport \"./Square.scss\";\n\ninterface SquareProps {\n  squareId: string;\n  rowId: number;\n  colId: number;\n\n  active: boolean;\n  isDead: boolean;\n\n  blood: number;\n  items: Item[];\n\n  isLit: boolean;\n  isInTwilightZone: boolean;\n\n  isAvailableDestination: boolean;\n  isChosenDestination: boolean;\n  isTargeted: boolean;\n\n  onClick: (squareIndex: string) => void;\n}\n\nclass Square extends React.Component<SquareProps> {\n  renderCounter = 0;\n\n  shouldComponentUpdate = (\n    nextProps: SquareProps // only update if props differ\n  ) => JSON.stringify(nextProps) !== JSON.stringify(this.props);\n\n  render() {\n    // this.renderCounter++;\n    // console.log(\"Rendering Square\", this.renderCounter, this.props);\n\n    let localId = `square${this.props.squareId}`;\n    let classNameBase = \"square\";\n    let squareClassName = classNameBase;\n    squareClassName += Helpers.turnFlagsIntoClasses(this.props, classNameBase);\n\n    let customStyle = \"\";\n    let itemsNumber: number;\n\n    let { isLit, items, blood, rowId, colId } = this.props;\n\n    let bloodClassName = `blood-${localId}`;\n    let itemsClassName = `items-${localId}`;\n    let bloodStyle = `\n      .${bloodClassName} {\n        background: rgba(255,0,0, ${(this.props.blood / 30).toFixed(2)})\n      }\n    `;\n    customStyle += bloodStyle;\n    bloodClassName += \" square__blood \";\n\n    if (items && items.length) {\n      itemsClassName += ` square__items `;\n      itemsNumber = this.props.items.length;\n    }\n\n    if (!isLit) {\n      squareClassName += ` ${classNameBase}--dark`;\n      blood = null;\n      itemsNumber = null;\n      bloodClassName = null;\n    }\n\n    return (\n      <button className={squareClassName} onClick={() => this.props.onClick(this.props.squareId)}>\n        <div className={bloodClassName}>{blood}</div>\n        <div className={itemsClassName}>{itemsNumber}</div>\n        <div className=\"square__content\">\n          &nbsp;\n          <small style={{ color: \"transparent\" }}>\n            {colId},{rowId /* This just here for debugging */}\n          </small>\n        </div>\n        <style>{customStyle}</style>\n      </button>\n    );\n  }\n}\n\nexport default Square;\n","class MessageServiceClass {\n  messages: string[] = [];\n  send(message: string) {\n    this.messages.push(message);\n  }\n}\n\nconst MessageService = new MessageServiceClass();\n\nexport default MessageService;\n","import { applyMixins } from \"../helpers\";\nimport EntitiesService from \"./EntitiesService\";\nimport { SquaresService } from \".\";\nimport { Square } from \"./SquaresService\";\nimport * as Helpers from \"../helpers\";\nimport Message from \"../services/MessageService\";\n\nexport class Item {\n  name: string = \"\";\n}\n\nexport class Weapon extends Item {\n  causesBleeding = 0;\n  range = 0;\n  damage = 0;\n}\n\nexport class RangedWeapon extends Weapon {\n  rounds: number | any = 0;\n  maxRounds = 5;\n\n  fire() {\n    this.rounds--;\n    console.log(\"Firing ranged weapon. Damage: \", this.damage);\n    return this.damage;\n  }\n\n  get isAbleToFire() {\n    return this.rounds > 0;\n  }\n\n  reload() {\n    this.rounds = this.maxRounds;\n  }\n}\n\nclass Rifle extends RangedWeapon {\n  type = \"projectile\";\n  range = 4;\n  damage = 1;\n  causesBleeding = 4;\n}\n\nclass Lazer extends RangedWeapon {\n  type = \"lazer\";\n  range = 6;\n  damage = 5;\n  causesBleeding = 0;\n}\n\nclass M16 extends Rifle {\n  name = \"M16\";\n  rounds = 15;\n  maxRounds = 20;\n  damage = 2;\n}\n\nclass L30 extends Lazer {\n  name = \"Assault Lazer Cannon\";\n  rounds = 3;\n  maxRounds = 3;\n  damage = 10;\n}\n\nclass M40 extends Rifle {\n  name = \"M41A Pulse Rifle\";\n  rounds = 40;\n  maxRounds = 40;\n  damage = 1;\n}\n\n/** Position on a grid */\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nclass Identifiable {\n  name: string = \"An Entity\";\n  icon: string = \"E\";\n}\n\nexport class Positionable {\n  position: Position = { x: undefined, y: undefined };\n\n  get square(): Square {\n    let square = SquaresService.getSquare(this.position.x, this.position.y);\n    return square;\n  }\n}\n\nclass Movable extends Identifiable {\n  moveDestination: Position;\n\n  setMoveDestinationSquare(squareIndex: number) {\n    this.setMoveDestinationPosition(SquaresService.targetSquarePosition(squareIndex));\n  }\n\n  setMoveDestinationPosition(targetPosition: Position) {\n    let targetSquare = SquaresService.getSquare(targetPosition.x, targetPosition.y);\n    if (!targetSquare.entity || targetSquare.entity.isDead) {\n      this.moveDestination = targetPosition;\n      Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\");\n      targetSquare.isChosenDestination = true;\n    } else {\n      Message.send(`${this.name} can't move into square (${targetPosition.x}, ${targetPosition.y})`);\n    }\n  }\n}\n\nexport class Mortal extends Positionable {\n  hp: number = 100;\n  maxHp: number = 100;\n  get isDead(): boolean {\n    return this.hp <= 0;\n  }\n}\n\nexport class Bleedable extends Mortal {\n  bleeding: number;\n  bleedingReductionPerTurn: number = 1;\n  bleed(): number {\n    let entity = this;\n    let bloodReleased = 0;\n    if (entity.bleeding && entity.hp > 0) {\n      bloodReleased = entity.bleeding;\n      entity.hp -= bloodReleased;\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n    }\n    return bloodReleased;\n  }\n\n  bleedExternally() {\n    if (!this.bleeding) return;\n    let entity = this;\n    let bloodReleased = this.bleed();\n    let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\n    SquaresService.addBlood(square, bloodReleased);\n  }\n}\n\nclass Breathing extends Mortal {\n  isSupposedToBeBreathing: boolean = undefined;\n  get isBreathing(): boolean {\n    return this.hp > 0 && this.isSupposedToBeBreathing;\n  }\n  set isBreathing(value: boolean) {\n    this.isSupposedToBeBreathing = value;\n  }\n}\n\nclass Combative extends Identifiable {\n  targetPosition: Position;\n  isShooting?: boolean;\n  ceaseFire?: boolean;\n  hasWeapon?: boolean;\n  attackPosition(targetedSquarePosition: Position) {\n    if (this.hasWeapon) {\n      this.targetPosition = targetedSquarePosition;\n      this.isShooting = true;\n    } else {\n      Message.send(`${this.name} can't shoot - no weapon equipped`);\n    }\n  }\n}\n\nexport class HavingInventory {\n  inventory: Item[];\n  takeFromInventory(itemName: string): Item {\n    let actualItemIndex = this.inventory.findIndex((item) => item.name == itemName);\n    let actualItem = this.inventory.splice(actualItemIndex, 1)[0];\n\n    return actualItem;\n  }\n  addToInventory(item: Item) {\n    if (!this.inventory) {\n      this.inventory = [];\n    }\n    this.inventory.push(item);\n  }\n}\n\nclass HavingEquipment extends HavingInventory {\n  equipment: any;\n  hasWeapon?: boolean;\n\n  equipInHands(itemName: string) {\n    this.unEquipFromHands();\n    let item = this.takeFromInventory(itemName);\n    this.equipment.hands = item;\n    if (item instanceof Weapon) {\n      this.hasWeapon = true;\n    } else {\n      this.hasWeapon = false;\n    }\n  }\n\n  unEquipFromHands() {\n    if (this.equipment.hands) {\n      this.inventory.push(this.equipment.hands);\n      this.equipment.hands = null;\n      this.hasWeapon = false;\n    }\n  }\n}\n\nexport class Entity {\n  // Extended by mixins below\n  constructor(...props) {\n    Object.assign(this, ...props);\n  }\n  isFriendly?: boolean;\n  active?: boolean;\n}\n\n/************************************************************/\n/* Always update both lists */\n\nexport interface Entity\n  extends Identifiable,\n    Positionable,\n    Mortal,\n    Bleedable,\n    Movable,\n    Breathing,\n    Combative,\n    HavingInventory,\n    HavingEquipment {}\napplyMixins(Entity, [\n  Identifiable,\n  Positionable,\n  Mortal,\n  Bleedable,\n  Movable,\n  Breathing,\n  Combative,\n  HavingInventory,\n  HavingEquipment,\n]);\n\n/************************************************************/\n\nconst entitiesInitialValues = [\n  {\n    name: \"John Rambo\",\n    age: 40,\n    hp: 95,\n    maxHp: 100,\n    icon: \"😠\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 8, y: 8 },\n    inventory: [{ name: \"KA-BAR\" }, new M16()],\n    equipment: { head: \"Red Bandana\", hands: null },\n  },\n  {\n    name: \"Ellen Replay\",\n    age: 30,\n    hp: 50,\n    maxHp: 65,\n    icon: \"👩\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 1, y: 8 },\n    inventory: [new M40(), { name: \"Motion Detector\" }],\n    equipment: { head: \"Afro\" },\n  },\n  {\n    name: \"Lazer Blady\",\n    age: 60,\n    hp: 75,\n    maxHp: 100,\n    icon: \"🧑🏻\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 4, y: 8 },\n    inventory: [new L30(), new M16()],\n    equipment: {},\n  },\n  {\n    name: \"Lux Aeterna\",\n    age: 20,\n    hp: 50,\n    maxHp: 50,\n    icon: \"👱‍♀️\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 1, y: 1 },\n    inventory: [new L30()],\n    equipment: {},\n  },\n  {\n    name: \"Robot\",\n    age: 1,\n    hp: 50,\n    maxHp: 50,\n    icon: \"🤖\",\n    isBreathing: false,\n    position: { x: 4, y: 5 },\n  },\n  {\n    name: \"Octo\",\n    age: 8,\n    hp: 200,\n    maxHp: 200,\n    icon: \"🐙\",\n    isBreathing: true,\n    position: { x: 8, y: 2 },\n    bleedingReductionPerTurn: 0,\n    bleeding: 1,\n  },\n  {\n    name: \"Squid\",\n    age: 5,\n    hp: 100,\n    maxHp: 100,\n    icon: \"🦑\",\n    isBreathing: true,\n    position: { x: 5, y: 5 },\n  },\n  {\n    name: \"Ant\",\n    age: 1,\n    hp: 45,\n    maxHp: 50,\n    icon: \"🐜\",\n    isBreathing: true,\n    position: { x: 7, y: 6 },\n  },\n  {\n    name: \"Spider\",\n    age: 1,\n    hp: 100,\n    maxHp: 150,\n    icon: \"🕷️\",\n    isBreathing: true,\n    position: { x: 9, y: 3 },\n    bleedingReductionPerTurn: 1,\n  },\n  {\n    name: \"Mosquito\",\n    age: 1,\n    hp: 12,\n    maxHp: 20,\n    icon: \"🦟\",\n    isBreathing: true,\n    position: { x: 2, y: 7 },\n  },\n  {\n    name: \"Microbe\",\n    age: 1,\n    hp: 1,\n    maxHp: 5,\n    icon: \"🦠\",\n    isBreathing: true,\n    position: { x: 3, y: 5 },\n  },\n];\n\nexport const structures = {\n  box: {\n    name: \"box\",\n    icon: \"📦\",\n    hp: 50,\n    maxHp: 70,\n    isBreathing: false,\n    position: { x: 4, y: 5 },\n  },\n};\n\nconst entities = entitiesInitialValues.map((entry) => new Entity(entry));\n\nexport default entities;\n","import * as Helpers from \"../helpers/Helpers\";\nimport { Entity, Position, Item, RangedWeapon, HavingInventory } from \"./EntitiesValues\";\n\nexport interface Square {\n  entity?: Entity;\n  blood?: number;\n  isAvailableDestination?: boolean;\n  isChosenDestination?: boolean;\n  isTargeted?: boolean;\n  isLit?: boolean;\n  isInTwilightZone?: boolean;\n  // items?: RangedWeapon[];\n  addItem(item: Item): void;\n}\n\nexport class Square extends HavingInventory implements Square {\n  addItem(item: RangedWeapon) {\n    this.addToInventory(item);\n  }\n  get items() {\n    return this.inventory;\n  }\n}\n\nclass SquaresServiceClass {\n  arenaSize: number = 10;\n\n  squares: Square[] = [];\n\n  constructor() {\n    let i = this.arenaSize * this.arenaSize;\n    while (i-- !== 0) {\n      this.initializeSquareIfEmpty(i);\n    }\n  }\n\n  getSquare(x: number, y: number): Square {\n    return this.squares[this.targetSquareIndex(x, y)];\n  }\n\n  setSquare(x: number, y: number, value): void {\n    this.squares[this.targetSquareIndex(x, y)] = value;\n  }\n\n  targetSquareIndex(x: number, y: number): number {\n    return y * this.arenaSize + x;\n  }\n\n  targetSquarePosition(squareIndex: number): Position {\n    let x: number, y: number;\n    y = Math.floor(squareIndex / this.arenaSize);\n    x = squareIndex % this.arenaSize;\n    return { x, y };\n  }\n\n  setEntityWithinApropriateSquare(entity: Entity): void {\n    this.setEntityWithinASquare(entity.position.x, entity.position.y, entity);\n  }\n\n  setEntityWithinASquare(x: number, y: number, entity: Entity) {\n    let squareIndex: number = this.targetSquareIndex(x, y);\n    this.initializeSquareIfEmpty(squareIndex);\n    this.squares[squareIndex].entity = entity;\n  }\n\n  addBlood(square: Square, amount: number) {\n    if (!square.blood) {\n      square.blood = amount;\n    } else {\n      square.blood += amount;\n    }\n  }\n\n  markSquareAsTargeted(squareIndex: number): void {\n    Helpers.resetGivenFieldsOnACollection(this.squares, \"isTargeted\");\n    this.initializeSquareIfEmpty(squareIndex);\n    this.squares[squareIndex].isTargeted = true;\n  }\n\n  initializeSquareIfEmpty(squareIndex: number) {\n    if (!this.squares[squareIndex]) {\n      this.squares[squareIndex] = new Square();\n    }\n  }\n\n  markAvailableDestinationsForSelectedEntity(entity: Entity): void {\n    if (entity.active) {\n      let { x, y } = entity.position;\n\n      Helpers.resetGivenFieldsOnACollection(this.squares, \"isAvailableDestination\");\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize || (i === x && j === y)) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n\n          square.isAvailableDestination = true;\n          this.setSquare(i, j, square);\n        }\n      }\n    }\n  }\n  castLightsFromFriendlyEntity(entity: Entity): void {\n    if (entity.isFriendly) {\n      let { x, y } = entity.position;\n\n      for (let j = y - 2; j <= y + 2; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 2; i <= x + 2; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n\n          square.isInTwilightZone = true;\n          this.setSquare(i, j, square);\n        }\n      }\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n\n          square.isLit = true;\n          this.setSquare(i, j, square);\n        }\n      }\n    }\n  }\n}\n\nlet SquaresService = new SquaresServiceClass();\nexport default SquaresService;\n","import entitiesService from \"./EntitiesService\";\r\nimport squaresService from \"./SquaresService\";\r\n\r\nexport let EntitiesService = entitiesService;\r\nexport let SquaresService = squaresService;\r\n","import { default as SquaresService, Square } from \"./SquaresService\";\nimport * as Helpers from \"../helpers/Helpers\";\nimport {\n  Entity,\n  Position,\n  Weapon,\n  RangedWeapon,\n  Mortal,\n  Positionable,\n  Bleedable,\n  HavingInventory,\n} from \"../services/EntitiesValues\";\nconst arenaSize: number = 10;\n\nclass EntitiesServiceClass {\n  entities: Entity[];\n  selected: Entity;\n\n  getEntityId(entity: Entity): string {\n    return entity.name;\n  }\n\n  findEntityById(id: string): Entity {\n    let result: Entity = this.entities.filter((entity) => entity.name === id)[0];\n    return result;\n  }\n\n  findItemOnEntity(entity: HavingInventory, id: string) {\n    let result = entity.inventory.filter((item) => item.name === id)[0];\n    return result;\n  }\n\n  moveEntityRandomly(entity: Entity) {\n    if (entity.isDead) return;\n\n    let oldPositionX = entity.position.x;\n    let oldPositionY = entity.position.y;\n\n    entity.position.x = entity.position.x + Helpers.getRandomIntInclusive(-1, 1);\n    entity.position.y = entity.position.y + Helpers.getRandomIntInclusive(-1, 1);\n\n    entity.position.x = Helpers.getNumberWithinBoundaries(entity.position.x, 0, arenaSize - 1);\n    entity.position.y = Helpers.getNumberWithinBoundaries(entity.position.y, 0, arenaSize - 1);\n\n    let newSquare = SquaresService.getSquare(entity.position.x, entity.position.y);\n\n    if (newSquare && newSquare.entity) {\n      // if square occupiec, reverse the move\n      entity.position.x = oldPositionX;\n      entity.position.y = oldPositionY;\n    }\n  }\n\n  stopBreathingForKilledEntity(entity: Entity): Entity {\n    if (entity && entity.hp <= 0) {\n      entity.isBreathing = false;\n      entity.hp = 0;\n    }\n    return entity;\n  }\n\n  getEntitiesAtGivenPosition(targetPosition: Position): Entity[] {\n    return this.entities.filter((potentialTargetEntity: Entity): boolean => {\n      return (\n        potentialTargetEntity.position.x === targetPosition.x && potentialTargetEntity.position.y === targetPosition.y\n      );\n    });\n  }\n\n  selectEntityFromGivenSquare(selected: Entity, targeted: Square): Entity {\n    if (selected && targeted && targeted.entity) {\n      selected.active = false;\n    }\n    if (targeted && targeted.entity) {\n      selected = targeted.entity;\n      selected.active = true;\n    }\n\n    return selected;\n  }\n\n  setSelected(selected: Entity, value: boolean): Entity {\n    let selectedInEntities = this.findEntityById(this.getEntityId(selected));\n    if (value) {\n      selected.active = value;\n    } else {\n      selected = null;\n      console.log(\"Nullified:\", selected);\n    }\n    selectedInEntities.active = value;\n    return selected;\n  }\n\n  checkAmmoAndCalculateDamageApplied(entity: Entity): number {\n    let damageApplied: number = 0;\n    let weapon: RangedWeapon = entity.equipment && entity.equipment.hands;\n\n    if (!weapon) return 0;\n\n    if (weapon.isAbleToFire) {\n      damageApplied = weapon.fire();\n    } else {\n      weapon.rounds = \"empty\";\n      entity.isShooting = false;\n    }\n\n    return damageApplied;\n  }\n\n  fireAShot(entity: Entity) {\n    if (entity.ceaseFire) {\n      entity.isShooting = false;\n      entity.ceaseFire = false;\n      return;\n    }\n    let damageApplied = this.checkAmmoAndCalculateDamageApplied(entity);\n    let targetEntities = this.getEntitiesAtGivenPosition(entity.targetPosition);\n    targetEntities.forEach((targetEntity) => {\n      this.applyDamageToTargetEntity(targetEntity, damageApplied);\n      this.ceaseFireNextTickIfTargetIsKilled(entity, targetEntity);\n    });\n  }\n\n  applyDamageToTargetEntity(targetEntity: Entity, damage: number) {\n    if (damage) {\n      targetEntity.hp -= damage;\n      targetEntity.bleeding = 5;\n    }\n  }\n\n  ceaseFireNextTickIfTargetIsKilled(entity: Entity, targetEntity: Entity): void {\n    if (targetEntity.hp < 0) {\n      entity.ceaseFire = true;\n    }\n  }\n\n  isEntityShootingProperly(entity: Entity): boolean {\n    return (\n      entity.isShooting &&\n      entity.targetPosition &&\n      (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\n    );\n  }\n\n  applyEffectsOfBleeding(entity: Entity): Entity {\n    // TODO: move to a \"bleed\" method\n    if (entity.bleeding && entity.hp > 0) {\n      entity.hp -= entity.bleeding;\n      let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\n      SquaresService.addBlood(square, entity.bleeding);\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n    }\n    return entity;\n  }\n\n  moveEntityIntoChosenDestination(entity: Entity): Entity {\n    if (!entity.isDead && entity.moveDestination) {\n      let chosenDestinationSquare: Square = SquaresService.getSquare(\n        entity.moveDestination.x,\n        entity.moveDestination.y\n      );\n\n      entity.position = entity.moveDestination;\n      delete entity.moveDestination;\n      chosenDestinationSquare.isChosenDestination = undefined;\n    }\n    return entity;\n  }\n\n  setMoveDestinationOnASelectedEntity(selected: Entity, targetedSquarePosition: Position): void {\n    selected.moveDestination = targetedSquarePosition;\n  }\n\n  moveEntities(): void {\n    this.entities.forEach((entity) => this.moveEntityIntoChosenDestination(entity));\n    let JR: Entity = this.findEntityById(\"John Rambo\");\n    let OP: Entity = this.findEntityById(\"Squid\");\n    let OC: Entity = this.findEntityById(\"Octo\");\n    this.moveEntityRandomly(JR);\n    this.moveEntityRandomly(OP);\n    this.moveEntityRandomly(OC);\n  }\n}\n\nlet EntitiesService = new EntitiesServiceClass();\nexport default EntitiesService;\n","import * as Helpers from \"../../helpers\";\nimport React, { ReactElement } from \"react\";\n\nexport default function ShootingVisualization(props): ReactElement {\n  const DISTANCE_BETWEEN_TILES = 38;\n  let { entity } = props;\n\n  let calcNewAangle = Helpers.calculateAngle;\n  let targetCoords = entity.targetPosition;\n  let projectileNumber = 5;\n  let projectiles = [];\n  let localId = `Entity${entity.icon}`;\n  let customStyle = \"\";\n\n  if (\n    targetCoords &&\n    entity.position &&\n    entity.hasWeapon &&\n    entity.isShooting &&\n    (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\n  ) {\n    if (targetCoords) {\n      let distanceToTargetX = DISTANCE_BETWEEN_TILES * (targetCoords.x - entity.position.x);\n      let distanceToTargetY = DISTANCE_BETWEEN_TILES * (targetCoords.y - entity.position.y);\n\n      let actualDistance = Helpers.calculateDistance(distanceToTargetX, distanceToTargetY);\n      let weaponType = entity && entity.equipment && entity.equipment.hands && entity.equipment.hands.type;\n      let angle = calcNewAangle(distanceToTargetX, distanceToTargetY);\n\n      if (weaponType === \"lazer\") {\n        // TODO: perhaps call to `visualizeShooting(from,to,weaponType)`\n        let className = `projectile${localId}_beam`;\n        let projectile = \"\";\n\n        customStyle = `\n          @keyframes pulsing${localId} {\n            0%  {opacity: 0.1;}\n            100%  {opacity: 1;}\n          }\n\n          @keyframes elongating${localId} {\n            0%  {width: ${actualDistance - 20};}\n            100%  {width: ${actualDistance + 20};}\n          }\n\n          @keyframes swiping${localId} {\n            0%  {transform: rotate(${angle + 90 + -1}deg);}\n            50%  {transform: rotate(${angle + 90 + 1}deg);}\n            100%  {transform: rotate(${angle + 90 - 1}deg);}\n          }\n\n          .${className} {\n            width: ${actualDistance}px;\n            height: 3px;\n            border-radius: 5px;\n            background: #F00;\n            position: absolute;\n            top: 16px;\n            left: 16px;\n\n            transform: rotate(${angle + 90}deg);\n            transform-origin: left 0px;\n            animation: pulsing${localId} 0.1s linear infinite,\n            elongating${localId} 1s linear alternate infinite,\n            swiping${localId} 1s linear alternate infinite;\n            box-shadow: 0 0 5px 5px white;\n            z-index: 10;\n          }\n          `;\n        projectiles.push(\n          <div key={className} className={className}>\n            {projectile}\n          </div>\n        );\n      } else {\n        customStyle = `\n          @keyframes shooting${localId} {\n            0%   {transform: translate(0,0) rotate(${angle}deg) scaleY(0.3)}\n            100% {transform: translate(\n              ${36 * (targetCoords.x - entity.position.x)}px,\n              ${36 * (targetCoords.y - entity.position.y)}px\n            ) rotate(${angle}deg) scaleY(2)}\n          }\n          `;\n\n        while (projectileNumber--) {\n          customStyle += `\n          .projectile${localId}_${projectileNumber} {\n            transform: rotate(${angle}deg);\n            animation: shooting${localId} 0.8s linear infinite;\n            animation-delay: ${projectileNumber - 1 * 0.3}s;\n          }`;\n        }\n        let projectile = entity.isShooting ? \"|\" : \"\";\n\n        projectileNumber = 3;\n\n        while (projectileNumber--) {\n          let className = `projectile projectile${localId}_${projectileNumber}`;\n          projectiles.push(\n            <div key={className} className={className}>\n              {projectile}\n            </div>\n          );\n        }\n      }\n    }\n  }\n  return (\n    <div className=\"shooting-visualization\">\n      <style>{customStyle}</style>\n      {projectiles}\n    </div>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport { SquaresService } from \"../../services\";\nimport { Entity } from \"../../services/EntitiesValues\";\nimport ShootingVisualization from \"./ShootingVisualization\";\nimport * as Helpers from \"../../helpers\";\nimport \"./EntityPawn.scss\";\n\ninterface EntityPawnProps {\n  entity: Entity;\n}\n\nexport default class EntityPawn extends React.Component<EntityPawnProps> {\n  randomTime = `${(Math.random() + 0.5).toFixed(2)}s`;\n\n  render() {\n    let { entity } = this.props;\n    let square = SquaresService.getSquare(entity.position.x, entity.position.y);\n    const squareDistance = 38;\n\n    let classNameBase = \"entity-pawn__icon\";\n    let className = `${classNameBase}`;\n    let classessFromFlags = Helpers.turnFlagsIntoClasses(entity, classNameBase);\n    classessFromFlags += Helpers.turnFlagsIntoClasses(square, classNameBase);\n    className += ` ${classessFromFlags} `;\n\n    let animationBreathing = entity.isBreathing ? `breathing ${this.randomTime} alternate infinite linear` : \"none\";\n\n    return (\n      <div\n        className=\"entity-pawn\"\n        key={entity.name}\n        style={{\n          left: squareDistance / 2 - 4 + squareDistance * entity.position.x,\n          top: squareDistance / 2 - 4 + squareDistance * entity.position.y,\n        }}\n      >\n        <div\n          className={className}\n          style={{\n            animation: animationBreathing,\n          }}\n        >\n          {entity.icon}\n        </div>\n        <ShootingVisualization entity={entity} />\n      </div>\n    );\n  }\n}\n","import React, { ReactElement } from \"react\";\nimport BoardSquare from \"../Square\";\nimport EntityPawn from \"../EntityPawn\";\nimport { Entity } from \"../../services/EntitiesValues\";\nimport { Square } from \"../../services/SquaresService\";\n\nimport styles from \"./Board.module.scss\";\n\ninterface BoardProps {\n  onClick(i: number): void;\n  squares: Square[];\n  entities: Entity[];\n  size: number;\n  isRotated: boolean;\n}\n\nexport default class Board extends React.PureComponent<BoardProps> {\n  constructor(props: BoardProps) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(i) {\n    console.log(\"Handles Click on Board\", i);\n    this.props.onClick(i);\n  }\n\n  renderSquare(i: number, rowId: number, colId: number) {\n    /*\n    We pass one and the same function to all the Squares when rendering,\n    so they do not detect getting a new fat-arrow function as a change of props.\n\n    This is CRUCIAL to only rerender squares with changed values.\n\n    Additionally, we need to ensure that Unchanged squares have the same values of objects passed down here.\n    */\n    let square = this.props.squares[i];\n    let entity = (this.props.squares[i] && this.props.squares[i].entity) || ({} as Entity);\n    return (\n      <BoardSquare\n        key={i}\n        squareId={i + \"\"}\n        rowId={rowId}\n        colId={colId}\n        onClick={this.handleClick}\n        // Entity on this square\n        active={entity.active}\n        isDead={entity.isDead}\n        // Environment state fields\n        blood={square.blood}\n        items={square.items}\n        isLit={square.isLit}\n        isInTwilightZone={square.isInTwilightZone}\n        // Interface state fields\n        isAvailableDestination={square.isAvailableDestination}\n        isChosenDestination={square.isChosenDestination}\n        isTargeted={square.isTargeted}\n      />\n    );\n  }\n\n  renderEntityPawns = () => this.props.entities.map((entity) => <EntityPawn entity={entity} />);\n\n  render() {\n    let cellId = 0;\n    let rowId = 0;\n    let colId: number;\n\n    let rowsOfSquares = Array(this.props.size)\n      .fill(null)\n      .map((row, number) => {\n        colId = 0;\n        let cells = Array(this.props.size)\n          .fill(null)\n          .map((cell, number) => {\n            return this.renderSquare(cellId++, rowId, colId++);\n          });\n        return (\n          <div key={rowId++} className={styles[\"board__row\"]}>\n            {cells}\n          </div>\n        );\n      });\n\n    let entityPawns: ReactElement[] = this.renderEntityPawns();\n\n    let className: string = styles.board;\n    const isBoardRotated: boolean = this.props.isRotated;\n    if (isBoardRotated) {\n      className += ` ${styles[\"board--rotated\"]}`;\n    }\n    return (\n      <div className={className}>\n        {rowsOfSquares}\n        {entityPawns}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./LinearDisplay.scss\";\n\ninterface LinearDisplayProps {\n  className?: string;\n  current: number;\n  max: number;\n  title?: string;\n  label?: string;\n}\n\nexport default function LinearDisplay(props: LinearDisplayProps) {\n  let className = `linear-display ${props.className || \"\"}`;\n  let percentage = ~~((props.current * 100) / props.max);\n  let overload = percentage > 100;\n  if (overload) {\n    percentage = 100;\n    className += \" linear-display--overloaded\";\n  }\n\n  let progressStyle = {\n    width: `${percentage}%`,\n  };\n  let title = props.title || `${props.current}/${props.max}`;\n\n  let amount = props.current;\n\n  let divider = 1;\n  if (props.max >= 40 && props.max < 100) {\n    divider = 5;\n  } else if (props.max >= 100) {\n    divider = 10;\n  }\n\n  amount = amount / divider;\n\n  let gridSize = 100 / amount;\n\n  let color = `rgba(200,200,200,0.4)`;\n  color = `black`;\n  let progressGridStyle = {\n    backgroundSize: `${gridSize}% 100%`,\n    backgroundImage: `\n      linear-gradient(to left, ${color} 1px, transparent 1px)\n    `,\n  };\n\n  Object.assign(progressStyle, progressGridStyle);\n\n  return (\n    <div className={className}>\n      <div className=\"linear-display__label\">{props.label}:&nbsp;</div>\n      <div className=\"linear-display__bar-container\" title={title}>\n        <div className=\"linear-display__bar-progress\" style={progressStyle}>\n          <span className=\"linear-display__bar-progress-text\">\n            {props.current}\n            {overload ? \"/\" + props.max : \"\"}&nbsp;\n          </span>\n        </div>\n      </div>\n      <div>&nbsp;</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { RangedWeapon, Item } from \"../../services/EntitiesValues\";\nimport LinearDisplay from \"./LinearDisplay\";\n\ninterface InventoryItemProps {\n  item: Item;\n  onDrop(itemName: string);\n  onClick(itemName: string);\n  processInterface: Function;\n}\n\nexport default function InventoryItem(props: InventoryItemProps) {\n  let { item } = props;\n  let reloadButton;\n  let dropButton;\n  let ammoCounter;\n\n  if (props.onDrop) {\n    dropButton = (\n      <button\n        className=\"inventory-list__drop-button\"\n        onClick={() => {\n          props.onDrop(item.name);\n        }}\n      >\n        Drop\n      </button>\n    );\n  }\n\n  if (item instanceof RangedWeapon) {\n    let weapon = item as RangedWeapon;\n\n    if (weapon.reload) {\n      // has reload capability\n      let className = \" inventory-list__reload-button \";\n\n      if (weapon.rounds === 0 || weapon.rounds === \"empty\") {\n        className += \" inventory-list__reload-button--empty \";\n      } else if (weapon.rounds < weapon.maxRounds) {\n        className += \" inventory-list__reload-button--partial \";\n      }\n      reloadButton = (\n        <button\n          className={className}\n          onClick={() => {\n            weapon.reload();\n            props.processInterface();\n          }}\n        >\n          Reload\n        </button>\n      );\n    } else {\n      reloadButton = null;\n    }\n\n    ammoCounter = weapon.reload ? (\n      <LinearDisplay label=\"Rounds\" current={weapon.rounds} max={weapon.maxRounds} />\n    ) : null;\n  }\n\n  return (\n    <div key={item.name}>\n      <div onClick={() => props.onClick(item.name)} key={item.name} className=\"inventory-list__item\">\n        <span>{item.name}</span>\n        <div>{ammoCounter}</div>\n      </div>\n      {reloadButton}\n      {dropButton}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./InventoryList.scss\";\nimport { Item, Entity, RangedWeapon } from \"../../services/EntitiesValues\";\nimport InventoryItem from \"./InventoryItem\";\n\ninterface InventoryListProps {\n  className?: string;\n  label: string;\n  title: string;\n  onClick(itemName: string);\n  onDrop(itemName: string);\n  inventory: Item[]; //\n  processInterface: Function;\n}\n\nexport default function InventoryList(props: InventoryListProps) {\n  const className = `inventory-list ${props.className || \"\"}`;\n\n  if (!props.inventory) {\n    return null;\n  }\n  let reloadButton;\n  let dropButton;\n\n  const inventoryItems = props.inventory.map((item) => (\n    <InventoryItem\n      item={item}\n      onClick={props.onClick}\n      onDrop={props.onDrop}\n      processInterface={props.processInterface}\n    />\n  ));\n\n  return (\n    <div className={className}>\n      <div className=\"inventory-list__label\">\n        {props.label}\n        :&nbsp;\n      </div>\n      <div className=\"inventory-list__items\" title={props.title}>\n        {inventoryItems}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport LinearDisplay from \"./LinearDisplay\";\nimport InventoryList from \"./InventoryList\";\nimport \"./EntityCard.scss\";\nimport SquaresService from \"../../services/SquaresService\";\nimport { Entity, RangedWeapon, Item } from \"../../services/EntitiesValues\";\n\ninterface EntityCardProps {\n  entity: Entity;\n  key?: string;\n  onInventoryClick?(entity: Entity, itemName: string);\n  processInterface?: Function;\n}\n\nclass EntityCard extends React.Component<EntityCardProps> {\n  renderCount = 0;\n  handleInventoryClick = (itemName: string): void => {\n    this.props.onInventoryClick(this.props.entity, itemName);\n  };\n\n  onDrop = (itemName: string) => {\n    let { entity } = this.props;\n    if (entity.equipment.hands && entity.equipment.hands.name == itemName) {\n      entity.unEquipFromHands();\n      entity.isShooting = false;\n    }\n    let item: Item = entity.takeFromInventory(itemName);\n    entity.square.addItem(item);\n    this.props.processInterface();\n  };\n\n  render() {\n    // console.log(\"Rendering EntityView. #\", this.renderCount++);\n    let { entity } = this.props;\n    if (!entity) return null;\n    /*\n      FIXME: Below should be separated into several sub-components\n      Each sub-component should receive flat data (position, hp, ...)\n     */\n\n    let className = \"entity-card\";\n    if (entity.active) {\n      className += \" entity-card--active\";\n    }\n\n    if (entity.isFriendly) {\n      className += \" entity-card--friendly\";\n    }\n\n    if (entity.isDead) {\n      className += \" entity-card--dead\";\n    }\n\n    let inHands = entity.equipment && entity.equipment.hands;\n    let inHandsArray = inHands && [inHands];\n\n    return (\n      <div className={className}>\n        <div>\n          <div className=\"entity-card__position\" title=\"Position\">\n            <span>\n              {\" \"}\n              {entity.position.x} {entity.position.y}{\" \"}\n            </span>\n          </div>\n\n          <div className=\"entity-card__portrait\">{entity.icon}</div>\n        </div>\n        <strong title=\"Name\">{entity.name}</strong>\n        <br />\n        <div\n          style={{\n            clear: \"both\",\n            display: \"inline-block\",\n            textAlign: \"right\",\n          }}\n        >\n          <LinearDisplay label=\"HP\" current={entity.hp} max={entity.maxHp} />\n          <br />\n        </div>\n        <InventoryList\n          label=\"Equipped\"\n          title=\"In hands\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          inventory={inHandsArray}\n          processInterface={() => this.props.processInterface()}\n        />\n        <InventoryList\n          label=\"Inventory\"\n          title=\"In backpack\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          inventory={entity.inventory}\n          processInterface={() => this.props.processInterface()}\n        />\n      </div>\n    );\n  }\n}\n\nexport default EntityCard;\n","import React from \"react\";\nimport EntityCard from \"../EntityCard\";\nimport \"./EntitiesList.scss\";\nimport { Entity } from \"../../services/EntitiesValues\";\n\ninterface ListOfEntitiesProps {\n  entities: Entity[];\n  onInventoryClick: any;\n  processInterface: Function;\n}\n\nexport default class ListOfEntities extends React.Component<ListOfEntitiesProps> {\n  renderCounter = 0;\n  render() {\n    // console.log(\"Rendering EntitiesList #\", this.renderCounter++);\n\n    let entitiesFriendly = this.props.entities\n      .filter((entity) => entity.isFriendly)\n      .map((obj) => {\n        return (\n          <EntityCard\n            onInventoryClick={this.props.onInventoryClick}\n            entity={obj}\n            key={obj.name}\n            processInterface={() => this.props.processInterface()}\n          />\n        );\n      });\n\n    let entitiesUnfriendly = this.props.entities\n      .filter((entity) => !entity.isFriendly)\n      .map((obj) => {\n        return <EntityCard entity={obj} key={obj.name} processInterface={() => this.props.processInterface()} />;\n      });\n\n    return (\n      <>\n        <h4 className=\"entities-list__header\">List of Entities:</h4>\n        <div className=\"entities-list\">{entitiesFriendly}</div>\n        <div className=\"entities-list\">{entitiesUnfriendly}</div>\n      </>\n    );\n  }\n}\n","import React, { ReactElement, DOMElement } from \"react\";\nimport * as Helpers from \"../../helpers/Helpers\";\nimport { SquaresService, EntitiesService } from \"../../services\";\nimport EntityCard from \"../EntityCard/EntityCard\";\nimport { Square } from \"../../services/SquaresService\";\nimport { Entity, Position, structures } from \"../../services/EntitiesValues\";\n\nimport InventoryList from \"../EntityCard/InventoryList\";\n\nimport GameStyles from \"./Game.module.scss\";\n\ninterface TargetedSquareInfoProps {\n  className: string;\n  squareNumber: number;\n  squares: Square[];\n  selected: Entity;\n  targeted: Square;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  processInterface: Function;\n}\n\nexport default class TargetedSquareInfo extends React.Component<TargetedSquareInfoProps> {\n  boxSerialNumber: number = 0;\n\n  constructor(props) {\n    super(props);\n  }\n\n  onItemClick = (itemName: string): void => {\n    let { selected, targeted } = this.props;\n    if (Helpers.isSelectedTargeted(selected, targeted)) {\n      let item = targeted.takeFromInventory(itemName);\n      selected.addToInventory(item);\n    }\n    this.props.processInterface();\n  };\n\n  onMoveClick(selected: Entity, targetedSquarePosition: Position): void {\n    let targetedSquare: Square = SquaresService.getSquare(targetedSquarePosition.x, targetedSquarePosition.y);\n    selected.setMoveDestinationPosition(targetedSquarePosition);\n    targetedSquare.isChosenDestination = true;\n    this.props.processInterface();\n  }\n\n  onAttackClick(selected: Entity, targetedSquarePosition: Position): void {\n    selected.attackPosition(targetedSquarePosition);\n    this.props.processInterface();\n  }\n\n  onAddStructureClick(targetedSquarePosition: Position): void {\n    let box = Object.assign({}, structures.box);\n    let targetPosition = Object.assign({}, targetedSquarePosition);\n    box.position = targetPosition;\n    box.name += this.boxSerialNumber++;\n    let newBox = new Entity(box);\n    EntitiesService.entities.push(newBox);\n    this.props.processInterface();\n  }\n\n  render() {\n    let { targeted, selected, squareNumber } = this.props;\n\n    if (!targeted) {\n      return null;\n    }\n\n    let targetedSquarePosition = SquaresService.targetSquarePosition(squareNumber);\n\n    let entityInfo;\n    let distanceInfo;\n    let positionInfo;\n    let bloodInfo;\n    let availableActions = [];\n    let items;\n\n    let editorButtons = (\n      <button onClick={() => this.onAddStructureClick(targetedSquarePosition)} className={GameStyles.button}>\n        Add structure\n      </button>\n    );\n\n    if (targeted.entity && !Helpers.isSelectedTargeted(selected, targeted)) {\n      entityInfo = (\n        <EntityCard\n          onInventoryClick={this.props.onInventoryClick}\n          entity={targeted.entity}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (targeted.items) {\n      items = (\n        <InventoryList\n          label=\"Items in this location\"\n          title=\"On the floor\"\n          onClick={this.onItemClick}\n          onDrop={null}\n          inventory={targeted.items}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (selected) {\n      let distanceToSelected = Helpers.calculateDistance(\n        targetedSquarePosition.x - selected.position.x,\n        targetedSquarePosition.y - selected.position.y\n      );\n\n      distanceInfo = <li>Distance to selected: {distanceToSelected.toFixed(2)}</li>;\n\n      if (distanceToSelected !== 0) {\n        if (targeted.isAvailableDestination) {\n          availableActions[0] = (\n            <button onClick={() => this.onMoveClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Move\n            </button>\n          );\n        }\n        if (targeted.entity) {\n          availableActions[1] = (\n            <button onClick={() => this.onAttackClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Attack\n            </button>\n          );\n        }\n      }\n    }\n\n    if (targetedSquarePosition) {\n      positionInfo = (\n        <li>\n          Position: [ {targetedSquarePosition.x}, {targetedSquarePosition.y} ]{\" \"}\n        </li>\n      );\n    }\n\n    if (targeted.blood) {\n      bloodInfo = <li>Blood amount: {targeted.blood}</li>;\n    }\n\n    return (\n      <div className={this.props.className}>\n        <strong className={GameStyles.targeted__label}>Target square Info</strong>\n        <div>{entityInfo}</div>\n        <div>{availableActions}</div>\n        <ul>\n          {positionInfo}\n          {distanceInfo}\n          {bloodInfo}\n          {items}\n          {editorButtons}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { ReactElement } from \"react\";\nimport EntityCard from \"../EntityCard/EntityCard\";\nimport { Entity } from \"../../services/EntitiesValues\";\n\nimport GameStyles from \"./Game.module.scss\";\n\ninterface SelectedEntityInfoProperties {\n  selected: Entity;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  handleDeselectAllEntities: () => void;\n  processInterface: Function;\n}\n\nexport default class SelectedEntityInfo extends React.Component<SelectedEntityInfoProperties> {\n  render(): ReactElement {\n    if (!this.props.selected) {\n      return null;\n    }\n\n    return (\n      <div className={GameStyles.selected}>\n        <strong className={GameStyles.selected__label}>Selected entity </strong>\n        <div>\n          <EntityCard\n            onInventoryClick={this.props.onInventoryClick}\n            entity={this.props.selected}\n            processInterface={() => this.props.processInterface()}\n          />\n        </div>\n        <button onClick={this.props.handleDeselectAllEntities} className={GameStyles.button}>\n          {\" \"}\n          Deselect\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport MessageService from \"../../services/MessageService\";\n\nexport class MessageBox extends React.Component {\n  messages = MessageService.messages;\n  messageNumber;\n\n  shouldComponentUpdate() {\n    // don't update if there are no new messages since last render\n    return this.messages.length != this.messageNumber;\n  }\n\n  renderMessage = (message: string, number: number) => {\n    return (\n      <li>\n        Message #[{number}]: {message}\n      </li>\n    );\n  };\n\n  render() {\n    if (!this.messages.length) return null;\n    let RenderedMessages = this.messages.map((message, number) => this.renderMessage(message, number));\n    // remember the number of messages rendered\n    this.messageNumber = this.messages.length;\n    return (\n      <ul className=\"messages\" id=\"messages\">\n        {RenderedMessages}\n      </ul>\n    );\n  }\n\n  scrollElement() {\n    window.requestAnimationFrame(() => {\n      var element = document.getElementById(\"messages\");\n      element.scrollTop = element.scrollHeight;\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.messages.length) this.scrollElement();\n  }\n}\n","import Entities from \"./EntitiesValues\";\n\nclass GameModelClass {\n  entities;\n  constructor(Entities) {\n    this.entities = Entities;\n  }\n  access() {\n    console.log(\"Accessing Game Model\");\n    console.log(this.entities);\n  }\n}\n\nlet GameModel = new GameModelClass(Entities);\n\nexport default GameModel;\n","import React from \"react\";\n\nimport Board from \"../Board\";\nimport EntitiesList from \"../EntitiesList\";\nimport TargetedSquareInfo from \"./TargetedSquareInfo\";\nimport SelectedEntityInfo from \"./SelectedEntityInfo\";\nimport { MessageBox } from \"./MessageBox\";\n\nimport { Entity } from \"../../services/EntitiesValues\";\nimport { Square } from \"../../services/SquaresService\";\n\nimport { EntitiesService, SquaresService } from \"../../services\";\n\nimport * as Helpers from \"../../helpers\";\n\nimport GameLogic from \"../../services/GameLogicService\";\nimport GameModel from \"../../services/GameModelService\";\n\nimport styles from \"./Game.module.scss\";\n\n/** Type of GameState */\ninterface GameState {\n  entities: Entity[];\n  squares: Square[];\n\n  selected: Entity;\n  targeted: Square;\n  targetedSquareNumber: number;\n\n  arenaSize: number;\n  autoLoop: boolean;\n  isBoardRotated: boolean;\n}\n\n/** Game composes all the parts of the interface */\nexport default class Game extends React.PureComponent<void, GameState> {\n  renderCounter: number = 0;\n  stepNumber: number = 0;\n\n  constructor(props: void) {\n    super(props);\n\n    // Initial VALUE of game state\n    this.state = {\n      entities: GameModel.entities,\n      squares: SquaresService.squares,\n\n      selected: null,\n      targeted: null,\n      targetedSquareNumber: null,\n\n      arenaSize: 10,\n      autoLoop: true,\n      isBoardRotated: false,\n    };\n  }\n\n  componentDidMount() {\n    EntitiesService.entities = this.state.entities;\n    this.loop();\n  }\n\n  loop = () => {\n    this.stepNumber++;\n    this.processEntities();\n    if (this.state.autoLoop) {\n      setTimeout(this.loop, 1000);\n    }\n  };\n\n  processEntities() {\n    this.setState(\n      (prevState) => this.calculateNextGameState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  /**\n   * Calculate WHAT EXACTLY? This should probably go into GameLogic\n   * @param previousState\n   */\n  calculateNextGameState(previousState: GameState) {\n    let nextState: GameState = previousState;\n    let { entities, squares, selected } = nextState;\n\n    EntitiesService.moveEntities();\n    Helpers.resetGivenFieldsOnACollection(squares, \"isLit\", \"isInTwilightZone\");\n    entities.forEach((entity) => {\n      if (EntitiesService.isEntityShootingProperly(entity)) {\n        EntitiesService.fireAShot(entity);\n      }\n      entity.bleedExternally();\n\n      EntitiesService.stopBreathingForKilledEntity(entity);\n      SquaresService.markAvailableDestinationsForSelectedEntity(entity);\n      SquaresService.castLightsFromFriendlyEntity(entity);\n    });\n\n    return nextState;\n  }\n\n  processInterface() {\n    this.setState(\n      (prevState) => this.calculateNextInterfaceState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  calculateNextInterfaceState(previousState: GameState) {\n    let nextState = previousState;\n    let { entities, selected } = nextState;\n    entities.forEach((entity) => {\n      if (entity == selected) SquaresService.markAvailableDestinationsForSelectedEntity(selected);\n    });\n\n    return nextState;\n  }\n\n  /** Sets entities within apropriate squares, based on the value of their `position` field\n   * This might actually be not-needed, if movement of entities is reflected in their respectable squares\n   * Also: entities are no longer rendered within `Square` component\n   */\n  setSquaresAccordingToEntities() {\n    this.setState((previousState) => {\n      let squares: Square[] = Helpers.newCopyOfArray(previousState.squares);\n      /* \n      Reattach new squares array to the SquaresService \n      This might actually be not-needed, as elements of that array are objects \n      and are referenced in both arrays, so unless we're adding new squares, \n      everything should work without re-attaching\n      */\n      SquaresService.squares = squares;\n      let entities: Entity[] = previousState.entities;\n\n      Helpers.resetGivenFieldsOnACollection(squares, \"entity\");\n      entities.forEach((entity) => {\n        SquaresService.setEntityWithinApropriateSquare(entity);\n      });\n\n      return { squares };\n    });\n  }\n\n  nextTick = () => {\n    this.setState({ autoLoop: false });\n    this.loop();\n  };\n\n  newHandleClick = (squareIndex: number) => {\n    this.setState((state) => {\n      let { squares, entities, selected, targeted, targetedSquareNumber: selectedSquareNumber } = state;\n      let previousTargeted = targeted;\n      targeted = squares[squareIndex];\n      selectedSquareNumber = squareIndex;\n      const doubleClick = () => previousTargeted === targeted;\n      SquaresService.markSquareAsTargeted(squareIndex);\n\n      /** Setting move destination while clicking on empty square */\n      if (doubleClick() && targeted.isAvailableDestination) {\n        selected.setMoveDestinationSquare(squareIndex);\n      }\n\n      /** To be able to deselect */\n      if (doubleClick() || selected) {\n        if (!selected && targeted.entity) {\n          // Selecting\n          selected = EntitiesService.selectEntityFromGivenSquare(selected, targeted);\n          //targeted = undefined;\n        } else if (Helpers.isSelectedTargeted(selected, targeted)) {\n          // Deselecting if not selecting\n          this.deselectAllEntities();\n          selected = undefined;\n        }\n      }\n\n      // setting attack\n      if (doubleClick() && selected && targeted.entity && selected !== targeted.entity) {\n        selected.attackPosition(SquaresService.targetSquarePosition(squareIndex));\n      }\n\n      return { squares, entities, selected, targeted, targetedSquareNumber: selectedSquareNumber };\n    }, this.processInterface);\n  };\n\n  nuke = (dmg: number) => {\n    this.setState(\n      (state) => {\n        let { entities } = state;\n\n        entities.forEach((entity) => {\n          entity.hp = entity.hp - dmg;\n        });\n\n        return { entities };\n      },\n      () => {\n        this.processEntities();\n      }\n    );\n  };\n\n  toggleRotateBoard = () => {\n    this.setState({ isBoardRotated: !this.state.isBoardRotated });\n  };\n\n  switchAutoLoop = () => {\n    this.setState(\n      (previousState) => {\n        return { autoLoop: !previousState.autoLoop };\n      },\n      () => {\n        if (this.state.autoLoop) {\n          this.loop();\n        }\n      }\n    );\n  };\n\n  onInventoryClick = (entity: Entity, itemName: string) => {\n    this.setState((prevState) => {\n      let entities = [].concat(prevState.entities);\n      EntitiesService.entities = entities;\n      let entityId = EntitiesService.getEntityId(entity);\n      let actualEntity = EntitiesService.findEntityById(entityId);\n      let actualItem = EntitiesService.findItemOnEntity(actualEntity, itemName);\n\n      if (actualEntity.equipment.hands && actualEntity.equipment.hands.name == itemName) {\n        actualEntity.unEquipFromHands();\n      } else {\n        actualEntity.equipInHands(itemName);\n      }\n\n      return { entities };\n    });\n    console.log(entity, itemName);\n  };\n\n  handleDeselectAllEntities = () => {\n    this.setState(\n      (state) => {\n        let { squares, entities, selected } = state;\n\n        this.deselectAllEntities();\n        selected = undefined;\n\n        return { squares, entities, selected };\n      },\n      () => {\n        //this.processEntities();\n      }\n    );\n  };\n\n  deselectAllEntities = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"active\");\n    Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\", \"isAvailableDestination\");\n  };\n\n  ceaseFire = () => {\n    this.setState(\n      (state) => {\n        let { squares, entities, selected } = state;\n\n        Helpers.resetGivenFieldsOnACollection(entities, \"isShooting\");\n\n        return { squares, entities, selected };\n      },\n      () => {\n        this.processInterface();\n      }\n    );\n  };\n\n  render() {\n    // console.log(\"Rendering Game. #\", this.renderCounter++);\n    return (\n      <div className={styles.game}>\n        <div className={styles.game__board}>\n          <Board\n            squares={this.state.squares}\n            entities={this.state.entities}\n            onClick={(i) => this.newHandleClick(i)}\n            size={this.state.arenaSize}\n            isRotated={this.state.isBoardRotated}\n          />\n        </div>\n\n        <div className={styles.game__info}>\n          <div className={styles.actions}>\n            <button\n              onClick={() => {\n                this.nuke(40);\n              }}\n              className={`${styles.button} ${styles[\"button-nuke\"]}`}\n            >\n              Nuke All\n            </button>\n            <button onClick={this.ceaseFire} className={styles.button}>\n              Cease Fire\n            </button>\n\n            <button onClick={this.toggleRotateBoard} className={styles.button}>\n              Rotate Board\n            </button>\n            <button onClick={this.nextTick} className={styles.button}>\n              Next Tick\n            </button>\n\n            <span className={styles[\"step-counter\"]}>Tick: {this.stepNumber}</span>\n\n            <label className={` ${styles.button} ${styles[\"auto-cycle\"]}`}>\n              <input type=\"checkbox\" checked={this.state.autoLoop} onChange={this.switchAutoLoop} />\n              <span>Auto Cycle</span>\n            </label>\n          </div>\n\n          <div className={styles[\"interaction-container\"]}>\n            <SelectedEntityInfo\n              selected={this.state.selected}\n              handleDeselectAllEntities={this.handleDeselectAllEntities}\n              onInventoryClick={this.onInventoryClick}\n              processInterface={() => this.processInterface()}\n            />\n\n            <TargetedSquareInfo\n              className={styles.targeted}\n              squareNumber={this.state.targetedSquareNumber}\n              squares={this.state.squares}\n              selected={this.state.selected}\n              targeted={this.state.targeted}\n              onInventoryClick={this.onInventoryClick}\n              processInterface={() => this.processInterface()}\n            />\n            <div></div>\n          </div>\n          <MessageBox />\n        </div>\n\n        <div className={styles.game__list}>\n          <EntitiesList\n            entities={this.state.entities}\n            onInventoryClick={this.onInventoryClick}\n            processInterface={() => this.processInterface()}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport Game from \"./components/Game\";\n\nimport \"./style.scss\";\n\nrender(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}