{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/EntityView/EntityView.js","components/EntitiesList/EntitiesList.js","components/Game/Game.js","index.js"],"names":["Square","className","this","props","active","value","isBreathing","isShooting","randomTime","Math","random","toFixed","animationBreathing","targetCoords","targetPosition","projectileNumber","projectiles","customStyle","x","y","projectile","push","key","onClick","squareId","style","animation","React","PureComponent","Board","renderCounter","handleClick","bind","i","console","log","rowId","colId","position","squares","rowNumber","colNumber","cellId","rows","Array","size","fill","map","row","number","cells","cell","renderSquare","EntityView","renderCount","entity","lifeSigns","title","name","age","hp","maxHp","max","percent","Component","ListOfEntities","entities","obj","Game","stepNumber","state","arenaSize","isBoardRotated","inventory","equipment","head","damage","loop","getSquare","setSquare","toggleRotateBoard","setSquaresAccordingToEntities","forEach","targetSquareIndex","setState","JSON","parse","stringify","JR","floor","processEntities","setTimeout","localCopyOfEntities","targetEntities","filter","potentialTargetEntity","targetEntity","selected","target","dmg","boardClassName","handleBoardClick","nuke","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a71df3b.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Square.css\";\r\n\r\nclass Square extends React.PureComponent {\r\n  /*\r\n    We use PureComponent, so it compares new props with previous props,\r\n    and only re-renders when props changed.\r\n   */\r\n  render() {\r\n    // console.log(\"Rendering Square\");\r\n    let className = \"square\";\r\n    if(this.props.active) {\r\n      className += \" active\";\r\n    }\r\n    if(this.props.value){\r\n      if(this.props.isBreathing) {\r\n        className += \" breathing\";\r\n      } else {\r\n        className += \" dead\";\r\n      }\r\n      if(this.props.isShooting) {\r\n        className += \" shooting\";\r\n      }\r\n    }\r\n\r\n    let randomTime = `${(Math.random()+0.5).toFixed(2)}s`\r\n    let animationBreathing = this.props.isBreathing ?\r\n        `breathing ${randomTime} alternate infinite` : 'none';\r\n\r\n    let targetCoords = this.props.targetPosition;\r\n    let projectileNumber = 5;\r\n    let projectiles = [];\r\n    let customStyle = \"\";\r\n\r\n    if(targetCoords) {\r\n      customStyle = `\r\n        @keyframes shooting {\r\n          0%   {transform: scale(1);}\r\n          100% {transform: translate(\r\n            ${35*(targetCoords.x)}px,\r\n            ${36*(targetCoords.y-1)}px\r\n          )}\r\n        }\r\n\r\n        `;\r\n\r\n      while(projectileNumber--) {\r\n        customStyle += `\r\n        .projectile${projectileNumber} {\r\n          position: absolute;\r\n          top: 16px;\r\n          left: 16px;\r\n          animation: shooting 0.5s linear infinite;\r\n          animation-delay: ${projectileNumber  * 0.5}s;\r\n          color: white;\r\n        }`;\r\n      };\r\n      let projectile = this.props.isShooting ? \"*\" : \"\";\r\n\r\n      projectileNumber = 5;\r\n\r\n      while(projectileNumber--) {\r\n        let className=`projectile projectile${projectileNumber}`\r\n        projectiles.push(<div key={className} className={className}>{projectile}</div>);\r\n      };\r\n    }\r\n\r\n    return (\r\n      <button className={className} onClick={() => this.props.onClick(this.props.squareId)}>\r\n        <div className=\"content\" style={{\r\n          animation: animationBreathing\r\n        }}>{this.props.value}</div>\r\n        <style>\r\n            {customStyle}\r\n        </style>\r\n        {projectiles}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from '../Square';\r\nimport './Board.css';\r\n\r\nexport default class Board extends React.PureComponent {\r\n  renderCounter = 0\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(i) {\r\n    console.log(\"Handles Click on Board\", i);\r\n    this.props.onClick(i);\r\n  }\r\n\r\n  renderSquare(i, rowId, colId) {\r\n    /*\r\n    We pass one and the same function to all the Squares when rendering,\r\n    so they do not detect getting a new fat-arrow function as a change of props.\r\n\r\n    This is CRUCIAL to only rerender squares with changed values.\r\n\r\n     */\r\n\r\n    return (\r\n      <Square\r\n        squareId={i}\r\n        position={this.props.squares[i] && this.props.squares[i].position}\r\n        value={this.props.squares[i] && this.props.squares[i].value}\r\n        active={this.props.squares[i] && this.props.squares[i].active}\r\n        isBreathing={this.props.squares[i] && this.props.squares[i].isBreathing}\r\n        isShooting={this.props.squares[i] && this.props.squares[i].isShooting}\r\n        targetPosition={this.props.squares[i] && this.props.squares[i].targetPosition}\r\n        onClick={this.handleClick}\r\n\r\n        key={i}\r\n\r\n        rowNumber={rowId}\r\n        colNumber={colId}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // console.log(\"Rendering Board. #\", this.renderCounter++);\r\n\r\n    // Initial values for the Board\r\n    let cellId=0;\r\n    let rowId=0;\r\n    let colId;\r\n\r\n    let rows = Array(this.props.size).fill(null).map((row, number) => {\r\n      colId = 0;\r\n      let cells = Array(this.props.size).fill(null).map((cell, number) => {\r\n        return this.renderSquare(cellId++, rowId, colId++);\r\n      });\r\n      return (\r\n        <div key={rowId++} className=\"board-row\">\r\n          {cells}\r\n        </div>\r\n      );\r\n    });\r\n\r\n    let className = \"board \" + this.props.className;\r\n    return (\r\n      <div className={className}>\r\n        {rows}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './EntityView.css';\n\nclass EntityView extends React.Component {\n  renderCount = 0\n\n  render() {\n    // console.log(\"Rendering EntityView. #\", this.renderCount++);\n\n    /*\n      FIXME: Below should be separated into several sub-components\n      Each sub-component should receive flat data (position, hp, ...)\n     */\n    let className = \"entity\";\n    if(this.props.entity.active) {\n      className+=\" active\";\n    }\n\n    let { entity } = this.props;\n    // let { position, value, age, name, hp, maxHp, isBreathing, active } = entity;\n    let { isBreathing } = entity;\n    // let { x, y } = position;\n    // console.log(this.props)\n    // console.log(entity)\n    // console.log(isBreathing)\n    let lifeSigns = isBreathing ? \"ALIVE\" : \"DEAD\";\n    return (\n\n      <div className={className}>\n        <div className=\"position\" title=\"Position\">\n          <span>[{entity.position.x}, {this.props.entity.position.y}]</span>\n        </div>\n        <div className=\"portrait\">\n          {this.props.entity.value}\n        </div>\n        <strong title=\"Name\">{this.props.entity.name}</strong>\n        <em title=\"Age\"> ({this.props.entity.age})</em>\n        {` `}{lifeSigns}\n        <br />\n        <span>HP: {this.props.entity.hp}/{this.props.entity.maxHp}</span>\n        <progress\n          title=\"HP\"\n          max={this.props.entity.maxHp}\n          value={this.props.entity.hp}\n          percent={~~(this.props.entity.hp * 100 / this.props.entity.maxHp)}\n        >\n        </progress>\n      </div>\n    );\n  }\n}\n\nexport default EntityView;\n","import React from 'react';\nimport EntityView from '../EntityView';\nimport './EntitiesList.css';\n\nexport default class ListOfEntities extends React.Component {\n  renderCounter = 0\n  render() {\n    // console.log(\"Rendering EntitiesList #\", this.renderCounter++);\n    var entities = this.props.entities.map(obj => {\n      return (\n        <EntityView entity={obj} key={obj.name}/>\n      )\n    });\n    return (\n      <div className=\"listOfEntities\">\n        List of Entities: {entities}\n      </div>\n    );\n  }\n}\n","import React from 'react';\r\nimport Board from '../Board';\r\nimport EntitiesList from '../EntitiesList';\r\nimport './Game.css';\r\n\r\nexport default class Game extends React.PureComponent {\r\n\r\n  renderCounter = 0\r\n  stepNumber = 0\r\n  squares = Array(5*5).fill(null)\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      arenaSize: 10,\r\n      isBoardRotated: false,\r\n      entities: [\r\n        {position: {x:0, y:0}, value: \"😠\", name: \"John Rambo\", age: 40, hp: 95, maxHp: 100, inventory: ['KA-BAR', 'M16'], equipment: {head: 'Red Bandana'}, isBreathing: true,},\r\n        {position: {x:0, y:1}, value: \"👩\", name: \"Ellen Ripley\", age: 30, hp: 50, maxHp: 65, inventory: ['Motion Detector'], equipment: {head: 'Afro'}, isBreathing: true, isShooting: false, targetPosition: {x: 5, y: 10}, damage: 10,},\r\n        {position: {x:8, y:8}, value: \"🐙\", name: \"Octo\", age: 8, hp: 88, maxHp: 100, inventory: [], equipment: {}, isBreathing: true,},\r\n        {position: {x:5, y:5}, value: \"🦑\", name: \"Squid\", age: 5, hp: 55, maxHp: 100, inventory: [], equipment: {}, isBreathing: true,},\r\n      ],\r\n    }\r\n\r\n    this.loop = this.loop.bind(this);\r\n    this.getSquare = this.getSquare.bind(this);\r\n    this.setSquare = this.setSquare.bind(this);\r\n    this.toggleRotateBoard = this.toggleRotateBoard.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.setSquaresAccordingToEntities();\r\n    this.loop();\r\n  }\r\n\r\n  setSquaresAccordingToEntities() {\r\n    //console.log(\"settingSquaresAccordingToEntities\")\r\n    this.squares = Array(this.state.arenaSize*this.state.arenaSize).fill(null);// DRY\r\n    this.state.entities.forEach((entity)=>{\r\n      this.setSquare(entity.position.x, entity.position.y, entity);\r\n    });\r\n    //console.log(\"New Squares:\", this.squares)\r\n  }\r\n\r\n  getSquare(x, y) {\r\n    return this.squares[x * this.state.arenaSize + y];\r\n  }\r\n\r\n  setSquare(x, y, value) {\r\n    let targetSquareIndex = y* this.state.arenaSize + x;\r\n    //console.log(\"Setting square #\",targetSquareIndex, \"as\", square);\r\n    this.squares[targetSquareIndex] = value;\r\n    //console.log(\"this.squares:\", this.squares);\r\n  }\r\n\r\n  loop() {\r\n    this.stepNumber++;\r\n    this.setState( (state) => {\r\n\r\n      var entities = JSON.parse(JSON.stringify(state.entities));\r\n      var JR = entities[0];\r\n\r\n      if(JR.isBreathing){\r\n        //John Rambo AI\r\n        JR.position.x = JR.position.x +\r\n          1 * (Math.floor(Math.random()*2)) -\r\n          1 * (Math.floor(Math.random()*2));\r\n        JR.position.y = JR.position.y +\r\n          1 * (Math.floor(Math.random()*2)) -\r\n          1 * (Math.floor(Math.random()*2));\r\n\r\n        if(JR.position.y < 0) JR.position.y = 0;\r\n        if(JR.position.x < 0) JR.position.x = 0;\r\n\r\n        if(JR.position.y > this.state.arenaSize - 1) JR.position.y = 4;\r\n        if(JR.position.x > this.state.arenaSize - 1) JR.position.x = 4;\r\n      }\r\n      return {entities: entities};\r\n    });\r\n\r\n    //console.log(\"---\");\r\n    //console.log(this.state);\r\n    this.processEntities();\r\n    setTimeout(this.loop, 1000);\r\n  }\r\n\r\n  processEntities(){\r\n    //console.log(\"Processing entities\");\r\n    //this.setState({entities: localCopyOfEntities});\r\n    this.setState((state) => {\r\n      let localCopyOfEntities = JSON.parse(JSON.stringify(state.entities));\r\n      localCopyOfEntities.forEach(entity => {\r\n\r\n        if(entity.isShooting && entity.targetPosition) {\r\n          let targetEntities = localCopyOfEntities.filter((potentialTargetEntity) => {\r\n            return potentialTargetEntity.position.x === entity.targetPosition.x &&\r\n            potentialTargetEntity.position.y === entity.targetPosition.y\r\n          });\r\n          console.log(targetEntities);\r\n          targetEntities.forEach((targetEntity) => {\r\n            targetEntity.hp -= entity.damage;\r\n            if(targetEntity.hp <= 0) {\r\n              entity.isShooting = false;\r\n            }\r\n          });\r\n        }\r\n\r\n        if(entity.hp <= 0){\r\n          entity.hp = 0;\r\n          entity.isBreathing = false;\r\n        }\r\n\r\n      });\r\n      //console.log(\"Processing entities setting state:\");\r\n      //console.log(localCopyOfEntities);\r\n      return {entities: localCopyOfEntities}\r\n    });\r\n    this.setSquaresAccordingToEntities();\r\n  }\r\n\r\n  handleBoardClick(i) {\r\n    // console.log(\"CLICKED \", i);\r\n    var entities = JSON.parse(JSON.stringify(this.state.entities));\r\n    entities.forEach((entity) => {\r\n      entity.active = false;\r\n    })\r\n    if(this.squares[i]) {\r\n      if(this.selected) {\r\n        entities.forEach(entity => {\r\n            entity.targetPosition = this.squares[i].position;\r\n            if(entity.name === \"Ellen Ripley\") {\r\n              entity.isShooting = true;\r\n            }// FIXME: find the selected entity within entities array and modify it there.\r\n        })\r\n        //this.selected.target\r\n        console.log(\"TARGET CHOSEN\", this.selected.target)\r\n      }\r\n      // console.log(\"Clicked:\", this.squares[i]);\r\n      this.selected = this.squares[i];\r\n      this.selected.active = true;\r\n\r\n    } else {\r\n      entities.forEach(entity => {\r\n        entity.isShooting = false;\r\n      })\r\n\r\n      this.selected = this.squares[i];\r\n    }\r\n\r\n    this.setState({entities: entities});\r\n  }\r\n\r\n  nuke(dmg){\r\n    //console.log(\"Nuking\")\r\n    this.setState( (state) => {\r\n      let localCopyOfEntities = JSON.parse(JSON.stringify(state.entities));\r\n      localCopyOfEntities.forEach(entity => {\r\n\r\n        //console.log(\"hi \" + entity.hp);\r\n        entity.hp = entity.hp - dmg;\r\n      });\r\n      // console.log(\"Nuking setting state\")\r\n      // console.log(localCopyOfEntities)\r\n      return {entities: localCopyOfEntities}\r\n    }, () => {\r\n\r\n      // console.log('callback after nuking');\r\n      // console.log(this.state);\r\n\r\n      this.processEntities();\r\n    });\r\n  }\r\n\r\n\r\n  toggleRotateBoard(){\r\n    this.setState({isBoardRotated: !this.state.isBoardRotated});\r\n  }\r\n\r\n  render() {\r\n    let boardClassName = this.state.isBoardRotated ? \"rotated-board\" : \"\";\r\n    //console.log(\"Rendering Game. #\", this.renderCounter++);\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={this.squares}\r\n            onClick={(i) => this.handleBoardClick(i)}\r\n            size={this.state.arenaSize}\r\n            className={boardClassName}\r\n          />\r\n          <EntitiesList\r\n            entities={this.state.entities}\r\n          />\r\n          <div className=\"step-counter\">{this.stepNumber}</div>\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <span className=\"selected\">Selected: {this.selected && this.selected.name}</span>\r\n          <button\r\n            onClick={\r\n              ()=>{\r\n                this.nuke(40);\r\n              }\r\n            }\r\n            className=\"button button-nuke\"\r\n          >Nuke All</button>\r\n          <button onClick={this.toggleRotateBoard} className=\"button\">Rotate Board</button>\r\n          <ul>\r\n            <li>Click Ellen Ripley on the board, to select her.</li>\r\n            <li>Click a target to shoot it.</li>\r\n\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\nimport { render } from 'react-dom';\nimport Game from './components/Game';\n\nimport './style.css';\n\nrender(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}