{"version":3,"sources":["helpers/Helpers.ts","components/Square/Square.tsx","services/MessageService.ts","services/EntitiesValues.ts","services/SquaresService.ts","services/index.ts","services/EntitiesService.ts","components/Board/Board.tsx","components/EntityCard/LinearDisplay.tsx","components/EntityCard/InventoryList.tsx","components/EntityCard/EntityCard.tsx","components/EntitiesList/EntitiesList.tsx","components/Game/TargetedSquareInfo.tsx","services/GameModelService.ts","components/Game/SelectedEntityInfo.tsx","components/Game/MessageBox.tsx","components/Game/Game.tsx","index.js"],"names":["resetGivenFieldsOnACollection","collection","fieldNames","forEach","item","fieldName","undefined","getNumberWithinBoundaries","value","min","max","getRandomIntInclusive","Math","floor","random","calculateAngle","x","y","angle","atan","PI","calculateDistance","sqrt","pow","isSelectedTargeted","selected","targeted","entity","name","flagsToClassess","active","isAvailableDestination","isChosenDestination","isBreathing","isDead","isShooting","isTargeted","derivedCtor","Square","renderCounter","shouldComponentUpdate","nextProps","JSON","stringify","props","className","localId","this","squareId","flagsToClasses","Object","keys","key","turnFlagsIntoClasses","itemsClassName","itemsNumber","randomTime","toFixed","animationBreathing","targetCoords","targetPosition","projectileNumber","projectiles","customStyle","bloodClassName","blood","calcNewAangle","Helpers","items","length","position","distanceToTargetX","distanceToTargetY","actualDistance","weaponType","push","projectile","icon","isLit","isInTwilightZone","onClick","style","animation","color","React","Component","MessageService","messages","message","Weapon","causesBleeding","range","damage","RangedWeapon","rounds","maxRounds","console","log","Rifle","type","Lazer","M16","L30","M40","Identifiable","Positionable","SquaresService","getSquare","Movable","moveDestination","squareIndex","setMoveDestinationPosition","targetSquarePosition","targetSquare","squares","Message","send","Mortal","hp","maxHp","Bleedable","bleeding","bleedingReductionPerTurn","bloodReleased","bleed","square","addBlood","Breathing","isSupposedToBeBreathing","Combative","ceaseFire","hasWeapon","targetedSquarePosition","HavingInventory","inventory","itemName","actualItemIndex","findIndex","splice","Entity","isFriendly","assign","equipment","unEquipFromHands","takeFromInventory","hands","baseCtor","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","entitiesInitialValues","age","head","structures","entities","map","entry","addToInventory","arenaSize","i","initializeSquareIfEmpty","targetSquareIndex","setEntityWithinASquare","amount","j","setSquare","EntitiesService","id","filter","oldPositionX","oldPositionY","newSquare","potentialTargetEntity","selectedInEntities","findEntityById","getEntityId","damageApplied","weapon","isAbleToFire","fire","checkAmmoAndCalculateDamageApplied","getEntitiesAtGivenPosition","targetEntity","applyDamageToTargetEntity","ceaseFireNextTickIfTargetIsKilled","chosenDestinationSquare","moveEntityIntoChosenDestination","JR","OP","OC","moveEntityRandomly","squaresService","Board","handleClick","bind","rowId","colId","cellId","floatingEntities","left","squareDistance","top","fontSize","transition","rows","Array","size","fill","row","number","cells","cell","renderSquare","PureComponent","LinearDisplay","percentage","current","overload","progressStyle","width","title","divider","progressGridStyle","backgroundSize","backgroundImage","label","InventoryList","reloadButton","dropButton","inventoryItems","reload","processInterface","onDrop","EntityCard","renderCount","handleInventoryClick","onInventoryClick","renderAmmo","inHands","addItem","lifeSigns","inHandsArray","clear","display","textAlign","ListOfEntities","entitiesFriendly","obj","entitiesUnfriendly","TargetedSquareInfo","boxSerialNumber","onItemClick","attackPosition","box","newBox","entityInfo","distanceInfo","positionInfo","bloodInfo","editorButtons","inspectedSquare","squareNumber","availableActions","onAddStructureClick","distanceToSelected","onMoveClick","onAttackClick","GameModel","Entities","SelectedEntityInfo","handleDeselectAllEntities","MessageBox","renderMessage","RenderedMessages","Game","stepNumber","loop","processEntities","state","autoLoop","setTimeout","nextTick","setState","newHandleClick","selectedSquareNumber","previousTargeted","doubleClick","markSquareAsTargeted","setMoveDestinationSquare","selectEntityFromGivenSquare","deselectAllEntities","nuke","dmg","toggleRotateBoard","isBoardRotated","switchAutoLoop","previousState","prevState","concat","entityId","actualEntity","findItemOnEntity","equipInHands","setEntityWithinApropriateSquare","nextState","moveEntities","isEntityShootingProperly","fireAShot","bleedExternally","stopBreathingForKilledEntity","markAvailableDestinationsForSelectedEntity","castLightsFromFriendlyEntity","calculateNextGameState","setSquaresAccordingToEntities","calculateNextInterfaceState","boardClassName","checked","onChange","render","document","getElementById"],"mappings":"sWAGO,SAASA,EAA8BC,GAA4B,IAAD,uBAAZC,EAAY,iCAAZA,EAAY,kBACvED,EAAWE,SAAQ,SAACC,GAClBF,EAAWC,SAAQ,SAACE,GAClBD,IAASA,EAAKC,QAAaC,SAK1B,SAASC,EAA0BC,EAAeC,EAAaC,GAGpE,OAFIF,EAAQC,IAAKD,EAAQC,GACrBD,EAAQE,IAAKF,EAAQE,GAClBF,EAGF,SAASG,EAAsBF,EAAaC,GACjD,OAAOE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,IAAMA,EAGhD,SAASM,EAAeC,EAAWC,GACxC,IAAIC,EAMJ,OALID,GAAK,EACPC,GAASN,KAAKO,KAAKH,EAAIC,IAAM,IAAML,KAAKQ,IAC/BH,EAAI,IACbC,EAAS,IAAMN,KAAKQ,IAAOR,KAAKO,KAAKH,GAAKC,GAAKL,KAAKQ,KAE/CF,EAGF,SAASG,EAAkBL,EAAWC,GAC3C,OAAOL,KAAKU,KAAKV,KAAKW,IAAIP,EAAG,GAAKJ,KAAKW,IAAIN,EAAG,IAYzC,SAASO,EAAmBC,EAAkBC,GACnD,SAAID,GAAYC,GAAYA,EAASC,QAAUF,EAASG,OAASF,EAASC,OAAOC,M,UCf7EC,EAAkB,CACtBC,OAAQ,SACRC,uBAAwB,2BACxBC,oBAAqB,wBACrBC,YAAa,YACbC,OAAQ,OACRC,WAAY,WACZC,WAAY,Y,IDFcC,EC+MbC,E,2MAnLbC,cAAgB,E,EAEhBC,sBAAwB,SACtBC,GADsB,OAEnBC,KAAKC,UAAUF,KAAeC,KAAKC,UAAU,EAAKC,Q,wEAE7C,IAAD,OAIHC,EAAY,SACZC,EAAO,gBAAYC,KAAKH,MAAMI,UAElCH,GAzBJ,SAA8BD,EAAoBK,GAChD,IAAIJ,EAAY,GAOhB,OALAK,OAAOC,KAAKtB,GAAiB1B,SAAQ,SAACiD,GAChCR,EAAMQ,KACRP,GAAS,WAAQhB,EAAgBuB,GAAxB,SAGNP,EAiBQQ,CAAqBN,KAAKH,OAEvC,IAQIU,EACAC,EATAC,EAAU,WAAO5C,KAAKE,SAAW,IAAK2C,QAAQ,GAApC,KACVC,EAAqBX,KAAKH,MAAMX,YAAX,oBAAsCuB,EAAtC,8BAA+E,OAEpGG,EAAeZ,KAAKH,MAAMgB,eAC1BC,EAAmB,EACnBC,EAAc,GACdC,EAAc,GACdC,EAAc,gBAAYlB,GAU9BiB,GAPc,qBAETC,EAFS,kDAGmBjB,KAAKH,MAAMqB,MAAQ,IAAIR,QAAQ,GAHlD,sBAQdO,GAAkB,UAElB,IAAIE,EAAgBC,EAOpB,GALIpB,KAAKH,MAAMwB,OAASrB,KAAKH,MAAMwB,MAAMC,SACvCf,GAAc,cACdC,EAAcR,KAAKH,MAAMwB,MAAMC,QAI/BV,GACAZ,KAAKH,MAAM0B,UACXvB,KAAKH,MAAMT,aACVY,KAAKH,MAAMgB,eAAe5C,IAAM+B,KAAKH,MAAM0B,SAAStD,GAAK+B,KAAKH,MAAMgB,eAAe3C,IAAM8B,KAAKH,MAAM0B,SAASrD,IAE1G0C,EAAc,CAGhB,IAAIY,EA7GmB,IA6G2BZ,EAAa3C,EAAI+B,KAAKH,MAAM0B,SAAStD,GACnFwD,EA9GmB,IA8G2Bb,EAAa1C,EAAI8B,KAAKH,MAAM0B,SAASrD,GAEnFwD,EAAiBN,EAA0BI,EAAmBC,GAElE,GAA8B,UAA1BzB,KAAKH,MAAM8B,WAAwB,CAErC,IAAI7B,EAAS,oBAAgBC,EAAhB,SAET5B,EAAQgD,EAAcK,EAAmBC,GAC7CT,EAAW,0CACWjB,EADX,uIAMcA,EANd,yCAOO2B,EAAiB,GAPxB,2CAQSA,EAAiB,GAR1B,8DAWW3B,EAXX,oDAYkB5B,EAAQ,IAAM,EAZhC,yDAamBA,EAAQ,GAAK,EAbhC,0DAcoBA,EAAQ,GAAK,EAdjC,iDAiBN2B,EAjBM,oCAkBE4B,EAlBF,0OA0BavD,EAAQ,GA1BrB,6FA4Ba4B,EA5Bb,2DA6BKA,EA7BL,gEA8BEA,EA9BF,yIAmCXgB,EAAYa,KACV,yBAAKvB,IAAKP,EAAWA,UAAWA,GAtCjB,SA0CZ,CAWL,IAVAkB,EAAW,2CACYjB,EADZ,qHAIH,IAAMa,EAAa3C,EAAI+B,KAAKH,MAAM0B,SAAStD,GAJxC,gCAKH,IAAM2C,EAAa1C,EAAI8B,KAAKH,MAAM0B,SAASrD,GALxC,qDAUJ4C,KACLE,GAAW,mCACEjB,EADF,YACae,EADb,kQASYf,EATZ,kEAUUe,EAAmB,GAV7B,kDAcb,IAAIe,EAAa7B,KAAKH,MAAMT,WAAa,IAAM,GAI/C,IAFA0B,EAAmB,EAEZA,KAAoB,CACzB,IAAIhB,EAAS,+BAA2BC,EAA3B,YAAsCe,GACnDC,EAAYa,KACV,yBAAKvB,IAAKP,EAAWA,UAAWA,GAC7B+B,MAjIN,MAyIe7B,KAAKH,MAArBqB,EAzIC,EAyIDA,MAAOY,EAzIN,EAyIMA,KAgBb,OAdK9B,KAAKH,MAAMkC,OAGX/B,KAAKH,MAAMkC,OAAS/B,KAAKH,MAAMmC,mBAClClC,GAAa,yBAGVE,KAAKH,MAAMkC,OAAU/B,KAAKH,MAAMmC,mBACnClC,GAAa,SACboB,EAAQ,KACRV,EAAc,KACdS,EAAiB,MAIjB,4BAAQnB,UAAWA,EAAWmC,QAAS,kBAAM,EAAKpC,MAAMoC,QAAQ,EAAKpC,MAAMI,YACzE,yBAAKH,UAAWmB,GAAiBC,GACjC,yBAAKpB,UAAWS,GAAiBC,GACjC,yBACEV,UAAU,UACVoC,MAAO,CACLC,UAAWxB,EACXyB,MAAO,gBAGRN,GAEH,+BAAQd,GACPD,O,GA9KYsB,IAAMC,WCrDZC,G,MAFQ,I,iDANrBC,SAAqB,G,iDAChBC,GACHzC,KAAKwC,SAASZ,KAAKa,O,OCQVC,EAAb,2MACEC,eAAiB,EADnB,EAEEC,MAAQ,EAFV,EAGEC,OAAS,EAHX,8BAJA,sCACEhE,KAAe,MASJiE,EAAb,2MACEC,OAAuB,EADzB,EAEEC,UAAY,EAFd,sEAOI,OAFAhD,KAAK+C,SACLE,QAAQC,IAAI,iCAAkClD,KAAK6C,QAC5C7C,KAAK6C,SAPhB,+BAeI7C,KAAK+C,OAAS/C,KAAKgD,YAfvB,mCAWI,OAAOhD,KAAK+C,OAAS,MAXzB,GAAkCL,GAmB5BS,E,2MACJC,KAAO,a,EACPR,MAAQ,E,EACRC,OAAS,E,EACTF,eAAiB,E,6BAJCG,GAOdO,E,2MACJD,KAAO,Q,EACPR,MAAQ,E,EACRC,OAAS,E,EACTF,eAAiB,E,6BAJCG,GAOdQ,E,2MACJzE,KAAO,M,EACPkE,OAAS,G,EACTC,UAAY,G,EACZH,OAAS,E,6BAJOM,GAOZI,E,2MACJ1E,KAAO,uB,EACPkE,OAAS,E,EACTC,UAAY,E,EACZH,OAAS,G,6BAJOQ,GAOZG,E,2MACJ3E,KAAO,mB,EACPkE,OAAS,G,EACTC,UAAY,G,EACZH,OAAS,E,6BAJOM,GAaZM,E,sCACJ5E,KAAe,Y,KACfiD,KAAe,KAGJ4B,EAAb,iDACEnC,SAAqB,CAAEtD,OAAGV,EAAWW,OAAGX,GAD1C,mDAKI,OADaoG,EAAeC,UAAU5D,KAAKuB,SAAStD,EAAG+B,KAAKuB,SAASrD,OAJzE,KASM2F,E,2MACJC,qB,0FAEyBC,GACvB/D,KAAKgE,2BAA2BL,EAAeM,qBAAqBF,M,iDAG3ClD,GACzB,IAAIqD,EAAeP,EAAeC,UAAU/C,EAAe5C,EAAG4C,EAAe3C,IACxEgG,EAAatF,QAAUsF,EAAatF,OAAOO,QAC9Ca,KAAK8D,gBAAkBjD,EACvBO,EAAsCuC,EAAeQ,QAAS,uBAC9DD,EAAajF,qBAAsB,GAEnCmF,EAAQC,KAAR,UAAgBrE,KAAKnB,KAArB,oCAAqDgC,EAAe5C,EAApE,YAAyE4C,EAAe3C,Q,GAdxEuF,GAmBTa,EAAb,2MACEC,GAAa,IADf,EAEEC,MAAgB,IAFlB,sEAII,OAAOxE,KAAKuE,IAAM,MAJtB,GAA4Bb,GAQfe,EAAb,2MACEC,cADF,IAEEC,yBAAmC,EAFrC,uEAII,IACIC,EAAgB,EAMpB,OAPa5E,KAEF0E,UAFE1E,KAEiBuE,GAAK,IACjCK,EAHW5E,KAGY0E,SAHZ1E,KAIJuE,IAAMK,EAJF5E,KAKJ0E,UALI1E,KAKe2E,0BAErBC,IAXX,wCAeI,GAAK5E,KAAK0E,SAAV,CACA,IACIE,EAAgB5E,KAAK6E,QACrBC,EAAiBnB,EAAeC,UAFvB5D,KAEwCuB,SAAStD,EAFjD+B,KAE2DuB,SAASrD,GACjFyF,EAAeoB,SAASD,EAAQF,QAnBpC,GAA+BN,GAuBzBU,E,2MACJC,6BAAmC1H,E,2EAEjC,OAAOyC,KAAKuE,GAAK,GAAKvE,KAAKiF,yB,aAEbxH,GACduC,KAAKiF,wBAA0BxH,M,GANX6G,GAUlBY,E,2MACJrE,oB,IACAzB,gB,IACA+F,e,IACAC,e,gFACeC,GACTrF,KAAKoF,WACPpF,KAAKa,eAAiBwE,EACtBrF,KAAKZ,YAAa,GAElBgF,EAAQC,KAAR,UAAgBrE,KAAKnB,KAArB,iC,GAVkB4E,GAeX6B,EAAb,iDACEC,eADF,gEAEoBC,GAChB,IAAIC,EAAkBzF,KAAKuF,UAAUG,WAAU,SAACrI,GAAD,OAAUA,EAAKwB,MAAQ2G,KAItE,OAHiBxF,KAAKuF,UAAUI,OAAOF,EAAiB,GAAG,KAJ/D,qCASiBpI,GACR2C,KAAKuF,YACRvF,KAAKuF,UAAY,IAEnBvF,KAAKuF,UAAU3D,KAAKvE,OAbxB,KAsCauI,EAEX,aAAuB,yBAGvBC,gBAHsB,OAItB9G,YAJsB,6BAAPc,EAAO,yBAAPA,EAAO,gBACpBM,OAAO2F,OAAP,MAAA3F,OAAM,CAAQH,MAAR,OAAiBH,KH5KCP,EG+LhBsG,EAAQ,CAClBnC,EACAC,EACAY,EACAG,EACAZ,EACAmB,EACAE,EACAI,E,2MAlDAS,e,IACAX,e,8EAEaI,GACXxF,KAAKgG,mBACL,IAAI3I,EAAO2C,KAAKiG,kBAAkBT,GAClCxF,KAAK+F,UAAUG,MAAQ7I,EACnBA,aAAgBqF,IAClB1C,KAAKoF,WAAY,K,yCAKfpF,KAAK+F,UAAUG,QACjBlG,KAAKuF,UAAU3D,KAAK5B,KAAK+F,UAAUG,OACnClG,KAAK+F,UAAUG,MAAQ,U,GAhBCZ,IHlJlBlI,SAAQ,SAAC+I,GACjBhG,OAAOiG,oBAAoBD,EAASE,WAAWjJ,SAAQ,SAACyB,GACtDsB,OAAOmG,eAAehH,EAAY+G,UAAWxH,EAAMsB,OAAOoG,yBAAyBJ,EAASE,UAAWxH,UGyM7G,IAAM2H,EAAwB,CAC5B,CACE3H,KAAM,aACN4H,IAAK,GACLlC,GAAI,GACJC,MAAO,IACP1C,KAAM,eACN5C,aAAa,EACb2G,YAAY,EACZtE,SAAU,CAAEtD,EAAG,EAAGC,EAAG,GACrBqH,UAAW,CAAC,CAAE1G,KAAM,UAAY,IAAIyE,GACpCyC,UAAW,CAAEW,KAAM,cAAeR,MAAO,OAE3C,CACErH,KAAM,eACN4H,IAAK,GACLlC,GAAI,GACJC,MAAO,GACP1C,KAAM,eACN5C,aAAa,EACb2G,YAAY,EACZtE,SAAU,CAAEtD,EAAG,EAAGC,EAAG,GACrBqH,UAAW,CAAC,IAAI/B,EAAO,CAAE3E,KAAM,oBAC/BkH,UAAW,CAAEW,KAAM,SAErB,CACE7H,KAAM,cACN4H,IAAK,GACLlC,GAAI,GACJC,MAAO,IACP1C,KAAM,2BACN5C,aAAa,EACb2G,YAAY,EACZtE,SAAU,CAAEtD,EAAG,EAAGC,EAAG,GACrBqH,UAAW,CAAC,IAAIhC,EAAO,IAAID,GAC3ByC,UAAW,IAEb,CACElH,KAAM,cACN4H,IAAK,GACLlC,GAAI,GACJC,MAAO,GACP1C,KAAM,iCACN5C,aAAa,EACb2G,YAAY,EACZtE,SAAU,CAAEtD,EAAG,EAAGC,EAAG,GACrBqH,UAAW,CAAC,IAAIhC,GAChBwC,UAAW,IAEb,CACElH,KAAM,QACN4H,IAAK,EACLlC,GAAI,GACJC,MAAO,GACP1C,KAAM,eACN5C,aAAa,EACbqC,SAAU,CAAEtD,EAAG,EAAGC,EAAG,IAEvB,CACEW,KAAM,OACN4H,IAAK,EACLlC,GAAI,IACJC,MAAO,IACP1C,KAAM,eACN5C,aAAa,EACbqC,SAAU,CAAEtD,EAAG,EAAGC,EAAG,GACrByG,yBAA0B,EAC1BD,SAAU,GAEZ,CACE7F,KAAM,QACN4H,IAAK,EACLlC,GAAI,IACJC,MAAO,IACP1C,KAAM,eACN5C,aAAa,EACbqC,SAAU,CAAEtD,EAAG,EAAGC,EAAG,IAEvB,CACEW,KAAM,MACN4H,IAAK,EACLlC,GAAI,GACJC,MAAO,GACP1C,KAAM,eACN5C,aAAa,EACbqC,SAAU,CAAEtD,EAAG,EAAGC,EAAG,IAEvB,CACEW,KAAM,SACN4H,IAAK,EACLlC,GAAI,IACJC,MAAO,IACP1C,KAAM,qBACN5C,aAAa,EACbqC,SAAU,CAAEtD,EAAG,EAAGC,EAAG,GACrByG,yBAA0B,GAE5B,CACE9F,KAAM,WACN4H,IAAK,EACLlC,GAAI,GACJC,MAAO,GACP1C,KAAM,eACN5C,aAAa,EACbqC,SAAU,CAAEtD,EAAG,EAAGC,EAAG,IAEvB,CACEW,KAAM,UACN4H,IAAK,EACLlC,GAAI,EACJC,MAAO,EACP1C,KAAM,eACN5C,aAAa,EACbqC,SAAU,CAAEtD,EAAG,EAAGC,EAAG,KAIZyI,EACN,CACH9H,KAAM,MACNiD,KAAM,eACNyC,GAAI,GACJC,MAAO,GACPtF,aAAa,EACbqC,SAAU,CAAEtD,EAAG,EAAGC,EAAG,IAMV0I,EAFEJ,EAAsBK,KAAI,SAACC,GAAD,OAAW,IAAIlB,EAAOkB,MCjWpDvH,EAAb,gLACUlC,GACN2C,KAAK+G,eAAe1J,KAFxB,4BAKI,OAAO2C,KAAKuF,cALhB,GAA4BD,GAqIb3B,EADM,I,WAtHnB,aAAe,yBAJfqD,UAAoB,GAIN,KAFd7C,QAAoB,GAIlB,IADA,IAAI8C,EAAIjH,KAAKgH,UAAYhH,KAAKgH,UACf,IAARC,KACLjH,KAAKkH,wBAAwBD,G,sDAIvBhJ,EAAWC,GACnB,OAAO8B,KAAKmE,QAAQnE,KAAKmH,kBAAkBlJ,EAAGC,M,gCAGtCD,EAAWC,EAAWT,GAC9BuC,KAAKmE,QAAQnE,KAAKmH,kBAAkBlJ,EAAGC,IAAMT,I,wCAG7BQ,EAAWC,GAC3B,OAAOA,EAAI8B,KAAKgH,UAAY/I,I,2CAGT8F,GACnB,IAAe7F,EAGf,OAFAA,EAAIL,KAAKC,MAAMiG,EAAc/D,KAAKgH,WAE3B,CAAE/I,EADL8F,EAAc/D,KAAKgH,UACX9I,O,sDAGkBU,GAC9BoB,KAAKoH,uBAAuBxI,EAAO2C,SAAStD,EAAGW,EAAO2C,SAASrD,EAAGU,K,6CAG7CX,EAAWC,EAAWU,GAC3C,IAAImF,EAAsB/D,KAAKmH,kBAAkBlJ,EAAGC,GACpD8B,KAAKkH,wBAAwBnD,GAC7B/D,KAAKmE,QAAQJ,GAAanF,OAASA,I,+BAG5BkG,EAAgBuC,GAClBvC,EAAO5D,MAGV4D,EAAO5D,OAASmG,EAFhBvC,EAAO5D,MAAQmG,I,2CAMEtD,GACnB3C,EAAsCpB,KAAKmE,QAAS,cACpDnE,KAAKkH,wBAAwBnD,GAC7B/D,KAAKmE,QAAQJ,GAAa1E,YAAa,I,8CAGjB0E,GACjB/D,KAAKmE,QAAQJ,KAChB/D,KAAKmE,QAAQJ,GAAe,IAAIxE,K,iEAIOX,GACzC,GAAIA,EAAOG,OAAQ,CAAC,IAAD,EACFH,EAAO2C,SAAhBtD,EADW,EACXA,EAAGC,EADQ,EACRA,EAETkD,EAAsCpB,KAAKmE,QAAS,0BAEpD,IAAK,IAAImD,EAAIpJ,EAAI,EAAGoJ,GAAKpJ,EAAI,EAAGoJ,IAC9B,KAAIA,EAAI,GAAKA,GAAKtH,KAAKgH,WAGvB,IAAK,IAAIC,EAAIhJ,EAAI,EAAGgJ,GAAKhJ,EAAI,EAAGgJ,IAC9B,KAAIA,EAAI,GAAKA,GAAKjH,KAAKgH,WAAcC,IAAMhJ,GAAKqJ,IAAMpJ,GAAtD,CAIA,IAAI4G,EAAiB9E,KAAK4D,UAAUqD,EAAGK,GAEvCxC,EAAO9F,wBAAyB,EAChCgB,KAAKuH,UAAUN,EAAGK,EAAGxC,O,mDAKAlG,GAC3B,GAAIA,EAAOiH,WAAY,CAGrB,IAHsB,IAAD,EACNjH,EAAO2C,SAAhBtD,EADe,EACfA,EAAGC,EADY,EACZA,EAEAoJ,EAAIpJ,EAAI,EAAGoJ,GAAKpJ,EAAI,EAAGoJ,IAC9B,KAAIA,EAAI,GAAKA,GAAKtH,KAAKgH,WAGvB,IAAK,IAAIC,EAAIhJ,EAAI,EAAGgJ,GAAKhJ,EAAI,EAAGgJ,IAC9B,KAAIA,EAAI,GAAKA,GAAKjH,KAAKgH,WAAvB,CAIA,IAAIlC,EAAiB9E,KAAK4D,UAAUqD,EAAGK,GAEvCxC,EAAO9C,kBAAmB,EAC1BhC,KAAKuH,UAAUN,EAAGK,EAAGxC,GAIzB,IAAK,IAAIwC,EAAIpJ,EAAI,EAAGoJ,GAAKpJ,EAAI,EAAGoJ,IAC9B,KAAIA,EAAI,GAAKA,GAAKtH,KAAKgH,WAGvB,IAAK,IAAIC,EAAIhJ,EAAI,EAAGgJ,GAAKhJ,EAAI,EAAGgJ,IAC9B,KAAIA,EAAI,GAAKA,GAAKjH,KAAKgH,WAAvB,CAIA,IAAIlC,EAAiB9E,KAAK4D,UAAUqD,EAAGK,GAEvCxC,EAAO/C,OAAQ,EACf/B,KAAKuH,UAAUN,EAAGK,EAAGxC,S,MCzIpB0C,ECqLW,I,iDAzKpBZ,c,OACAlI,c,0DAEYE,GACV,OAAOA,EAAOC,O,qCAGD4I,GAEb,OADqBzH,KAAK4G,SAASc,QAAO,SAAC9I,GAAD,OAAYA,EAAOC,OAAS4I,KAAI,K,uCAI3D7I,EAAyB6I,GAExC,OADa7I,EAAO2G,UAAUmC,QAAO,SAACrK,GAAD,OAAUA,EAAKwB,OAAS4I,KAAI,K,yCAIhD7I,GACjB,IAAIA,EAAOO,OAAX,CAEA,IAAIwI,EAAe/I,EAAO2C,SAAStD,EAC/B2J,EAAehJ,EAAO2C,SAASrD,EAEnCU,EAAO2C,SAAStD,EAAIW,EAAO2C,SAAStD,EAAImD,GAA+B,EAAG,GAC1ExC,EAAO2C,SAASrD,EAAIU,EAAO2C,SAASrD,EAAIkD,GAA+B,EAAG,GAE1ExC,EAAO2C,SAAStD,EAAImD,EAAkCxC,EAAO2C,SAAStD,EAAG,EAAG+I,GAC5EpI,EAAO2C,SAASrD,EAAIkD,EAAkCxC,EAAO2C,SAASrD,EAAG,EAAG8I,GAE5E,IAAIa,EAAYlE,EAAeC,UAAUhF,EAAO2C,SAAStD,EAAGW,EAAO2C,SAASrD,GAExE2J,GAAaA,EAAUjJ,SAEzBA,EAAO2C,SAAStD,EAAI0J,EACpB/I,EAAO2C,SAASrD,EAAI0J,M,mDAIKhJ,GAK3B,OAJIA,GAAUA,EAAO2F,IAAM,IACzB3F,EAAOM,aAAc,EACrBN,EAAO2F,GAAK,GAEP3F,I,iDAGkBiC,GACzB,OAAOb,KAAK4G,SAASc,QAAO,SAACI,GAC3B,OACEA,EAAsBvG,SAAStD,IAAM4C,EAAe5C,GAAK6J,EAAsBvG,SAASrD,IAAM2C,EAAe3C,O,kDAKvFQ,EAAkBC,GAS5C,OARID,GAAYC,GAAYA,EAASC,SACnCF,EAASK,QAAS,GAEhBJ,GAAYA,EAASC,UACvBF,EAAWC,EAASC,QACXG,QAAS,GAGbL,I,kCAGGA,EAAkBjB,GAC5B,IAAIsK,EAAqB/H,KAAKgI,eAAehI,KAAKiI,YAAYvJ,IAQ9D,OAPIjB,EACFiB,EAASK,OAAStB,GAElBiB,EAAW,KACXuE,QAAQC,IAAI,aAAcxE,IAE5BqJ,EAAmBhJ,OAAStB,EACrBiB,I,yDAG0BE,GACjC,IAAIsJ,EAAwB,EACxBC,EAAuBvJ,EAAOmH,WAAanH,EAAOmH,UAAUG,MAEhE,OAAKiC,GAEDA,EAAOC,aACTF,EAAgBC,EAAOE,QAEvBF,EAAOpF,OAAS,QAChBnE,EAAOQ,YAAa,GAGf8I,GATa,I,gCAYZtJ,GAAiB,IAAD,OACxB,GAAIA,EAAOuG,UAGT,OAFAvG,EAAOQ,YAAa,OACpBR,EAAOuG,WAAY,GAGrB,IAAI+C,EAAgBlI,KAAKsI,mCAAmC1J,GACvCoB,KAAKuI,2BAA2B3J,EAAOiC,gBAC7CzD,SAAQ,SAACoL,GACtB,EAAKC,0BAA0BD,EAAcN,GAC7C,EAAKQ,kCAAkC9J,EAAQ4J,Q,gDAIzBA,EAAsB3F,GAC1CA,IACF2F,EAAajE,IAAM1B,EACnB2F,EAAa9D,SAAW,K,wDAIM9F,EAAgB4J,GAC5CA,EAAajE,GAAK,IACpB3F,EAAOuG,WAAY,K,+CAIEvG,GACvB,OACEA,EAAOQ,YACPR,EAAOiC,iBACNjC,EAAOiC,eAAe5C,IAAMW,EAAO2C,SAAStD,GAAKW,EAAOiC,eAAe3C,IAAMU,EAAO2C,SAASrD,K,6CAI3EU,GAErB,GAAIA,EAAO8F,UAAY9F,EAAO2F,GAAK,EAAG,CACpC3F,EAAO2F,IAAM3F,EAAO8F,SACpB,IAAII,EAAiBnB,EAAeC,UAAUhF,EAAO2C,SAAStD,EAAGW,EAAO2C,SAASrD,GACjFyF,EAAeoB,SAASD,EAAQlG,EAAO8F,UACvC9F,EAAO8F,UAAY9F,EAAO+F,yBAE5B,OAAO/F,I,sDAGuBA,GAC9B,IAAKA,EAAOO,QAAUP,EAAOkF,gBAAiB,CAC5C,IAAI6E,EAAkChF,EAAeC,UACnDhF,EAAOkF,gBAAgB7F,EACvBW,EAAOkF,gBAAgB5F,GAGzBU,EAAO2C,SAAW3C,EAAOkF,uBAClBlF,EAAOkF,gBACd6E,EAAwB1J,yBAAsB1B,EAEhD,OAAOqB,I,0DAG2BF,EAAkB2G,GACpD3G,EAASoF,gBAAkBuB,I,qCAGP,IAAD,OACnBrF,KAAK4G,SAASxJ,SAAQ,SAACwB,GAAD,OAAY,EAAKgK,gCAAgChK,MACvE,IAAIiK,EAAa7I,KAAKgI,eAAe,cACjCc,EAAa9I,KAAKgI,eAAe,SACjCe,EAAa/I,KAAKgI,eAAe,QACrChI,KAAKgJ,mBAAmBH,GACxB7I,KAAKgJ,mBAAmBF,GACxB9I,KAAKgJ,mBAAmBD,O,MDhLjBpF,EAAiBsF,EESPC,E,YAGnB,WAAYrJ,GAAQ,IAAD,8BACjB,4CAAMA,KAHRL,cAAgB,EAId,EAAK2J,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,yEAKPnC,GACVhE,QAAQC,IAAI,yBAA0B+D,GACtCjH,KAAKH,MAAMoC,QAAQgF,K,mCAGRA,EAAGoC,EAAOC,GASrB,IAAIxE,EAAS9E,KAAKH,MAAMsE,QAAQ8C,GAC5BrI,EAASoB,KAAKH,MAAMsE,QAAQ8C,IAAMjH,KAAKH,MAAMsE,QAAQ8C,GAAGrI,OAC5D,OACE,kBAAC,EAAD,CACEyB,IAAK4G,EACLhH,SAAUgH,EACVhF,QAASjC,KAAKmJ,YACdrH,KAAMlD,GAAUA,EAAOkD,KACvB/C,OAAQH,GAAUA,EAAOG,OACzBG,YAAaN,GAAUA,EAAOM,YAC9BC,OAAQP,GAAUA,EAAOO,OACzBC,WAAYR,GAAUA,EAAOQ,WAC7BuC,WAAY/C,GAAUA,EAAOmH,WAAanH,EAAOmH,UAAUG,OAAStH,EAAOmH,UAAUG,MAAM9C,KAC3F7B,SAAU3C,GAAUA,EAAO2C,SAC3BV,eAAgBjC,GAAUA,EAAOiC,eACjCK,MAAO4D,GAAUA,EAAO5D,MACxBG,MAAOyD,GAAUA,EAAOzD,MACxBrC,uBAAwB8F,GAAUA,EAAO9F,uBACzCC,oBAAqB6F,GAAUA,EAAO7F,oBACtCI,WAAYyF,GAAUA,EAAOzF,WAC7B0C,MAAO+C,EAAO/C,MACdC,iBAAkB8C,EAAO9C,qB,+BAKrB,IAMJsH,EANG,OAIHC,EAAS,EACTF,EAAQ,EAERG,EAAmBxJ,KAAKH,MAAM+G,SAASC,KAAI,SAACjI,GAC9C,IACIkB,EAAY,iBAKhB,OAJI6D,EAAeC,UAAUhF,EAAO2C,SAAStD,EAAGW,EAAO2C,SAASrD,GAAG6D,QAAOjC,GAAa,YACnF6D,EAAeC,UAAUhF,EAAO2C,SAAStD,EAAGW,EAAO2C,SAASrD,GAAG8D,mBACjElC,GAAa,yBAGb,yBACEO,IAAKzB,EAAOC,KACZiB,UAAWA,EACXoC,MAAO,CACLuH,KAAMC,GAXS,GAWiC9K,EAAO2C,SAAStD,EAChE0L,IAAKD,GAZU,GAYgC9K,EAAO2C,SAASrD,EAC/DqD,SAAU,WACVqI,SAAU,QACVC,WAAY,aAGbjL,EAAOkD,SAIVgI,EAAOC,MAAM/J,KAAKH,MAAMmK,MACzBC,KAAK,MACLpD,KAAI,SAACqD,EAAKC,GACTb,EAAQ,EACR,IAAIc,EAAQL,MAAM,EAAKlK,MAAMmK,MAC1BC,KAAK,MACLpD,KAAI,SAACwD,EAAMF,GACV,OAAO,EAAKG,aAAaf,IAAUF,EAAOC,QAE9C,OACE,yBAAKjJ,IAAKgJ,IAASvJ,UAAU,aAC1BsK,MAKLtK,EAAY,SAAWE,KAAKH,MAAMC,UACtC,OACE,yBAAKA,UAAWA,GACbgK,EACAN,O,GAlG0BnH,IAAMkI,e,MCF1B,SAASC,EAAc3K,GACpC,IAAIC,EAAS,yBAAqBD,EAAMC,WAAa,IACjD2K,KAAiC,IAAhB5K,EAAM6K,QAAiB7K,EAAMlC,KAC9CgN,EAAWF,EAAa,IACxBE,IACFF,EAAa,IACb3K,GAAa,cAGf,IAAI8K,EAAgB,CAClBC,MAAM,GAAD,OAAKJ,EAAL,MAEHK,EAAQjL,EAAMiL,OAAN,UAAkBjL,EAAM6K,QAAxB,YAAmC7K,EAAMlC,KAEjD0J,EAASxH,EAAM6K,QAEfK,EAAU,EACVlL,EAAMlC,KAAO,IAAMkC,EAAMlC,IAAM,IACjCoN,EAAU,EACDlL,EAAMlC,KAAO,MACtBoN,EAAU,IASZ,IAAIC,EAAoB,CACtBC,eAAe,GAAD,OALD,KAFf5D,GAAkB0D,GAOF,UACdG,gBAAgB,oCAAD,OAHZ,QAGY,iCAOjB,OAFA/K,OAAO2F,OAAO8E,EAAeI,GAG3B,yBAAKlL,UAAWA,GACd,yBAAKA,UAAU,yBAAyBD,EAAMsL,MAA9C,SACA,yBAAKrL,UAAU,gCAAgCgL,MAAOA,GACpD,yBAAKhL,UAAU,+BAA+BoC,MAAO0I,GACnD,0BAAM9K,UAAU,qCACbD,EAAM6K,QACNC,EAAW,IAAM9K,EAAMlC,IAAM,GAFhC,UAMJ,sC,MC9CS,SAASyN,EAAcvL,GACpC,IAKIwL,EACAC,EANExL,EAAS,yBAAqBD,EAAMC,WAAa,IAEvD,IAAKD,EAAM0F,UACT,OAAO,KAIT,IAAMgG,EAAiB1L,EAAM0F,UAAUsB,KAAI,SAACxJ,GAC1C,GAAIA,EAAKmO,QAAU3L,EAAMoC,QAAS,CAEhC,IAAInC,EAAY,kCAEI,IAAhBzC,EAAK0F,QAAgC,UAAhB1F,EAAK0F,OAC5BjD,GAAa,yCACJzC,EAAK0F,OAAS1F,EAAK2F,YAC5BlD,GAAa,4CAEfuL,EACE,4BACEvL,UAAWA,EACXmC,QAAS,WACP5E,EAAKmO,SAEL3L,EAAM4L,qBALV,eAYFJ,EAAe,KAejB,OAbIxL,EAAM6L,SACRJ,EACE,4BACExL,UAAU,8BACVmC,QAAS,WACPpC,EAAM6L,OAAOrO,EAAKwB,QAHtB,SAYF,yBAAKwB,IAAKhD,EAAKwB,MACb,yBAAKoD,QAAS,kBAAMpC,EAAMoC,QAAQ5E,EAAKwB,OAAOwB,IAAKhD,EAAKwB,KAAMiB,UAAU,wBACtE,8BAAOzC,EAAKwB,OAEbwM,EACAC,MAKP,OACE,yBAAKxL,UAAWA,GACd,yBAAKA,UAAU,yBACZD,EAAMsL,MADT,SAIA,yBAAKrL,UAAU,4BAA4BgL,MAAOjL,EAAMiL,OACrDS,I,UCyBMI,E,2MAxFbC,YAAc,E,EACdC,qBAAuB,SAACrG,GACtB,EAAK3F,MAAMiM,iBAAiB,EAAKjM,MAAMjB,OAAQ4G,I,EAGjDuG,WAAa,SAACC,GACZ,GAAIA,EACF,OAAO,kBAAC,EAAD,CAAeb,MAAM,SAAST,QAASsB,EAAQjJ,OAAQpF,IAAKqO,EAAQhJ,a,EAI/E0I,OAAS,SAAClG,GAAsB,IACxB5G,EAAW,EAAKiB,MAAhBjB,OACNA,EAAOoH,mBACP,IAAI3I,EAAauB,EAAOqH,kBAAkBT,GAC1C5G,EAAOkG,OAAOmH,QAAQ5O,GACtB,EAAKwC,MAAMiM,iBAAiB,EAAKjM,MAAMjB,OAAQ,K,wEAGvC,IAAD,OAEDA,EAAWoB,KAAKH,MAAhBjB,OACN,IAAKA,EAAQ,OAAO,KAKpB,IAAIkB,EAAY,WACZlB,EAAOG,SACTe,GAAa,YAVR,IAcHoM,EADatN,EAAXO,OACmB,SAAW,UACpCW,GAAaoM,EACb,IAAIF,EAAUpN,EAAOmH,WAAanH,EAAOmH,UAAUG,MAC/CiG,EAAgBH,GAAW,CAACA,IAAa,GAE7C,OACE,yBAAKlM,UAAWA,GACd,6BACE,yBAAKA,UAAU,WAAWgL,MAAM,YAC9B,8BACG,IACAlM,EAAO2C,SAAStD,EAFnB,IAEuBW,EAAO2C,SAASrD,EAAG,MAI5C,yBAAK4B,UAAU,YAAYlB,EAAOkD,OAEpC,4BAAQgJ,MAAM,QAAQlM,EAAOC,MAC7B,6BAZF,IAcGqN,EACD,6BAEA,yBACEhK,MAAO,CACLkK,MAAO,OACPC,QAAS,eACTC,UAAW,UAGb,kBAAC,EAAD,CAAenB,MAAM,KAAKT,QAAS9L,EAAO2F,GAAI5G,IAAKiB,EAAO4F,QAC1D,6BACCxE,KAAK+L,WAAWC,IAEnB,kBAAC,EAAD,CACEb,MAAM,WACNL,MAAM,WACN7I,QAASjC,KAAK6L,qBACdH,OAAQ1L,KAAK0L,OACbnG,UAAW4G,EACXV,iBAAkB,kBAAM,EAAK5L,MAAM4L,sBAErC,kBAAC,EAAD,CACEN,MAAM,YACNL,MAAM,cACN7I,QAASjC,KAAK6L,qBACdH,OAAQ1L,KAAK0L,OACbnG,UAAW3G,EAAO2G,UAClBkG,iBAAkB,kBAAM,EAAK5L,MAAM4L,2B,GAlFpBpJ,IAAMC,WCHViK,G,iNACnB/M,cAAgB,E,wEACN,IAAD,OAGHgN,EAAmBxM,KAAKH,MAAM+G,SAC/Bc,QAAO,SAAC9I,GAAD,OAAYA,EAAOiH,cAC1BgB,KAAI,SAAC4F,GACJ,OACE,kBAAC,EAAD,CACEX,iBAAkB,EAAKjM,MAAMiM,iBAC7BlN,OAAQ6N,EACRpM,IAAKoM,EAAI5N,KACT4M,iBAAkB,kBAAM,EAAK5L,MAAM4L,yBAKvCiB,EAAqB1M,KAAKH,MAAM+G,SACjCc,QAAO,SAAC9I,GAAD,OAAaA,EAAOiH,cAC3BgB,KAAI,SAAC4F,GACJ,OAAO,kBAAC,EAAD,CAAY7N,OAAQ6N,EAAKpM,IAAKoM,EAAI5N,KAAM4M,iBAAkB,kBAAM,EAAK5L,MAAM4L,yBAGtF,OACE,oCACE,wBAAI3L,UAAU,4BAAd,qBACA,yBAAKA,UAAU,oBAAoB0M,GACnC,yBAAK1M,UAAU,oBAAoB4M,Q,GA5BCrK,IAAMC,YCO7BqK,E,2MACnBC,gBAA0B,E,EAE1BC,YAAc,SAACrH,GAAsB,IAAD,EACL,EAAK3F,MAA5BnB,EAD4B,EAC5BA,SAAUC,EADkB,EAClBA,SAChB,GAAIyC,EAA2B1C,EAAUC,GAAW,CAClD,IAAItB,EAAOsB,EAASsH,kBAAkBT,GACtC9G,EAASqI,eAAe1J,GAE1B,EAAKwC,MAAM4L,oB,2EAGD/M,EAAkB2G,GAE5B3G,EAASsF,2BAA2BqB,GACP1B,EAAeC,UAAUyB,EAAuBpH,EAAGoH,EAAuBnH,GAExFe,qBAAsB,EACrCe,KAAKH,MAAM4L,qB,oCAGC/M,EAAkB2G,GAC9B3G,EAASoO,eAAezH,GACxBrF,KAAKH,MAAM4L,qB,0CAGOpG,GACCrF,KAAKH,MAAlBlB,SAD+C,IAGjDoO,EAAM5M,OAAO2F,OAAO,GAAIa,GACxB9F,EAAiBV,OAAO2F,OAAO,GAAIT,GACvC0H,EAAIxL,SAAWV,EACfkM,EAAIlO,MAAQmB,KAAK4M,kBACjB,IAAII,EAAS,IAAIpH,EAAOmH,GAExBnG,EAAShF,KAAKoL,GACd/J,QAAQC,IAAI0D,GACZ5G,KAAKH,MAAM4L,qB,+BAGH,IAAD,OACP,IAAKzL,KAAKH,MAAMlB,SACd,OAAO,KAIT,IAMIsO,EACAC,EACAC,EACAC,EAEA/L,EACAgM,EAZAC,EAAkBtN,KAAKH,MAAMlB,SAC7BD,EAAmBsB,KAAKH,MAAMnB,SAC9BC,EAAmBqB,KAAKH,MAAMlB,SAE9B0G,EAAyB1B,EAAeM,qBAAqBjE,KAAKH,MAAM0N,cAMxEC,EAAmB,GAiCvB,GA7BAH,EACE,4BAAQpL,QAAS,kBAAM,EAAKwL,oBAAoBpI,IAAyBvF,UAAU,UAAnF,iBAKEnB,GAAYA,EAASC,SAAWwC,EAA2BpB,KAAKH,MAAMnB,SAAUsB,KAAKH,MAAMlB,YAC7FsO,EACE,kBAAC,EAAD,CACEnB,iBAAkB9L,KAAKH,MAAMiM,iBAC7BlN,OAAQD,EAASC,OACjB6M,iBAAkB,kBAAM,EAAK5L,MAAM4L,uBAKrC9M,GAAYA,EAAS0C,QACvBA,EACE,kBAAC,EAAD,CACE8J,MAAM,yBACNL,MAAM,eACN7I,QAASjC,KAAK6M,YACdnB,OAAQ,KACRnG,UAAW5G,EAAS0C,MACpBoK,iBAAkB,kBAAM,EAAK5L,MAAM4L,uBAKrC/M,EAAU,CACZ,IAAIgP,EAAqBtM,EACvBiE,EAAuBpH,EAAIS,EAAS6C,SAAStD,EAC7CoH,EAAuBnH,EAAIQ,EAAS6C,SAASrD,GAG/CgP,EAAe,uDAA6BQ,GAEjB,IAAvBA,IACE/O,GAAYA,EAASK,yBACvBwO,EAAiB,GACf,4BAAQvL,QAAS,kBAAM,EAAK0L,YAAYjP,EAAU2G,IAAyBvF,UAAU,UAArF,SAKAnB,GAAYA,EAASC,SACvB4O,EAAiB,GACf,4BAAQvL,QAAS,kBAAM,EAAK2L,cAAclP,EAAU2G,IAAyBvF,UAAU,UAAvF,YAoBR,OAZIuF,IACF8H,EACE,2CACe9H,EAAuBpH,EADtC,KAC2CoH,EAAuBnH,EADlE,KACuE,MAKvEoP,GAAmBA,EAAgBpM,QACrCkM,EAAY,6CAAmBE,EAAgBpM,QAI/C,yBAAKpB,UAAWE,KAAKH,MAAMC,WACzB,sDACA,6BAAMmN,GACN,6BAAMO,GACN,4BACGL,EACAD,EACAE,EACA/L,EACAgM,Q,GAzIqChL,IAAMC,WCHvCuL,EAFC,I,WATd,WAAYC,GAAW,yBADvBlH,cACsB,EACpB5G,KAAK4G,SAAWkH,E,qDAGhB7K,QAAQC,IAAI,wBACZD,QAAQC,IAAIlD,KAAK4G,c,KAIL,CAAmBkH,GCCdC,G,uLACT,IAAD,OACP,OAAK/N,KAAKH,MAAMnB,SAKd,yBAAKoB,UAAU,YACb,oDACA,6BACE,kBAAC,EAAD,CACEgM,iBAAkB9L,KAAKH,MAAMiM,iBAC7BlN,OAAQoB,KAAKH,MAAMnB,SACnB+M,iBAAkB,kBAAM,EAAK5L,MAAM4L,uBAGvC,4BAAQxJ,QAASjC,KAAKH,MAAMmO,0BAA2BlO,UAAU,UAC9D,IADH,aAbK,S,GAHmCuC,IAAMC,YCXzC2L,EAAb,2MACEzL,SAAWD,EAAeC,SAD5B,EAGE0L,cAAgB,SAACzL,EAAS0H,GACxB,OACE,0CACcA,EADd,MACyB1H,IAN/B,wEAWY,IAAD,OACH0L,EAAmBnO,KAAKwC,SAASqE,KAAI,SAACpE,EAAS0H,GACjD,OAAO,EAAK+D,cAAczL,EAAS0H,MAGrC,OAAO,wBAAIrK,UAAU,cAAcqO,OAhBvC,GAAgC9L,IAAMC,WC0BjB8L,G,YAInB,WAAYvO,GAAQ,IAAD,8BACjB,4CAAMA,KAJRL,cAAwB,EAGL,EAFnB6O,WAAqB,EAEF,EAmFnBC,KAAO,WACL,EAAKD,aAEL,EAAKE,kBAED,EAAKC,MAAMC,UACbC,WAAW,EAAKJ,KAAM,MAzFP,EA6FnBK,SAAW,WACT,EAAKC,SAAS,CAAEH,UAAU,IAC1B,EAAKH,QA/FY,EAkGnBO,eAAiB,SAAC9K,GAChB,EAAK6K,UAAS,SAACJ,GAAW,IAClBrK,EAAgEqK,EAAhErK,QAASyC,EAAuD4H,EAAvD5H,SAAUlI,EAA6C8P,EAA7C9P,SAAUC,EAAmC6P,EAAnC7P,SAAUmQ,EAAyBN,EAAzBM,qBACzCC,EAAmBpQ,EACvBA,EAAWwF,EAAQJ,GACnB+K,EAAuB/K,EACvB,IAAMiL,EAAc,kBAAMD,IAAqBpQ,GA0B/C,OAzBAgF,EAAesL,qBAAqBlL,GAGhCiL,KAAiBrQ,EAASK,wBAC5BN,EAASwQ,yBAAyBnL,IAIhCiL,KAAiBtQ,MACdA,GAAYC,EAASC,OAExBF,EAAW8I,EAAgB2H,4BAA4BzQ,EAAUC,GAExDyC,EAA2B1C,EAAUC,KAE9C,EAAKyQ,sBACL1Q,OAAWnB,IAKXyR,KAAiBtQ,GAAYC,EAASC,QACxCF,EAASoO,eAAenJ,EAAeM,qBAAqBF,IAGvD,CAAEI,UAASyC,WAAUlI,WAAUC,WAAUmQ,0BAC/C,EAAKrD,mBAnIS,EAsInB4D,KAAO,SAACC,GACN,EAAKV,UACH,SAACJ,GAAW,IACJ5H,EAAa4H,EAAb5H,SAMN,OAJAA,EAASxJ,SAAQ,SAACwB,GAChBA,EAAO2F,GAAK3F,EAAO2F,GAAK+K,KAGnB,CAAE1I,eAEX,WACE,EAAK2H,sBAlJQ,EAuJnBgB,kBAAoB,WAClB,EAAKX,SAAS,CAAEY,gBAAiB,EAAKhB,MAAMgB,kBAxJ3B,EA2JnBC,eAAiB,WACf,EAAKb,UACH,SAACc,GACC,MAAO,CAAEjB,UAAWiB,EAAcjB,aAEpC,WACM,EAAKD,MAAMC,UACb,EAAKH,WAlKM,EAwKnBxC,iBAAmB,SAAClN,EAAgB4G,GAClC,EAAKoJ,UAAS,SAACe,GACb,IAAI/I,EAAW,GAAGgJ,OAAOD,EAAU/I,UAC/BiJ,EAAWrI,EAAgBS,YAAYrJ,GACvCkR,EAAetI,EAAgBQ,eAAe6H,GACjCrI,EAAgBuI,iBAAiBD,EAActK,GAQhE,OANIsK,EAAa/J,UAAUG,OAAS4J,EAAa/J,UAAUG,MAAMrH,MAAQ2G,EACvEsK,EAAa9J,mBAEb8J,EAAaE,aAAaxK,GAGrB,CAAEoB,eAEX3D,QAAQC,IAAItE,EAAQ4G,IAvLH,EA0LnBwI,0BAA4B,WAC1B,EAAKY,UACH,SAACJ,GAAW,IACJrK,EAAgCqK,EAAhCrK,QAASyC,EAAuB4H,EAAvB5H,SAAuB4H,EAAb9P,SAKzB,OAHA,EAAK0Q,2BACM7R,EAEJ,CAAE4G,UAASyC,WAAUlI,cAFjBnB,MAIb,gBApMe,EA0MnB6R,oBAAsB,WACpBhO,EAAsCoG,EAAgBZ,SAAU,UAChExF,EAAsCuC,EAAeQ,QAAS,sBAAuB,2BA5MpE,EA+MnBgB,UAAY,WACV,EAAKyJ,UACH,SAACJ,GAAW,IACJrK,EAAgCqK,EAAhCrK,QAASyC,EAAuB4H,EAAvB5H,SAAUlI,EAAa8P,EAAb9P,SAIzB,OAFA0C,EAAsCwF,EAAU,cAEzC,CAAEzC,UAASyC,WAAUlI,eAE9B,WACE,EAAK+M,uBArNT,EAAK+C,MAAQ,CACX7P,SAAU,KACVD,SAAU,KACVsI,UAAW,GACXwI,gBAAgB,EAChB5I,SAAUiH,EAAUjH,SACpBzC,QAASR,EAAeQ,QACxBsK,UAAU,EACVK,qBAAsB,MAZP,E,iFAkBjBtH,EAAgBZ,SAAW5G,KAAKwO,MAAM5H,SACtC5G,KAAKsO,S,sDAILtO,KAAK4O,UAAS,SAACc,GACb,IAAIvL,EAAoB,GAAGyL,OAAOF,EAAcvL,SAC5CyC,EAAqB8I,EAAc9I,SAQvC,OANAjD,EAAeQ,QAAUA,EACzB/C,EAAsC+C,EAAS,UAC/CyC,EAASxJ,SAAQ,SAACwB,GAChB+E,EAAesM,gCAAgCrR,MAG1C,CAAEuF,gB,6CAIUuL,GACrB,IAAIQ,EAAuBR,EACrB9I,EAAgCsJ,EAAhCtJ,SAAUzC,EAAsB+L,EAAtB/L,QAAsB+L,EAAbxR,SAgBzB,OAdA8I,EAAgB2I,eAChB/O,EAAsC+C,EAAS,QAAS,oBACxDyC,EAASxJ,SAAQ,SAACwB,GACZ4I,EAAgB4I,yBAAyBxR,IAC3C4I,EAAgB6I,UAAUzR,GAE5BA,EAAO0R,kBAEP9I,EAAgB+I,6BAA6B3R,GAC7C+E,EAAe6M,2CAA2C5R,GAE1D+E,EAAe8M,6BAA6B7R,MAGvCsR,I,kDAGmBR,GAC1B,IAAIQ,EAAYR,EAOhB,OANmBQ,EAAbtJ,SAEGxJ,SAAQ,SAACwB,GAChB+E,EAAe6M,2CAA2C5R,MAGrDsR,I,wCAGU,IAAD,OAChBlQ,KAAK4O,UACH,SAACe,GAAD,OAAe,EAAKe,uBAAuBf,MAC3C,kBAAM,EAAKgB,qC,yCAIK,IAAD,OACjB3Q,KAAK4O,UACH,SAACe,GAAD,OAAe,EAAKiB,4BAA4BjB,MAChD,kBAAM,EAAKgB,qC,+BA+IL,IAAD,OACHE,EAAiB7Q,KAAKwO,MAAMgB,eAAiB,gBAAkB,GAEnE,OACE,yBAAK1P,UAAU,QACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CACEqE,QAASnE,KAAKwO,MAAMrK,QACpByC,SAAU5G,KAAKwO,MAAM5H,SACrB3E,QAAS,SAACgF,GAAD,OAAO,EAAK4H,eAAe5H,IACpC+C,KAAMhK,KAAKwO,MAAMxH,UACjBlH,UAAW+Q,KAIf,yBAAK/Q,UAAU,aACb,yBAAKA,UAAU,WACb,4BACEmC,QAAS,WACP,EAAKoN,KAAK,KAEZvP,UAAU,sBAJZ,YAQA,4BAAQmC,QAASjC,KAAKmF,UAAWrF,UAAU,UAA3C,cAIA,4BAAQmC,QAASjC,KAAKuP,kBAAmBzP,UAAU,UAAnD,gBAGA,4BAAQmC,QAASjC,KAAK2O,SAAU7O,UAAU,UAA1C,aAIA,0BAAMA,UAAU,gBAAhB,SAAsCE,KAAKqO,YAC3C,2BAAOvO,UAAU,qBACf,2BAAOsD,KAAK,WAAW0N,QAAS9Q,KAAKwO,MAAMC,SAAUsC,SAAU/Q,KAAKyP,iBACpE,8CAIJ,yBAAK3P,UAAU,yBACb,kBAAC,EAAD,CACEpB,SAAUsB,KAAKwO,MAAM9P,SACrBsP,0BAA2BhO,KAAKgO,0BAChClC,iBAAkB9L,KAAK8L,iBACvBL,iBAAkB,kBAAM,EAAKA,sBAG/B,kBAAC,EAAD,CACE3L,UAAU,WACVyN,aAAcvN,KAAKwO,MAAMM,qBACzB3K,QAASnE,KAAKwO,MAAMrK,QACpBzF,SAAUsB,KAAKwO,MAAM9P,SACrBC,SAAUqB,KAAKwO,MAAM7P,SACrBmN,iBAAkB9L,KAAK8L,iBACvBL,iBAAkB,kBAAM,EAAKA,sBAE/B,+BAEF,kBAAC,EAAD,OAGF,yBAAK3L,UAAU,aACb,kBAAC,EAAD,CACE8G,SAAU5G,KAAKwO,MAAM5H,SACrBkF,iBAAkB9L,KAAK8L,iBACvBL,iBAAkB,kBAAM,EAAKA,4B,GAvSPpJ,IAAMkI,e,MCvBxCyG,iBAAO,kBAAC,GAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.af2be9e6.chunk.js","sourcesContent":["import { Entity } from \"../services/EntitiesValues\";\r\nimport { Square } from \"../services/SquaresService\";\r\n\r\nexport function resetGivenFieldsOnACollection(collection, ...fieldNames) {\r\n  collection.forEach((item) => {\r\n    fieldNames.forEach((fieldName) => {\r\n      item && (item[fieldName] = undefined);\r\n    });\r\n  });\r\n}\r\n\r\nexport function getNumberWithinBoundaries(value: number, min: number, max: number): number {\r\n  if (value < min) value = min;\r\n  if (value > max) value = max;\r\n  return value;\r\n}\r\n\r\nexport function getRandomIntInclusive(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function calculateAngle(x: number, y: number): number {\r\n  let angle: number;\r\n  if (y >= 0) {\r\n    angle = -Math.atan(x / y) * (180 / Math.PI);\r\n  } else if (y < 0) {\r\n    angle = (180 / Math.PI) * (Math.atan(x / -y) + Math.PI);\r\n  }\r\n  return angle;\r\n}\r\n\r\nexport function calculateDistance(x: number, y: number): number {\r\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\r\n}\r\n\r\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\r\n  // see https://www.typescriptlang.org/docs/handbook/mixins.html\r\n  baseCtors.forEach((baseCtor) => {\r\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\r\n      Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));\r\n    });\r\n  });\r\n}\r\n\r\nexport function isSelectedTargeted(selected: Entity, targeted: Square): boolean {\r\n  if (selected && targeted && targeted.entity && selected.name === targeted.entity.name) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport * as Helpers from \"../../helpers\";\r\nimport \"./Square.scss\";\r\nimport { Position, Item } from \"../../services/EntitiesValues\";\r\n\r\nconst DISTANCE_BETWEEN_TILES = 38;\r\n\r\ninterface SquareProps {\r\n  squareId: string;\r\n  icon: string;\r\n\r\n  active: boolean;\r\n  isAvailableDestination: boolean;\r\n  isChosenDestination: boolean;\r\n  isBreathing: boolean;\r\n  isDead: boolean;\r\n  isShooting: boolean;\r\n  isTargeted: boolean;\r\n  isLit: boolean;\r\n  isInTwilightZone: boolean;\r\n\r\n  position: Position;\r\n  targetPosition: Position;\r\n  blood: number;\r\n  items: Item[];\r\n\r\n  weaponType: string;\r\n  onClick: (squareIndex: string) => void;\r\n}\r\n\r\nconst flagsToClassess = {\r\n  active: \"active\",\r\n  isAvailableDestination: \"is-available-destination\",\r\n  isChosenDestination: \"is-chosen-destination\",\r\n  isBreathing: \"breathing\",\r\n  isDead: \"dead\",\r\n  isShooting: \"shooting\",\r\n  isTargeted: \"targeted\",\r\n};\r\n\r\ninterface flagsToClassessInterface {\r\n  active: string;\r\n  isAvailableDestination: string;\r\n  isChosenDestination: string;\r\n  isBreathing: string;\r\n  isDead: string;\r\n  isShooting: string;\r\n  isTargeted: string;\r\n}\r\n\r\n/** Adding classess apropriate to the flags passed in by props */\r\nfunction turnFlagsIntoClasses(props: SquareProps, flagsToClasses: flagsToClassessInterface) {\r\n  let className = \"\";\r\n\r\n  Object.keys(flagsToClassess).forEach((key) => {\r\n    if (props[key]) {\r\n      className += ` ${flagsToClassess[key]} `;\r\n    }\r\n  });\r\n  return className;\r\n}\r\n\r\nclass Square extends React.Component<SquareProps> {\r\n  renderCounter = 0;\r\n\r\n  shouldComponentUpdate = (\r\n    nextProps // only update if props differ\r\n  ) => JSON.stringify(nextProps) !== JSON.stringify(this.props);\r\n\r\n  render() {\r\n    //this.renderCounter++;\r\n    //console.log(\"Rendering Square\", this.renderCounter, this.props);\r\n\r\n    let className = \"square\";\r\n    let localId = `Square${this.props.squareId}`;\r\n\r\n    className += turnFlagsIntoClasses(this.props, flagsToClassess);\r\n\r\n    let randomTime = `${(Math.random() + 0.5).toFixed(2)}s`; // 0.50 - 1.50s\r\n    let animationBreathing = this.props.isBreathing ? `breathing ${randomTime} alternate infinite linear` : \"none\";\r\n\r\n    let targetCoords = this.props.targetPosition;\r\n    let projectileNumber = 5;\r\n    let projectiles = [];\r\n    let customStyle = \"\";\r\n    let bloodClassName = `blood-${localId}`;\r\n    let itemsClassName;\r\n    let itemsNumber;\r\n    let bloodStyle = `\r\n\r\n      .${bloodClassName} {\r\n        background: rgba(255,0,0, ${(this.props.blood / 30).toFixed(2)})\r\n      }\r\n\r\n    `;\r\n    customStyle += bloodStyle;\r\n    bloodClassName += \" blood \";\r\n\r\n    let calcNewAangle = Helpers.calculateAngle;\r\n\r\n    if (this.props.items && this.props.items.length) {\r\n      itemsClassName += ` has-items `;\r\n      itemsNumber = this.props.items.length;\r\n    }\r\n\r\n    if (\r\n      targetCoords &&\r\n      this.props.position &&\r\n      this.props.isShooting &&\r\n      (this.props.targetPosition.x !== this.props.position.x || this.props.targetPosition.y !== this.props.position.y)\r\n    ) {\r\n      if (targetCoords) {\r\n        // TODO: Move this into a helper\r\n\r\n        let distanceToTargetX = DISTANCE_BETWEEN_TILES * (targetCoords.x - this.props.position.x);\r\n        let distanceToTargetY = DISTANCE_BETWEEN_TILES * (targetCoords.y - this.props.position.y);\r\n\r\n        let actualDistance = Helpers.calculateDistance(distanceToTargetX, distanceToTargetY);\r\n\r\n        if (this.props.weaponType === \"lazer\") {\r\n          // TODO: perhaps call to `visualizeShooting(from,to,weaponType)`\r\n          let className = `projectile${localId}_beam`;\r\n          let projectile = \"\";\r\n          let angle = calcNewAangle(distanceToTargetX, distanceToTargetY);\r\n          customStyle = `\r\n            @keyframes pulsing${localId} {\r\n              0%  {opacity: 0.1;}\r\n              100%  {opacity: 1;}\r\n            }\r\n\r\n            @keyframes elongating${localId} {\r\n              0%  {width: ${actualDistance - 20};}\r\n              100%  {width: ${actualDistance + 20};}\r\n            }\r\n\r\n            @keyframes swiping${localId} {\r\n              0%  {transform: rotate(${angle + 90 + -1}deg);}\r\n              50%  {transform: rotate(${angle + 90 + 1}deg);}\r\n              100%  {transform: rotate(${angle + 90 - 1}deg);}\r\n            }\r\n\r\n            .${className} {\r\n              width: ${actualDistance}px;\r\n              height: 3px;\r\n              border-radius: 5px;\r\n              background: #F00;\r\n              position: absolute;\r\n              top: 16px;\r\n              left: 16px;\r\n\r\n              transform: rotate(${angle + 90}deg);\r\n              transform-origin: left 0px;\r\n              animation: pulsing${localId} 0.1s linear infinite,\r\n              elongating${localId} 1s linear alternate infinite,\r\n              swiping${localId} 1s linear alternate infinite;\r\n              box-shadow: 0 0 5px 5px white;\r\n              z-index: 10;\r\n            }\r\n            `;\r\n          projectiles.push(\r\n            <div key={className} className={className}>\r\n              {projectile}\r\n            </div>\r\n          );\r\n        } else {\r\n          customStyle = `\r\n            @keyframes shooting${localId} {\r\n              0%   {transform: scale(1);}\r\n              100% {transform: translate(\r\n                ${36 * (targetCoords.x - this.props.position.x)}px,\r\n                ${36 * (targetCoords.y - this.props.position.y)}px\r\n              )}\r\n            }\r\n            `;\r\n\r\n          while (projectileNumber--) {\r\n            customStyle += `\r\n            .projectile${localId}_${projectileNumber} {\r\n              position: absolute;\r\n              top: -5px;\r\n              left: 0px;\r\n              width: 100%;\r\n              height: 100%;\r\n              line-height: 34px;\r\n              font-size: 30px;\r\n              animation: shooting${localId} 0.5s linear infinite;\r\n              animation-delay: ${projectileNumber - 1 * 0.3}s;\r\n              color: white;\r\n            }`;\r\n          }\r\n          let projectile = this.props.isShooting ? \".\" : \"\";\r\n\r\n          projectileNumber = 3;\r\n\r\n          while (projectileNumber--) {\r\n            let className = `projectile projectile${localId}_${projectileNumber}`;\r\n            projectiles.push(\r\n              <div key={className} className={className}>\r\n                {projectile}\r\n              </div>\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let { blood, icon } = this.props;\r\n\r\n    if (!this.props.isLit) {\r\n    }\r\n\r\n    if (!this.props.isLit && this.props.isInTwilightZone) {\r\n      className += \" is-in-twilight-zone \";\r\n    }\r\n\r\n    if (!this.props.isLit && !this.props.isInTwilightZone) {\r\n      className += \" dark \";\r\n      blood = null;\r\n      itemsNumber = null;\r\n      bloodClassName = null;\r\n    }\r\n\r\n    return (\r\n      <button className={className} onClick={() => this.props.onClick(this.props.squareId)}>\r\n        <div className={bloodClassName}>{blood}</div>\r\n        <div className={itemsClassName}>{itemsNumber}</div>\r\n        <div\r\n          className=\"content\"\r\n          style={{\r\n            animation: animationBreathing,\r\n            color: \"transparent\",\r\n          }}\r\n        >\r\n          {icon}\r\n        </div>\r\n        <style>{customStyle}</style>\r\n        {projectiles}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Square;\r\n","class MessageServiceClass {\n  messages: string[] = [];\n  send(message: string) {\n    this.messages.push(message);\n  }\n}\n\nconst MessageService = new MessageServiceClass();\n\nexport default MessageService;\n","import { applyMixins } from \"../helpers\";\nimport EntitiesService from \"./EntitiesService\";\nimport { SquaresService } from \".\";\nimport { Square } from \"./SquaresService\";\nimport * as Helpers from \"../helpers\";\nimport Message from \"../services/MessageService\";\n\nexport class Item {\n  name: string = \"\";\n}\n\nexport class Weapon extends Item {\n  causesBleeding = 0;\n  range = 0;\n  damage = 0;\n}\n\nexport class RangedWeapon extends Weapon {\n  rounds: number | any = 0;\n  maxRounds = 5;\n\n  fire() {\n    this.rounds--;\n    console.log(\"Firing ranged weapon. Damage: \", this.damage);\n    return this.damage;\n  }\n\n  get isAbleToFire() {\n    return this.rounds > 0;\n  }\n\n  reload() {\n    this.rounds = this.maxRounds;\n  }\n}\n\nclass Rifle extends RangedWeapon {\n  type = \"projectile\";\n  range = 4;\n  damage = 1;\n  causesBleeding = 4;\n}\n\nclass Lazer extends RangedWeapon {\n  type = \"lazer\";\n  range = 6;\n  damage = 5;\n  causesBleeding = 0;\n}\n\nclass M16 extends Rifle {\n  name = \"M16\";\n  rounds = 15;\n  maxRounds = 20;\n  damage = 2;\n}\n\nclass L30 extends Lazer {\n  name = \"Assault Lazer Cannon\";\n  rounds = 3;\n  maxRounds = 3;\n  damage = 10;\n}\n\nclass M40 extends Rifle {\n  name = \"M41A Pulse Rifle\";\n  rounds = 40;\n  maxRounds = 40;\n  damage = 1;\n}\n\n/** Position on a grid */\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nclass Identifiable {\n  name: string = \"An Entity\";\n  icon: string = \"E\";\n}\n\nexport class Positionable {\n  position: Position = { x: undefined, y: undefined };\n\n  get square(): Square {\n    let square = SquaresService.getSquare(this.position.x, this.position.y);\n    return square;\n  }\n}\n\nclass Movable extends Identifiable {\n  moveDestination: Position;\n\n  setMoveDestinationSquare(squareIndex: number) {\n    this.setMoveDestinationPosition(SquaresService.targetSquarePosition(squareIndex));\n  }\n\n  setMoveDestinationPosition(targetPosition: Position) {\n    let targetSquare = SquaresService.getSquare(targetPosition.x, targetPosition.y);\n    if (!targetSquare.entity || targetSquare.entity.isDead) {\n      this.moveDestination = targetPosition;\n      Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\");\n      targetSquare.isChosenDestination = true;\n    } else {\n      Message.send(`${this.name} cannot move into square ${targetPosition.x} ${targetPosition.y}`);\n    }\n  }\n}\n\nexport class Mortal extends Positionable {\n  hp: number = 100;\n  maxHp: number = 100;\n  get isDead(): boolean {\n    return this.hp <= 0;\n  }\n}\n\nexport class Bleedable extends Mortal {\n  bleeding: number;\n  bleedingReductionPerTurn: number = 1;\n  bleed(): number {\n    let entity = this;\n    let bloodReleased = 0;\n    if (entity.bleeding && entity.hp > 0) {\n      bloodReleased = entity.bleeding;\n      entity.hp -= bloodReleased;\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n    }\n    return bloodReleased;\n  }\n\n  bleedExternally() {\n    if (!this.bleeding) return;\n    let entity = this;\n    let bloodReleased = this.bleed();\n    let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\n    SquaresService.addBlood(square, bloodReleased);\n  }\n}\n\nclass Breathing extends Mortal {\n  isSupposedToBeBreathing: boolean = undefined;\n  get isBreathing(): boolean {\n    return this.hp > 0 && this.isSupposedToBeBreathing;\n  }\n  set isBreathing(value: boolean) {\n    this.isSupposedToBeBreathing = value;\n  }\n}\n\nclass Combative extends Identifiable {\n  targetPosition: Position;\n  isShooting?: boolean;\n  ceaseFire?: boolean;\n  hasWeapon?: boolean;\n  attackPosition(targetedSquarePosition: Position) {\n    if (this.hasWeapon) {\n      this.targetPosition = targetedSquarePosition;\n      this.isShooting = true;\n    } else {\n      Message.send(`${this.name} no fkin weapon in hands`);\n    }\n  }\n}\n\nexport class HavingInventory {\n  inventory: any[];\n  takeFromInventory(itemName: string): RangedWeapon {\n    let actualItemIndex = this.inventory.findIndex((item) => item.name == itemName);\n    let actualItem = this.inventory.splice(actualItemIndex, 1)[0];\n    //let newInventory = [].concat(this.inventory)\n    //this.inventory = newInventory\n    return actualItem;\n  }\n  addToInventory(item: Item) {\n    if (!this.inventory) {\n      this.inventory = [];\n    }\n    this.inventory.push(item);\n  }\n}\n\nclass HavingEquipment extends HavingInventory {\n  equipment: any;\n  hasWeapon?: boolean;\n\n  equipInHands(itemName: string) {\n    this.unEquipFromHands();\n    let item = this.takeFromInventory(itemName);\n    this.equipment.hands = item;\n    if (item instanceof Weapon) {\n      this.hasWeapon = true;\n    }\n  }\n\n  unEquipFromHands() {\n    if (this.equipment.hands) {\n      this.inventory.push(this.equipment.hands);\n      this.equipment.hands = null;\n    }\n  }\n}\n\nexport class Entity {\n  // Extended by mixins below\n  constructor(...props) {\n    Object.assign(this, ...props);\n  }\n  isFriendly?: boolean;\n  active?: boolean;\n}\n\n/************************************************************/\n/* Always update both lists */\n\nexport interface Entity\n  extends Identifiable,\n    Positionable,\n    Mortal,\n    Bleedable,\n    Movable,\n    Breathing,\n    Combative,\n    HavingInventory,\n    HavingEquipment {}\napplyMixins(Entity, [\n  Identifiable,\n  Positionable,\n  Mortal,\n  Bleedable,\n  Movable,\n  Breathing,\n  Combative,\n  HavingInventory,\n  HavingEquipment,\n]);\n\n/************************************************************/\n\nconst entitiesInitialValues = [\n  {\n    name: \"John Rambo\",\n    age: 40,\n    hp: 95,\n    maxHp: 100,\n    icon: \"😠\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 8, y: 8 },\n    inventory: [{ name: \"KA-BAR\" }, new M16()],\n    equipment: { head: \"Red Bandana\", hands: null },\n  },\n  {\n    name: \"Ellen Replay\",\n    age: 30,\n    hp: 50,\n    maxHp: 65,\n    icon: \"👩\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 1, y: 8 },\n    inventory: [new M40(), { name: \"Motion Detector\" }],\n    equipment: { head: \"Afro\" },\n  },\n  {\n    name: \"Lazer Blady\",\n    age: 60,\n    hp: 75,\n    maxHp: 100,\n    icon: \"🧑🏻\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 4, y: 8 },\n    inventory: [new L30(), new M16()],\n    equipment: {},\n  },\n  {\n    name: \"Lux Aeterna\",\n    age: 20,\n    hp: 50,\n    maxHp: 50,\n    icon: \"👱‍♀️\",\n    isBreathing: true,\n    isFriendly: true,\n    position: { x: 1, y: 1 },\n    inventory: [new L30()],\n    equipment: {},\n  },\n  {\n    name: \"Robot\",\n    age: 1,\n    hp: 50,\n    maxHp: 50,\n    icon: \"🤖\",\n    isBreathing: false,\n    position: { x: 4, y: 5 },\n  },\n  {\n    name: \"Octo\",\n    age: 8,\n    hp: 200,\n    maxHp: 200,\n    icon: \"🐙\",\n    isBreathing: true,\n    position: { x: 8, y: 2 },\n    bleedingReductionPerTurn: 0,\n    bleeding: 1,\n  },\n  {\n    name: \"Squid\",\n    age: 5,\n    hp: 100,\n    maxHp: 100,\n    icon: \"🦑\",\n    isBreathing: true,\n    position: { x: 5, y: 5 },\n  },\n  {\n    name: \"Ant\",\n    age: 1,\n    hp: 45,\n    maxHp: 50,\n    icon: \"🐜\",\n    isBreathing: true,\n    position: { x: 7, y: 6 },\n  },\n  {\n    name: \"Spider\",\n    age: 1,\n    hp: 100,\n    maxHp: 150,\n    icon: \"🕷️\",\n    isBreathing: true,\n    position: { x: 9, y: 3 },\n    bleedingReductionPerTurn: 1,\n  },\n  {\n    name: \"Mosquito\",\n    age: 1,\n    hp: 12,\n    maxHp: 20,\n    icon: \"🦟\",\n    isBreathing: true,\n    position: { x: 2, y: 7 },\n  },\n  {\n    name: \"Microbe\",\n    age: 1,\n    hp: 1,\n    maxHp: 5,\n    icon: \"🦠\",\n    isBreathing: true,\n    position: { x: 3, y: 5 },\n  },\n];\n\nexport const structures = {\n  box: {\n    name: \"box\",\n    icon: \"📦\",\n    hp: 50,\n    maxHp: 70,\n    isBreathing: false,\n    position: { x: 4, y: 5 },\n  },\n};\n\nconst entities = entitiesInitialValues.map((entry) => new Entity(entry));\n\nexport default entities;\n","import * as Helpers from \"../helpers/Helpers\";\nimport { Entity, Position, Item, RangedWeapon, HavingInventory } from \"./EntitiesValues\";\n\nexport interface Square {\n  entity?: Entity;\n  blood?: number;\n  isAvailableDestination?: boolean;\n  isChosenDestination?: boolean;\n  isTargeted?: boolean;\n  isLit?: boolean;\n  isInTwilightZone?: boolean;\n  // items?: RangedWeapon[];\n  addItem(item: Item): void;\n}\n\nexport class Square extends HavingInventory implements Square {\n  addItem(item: RangedWeapon) {\n    this.addToInventory(item);\n  }\n  get items() {\n    return this.inventory;\n  }\n}\n\nclass SquaresServiceClass {\n  arenaSize: number = 10;\n\n  squares: Square[] = [];\n\n  constructor() {\n    let i = this.arenaSize * this.arenaSize;\n    while (i-- !== 0) {\n      this.initializeSquareIfEmpty(i);\n    }\n  }\n\n  getSquare(x: number, y: number): Square {\n    return this.squares[this.targetSquareIndex(x, y)];\n  }\n\n  setSquare(x: number, y: number, value): void {\n    this.squares[this.targetSquareIndex(x, y)] = value;\n  }\n\n  targetSquareIndex(x: number, y: number): number {\n    return y * this.arenaSize + x;\n  }\n\n  targetSquarePosition(squareIndex: number): Position {\n    let x: number, y: number;\n    y = Math.floor(squareIndex / this.arenaSize);\n    x = squareIndex % this.arenaSize;\n    return { x, y };\n  }\n\n  setEntityWithinApropriateSquare(entity: Entity): void {\n    this.setEntityWithinASquare(entity.position.x, entity.position.y, entity);\n  }\n\n  setEntityWithinASquare(x: number, y: number, entity: Entity) {\n    let squareIndex: number = this.targetSquareIndex(x, y);\n    this.initializeSquareIfEmpty(squareIndex);\n    this.squares[squareIndex].entity = entity;\n  }\n\n  addBlood(square: Square, amount: number) {\n    if (!square.blood) {\n      square.blood = amount;\n    } else {\n      square.blood += amount;\n    }\n  }\n\n  markSquareAsTargeted(squareIndex: number): void {\n    Helpers.resetGivenFieldsOnACollection(this.squares, \"isTargeted\");\n    this.initializeSquareIfEmpty(squareIndex);\n    this.squares[squareIndex].isTargeted = true;\n  }\n\n  initializeSquareIfEmpty(squareIndex: number) {\n    if (!this.squares[squareIndex]) {\n      this.squares[squareIndex] = new Square();\n    }\n  }\n\n  markAvailableDestinationsForSelectedEntity(entity: Entity): void {\n    if (entity.active) {\n      let { x, y } = entity.position;\n\n      Helpers.resetGivenFieldsOnACollection(this.squares, \"isAvailableDestination\");\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize || (i === x && j === y)) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n\n          square.isAvailableDestination = true;\n          this.setSquare(i, j, square);\n        }\n      }\n    }\n  }\n  castLightsFromFriendlyEntity(entity: Entity): void {\n    if (entity.isFriendly) {\n      let { x, y } = entity.position;\n\n      for (let j = y - 2; j <= y + 2; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 2; i <= x + 2; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n\n          square.isInTwilightZone = true;\n          this.setSquare(i, j, square);\n        }\n      }\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquare(i, j);\n\n          square.isLit = true;\n          this.setSquare(i, j, square);\n        }\n      }\n    }\n  }\n}\n\nlet SquaresService = new SquaresServiceClass();\nexport default SquaresService;\n","import entitiesService from \"./EntitiesService\";\r\nimport squaresService from \"./SquaresService\";\r\n\r\nexport let EntitiesService = entitiesService;\r\nexport let SquaresService = squaresService;\r\n","import { default as SquaresService, Square } from \"./SquaresService\";\nimport * as Helpers from \"../helpers/Helpers\";\nimport {\n  Entity,\n  Position,\n  Weapon,\n  RangedWeapon,\n  Mortal,\n  Positionable,\n  Bleedable,\n  HavingInventory,\n} from \"../services/EntitiesValues\";\nconst arenaSize: number = 10;\n\nclass EntitiesServiceClass {\n  entities: Entity[];\n  selected: Entity;\n\n  getEntityId(entity: Entity): string {\n    return entity.name;\n  }\n\n  findEntityById(id: string): Entity {\n    let result: Entity = this.entities.filter((entity) => entity.name === id)[0];\n    return result;\n  }\n\n  findItemOnEntity(entity: HavingInventory, id: string) {\n    let result = entity.inventory.filter((item) => item.name === id)[0];\n    return result;\n  }\n\n  moveEntityRandomly(entity: Entity) {\n    if (entity.isDead) return;\n\n    let oldPositionX = entity.position.x;\n    let oldPositionY = entity.position.y;\n\n    entity.position.x = entity.position.x + Helpers.getRandomIntInclusive(-1, 1);\n    entity.position.y = entity.position.y + Helpers.getRandomIntInclusive(-1, 1);\n\n    entity.position.x = Helpers.getNumberWithinBoundaries(entity.position.x, 0, arenaSize - 1);\n    entity.position.y = Helpers.getNumberWithinBoundaries(entity.position.y, 0, arenaSize - 1);\n\n    let newSquare = SquaresService.getSquare(entity.position.x, entity.position.y);\n\n    if (newSquare && newSquare.entity) {\n      // if square occupiec, reverse the move\n      entity.position.x = oldPositionX;\n      entity.position.y = oldPositionY;\n    }\n  }\n\n  stopBreathingForKilledEntity(entity: Entity): Entity {\n    if (entity && entity.hp <= 0) {\n      entity.isBreathing = false;\n      entity.hp = 0;\n    }\n    return entity;\n  }\n\n  getEntitiesAtGivenPosition(targetPosition: Position): Entity[] {\n    return this.entities.filter((potentialTargetEntity: Entity): boolean => {\n      return (\n        potentialTargetEntity.position.x === targetPosition.x && potentialTargetEntity.position.y === targetPosition.y\n      );\n    });\n  }\n\n  selectEntityFromGivenSquare(selected: Entity, targeted: Square): Entity {\n    if (selected && targeted && targeted.entity) {\n      selected.active = false;\n    }\n    if (targeted && targeted.entity) {\n      selected = targeted.entity;\n      selected.active = true;\n    }\n\n    return selected;\n  }\n\n  setSelected(selected: Entity, value: boolean): Entity {\n    let selectedInEntities = this.findEntityById(this.getEntityId(selected));\n    if (value) {\n      selected.active = value;\n    } else {\n      selected = null;\n      console.log(\"Nullified:\", selected);\n    }\n    selectedInEntities.active = value;\n    return selected;\n  }\n\n  checkAmmoAndCalculateDamageApplied(entity: Entity): number {\n    let damageApplied: number = 0;\n    let weapon: RangedWeapon = entity.equipment && entity.equipment.hands;\n\n    if (!weapon) return 0;\n\n    if (weapon.isAbleToFire) {\n      damageApplied = weapon.fire();\n    } else {\n      weapon.rounds = \"empty\";\n      entity.isShooting = false;\n    }\n\n    return damageApplied;\n  }\n\n  fireAShot(entity: Entity) {\n    if (entity.ceaseFire) {\n      entity.isShooting = false;\n      entity.ceaseFire = false;\n      return;\n    }\n    let damageApplied = this.checkAmmoAndCalculateDamageApplied(entity);\n    let targetEntities = this.getEntitiesAtGivenPosition(entity.targetPosition);\n    targetEntities.forEach((targetEntity) => {\n      this.applyDamageToTargetEntity(targetEntity, damageApplied);\n      this.ceaseFireNextTickIfTargetIsKilled(entity, targetEntity);\n    });\n  }\n\n  applyDamageToTargetEntity(targetEntity: Entity, damage: number) {\n    if (damage) {\n      targetEntity.hp -= damage;\n      targetEntity.bleeding = 5;\n    }\n  }\n\n  ceaseFireNextTickIfTargetIsKilled(entity: Entity, targetEntity: Entity): void {\n    if (targetEntity.hp < 0) {\n      entity.ceaseFire = true;\n    }\n  }\n\n  isEntityShootingProperly(entity: Entity): boolean {\n    return (\n      entity.isShooting &&\n      entity.targetPosition &&\n      (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\n    );\n  }\n\n  applyEffectsOfBleeding(entity: Entity): Entity {\n    // TODO: move to a \"bleed\" method\n    if (entity.bleeding && entity.hp > 0) {\n      entity.hp -= entity.bleeding;\n      let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\n      SquaresService.addBlood(square, entity.bleeding);\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n    }\n    return entity;\n  }\n\n  moveEntityIntoChosenDestination(entity: Entity): Entity {\n    if (!entity.isDead && entity.moveDestination) {\n      let chosenDestinationSquare: Square = SquaresService.getSquare(\n        entity.moveDestination.x,\n        entity.moveDestination.y\n      );\n\n      entity.position = entity.moveDestination;\n      delete entity.moveDestination;\n      chosenDestinationSquare.isChosenDestination = undefined;\n    }\n    return entity;\n  }\n\n  setMoveDestinationOnASelectedEntity(selected: Entity, targetedSquarePosition: Position): void {\n    selected.moveDestination = targetedSquarePosition;\n  }\n\n  moveEntities(): void {\n    this.entities.forEach((entity) => this.moveEntityIntoChosenDestination(entity));\n    let JR: Entity = this.findEntityById(\"John Rambo\");\n    let OP: Entity = this.findEntityById(\"Squid\");\n    let OC: Entity = this.findEntityById(\"Octo\");\n    this.moveEntityRandomly(JR);\n    this.moveEntityRandomly(OP);\n    this.moveEntityRandomly(OC);\n  }\n}\n\nlet EntitiesService = new EntitiesServiceClass();\nexport default EntitiesService;\n","import React from \"react\";\r\nimport Square from \"../Square\";\r\nimport \"./Board.scss\";\r\nimport { Entity } from \"../../services/EntitiesValues\";\r\nimport { SquaresService } from \"../../services\";\r\n\r\ninterface BoardProps {\r\n  onClick(i: number);\r\n  squares: any;\r\n  entities: Entity[];\r\n  className: string;\r\n  size: number;\r\n}\r\nexport default class Board extends React.PureComponent<BoardProps> {\r\n  renderCounter = 0;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(i) {\r\n    console.log(\"Handles Click on Board\", i);\r\n    this.props.onClick(i);\r\n  }\r\n\r\n  renderSquare(i, rowId, colId) {\r\n    /*\r\n    We pass one and the same function to all the Squares when rendering,\r\n    so they do not detect getting a new fat-arrow function as a change of props.\r\n\r\n    This is CRUCIAL to only rerender squares with changed values.\r\n\r\n    Additionally, we need to ensure that Unchanged squares have the same values of objects passed down here.\r\n    */\r\n    let square = this.props.squares[i];\r\n    let entity = this.props.squares[i] && this.props.squares[i].entity;\r\n    return (\r\n      <Square\r\n        key={i}\r\n        squareId={i}\r\n        onClick={this.handleClick}\r\n        icon={entity && entity.icon}\r\n        active={entity && entity.active}\r\n        isBreathing={entity && entity.isBreathing}\r\n        isDead={entity && entity.isDead}\r\n        isShooting={entity && entity.isShooting}\r\n        weaponType={entity && entity.equipment && entity.equipment.hands && entity.equipment.hands.type}\r\n        position={entity && entity.position}\r\n        targetPosition={entity && entity.targetPosition}\r\n        blood={square && square.blood}\r\n        items={square && square.items}\r\n        isAvailableDestination={square && square.isAvailableDestination}\r\n        isChosenDestination={square && square.isChosenDestination}\r\n        isTargeted={square && square.isTargeted}\r\n        isLit={square.isLit}\r\n        isInTwilightZone={square.isInTwilightZone}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // console.log(\"Rendering Board. #\", this.renderCounter++);\r\n\r\n    // Initial values for the Board\r\n    let cellId = 0;\r\n    let rowId = 0;\r\n    let colId;\r\n    let floatingEntities = this.props.entities.map((entity) => {\r\n      let squareDistance = 38;\r\n      let className = \" entity-piece \";\r\n      if (SquaresService.getSquare(entity.position.x, entity.position.y).isLit) className += \" is-lit \";\r\n      if (SquaresService.getSquare(entity.position.x, entity.position.y).isInTwilightZone) {\r\n        className += \" is-in-twilight-zone \";\r\n      }\r\n      return (\r\n        <div\r\n          key={entity.name}\r\n          className={className}\r\n          style={{\r\n            left: squareDistance / 2 - 4 + squareDistance * entity.position.x,\r\n            top: squareDistance / 2 - 4 + squareDistance * entity.position.y,\r\n            position: \"absolute\",\r\n            fontSize: \"1.5em\",\r\n            transition: \"all 0.5s\",\r\n          }}\r\n        >\r\n          {entity.icon}\r\n        </div>\r\n      );\r\n    });\r\n    let rows = Array(this.props.size)\r\n      .fill(null)\r\n      .map((row, number) => {\r\n        colId = 0;\r\n        let cells = Array(this.props.size)\r\n          .fill(null)\r\n          .map((cell, number) => {\r\n            return this.renderSquare(cellId++, rowId, colId++);\r\n          });\r\n        return (\r\n          <div key={rowId++} className=\"board-row\">\r\n            {cells}\r\n          </div>\r\n        );\r\n      });\r\n\r\n    let className = \"board \" + this.props.className;\r\n    return (\r\n      <div className={className}>\r\n        {rows}\r\n        {floatingEntities}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./LinearDisplay.scss\";\n\ninterface LinearDisplayProps {\n  className?: string;\n  current: number;\n  max: number;\n  title?: string;\n  label?: string;\n}\n\nexport default function LinearDisplay(props: LinearDisplayProps) {\n  let className = `linear-display ${props.className || \"\"}`;\n  let percentage = ~~((props.current * 100) / props.max);\n  let overload = percentage > 100;\n  if (overload) {\n    percentage = 100;\n    className += \" overload \";\n  }\n\n  let progressStyle = {\n    width: `${percentage}%`,\n  };\n  let title = props.title || `${props.current}/${props.max}`;\n\n  let amount = props.current;\n\n  let divider = 1;\n  if (props.max >= 40 && props.max < 100) {\n    divider = 5;\n  } else if (props.max >= 100) {\n    divider = 10;\n  }\n\n  amount = amount / divider;\n\n  let gridSize = 100 / amount;\n\n  let color = `rgba(200,200,200,0.4)`;\n  color = `black`;\n  let progressGridStyle = {\n    backgroundSize: `${gridSize}% 100%`,\n    backgroundImage: `\n      linear-gradient(to left, ${color} 1px, transparent 1px)\n    `,\n  };\n\n  Object.assign(progressStyle, progressGridStyle);\n\n  return (\n    <div className={className}>\n      <div className=\"linear-display__label\">{props.label}:&nbsp;</div>\n      <div className=\"linear-display__bar-container\" title={title}>\n        <div className=\"linear-display__bar-progress\" style={progressStyle}>\n          <span className=\"linear-display__bar-progress-text\">\n            {props.current}\n            {overload ? \"/\" + props.max : \"\"}&nbsp;\n          </span>\n        </div>\n      </div>\n      <div>&nbsp;</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./InventoryList.scss\";\nimport { Item, Entity, RangedWeapon } from \"../../services/EntitiesValues\";\n\ninterface InventoryListProps {\n  className?: string;\n  label: string;\n  title: string;\n  onClick(itemName: string);\n  onDrop(itemName: string);\n  inventory: RangedWeapon[]; //\n  processInterface: Function;\n}\n\nexport default function InventoryList(props: InventoryListProps) {\n  const className = `inventory-list ${props.className || \"\"}`;\n\n  if (!props.inventory) {\n    return null;\n  }\n  let reloadButton;\n  let dropButton;\n  const inventoryItems = props.inventory.map((item) => {\n    if (item.reload && props.onClick) {\n      // has reload capability\n      let className = \" inventory-list__reload-button \";\n\n      if (item.rounds === 0 || item.rounds === \"empty\") {\n        className += \" inventory-list__reload-button--empty \";\n      } else if (item.rounds < item.maxRounds) {\n        className += \" inventory-list__reload-button--partial \";\n      }\n      reloadButton = (\n        <button\n          className={className}\n          onClick={() => {\n            item.reload();\n            //props.onClick(item.name); // this only to trigger the render\n            props.processInterface();\n          }}\n        >\n          Reload\n        </button>\n      );\n    } else {\n      reloadButton = null;\n    }\n    if (props.onDrop) {\n      dropButton = (\n        <button\n          className=\"inventory-list__drop-button\"\n          onClick={() => {\n            props.onDrop(item.name);\n          }}\n        >\n          Drop\n        </button>\n      );\n    }\n\n    return (\n      <div key={item.name}>\n        <div onClick={() => props.onClick(item.name)} key={item.name} className=\"inventory-list__item\">\n          <span>{item.name}</span>\n        </div>\n        {reloadButton}\n        {dropButton}\n      </div>\n    );\n  });\n\n  return (\n    <div className={className}>\n      <div className=\"inventory-list__label\">\n        {props.label}\n        :&nbsp;\n      </div>\n      <div className=\"inventory-list__container\" title={props.title}>\n        {inventoryItems}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport LinearDisplay from \"./LinearDisplay\";\nimport InventoryList from \"./InventoryList\";\nimport \"./EntityCard.scss\";\nimport SquaresService from \"../../services/SquaresService\";\nimport { Entity, RangedWeapon, Item } from \"../../services/EntitiesValues\";\n\ninterface EntityCardProps {\n  entity: Entity;\n  key?: string;\n  onInventoryClick?(entity: Entity, itemName: string);\n  processInterface?: Function;\n}\n\nclass EntityCard extends React.Component<EntityCardProps> {\n  renderCount = 0;\n  handleInventoryClick = (itemName: string): void => {\n    this.props.onInventoryClick(this.props.entity, itemName);\n  };\n\n  renderAmmo = (inHands: RangedWeapon) => {\n    if (inHands) {\n      return <LinearDisplay label=\"Rounds\" current={inHands.rounds} max={inHands.maxRounds} />;\n    }\n  };\n\n  onDrop = (itemName: string) => {\n    let { entity } = this.props;\n    entity.unEquipFromHands();\n    let item: Item = entity.takeFromInventory(itemName);\n    entity.square.addItem(item);\n    this.props.onInventoryClick(this.props.entity, \"\"); // just to rerender\n  };\n\n  render() {\n    // console.log(\"Rendering EntityView. #\", this.renderCount++);\n    let { entity } = this.props;\n    if (!entity) return null;\n    /*\n      FIXME: Below should be separated into several sub-components\n      Each sub-component should receive flat data (position, hp, ...)\n     */\n    let className = \" entity \";\n    if (entity.active) {\n      className += \" active \";\n    }\n\n    let { isDead } = entity;\n    let lifeSigns = isDead ? \" DEAD \" : \" ALIVE \";\n    className += lifeSigns;\n    let inHands = entity.equipment && entity.equipment.hands;\n    let inHandsArray = (inHands && [inHands]) || [];\n\n    return (\n      <div className={className}>\n        <div>\n          <div className=\"position\" title=\"Position\">\n            <span>\n              {\" \"}\n              {entity.position.x} {entity.position.y}{\" \"}\n            </span>\n          </div>\n\n          <div className=\"portrait\">{entity.icon}</div>\n        </div>\n        <strong title=\"Name\">{entity.name}</strong>\n        <br />\n        {` `}\n        {lifeSigns}\n        <br />\n\n        <div\n          style={{\n            clear: \"both\",\n            display: \"inline-block\",\n            textAlign: \"right\",\n          }}\n        >\n          <LinearDisplay label=\"HP\" current={entity.hp} max={entity.maxHp} />\n          <br />\n          {this.renderAmmo(inHands)}\n        </div>\n        <InventoryList\n          label=\"Equipped\"\n          title=\"In hands\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          inventory={inHandsArray}\n          processInterface={() => this.props.processInterface()}\n        />\n        <InventoryList\n          label=\"Inventory\"\n          title=\"In backpack\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          inventory={entity.inventory}\n          processInterface={() => this.props.processInterface()}\n        />\n      </div>\n    );\n  }\n}\n\nexport default EntityCard;\n","import React from \"react\";\nimport EntityCard from \"../EntityCard\";\nimport \"./EntitiesList.scss\";\nimport { Entity } from \"../../services/EntitiesValues\";\n\ninterface ListOfEntitiesProps {\n  entities: Entity[];\n  onInventoryClick: any;\n  processInterface: Function;\n}\n\nexport default class ListOfEntities extends React.Component<ListOfEntitiesProps> {\n  renderCounter = 0;\n  render() {\n    // console.log(\"Rendering EntitiesList #\", this.renderCounter++);\n\n    let entitiesFriendly = this.props.entities\n      .filter((entity) => entity.isFriendly)\n      .map((obj) => {\n        return (\n          <EntityCard\n            onInventoryClick={this.props.onInventoryClick}\n            entity={obj}\n            key={obj.name}\n            processInterface={() => this.props.processInterface()}\n          />\n        );\n      });\n\n    let entitiesUnfriendly = this.props.entities\n      .filter((entity) => !entity.isFriendly)\n      .map((obj) => {\n        return <EntityCard entity={obj} key={obj.name} processInterface={() => this.props.processInterface()} />;\n      });\n\n    return (\n      <>\n        <h4 className=\"list-of-entities__header\">List of Entities:</h4>\n        <div className=\"list-of-entities\">{entitiesFriendly}</div>\n        <div className=\"list-of-entities\">{entitiesUnfriendly}</div>\n      </>\n    );\n  }\n}\n","import React, { ReactElement, DOMElement } from \"react\";\nimport * as Helpers from \"../../helpers/Helpers\";\nimport { SquaresService, EntitiesService } from \"../../services\";\nimport EntityCard from \"../EntityCard/EntityCard\";\nimport { Square } from \"../../services/SquaresService\";\nimport entities, { Entity, Position, structures } from \"../../services/EntitiesValues\";\nimport InventoryList from \"../EntityCard/InventoryList\";\n\ninterface TargetedSquareInfoProps {\n  className: string;\n  squareNumber: number;\n  squares: Square[];\n  selected: Entity;\n  targeted: Square;\n  onInventoryClick(entity: Entity, itemName: string);\n  processInterface: Function;\n}\n\nexport default class TargetedSquareInfo extends React.Component<TargetedSquareInfoProps> {\n  boxSerialNumber: number = 0;\n\n  onItemClick = (itemName: string) => {\n    let { selected, targeted } = this.props;\n    if (Helpers.isSelectedTargeted(selected, targeted)) {\n      let item = targeted.takeFromInventory(itemName);\n      selected.addToInventory(item);\n    }\n    this.props.processInterface();\n  };\n\n  onMoveClick(selected: Entity, targetedSquarePosition: Position) {\n    //EntitiesService.setMoveDestinationOnASelectedEntity(selected, targetedSquarePosition);\n    selected.setMoveDestinationPosition(targetedSquarePosition);\n    let targetedSquare: Square = SquaresService.getSquare(targetedSquarePosition.x, targetedSquarePosition.y);\n\n    targetedSquare.isChosenDestination = true;\n    this.props.processInterface();\n  }\n\n  onAttackClick(selected: Entity, targetedSquarePosition: Position) {\n    selected.attackPosition(targetedSquarePosition);\n    this.props.processInterface();\n  }\n\n  onAddStructureClick(targetedSquarePosition: Position) {\n    let { targeted } = this.props;\n\n    let box = Object.assign({}, structures.box);\n    let targetPosition = Object.assign({}, targetedSquarePosition);\n    box.position = targetPosition;\n    box.name += this.boxSerialNumber++;\n    let newBox = new Entity(box);\n\n    entities.push(newBox);\n    console.log(entities);\n    this.props.processInterface();\n  }\n\n  render() {\n    if (!this.props.targeted) {\n      return null;\n    }\n\n    //this.props.squareNumber\n    let inspectedSquare = this.props.targeted;\n    let selected: Entity = this.props.selected;\n    let targeted: Square = this.props.targeted;\n\n    let targetedSquarePosition = SquaresService.targetSquarePosition(this.props.squareNumber);\n\n    let entityInfo;\n    let distanceInfo;\n    let positionInfo;\n    let bloodInfo;\n    let availableActions = [];\n    let items;\n    let editorButtons;\n\n    editorButtons = (\n      <button onClick={() => this.onAddStructureClick(targetedSquarePosition)} className=\"button\">\n        Add structure\n      </button>\n    );\n\n    if (targeted && targeted.entity && !Helpers.isSelectedTargeted(this.props.selected, this.props.targeted)) {\n      entityInfo = (\n        <EntityCard\n          onInventoryClick={this.props.onInventoryClick}\n          entity={targeted.entity}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (targeted && targeted.items) {\n      items = (\n        <InventoryList\n          label=\"Items in this location\"\n          title=\"On the floor\"\n          onClick={this.onItemClick}\n          onDrop={null}\n          inventory={targeted.items}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (selected) {\n      let distanceToSelected = Helpers.calculateDistance(\n        targetedSquarePosition.x - selected.position.x,\n        targetedSquarePosition.y - selected.position.y\n      );\n\n      distanceInfo = <li>Distance to selected: {~~distanceToSelected}</li>;\n\n      if (distanceToSelected !== 0) {\n        if (targeted && targeted.isAvailableDestination) {\n          availableActions[0] = (\n            <button onClick={() => this.onMoveClick(selected, targetedSquarePosition)} className=\"button\">\n              Move\n            </button>\n          );\n        }\n        if (targeted && targeted.entity) {\n          availableActions[1] = (\n            <button onClick={() => this.onAttackClick(selected, targetedSquarePosition)} className=\"button\">\n              Attack\n            </button>\n          );\n        }\n      }\n    }\n\n    if (targetedSquarePosition) {\n      positionInfo = (\n        <li>\n          Position: [ {targetedSquarePosition.x}, {targetedSquarePosition.y} ]{\" \"}\n        </li>\n      );\n    }\n\n    if (inspectedSquare && inspectedSquare.blood) {\n      bloodInfo = <li>Blood amount: {inspectedSquare.blood}</li>;\n    }\n\n    return (\n      <div className={this.props.className}>\n        <strong>Target square Info</strong>\n        <div>{entityInfo}</div>\n        <div>{availableActions}</div>\n        <ul>\n          {positionInfo}\n          {distanceInfo}\n          {bloodInfo}\n          {items}\n          {editorButtons}\n        </ul>\n      </div>\n    );\n  }\n}\n","import Entities from \"./EntitiesValues\";\n\nclass GameModelClass {\n  entities;\n  constructor(Entities) {\n    this.entities = Entities;\n  }\n  access() {\n    console.log(\"Accessing Game Model\");\n    console.log(this.entities);\n  }\n}\n\nlet GameModel = new GameModelClass(Entities);\n\nexport default GameModel;\n","import React, { ReactElement, DOMElement } from \"react\";\nimport * as Helpers from \"../../helpers/Helpers\";\nimport { SquaresService, EntitiesService } from \"../../services\";\nimport EntityCard from \"../EntityCard/EntityCard\";\nimport { Square } from \"../../services/SquaresService\";\nimport { Entity, Position } from \"../../services/EntitiesValues\";\n\ninterface SelectedEntityInfoProperties {\n  selected: Entity;\n  onInventoryClick(entity: Entity, itemName: string);\n  handleDeselectAllEntities: () => void;\n  processInterface: Function;\n}\n\nexport default class SelectedEntityInfo extends React.Component<SelectedEntityInfoProperties> {\n  render() {\n    if (!this.props.selected) {\n      return null;\n    }\n\n    return (\n      <div className=\"selected\">\n        <strong>Selected entity </strong>\n        <div>\n          <EntityCard\n            onInventoryClick={this.props.onInventoryClick}\n            entity={this.props.selected}\n            processInterface={() => this.props.processInterface()}\n          />\n        </div>\n        <button onClick={this.props.handleDeselectAllEntities} className=\"button\">\n          {\" \"}\n          Deselect\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport MessageService from \"../../services/MessageService\";\n\nexport class MessageBox extends React.Component {\n  messages = MessageService.messages;\n  \n  renderMessage = (message, number) => {\n    return (\n      <li>\n        Message nr[{number}]: {message}\n      </li>\n    );\n  };\n\n  render() {\n    let RenderedMessages = this.messages.map((message, number) => {\n      return this.renderMessage(message, number);\n    });\n\n    return <ul className=\"messagesUl\">{RenderedMessages}</ul>;\n  }\n}\n\n\n ","import React from \"react\";\nimport Board from \"../Board\";\nimport EntitiesList from \"../EntitiesList\";\nimport TargetedSquareInfo from \"./TargetedSquareInfo\";\n\nimport { EntitiesService, SquaresService } from \"../../services\";\nimport GameLogic from \"../../services/GameLogicService\";\nimport GameModel from \"../../services/GameModelService\";\n\nimport * as Helpers from \"../../helpers\";\nimport \"./Game.scss\";\n\nimport { Entity, Weapon } from \"../../services/EntitiesValues\";\nimport { Square } from \"../../services/SquaresService\";\nimport EntityCard from \"../EntityCard/EntityCard\";\nimport SelectedEntityInfo from \"./SelectedEntityInfo\";\nimport { MessageBox } from \"./MessageBox\";\n\ninterface GameState {\n  targeted: Square;\n  selected: Entity;\n  arenaSize: number;\n  isBoardRotated: boolean;\n  entities: Entity[];\n  squares: Square[];\n  autoLoop: boolean;\n  selectedSquareNumber: number;\n}\n\nexport default class Game extends React.PureComponent<void, GameState> {\n  renderCounter: number = 0;\n  stepNumber: number = 0;\n\n  constructor(props) {\n    super(props);\n\n    // Initial VALUE of game state\n    this.state = {\n      targeted: null,\n      selected: null,\n      arenaSize: 10,\n      isBoardRotated: false,\n      entities: GameModel.entities,\n      squares: SquaresService.squares,\n      autoLoop: true,\n      selectedSquareNumber: null,\n    };\n  }\n\n  componentDidMount() {\n    //this.state.squares =SquaresService.squares;\n    EntitiesService.entities = this.state.entities;\n    this.loop();\n  }\n\n  setSquaresAccordingToEntities() {\n    this.setState((previousState) => {\n      let squares: Square[] = [].concat(previousState.squares);\n      let entities: Entity[] = previousState.entities;\n\n      SquaresService.squares = squares;\n      Helpers.resetGivenFieldsOnACollection(squares, \"entity\");\n      entities.forEach((entity) => {\n        SquaresService.setEntityWithinApropriateSquare(entity);\n      });\n\n      return { squares };\n    });\n  }\n\n  calculateNextGameState(previousState: GameState) {\n    let nextState: GameState = previousState;\n    let { entities, squares, selected } = nextState;\n\n    EntitiesService.moveEntities();\n    Helpers.resetGivenFieldsOnACollection(squares, \"isLit\", \"isInTwilightZone\");\n    entities.forEach((entity) => {\n      if (EntitiesService.isEntityShootingProperly(entity)) {\n        EntitiesService.fireAShot(entity);\n      }\n      entity.bleedExternally();\n\n      EntitiesService.stopBreathingForKilledEntity(entity);\n      SquaresService.markAvailableDestinationsForSelectedEntity(entity);\n\n      SquaresService.castLightsFromFriendlyEntity(entity);\n    });\n\n    return nextState;\n  }\n\n  calculateNextInterfaceState(previousState: GameState) {\n    let nextState = previousState;\n    let { entities } = nextState;\n\n    entities.forEach((entity) => {\n      SquaresService.markAvailableDestinationsForSelectedEntity(entity);\n    });\n\n    return nextState;\n  }\n\n  processEntities() {\n    this.setState(\n      (prevState) => this.calculateNextGameState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  processInterface() {\n    this.setState(\n      (prevState) => this.calculateNextInterfaceState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  loop = () => {\n    this.stepNumber++;\n\n    this.processEntities();\n\n    if (this.state.autoLoop) {\n      setTimeout(this.loop, 1000);\n    }\n  };\n\n  nextTick = () => {\n    this.setState({ autoLoop: false });\n    this.loop();\n  };\n\n  newHandleClick = (squareIndex: number) => {\n    this.setState((state) => {\n      let { squares, entities, selected, targeted, selectedSquareNumber } = state;\n      let previousTargeted = targeted;\n      targeted = squares[squareIndex];\n      selectedSquareNumber = squareIndex;\n      const doubleClick = () => previousTargeted === targeted;\n      SquaresService.markSquareAsTargeted(squareIndex);\n\n      /** Setting move destination while clicking on empty square */\n      if (doubleClick() && targeted.isAvailableDestination) {\n        selected.setMoveDestinationSquare(squareIndex);\n      }\n\n      /** To be able to deselect */\n      if (doubleClick() || selected) {\n        if (!selected && targeted.entity) {\n          // Selecting\n          selected = EntitiesService.selectEntityFromGivenSquare(selected, targeted);\n          //targeted = undefined;\n        } else if (Helpers.isSelectedTargeted(selected, targeted)) {\n          // Deselecting if not selecting\n          this.deselectAllEntities();\n          selected = undefined;\n        }\n      }\n\n      // setting attack\n      if (doubleClick() && selected && targeted.entity) {\n        selected.attackPosition(SquaresService.targetSquarePosition(squareIndex));\n      }\n\n      return { squares, entities, selected, targeted, selectedSquareNumber };\n    }, this.processInterface);\n  };\n\n  nuke = (dmg: number) => {\n    this.setState(\n      (state) => {\n        let { entities } = state;\n\n        entities.forEach((entity) => {\n          entity.hp = entity.hp - dmg;\n        });\n\n        return { entities };\n      },\n      () => {\n        this.processEntities();\n      }\n    );\n  };\n\n  toggleRotateBoard = () => {\n    this.setState({ isBoardRotated: !this.state.isBoardRotated });\n  };\n\n  switchAutoLoop = () => {\n    this.setState(\n      (previousState) => {\n        return { autoLoop: !previousState.autoLoop };\n      },\n      () => {\n        if (this.state.autoLoop) {\n          this.loop();\n        }\n      }\n    );\n  };\n\n  onInventoryClick = (entity: Entity, itemName: string) => {\n    this.setState((prevState) => {\n      let entities = [].concat(prevState.entities);\n      let entityId = EntitiesService.getEntityId(entity);\n      let actualEntity = EntitiesService.findEntityById(entityId);\n      let actualItem = EntitiesService.findItemOnEntity(actualEntity, itemName);\n\n      if (actualEntity.equipment.hands && actualEntity.equipment.hands.name == itemName) {\n        actualEntity.unEquipFromHands();\n      } else {\n        actualEntity.equipInHands(itemName);\n      }\n\n      return { entities };\n    });\n    console.log(entity, itemName);\n  };\n\n  handleDeselectAllEntities = () => {\n    this.setState(\n      (state) => {\n        let { squares, entities, selected } = state;\n\n        this.deselectAllEntities();\n        selected = undefined;\n\n        return { squares, entities, selected };\n      },\n      () => {\n        //this.processEntities();\n      }\n    );\n  };\n\n  deselectAllEntities = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"active\");\n    Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\", \"isAvailableDestination\");\n  };\n\n  ceaseFire = () => {\n    this.setState(\n      (state) => {\n        let { squares, entities, selected } = state;\n\n        Helpers.resetGivenFieldsOnACollection(entities, \"isShooting\");\n\n        return { squares, entities, selected };\n      },\n      () => {\n        this.processInterface();\n      }\n    );\n  };\n\n  render() {\n    let boardClassName = this.state.isBoardRotated ? \"rotated-board\" : \"\";\n    // console.log(\"Rendering Game. #\", this.renderCounter++);\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={this.state.squares}\n            entities={this.state.entities}\n            onClick={(i) => this.newHandleClick(i)}\n            size={this.state.arenaSize}\n            className={boardClassName}\n          />\n        </div>\n\n        <div className=\"game-info\">\n          <div className=\"actions\">\n            <button\n              onClick={() => {\n                this.nuke(40);\n              }}\n              className=\"button button-nuke\"\n            >\n              Nuke All\n            </button>\n            <button onClick={this.ceaseFire} className=\"button\">\n              Cease Fire\n            </button>\n\n            <button onClick={this.toggleRotateBoard} className=\"button\">\n              Rotate Board\n            </button>\n            <button onClick={this.nextTick} className=\"button\">\n              Next Tick\n            </button>\n\n            <span className=\"step-counter\">Tick: {this.stepNumber}</span>\n            <label className=\"auto-cycle button\">\n              <input type=\"checkbox\" checked={this.state.autoLoop} onChange={this.switchAutoLoop} />\n              <span>Auto Cycle</span>\n            </label>\n          </div>\n\n          <div className=\"interaction-container\">\n            <SelectedEntityInfo\n              selected={this.state.selected}\n              handleDeselectAllEntities={this.handleDeselectAllEntities}\n              onInventoryClick={this.onInventoryClick}\n              processInterface={() => this.processInterface()}\n            />\n\n            <TargetedSquareInfo\n              className=\"targeted\"\n              squareNumber={this.state.selectedSquareNumber}\n              squares={this.state.squares}\n              selected={this.state.selected}\n              targeted={this.state.targeted}\n              onInventoryClick={this.onInventoryClick}\n              processInterface={() => this.processInterface()}\n            />\n            <div></div>\n          </div>\n          <MessageBox />\n        </div>\n\n        <div className=\"game-list\">\n          <EntitiesList\n            entities={this.state.entities}\n            onInventoryClick={this.onInventoryClick}\n            processInterface={() => this.processInterface()}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport Game from \"./components/Game\";\n\nimport \"./style.scss\";\n\nrender(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}