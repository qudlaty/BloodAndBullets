{"version":3,"sources":["components/Game/Game.module.scss","components/Board/Board.module.scss","helpers/Helpers.ts","components/Board/Board.tsx","components/EntitiesList/EntitiesList.tsx","services/EntitiesService/EntityFeatures.ts","services/EntitiesService/EntityClass.ts","services/SquaresService/SquareClass.ts","services/SquaresService/SquaresService.ts","services/EntitiesService/EntitiesService.ts","services/ItemService/ItemClasses.ts","services/MessageService/MessageService.ts","resources/ItemDefinitions.ts","resources/CharacterDefinitions.ts","resources/StructureDefinitions.ts","services/GameModelService/GameModelService.ts","services/GameLogicService/GameLogicService.ts","services/GameLogicService/GameState.tsx","services/GameActionsService/GameActionsService.tsx","components/EntityCard/EntityCard.tsx","components/EntityPawn/EntityPawn.tsx","components/EmojiMapper/EmojiMapper.tsx","components/Game/TargetedSquareInfo.tsx","components/Game/SelectedEntityInfo.tsx","components/Game/Game.tsx","components/Square/Blood.tsx","components/Square/Items.tsx","components/Square/Square.tsx","components/LinearDisplay/LinearDisplay.tsx","components/HudPanel/HudPanel.tsx","components/Grid/Cell.tsx","components/Grid/Grid.tsx","components/Controls/Controls.tsx","components/MessageBox/MessageBox.tsx","components/InventoryItem/InventoryItem.tsx","components/InventoryList/InventoryList.tsx","components/HpBar/HpBar.tsx","components/ShootingVisualization/ShootingVisualization.tsx","components/DragScrollArea/DragScrollArea.tsx","screens/BlastZone/BlastZone.tsx","App.tsx","index.js"],"names":["module","exports","resetGivenFieldsOnACollection","collection","fieldNames","forEach","item","fieldName","undefined","getNumberWithinBoundaries","value","min","max","getRandomIntInclusive","Math","floor","random","calculateAngle","x","y","angle","atan","PI","calculateDistance","sqrt","pow","turnFlagsIntoClasses","flags","classNameBase","flagsToClassess","active","isAvailableDestination","isChosenDestination","isBreathing","isDead","isShooting","isTargeted","isAttacked","isLit","isInTwilightZone","className","Object","keys","key","getCssClassesForAGivenSquare","square","squareClassName","squareType","entity","derivedCtor","Board","handleClick","i","console","log","props","onClick","EntityPawns","entities","map","name","BoardSquares","colId","cellId","rowId","Array","size","fill","row","number","cells","cell","renderSquare","styles","this","squares","squareId","Helpers","blood","items","itemsNumber","length","board","isRotated","style","React","Component","Identifiable","icon","Positionable","position","isPassable","SquaresService","getSquareFromPosition","Movable","moveDestination","squareIndex","setMoveDestinationPosition","getSquarePositionFromIndex","targetPosition","targetSquare","targetSquareNumber","getSquareIndexFromPosition","isTargetSquareEnterable","markSquareAtIndexAsChosenDestination","MessageService","send","Mortal","hp","maxHp","isAlive","Bleedable","bleeding","bleedingReductionPerTurn","bloodReleased","bleed","addBloodToSquare","Breathing","isSupposedToBeBreathing","Combative","ceaseFire","hasWeapon","targetedSquarePosition","HavingInventory","inventory","itemName","actualItemIndex","findIndex","splice","push","Entity","isFriendly","assign","equipment","unEquipFromHands","takeFromInventory","hands","Weapon","addToInventory","actionPoints","maxActionPoints","baseCtor","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","Square","arenaSize","isSquareEnterableByFriendlyUnits","includes","initializeSquareAtIndexIfEmpty","setEntityWithinASquareAtPosition","isArray","amount","j","setSquareValueAtPosition","unpassableEntitiesInThisSquare","filter","EntitiesService","selected","shouldEntityStopShooting","stopShooting","stopShootingWhenForbidden","id","getEntityId","indexOfEntityToRemove","currentEntity","oldPositionX","oldPositionY","deltaX","deltaY","newSquare","potentialTargetEntity","getEntitiesAtGivenPosition","targeted","damageApplied","weapon","equippedWeapon","RangedWeapon","isAbleToFire","fire","rounds","checkAmmoAndCalculateDamageApplied","targetEntity","applyDamageToTargetEntity","damage","getEntitiesAtGivenPositionThatAreAlive","areThereAliveTargetEntities","bleedExternally","chosenDestinationSquare","moveEntityRandomly","Item","causesBleeding","range","maxRounds","Rifle","type","Lazer","messages","message","M16","M40","L30","entitiesInitialValues","age","defaultValues","addEntityToDefaultValues","characterDefinitions","entry","structures","box","redBarrel","GameModel","saveMap","squaresProcessedForSave","JSON","parse","stringify","squaresStringified","result","window","prompt","localStorage","loadMap","GameActions","mapNames","squaresLoaded","loadSquaresIntoService","entitiesWithinTheMap","makeInstanceOfAWeapon","weaponRecord","entitiesProcessed","entityRecord","itemRecord","loadEntitiesIntoService","setSquaresAccordingToEntities","processInterface","index","sourceSquare","loadBuiltInMap","intro","loadPredefinedEntitities","GameLogic","model","run","calculateNextInterfaceState","previousState","nextState","markAvailableDestinationsForSelectedEntity","syncSquaresWithEntities","array","concat","setEntityWithinApropriateSquare","deselectAllEntities","givenEntity","processAnEntity","enemiesAlive","calculateNumberOfAliveEnemies","friendsAlive","calculateNumberOfAliveFriends","moveEntityIntoChosenDestination","isEntityTargettingSomethingAlive","fireAShot","ceaseFireNextTickIfNoAliveTargets","stopBreathingForKilledEntity","amountOfAliveEnemies","GameState","targetedSquareNumber","squareSize","isAutoLoopOn","isBoardRotated","isEditorOn","component","GameActionsClassForGameComponent","that","entitiesProcessingLoopIntervalHandle","toggleEditorMode","state","setState","prevState","loop","debug","isTurnInProgress","setTimeout","nextStep","nextTick","executeActions","calculeteNextGameStateAfterProcessingAGivenEntity","handleClickV2","selectedSquareNumber","previousTargeted","doubleClick","markSquareAtIndexAsTargeted","setMoveDestinationSquareByNumber","selectEntityFromGivenSquare","targetSquarePosition","attackPosition","markSquareAtIndexAsAttacked","aggro","entitiesToAttack","findEntitiesThatAreClose","closeEntity","firstAmongThem","nuke","dmg","processEntities","toggleRotateBoard","switchAutoLoop","info","onInventoryClick","entityId","actualEntity","findEntityById","equipInHands","handleDeselectAllEntities","stepNumber","refillActionPointsForAllEntities","drawAggro","setInterval","processNextUnprocessedEntity","entitiesForProcessing","entityForThisTurn","setNewStateAfterProcessingChosenEntity","clearInterval","newlyFoundEntities","EntityCard","renderCount","handleInventoryClick","onDrop","addItem","addEntity","onReload","bleedingText","bleedingReductionText","inHands","inHandsArray","onEntityClick","title","label","current","hidden","distanceToTarget","Number","toFixed","EntityPawn","randomTime","classessFromFlags","fof","color","zIndex","animationBreathing","left","boardPadding","top","animation","emoji","ShootingVisualization","EmojiMapper","emojiMap","emojiMappedTo","output","TargetedSquareInfo","boxSerialNumber","onItemClick","squareNumber","removeEntity","targetedSquare","structureType","newStructure","distanceInfo","positionInfo","bloodInfo","entityInfo","availableActions","editorButtons","onAddStructureClick","GameStyles","button","distanceToSelected","onMoveClick","onAttackClick","targeted__label","SelectedEntityInfo","selected__label","Game","renderCounter","setSelected","startIfAutoLoopIsOn","reduce","previousValue","game","game__board","fontSize","onKeyPress","e","game__info","actions","action_row","zoomIn","zoomOut","execute_actions","checked","onChange","next_tick","calculateFriendlyActionPoints","PureComponent","Blood","bloodAmount","bloodDrops","background","error","Items","itemsIcons","SquareComponent","classPrefix","cuboidFaces","cuboid","LinearDisplay","percentage","overload","negative","progressStyle","width","divider","progressGridStyle","backgroundSize","backgroundImage","HudPanel","children","Cell","Grid","rows","height","sourceY","startAt","currentRow","sourceX","currentCell","renderGrid","Controls","w","s","a","d","document","addEventListener","onKeyDown","onKeyUp","event","keyCode","MessageBox","messageNumber","renderMessage","RenderedMessages","requestAnimationFrame","element","getElementById","scrollTop","scrollHeight","scrollElement","InventoryItem","reloadButton","dropButton","ammoCounter","reload","InventoryList","inventoryItems","HpBar","backgroundColor","calcNewAangle","targetCoords","projectileNumber","projectiles","localId","uniqueShootingAnimationId","customStyle","commonStyles","distanceToTargetXInUnits","distanceToTargetYInUnits","actualDistanceInUnits","weaponType","projectile","finalClassName","DragScrollArea","areaReference","scroll","onMouseDown","onMouseUp","onMouseMove","preventDefault","scrollRelativeXY","movementX","movementY","removeEventListener","createRef","executeScroll","ref","onContextMenu","BlastZone","gridX","gridY","controls","onControlPress","statusIndicators","App","scenes","SelectedScene","handleChange","target","sceneToLoad","loadedScene","render"],"mappings":"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","file":"static/js/main.e74e2fda.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"Game_game__229bL\",\"game__board\":\"Game_game__board__1KMto\",\"game__list\":\"Game_game__list__yMHF0\",\"button\":\"Game_button__1_Ze4\",\"actions\":\"Game_actions__2-VcJ\",\"auto-cycle\":\"Game_auto-cycle__1cp6W\",\"next_tick\":\"Game_next_tick__W3YYp\",\"execute_actions\":\"Game_execute_actions__OuWzh\",\"nuke\":\"Game_nuke__23ZLU\",\"game__info\":\"Game_game__info__3kjt8\",\"action_row\":\"Game_action_row__1mTrg\",\"interaction-container\":\"Game_interaction-container__3RZ7s\",\"selected\":\"Game_selected__ZRNAo\",\"targeted\":\"Game_targeted__3gJqr\",\"selected__label\":\"Game_selected__label__2d30g\",\"targeted__label\":\"Game_targeted__label__328kg\",\"step-counter\":\"Game_step-counter__hrmzE\",\"status\":\"Game_status__21KP9\",\"kbd-navigation\":\"Game_kbd-navigation__10pCT\",\"square\":\"Game_square__3r5qO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__1AthT\",\"board__row\":\"Board_board__row__1piKV\",\"board--rotated\":\"Board_board--rotated__be1H9\"};","import { Entity } from \"services/EntitiesService\";\nimport { Square } from \"services/SquaresService\";\n\n/** @description\n * Takes a collection and a list of strings describing object keys.\n * Sets all given fields on a collection to `undefined`\n */\nexport function resetGivenFieldsOnACollection(collection, ...fieldNames) {\n  collection.forEach((item) => {\n    fieldNames.forEach((fieldName) => {\n      item && (item[fieldName] = undefined);\n    });\n  });\n}\n\n/** @description Takes a number and fits it within given boundaries, then returns it */\nexport function getNumberWithinBoundaries(value: number, min: number, max: number): number {\n  if (value < min) value = min;\n  if (value > max) value = max;\n  return value;\n}\n\n/** @description Returns a random integer between min and max */\nexport function getRandomIntInclusive(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/** @description Returns angle (in degrees) of a given vector */\nexport function calculateAngle(x: number, y: number): number {\n  let angle: number;\n  if (y >= 0) {\n    angle = -Math.atan(x / y) * (180 / Math.PI);\n  } else if (y < 0) {\n    angle = (180 / Math.PI) * (Math.atan(x / -y) + Math.PI);\n  }\n  return angle;\n}\n\n/** @description Pitagorean distance between 0,0 and given coords */\nexport function calculateDistance(x: number, y: number): number {\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n}\n\n/** @description Mixing classess together */\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  // see https://www.typescriptlang.org/docs/handbook/mixins.html\n  baseCtors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));\n    });\n  });\n}\n\n/** @description Checking if selected entity is on a targeted square */\nexport function isSelectedTargeted(selected: Entity, targeted: Square): boolean {\n  if (selected && targeted && targeted.entity && selected.name === targeted.entity.name) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * @description\n * Adding classess apropriate to the flags passed in by props\n * @param classNameBase - if given, it is added in front of the classname with \"--\"\n * Eg: classNameBase--class-from-flag\n */\nexport function turnFlagsIntoClasses(flags: object, classNameBase?: string) {\n  if(!flags) return '';\n  const flagsToClassess = {\n    active: \"active\",\n    isAvailableDestination: \"is-available-destination\",\n    isChosenDestination: \"is-chosen-destination\",\n    isBreathing: \"breathing\",\n    isDead: \"dead\",\n    isShooting: \"shooting\",\n    isTargeted: \"targeted\",\n    isAttacked: \"attacked\",\n    isLit: \"is-lit\",\n    isInTwilightZone: \"is-in-twilight-zone\",\n  };\n\n  let className = \"\";\n\n  if (classNameBase) {\n    classNameBase += \"--\";\n  } else {\n    classNameBase = \"\";\n  }\n\n  Object.keys(flagsToClassess).forEach((key) => {\n    if (flags[key]) {\n      className += ` ${classNameBase}${flagsToClassess[key]}`;\n    }\n  });\n  return className;\n}\n\n/**\n * @description\n * Creates a new array containing all the elements from a given array\n * @param array array to shallow-copy\n * @yields a new copy of the array\n */\nexport function newCopyOfArray(array: any[]) {\n  return [].concat(array);\n}\n\n/**\n * @description\n * Returns a string with set of CSS classes\n * based on the flags found in the given square.\n * @param square a square to style\n * @yields string with all classess applicable for the given square\n */\nexport function getCssClassesForAGivenSquare(square: Square): string {\n  if(!square) return;\n  let squareClassNameBase = \"square\";\n  let squareClassName = `${squareClassNameBase} ${square && square.squareType}`;\n  squareClassName += turnFlagsIntoClasses(square, squareClassNameBase);\n  if (square.entity) {\n    squareClassName += turnFlagsIntoClasses(square.entity, squareClassNameBase);\n  }\n  return squareClassName;\n}\n","import React, { ReactElement } from \"react\";\nimport { SquareComponent, EntityPawn } from \"components\";\nimport { Entity, Square } from \"services\";\nimport * as Helpers from \"helpers\";\n\nimport styles from \"./Board.module.scss\";\n\ninterface BoardProps {\n  onClick(i: number): void;\n  squares: Square[]; // updated every tick\n  entities: Entity[]; // updated every tick\n  size: number;\n  isRotated: boolean;\n  style: any;\n}\n/**\n * @description Board component renders Squares and EntityPawns\n */\nexport class Board extends React.Component<BoardProps> {\n  handleClick = (i: number) => {\n    console.log(\"Handles Click on Board\", i);\n    this.props.onClick(i);\n  };\n\n  renderSquare(i: number, rowId: number, colId: number) {\n    let square = this.props.squares[i];\n\n    return (\n      <SquareComponent // is a pureComponent\n        key={`r${rowId}_c${i}`}\n        squareId={i}\n        className={Helpers.getCssClassesForAGivenSquare(square)}\n        onClick={this.handleClick}\n        blood={square && square.blood} // number\n        items={square && square.items} // list of objects\n        itemsNumber={square && square.items && square.items.length}\n      ></SquareComponent>\n    );\n  }\n\n  EntityPawns = (): ReactElement[] => this.props.entities.map((entity) => <EntityPawn key={entity.name} entity={entity} />);\n\n  BoardSquares = () => {\n    let cellId: number = 0;\n    let rowId: number = 0;\n    let colId: number;\n\n    let rowsOfSquares = Array(this.props.size)\n      .fill(null)\n      .map((row, number) => {\n        colId = 0;\n        let cells = Array(this.props.size)\n          .fill(null)\n          .map((cell, number) => {\n            return this.renderSquare(cellId++, rowId, colId++);\n          });\n        return (\n          <div key={rowId++} className={styles[\"board__row\"]}>\n            {cells}\n          </div>\n        );\n      });\n\n    return rowsOfSquares;\n  }; // Board Squares\n\n  render() {\n    let className: string = styles.board;\n    if (this.props.isRotated) {\n      className += ` ${styles[\"board--rotated\"]} board--rotated`;\n    }\n    return (\n      <div className={className} style={this.props.style}>\n        {this.BoardSquares()}\n        {this.EntityPawns()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { EntityCard } from \"components\";\nimport { Entity } from \"services\";\n\nimport \"./EntitiesList.scss\";\n\n\ninterface ListOfEntitiesProps {\n  entities: Entity[];\n  onInventoryClick: any;\n  processInterface: Function;\n}\n\nexport default class ListOfEntities extends React.Component<ListOfEntitiesProps> {\n  render() {\n    let entitiesFriendly = this.props.entities\n      .filter((entity) => entity.isFriendly)\n      .map((obj) => {\n        return (\n          <EntityCard\n            key={obj.name}\n            entity={obj}\n            onInventoryClick={this.props.onInventoryClick}\n            processInterface={() => this.props.processInterface()}\n          />\n        );\n      });\n\n    let entitiesUnfriendly = this.props.entities\n      .filter((entity) => !entity.isFriendly)\n      .map((obj) => {\n        return <EntityCard key={obj.name} entity={obj} processInterface={() => this.props.processInterface()} />;\n      });\n\n    return (\n      <>\n        <h4 className=\"entities-list__header\">List of Entities:</h4>\n        <div className=\"entities-list\">{entitiesFriendly}</div>\n        <div className=\"entities-list\">{entitiesUnfriendly}</div>\n      </>\n    );\n  }\n}\n","import { Item, Weapon, Square } from \"services\";\nimport { SquaresService, MessageService } from \"services\";\nimport * as Helpers from \"helpers\";\nimport { Entity } from \"./EntityClass\";\n\n/** Position on a grid */\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport class Identifiable {\n  name: string = \"An Entity\";\n  icon: string = \"E\";\n}\n\nexport class Actor {// one who acts\n  actionPoints: number = 2;\n  maxActionPoints: number = 2;\n}\n\nexport class Positionable {\n  position: Position = { x: undefined, y: undefined };\n  isPassable: boolean = false;\n  get isBlocking(): boolean { return !this.isPassable }\n  get square(): Square {\n    let square: Square = SquaresService.getSquareFromPosition(this.position.x, this.position.y);\n    return square;\n  }\n}\n\nexport class Movable extends Identifiable {\n  moveDestination: Position;\n  // TODO: are these methods really appropriate for this context?\n\n  setMoveDestinationSquareByNumber(squareIndex: number) {\n    this.setMoveDestinationPosition(SquaresService.getSquarePositionFromIndex(squareIndex));\n  }\n\n  setMoveDestinationPosition(targetPosition: Position) {\n    let targetSquare: Square = SquaresService.getSquareFromPosition(targetPosition.x, targetPosition.y);\n    let targetSquareNumber: number = SquaresService.getSquareIndexFromPosition(targetPosition.x, targetPosition.y)\n    if (SquaresService.isTargetSquareEnterable(targetSquare)) {\n      this.moveDestination = targetPosition;\n      SquaresService.markSquareAtIndexAsChosenDestination(targetSquareNumber);\n    } else {\n      MessageService.send(`${this.name} can't move into square (${targetPosition.x}, ${targetPosition.y})`);\n    }\n  }\n}\n\nexport class Mortal extends Positionable {\n  hp: number = 100;\n  maxHp: number = 100;\n  get isDead(): boolean {\n    return !this.isAlive;\n  }\n  get isAlive(): boolean {\n    return this.hp > 0;\n  }\n}\n\nexport class Bleedable extends Mortal {\n  public bleeding: number = 0;\n  public bleedingReductionPerTurn: number = 1;\n  bleed(): number {\n    let entity = this;\n    let bloodReleased = 0;\n    if (entity.bleeding && entity.isAlive) {\n      bloodReleased = entity.bleeding;\n      entity.hp -= bloodReleased;\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n      if(entity.bleeding < 0) entity.bleeding = 0;\n    }\n    return bloodReleased;\n  }\n\n  bleedExternally() {\n    if (!this.bleeding) return;\n    let entity = this;\n    let bloodReleased = this.bleed();\n    let square: Square = SquaresService.getSquareFromPosition(entity.position.x, entity.position.y);\n    SquaresService.addBloodToSquare(square, bloodReleased);\n  }\n}\n\nexport class Breathing extends Mortal {\n  isSupposedToBeBreathing: boolean = undefined;\n  get isBreathing(): boolean {\n    return this.isAlive && this.isSupposedToBeBreathing;\n  }\n  set isBreathing(value: boolean) {\n    this.isSupposedToBeBreathing = value;\n  }\n}\n\nexport class Combative extends Identifiable {\n  targetPosition: Position;\n  isShooting?: boolean;// TODO: refactor to not be optional maybe?\n  ceaseFire?: boolean;\n  hasWeapon?: boolean;\n  attackPosition(targetedSquarePosition: Position) {\n    if (this.hasWeapon) {\n      this.targetPosition = targetedSquarePosition;\n      //this.isShooting = true;\n      this.ceaseFire = false;\n    } else {\n      MessageService.send(`${this.name} can't shoot - no weapon equipped`);\n    }\n    console.log(this.name, 'is attacking', targetedSquarePosition, this);\n  }\n}\n\nexport type InventoryItem = Item|Entity;\nexport class HavingInventory extends Identifiable {\n\n  inventory: Array<InventoryItem>;\n  takeFromInventory(itemName: string): InventoryItem {\n    if (!this.inventory) {\n      this.inventory = [];\n    }\n    let actualItemIndex: number = this.inventory.findIndex((item) => item.name === itemName);\n    if(actualItemIndex === -1) return null;\n    let actualItem: InventoryItem = this.inventory.splice(actualItemIndex, 1)[0];\n\n    return actualItem;\n  }\n  addToInventory(item: InventoryItem) {\n    if (!this.inventory) {\n      this.inventory = [];\n    }\n    this.inventory.push(item);\n  }\n}\n\nexport class HavingEquipment extends HavingInventory {\n  equipment: {hands: Item};\n  hasWeapon?: boolean;\n\n  equipInHands(itemName: string) {\n    this.unEquipFromHands();\n    let item: Item = this.takeFromInventory(itemName);\n    this.equipment.hands = item;\n    if (item instanceof Weapon) {\n      this.hasWeapon = true;\n    } else {\n      this.hasWeapon = false;\n    }\n  }\n\n  unEquipFromHands() {\n    if (this.equipment.hands) {\n      this.addToInventory(this.equipment.hands);\n      this.equipment.hands = null;\n      this.hasWeapon = false;\n    }\n  }\n}\n","import { applyMixins } from \"helpers\";\nimport {\n  Identifiable,\n  Positionable,\n  Mortal,\n  Bleedable,\n  Movable,\n  Breathing,\n  Combative,\n  HavingInventory,\n  HavingEquipment,\n  Actor,\n} from \".\";\n\n/**\n * @description The base class for Entities on the board\n */\nexport class Entity {\n  // Extended by mixins below\n  constructor(...props) {\n    Object.assign(this, ...props);\n  }\n  isFriendly?: boolean;\n  active?: boolean;\n}\n\n/************************************************************/\n/* Always update both lists */\n\nexport interface Entity\n  extends\n    Identifiable,\n    Positionable,\n    Mortal,\n    Bleedable,\n    Movable,\n    Breathing,\n    Combative,\n    HavingInventory,\n    HavingEquipment,\n    Actor\n{} applyMixins(Entity, [\n    Identifiable,\n    Positionable,\n    Mortal,\n    Bleedable,\n    Movable,\n    Breathing,\n    Combative,\n    HavingInventory,\n    HavingEquipment,\n    Actor,\n]);\n\n/************************************************************/\n","import { Item } from \"services/ItemService\";\nimport { Entity, HavingInventory, Identifiable } from \"services/EntitiesService\";\n\nexport interface Square {\n  entities?: Entity[];\n  entity?: Entity;\n  blood?: number;\n  squareType: string;\n  isAvailableDestination?: boolean;\n  isChosenDestination?: boolean;\n  isTargeted?: boolean;\n  isAttacked?: boolean;\n  isLit?: boolean;\n  isInTwilightZone?: boolean;\n  addItem(item: Item): void;\n}\n\nexport class Square extends HavingInventory implements Square {\n  public squareType: string = \"nothing\";\n  addItem(item: Item) {\n    this.addToInventory(item);\n  }\n  get items() {\n    return this.inventory;\n  }\n}\n","import * as Helpers from \"helpers\";\nimport { Square } from \"./SquareClass\";\nimport { Entity, Position } from \"services/EntitiesService\";\n\nclass SquaresServiceClass {\n  arenaSize: number = 10; // TODO: This should be defined ELSEWHERE\n\n  squares: Square[] = [];\n\n  constructor() {\n    let i = this.arenaSize * this.arenaSize;\n    while (i-- !== 0) {\n      this.initializeSquareAtIndexIfEmpty(i);\n    }\n  }\n\n  getSquareFromPosition(x: number, y: number): Square {\n    return this.squares[this.getSquareIndexFromPosition(x, y)];\n  }\n\n  setSquareValueAtPosition(x: number, y: number, value): void {\n    this.squares[this.getSquareIndexFromPosition(x, y)] = value;\n  }\n\n  getSquareIndexFromPosition(x: number, y: number): number {\n    return y * this.arenaSize + x;\n  }\n\n  getSquarePositionFromIndex(squareIndex: number): Position {\n    let x: number, y: number;\n    y = Math.floor(squareIndex / this.arenaSize);\n    x = squareIndex % this.arenaSize;\n    return { x, y };\n  }\n\n  setEntityWithinApropriateSquare(entity: Entity): void {\n    this.setEntityWithinASquareAtPosition(entity.position.x, entity.position.y, entity);\n  }\n\n  setEntityWithinASquareAtPosition(x: number, y: number, entity: Entity) {\n    let squareIndex: number = this.getSquareIndexFromPosition(x, y);\n    this.initializeSquareAtIndexIfEmpty(squareIndex);\n    this.squares[squareIndex].entity = entity;\n    if(!Array.isArray(this.squares[squareIndex].entities)){\n      this.squares[squareIndex].entities = [];\n    }\n    this.squares[squareIndex].entities.push(entity);\n  }\n\n  addBloodToSquare(square: Square, amount: number) {\n    if (!square.blood) {\n      square.blood = amount;\n    } else {\n      square.blood += amount;\n    }\n  }\n\n  markSquareAtIndexAsTargeted(squareIndex: number): void {\n    Helpers.resetGivenFieldsOnACollection(this.squares, \"isTargeted\");\n    this.initializeSquareAtIndexIfEmpty(squareIndex);\n    this.squares[squareIndex].isTargeted = true;\n  }\n\n  markSquareAtIndexAsAttacked(squareIndex: number): void {\n    Helpers.resetGivenFieldsOnACollection(this.squares, \"isAttacked\");\n    this.initializeSquareAtIndexIfEmpty(squareIndex);\n    this.squares[squareIndex].isAttacked = true;\n  }\n\n  markSquareAtIndexAsChosenDestination(squareIndex: number): void {\n    Helpers.resetGivenFieldsOnACollection(this.squares, \"isChosenDestination\");\n    this.initializeSquareAtIndexIfEmpty(squareIndex);\n    this.squares[squareIndex].isChosenDestination = true;\n  }\n\n\n  initializeSquareAtIndexIfEmpty(squareIndex: number) {\n    if (!this.squares[squareIndex]) {\n      this.squares[squareIndex] = new Square();\n    }\n  }\n\n  markAvailableDestinationsForSelectedEntity(entity: Entity): void {\n    if (entity.active) {\n      let { x, y } = entity.position;\n\n      Helpers.resetGivenFieldsOnACollection(this.squares, \"isAvailableDestination\");\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize || (i === x && j === y)) {\n            continue;\n          }\n\n          let square: Square = this.getSquareFromPosition(i, j);\n          if (this.isSquareEnterableByFriendlyUnits(square)) {\n            square.isAvailableDestination = true;\n          }\n\n          this.setSquareValueAtPosition(i, j, square);\n        }\n      }\n    }\n  }\n\n  isTargetSquareEnterable(targetSquare: Square): boolean {\n    let unpassableEntitiesInThisSquare = targetSquare.entities &&\n      targetSquare.entities.filter(\n        entity => !entity.isPassable && entity.isAlive\n      );\n    return  !(unpassableEntitiesInThisSquare && unpassableEntitiesInThisSquare.length);\n  }\n\n  isSquareEnterableByFriendlyUnits = square => [\n    'floor',\n    'monster-filter',\n  ].includes(square.squareType);\n\n  lightAllSquares(): void {\n    this.squares.forEach((square) => (square.isLit = true));\n  }\n  castLightsFromFriendlyEntity(entity: Entity): void {\n    if (entity.isFriendly) {\n      let { x, y } = entity.position;\n\n      for (let j = y - 2; j <= y + 2; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 2; i <= x + 2; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquareFromPosition(i, j);\n\n          square.isInTwilightZone = true;\n          this.setSquareValueAtPosition(i, j, square);\n        }\n      }\n\n      for (let j = y - 1; j <= y + 1; j++) {\n        if (j < 0 || j >= this.arenaSize) {\n          continue;\n        }\n        for (let i = x - 1; i <= x + 1; i++) {\n          if (i < 0 || i >= this.arenaSize) {\n            continue;\n          }\n\n          let square: Square = this.getSquareFromPosition(i, j);\n\n          square.isLit = true;\n          this.setSquareValueAtPosition(i, j, square);\n        }\n      }\n    }\n  }\n}\n\nexport const SquaresService = new SquaresServiceClass();\n","import { Entity, Position, HavingInventory } from \".\";\nimport { SquaresService, Square } from \"services/SquaresService\";\nimport * as Helpers from \"helpers\";\nimport { RangedWeapon } from \"services\";\nimport { Identifiable } from \"./EntityFeatures\";\nimport { Item } from \"services/ItemService\";\nconst arenaSize: number = 10;\n\n/**\n * @description Set of functions to interact with Entities\n */\nclass EntitiesServiceClass {\n  entities: Entity[];\n  selected: Entity;\n\n  getEntityId(entity: Identifiable): string {\n    return entity.name;\n  }\n\n  findEntityById(id: string): Entity {\n    let result: Entity = this.entities.filter(entity => this.getEntityId(entity) === id)[0];\n    return result;\n  }\n\n  removeEntity(entity: Entity) {\n    let indexOfEntityToRemove = this.entities.findIndex(currentEntity => currentEntity.name === entity.name);\n    if(indexOfEntityToRemove === -1) return -1;\n    this.entities.splice(indexOfEntityToRemove,1);\n    return 0;\n  }\n\n  addEntity(entity: Entity) {\n    this.entities.push(entity);\n  }\n\n  findItemOnEntity(entity: HavingInventory, id: string) {\n    let result = entity.inventory.filter(item => this.getEntityId(entity) === id)[0];\n    return result;\n  }\n\n  moveEntityRandomly(entity: Entity) {\n    if (entity.isDead || entity.isFriendly) return;\n\n    let oldPositionX = entity.position.x;\n    let oldPositionY = entity.position.y;\n\n    let deltaX = Helpers.getRandomIntInclusive(-1, 1);\n    let deltaY = Helpers.getRandomIntInclusive(-1, 1);\n\n    if(!entity.actionPoints) {\n      deltaX = 0;\n      deltaY = 0;\n    }\n    if(deltaX || deltaY) { // non-zero move\n      entity.actionPoints--;\n    } else {// zero ==> no move\n    }\n\n    entity.position.x = entity.position.x + deltaX;\n    entity.position.y = entity.position.y + deltaY;\n\n    entity.position.x = Helpers.getNumberWithinBoundaries(entity.position.x, 0, arenaSize - 1);\n    entity.position.y = Helpers.getNumberWithinBoundaries(entity.position.y, 0, arenaSize - 1);\n\n    let newSquare = SquaresService.getSquareFromPosition(entity.position.x, entity.position.y);\n\n    if ((newSquare && newSquare.entity) || (newSquare && newSquare.squareType !== \"floor\")) {\n      // if square occupiec, reverse the move\n      entity.position.x = oldPositionX;\n      entity.position.y = oldPositionY;\n    }\n  }\n\n  stopBreathingForKilledEntity(entity: Entity): Entity {\n    if (entity.isDead) {\n      entity.isBreathing = false;\n      this.stopShooting(entity);\n      entity.hp = 0;\n    }\n    return entity;\n  }\n\n  getEntitiesAtGivenPosition(targetPosition: Position): Entity[] {\n    return this.entities.filter((potentialTargetEntity: Entity): boolean => {\n      return (\n        potentialTargetEntity.position.x === targetPosition.x &&\n        potentialTargetEntity.position.y === targetPosition.y\n      );\n    });\n  }\n\n  getEntitiesAtGivenPositionThatAreAlive(targetPosition: Position): Entity[] {\n    const entitiesAtTargetSquare = this.getEntitiesAtGivenPosition(targetPosition);\n    const aliveEntitiesAtTargetSquare = entitiesAtTargetSquare.filter(entity => entity.isAlive);\n    return aliveEntitiesAtTargetSquare;\n  }\n\n  selectEntityFromGivenSquare(selected: Entity, targeted: Square): Entity {\n    if (selected && targeted && targeted.entity) {\n      selected.active = false;\n    }\n    if (targeted && targeted.entity) {\n      selected = targeted.entity;\n      selected.active = true;\n    }\n\n    return selected;\n  }\n\n  setSelected(selected: Entity, value: boolean): Entity {\n    this.selected = selected;\n    selected.active = value;\n    if (!value) {\n      this.selected = null;\n      console.log(\"Deselected:\", selected);\n    }\n    return selected;\n  }\n\n  checkAmmoAndCalculateDamageApplied(entity: Entity): number {\n    let damageApplied: number = 0;\n    let weapon: RangedWeapon = undefined;\n    let equippedWeapon: Item = entity.equipment && entity.equipment.hands;\n    if(!(equippedWeapon instanceof RangedWeapon)){\n      return 0;\n    } else {\n      weapon = equippedWeapon;\n    }\n\n    if (weapon.isAbleToFire) {\n      damageApplied = weapon.fire();\n      entity.isShooting = true;\n      entity.actionPoints--;\n    } else {\n      weapon.rounds = \"empty\";\n      this.stopShooting(entity);\n      return 0;\n    }\n\n    return damageApplied;\n  }\n\n  shouldEntityStopShooting = entity => entity.ceaseFire || entity.isDead;\n  stopShooting = entity => (entity.isShooting = false, entity.ceaseFire = false);\n  stopShootingWhenForbidden = entity => {\n    if (this.shouldEntityStopShooting(entity)) {\n      this.stopShooting(entity);\n    }\n  }\n\n  fireAShot(entity: Entity) {\n    if(!entity.actionPoints || entity.isDead) return;\n    let damageApplied = this.checkAmmoAndCalculateDamageApplied(entity);\n    let targetEntities = this.getEntitiesAtGivenPosition(entity.targetPosition);\n    targetEntities.forEach(targetEntity => {\n      this.applyDamageToTargetEntity(targetEntity, damageApplied);\n    });\n  }\n\n  applyDamageToTargetEntity(targetEntity: Entity, damage: number) {\n    if (damage) {\n      targetEntity.hp -= damage; // TODO: This should go through a method to calc armor in\n      targetEntity.bleeding = 5; // TODO: This should be defined elsewhere (on a weapon)\n    }\n  }\n\n  ceaseFireNextTickIfNoAliveTargets(entity: Entity): void {\n    if(!entity.targetPosition) return;\n    const areThereAliveTargetEntities = !!EntitiesService.getEntitiesAtGivenPositionThatAreAlive(entity.targetPosition).length;\n    if (!areThereAliveTargetEntities) {\n      entity.ceaseFire = true;\n    }\n  }\n\n  isEntityTargettingSomethingAlive(entity: Entity): boolean {\n    const areThereAliveTargetEntities: boolean = entity.targetPosition && !!EntitiesService.getEntitiesAtGivenPositionThatAreAlive(entity.targetPosition).length;\n\n    return (\n      entity.targetPosition &&\n      (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y) &&\n      areThereAliveTargetEntities\n    );\n  }\n\n  applyEffectsOfBleeding(entity: Entity): Entity {\n    // TODO: move to a \"bleed\" method\n    entity.bleedExternally();\n    return entity;\n  }\n\n  moveEntityIntoChosenDestination(entity: Entity): Entity {\n    if (!entity.actionPoints) return entity;\n    if (!entity.isDead && entity.moveDestination) {\n      let chosenDestinationSquare: Square = SquaresService.getSquareFromPosition(\n        entity.moveDestination.x,\n        entity.moveDestination.y\n      );\n\n      entity.position = entity.moveDestination;\n      delete entity.moveDestination;\n      chosenDestinationSquare.isChosenDestination = undefined;\n      entity.actionPoints--;\n    }\n    return entity;\n  }\n\n  setMoveDestinationOnASelectedEntity(selected: Entity, targetedSquarePosition: Position): void {\n    selected.moveDestination = targetedSquarePosition;\n  }\n\n  moveEntities(): void {\n    // this.entities.forEach((entity) => this.moveEntityIntoChosenDestination(entity));\n    // let OP: Entity = this.findEntityById(\"Squid\");\n    // let OC: Entity = this.findEntityById(\"Octo\");\n    // //this.moveEntityRandomly(JR);\n    // this.moveEntityRandomly(OP);\n    // this.moveEntityRandomly(OC);\n    this.entities.filter(entity => !entity.isFriendly).forEach((entity) => {\n      this.moveEntityRandomly(entity);\n    });\n  }\n\n  refillActionPointsForAllEntities() {\n    this.entities.forEach(entity => {entity.actionPoints = entity.maxActionPoints})\n  }\n}\n\nexport const EntitiesService = new EntitiesServiceClass();\n","export class Item {\n  name: string = \"\";\n}\n\nexport class Weapon extends Item {\n  causesBleeding = 0;\n  range = 0;\n  damage = 0;\n}\n\nexport class RangedWeapon extends Weapon {\n  rounds: number | any = 0;\n  maxRounds = 5;\n\n  fire() {\n    this.rounds--;\n    console.log(\"Firing ranged weapon. Damage: \", this.damage);\n    return this.damage;\n  }\n\n  get isAbleToFire() {\n    return this.rounds > 0;\n  }\n\n  reload() {\n    this.rounds = this.maxRounds;\n  }\n}\n\n// TODO: Should add kinetic/thermal damage\nexport class Rifle extends RangedWeapon {\n  type = \"projectile\";\n  range = 4;\n  damage = 1;\n  causesBleeding = 2;\n}\n\nexport class Lazer extends RangedWeapon {\n  type = \"lazer\";\n  range = 6;\n  damage = 5;\n  causesBleeding = 0;\n}\n","export class MessageServiceClass {\r\n  messages: string[] = [];\r\n  send(message: string) {\r\n    this.messages.push(message);\r\n  }\r\n}\r\n\r\nexport const MessageService = new MessageServiceClass();\r\n","import { Rifle, Lazer } from \"services\";\n\nexport class M16 extends Rifle {\n  name = \"M16\";\n  rounds = 15;\n  maxRounds = 20;\n  damage = 2;\n}\n\nexport class M40 extends Rifle {\n  name = \"M41A Pulse Rifle\";\n  rounds = 40;\n  maxRounds = 40;\n  damage = 1;\n}\n\nexport class L30 extends Lazer {\n  name = \"Assault Lazer Cannon\";\n  rounds = 30;\n  maxRounds = 30;\n  damage = 3;\n}\n","import { M16, M40, L30 } from \"./ItemDefinitions\";\nimport { Entity } from \"services\";\n\nexport const entitiesInitialValues = [\n  {\n    name: \"Lazer Blady\",\n    hp: 75,\n    maxHp: 100,\n    icon: \"🧑‍🚀\",\n    isFriendly: true,\n    position: { x: 4, y: 8 },\n    inventory: [new M16()],\n    equipment: {hands: new L30()},\n  },\n  {\n    name: \"Robot\",\n    age: 1,\n    hp: 50,\n    maxHp: 50,\n    icon: \"🤖\",\n    isFriendly: true,\n    isBreathing: false,\n    position: { x: 3, y: 5 },\n    equipment: {hands: new L30()},\n    bleedingReductionPerTurn: 50,\n  },\n  {\n    name: \"Octo\",\n    hp: 200,\n    maxHp: 200,\n    icon: \"🐙\",\n    position: { x: 8, y: 2 },\n    bleedingReductionPerTurn: 0,\n    bleeding: 1,\n    equipment: {hands: new L30()},\n  },\n  {\n    name: \"Squid\",\n    hp: 100,\n    maxHp: 100,\n    icon: \"🦑\",\n    position: { x: 5, y: 5 },\n    equipment: {hands: new M40()},\n  },\n  {\n    name: \"Ant\",\n    age: 1,\n    hp: 45,\n    maxHp: 50,\n    icon: \"🐜\",\n    isBreathing: true,\n    position: { x: 7, y: 6 },\n    equipment: {hands: new M40()},\n  },\n  {\n    name: \"Henry The Spider\",\n    hp: 100,\n    maxHp: 150,\n    icon: \"🕷️\",\n    position: { x: 9, y: 3 },\n    equipment: {hands: new L30()},\n  },\n  {\n    name: \"Mosquito\",\n    hp: 12,\n    maxHp: 20,\n    icon: \"🦟\",\n    position: { x: 2, y: 7 },\n    equipment: {hands: new M16()},\n    actionPoints: 1,\n    maxActionPoints: 1\n  },\n  {\n    name: \"Microbe\",\n    hp: 1,\n    maxHp: 5,\n    icon: \"🦠\",\n    position: { x: 3, y: 8 },\n    equipment: {hands: new L30()},\n  },\n];\n\nlet defaultValues = {\n  bleedingReductionPerTurn: 1,\n  isBreathing: true,\n  isPassable: false,\n  actionPoints: 2,\n  maxActionPoints: 2,\n  hasWeapon: true,\n}\n\nlet addEntityToDefaultValues = entity => Object.assign({...defaultValues}, entity);\n\nexport const characterDefinitions = entitiesInitialValues.\n  map(entity => addEntityToDefaultValues(entity)).\n  map(entry => new Entity(entry));\nexport default characterDefinitions;\n","export const structures = {\r\n  box: {\r\n    name: \"box\",\r\n    icon: \"📦\",\r\n    hp: 50,\r\n    maxHp: 70,\r\n    isBreathing: false,\r\n    isPassable: false,\r\n    position: { x: 4, y: 5 },\r\n  },\r\n  redBarrel: {\r\n    name: \"redBarrel\",\r\n    icon: \"🛢️\",\r\n    hp: 50,\r\n    maxHp: 70,\r\n    isBreathing: false,\r\n    isPassable: true,\r\n    position: { x: 4, y: 5 },\r\n  },\r\n};\r\n","import { SquaresService, Square } from \"services/SquaresService\";\nimport { EntitiesService, Entity } from \"services/EntitiesService\";\n\nimport { characterDefinitions } from \"resources/CharacterDefinitions\";\nimport tutorial_map_00 from \"resources/maps/tutorial_map_00.json\"; // yes, it's a resource named with snake_case\nimport intro from \"resources/maps/intro.json\";\nimport { GameActionsClassForGameComponent } from \"services/GameActionsService\";\nimport { L30 } from \"resources\";\nimport { Item } from \"services/ItemService\";\n\n\n/**\n * @description Handles loading and saving of the map and entities\n */\nexport class GameModelClass {\n  entities;\n  squares;\n  selected;\n\n  constructor() {\n    this.entities = EntitiesService.entities;\n    this.squares = SquaresService.squares;\n  }\n\n  saveMap = () => {\n    console.log('Alive suares:', SquaresService.squares);\n    let squares: Square[] = JSON.parse(JSON.stringify(SquaresService.squares));\n    let squaresProcessedForSave = squares.map((square) => {\n      //let newSquare = { squareType: square.squareType, entity: square.entity };\n\n      return square;\n    });\n    let squaresStringified = JSON.stringify(squaresProcessedForSave);\n    console.log(squaresStringified);\n    let message = \"Enter the name of saved map.\";\n    let mapName = \"map00\";\n\n    let result = window.prompt(message, mapName);\n\n    localStorage[result] = squaresStringified;\n  };\n\n  loadMap = (GameActions: GameActionsClassForGameComponent) => {\n    let mapNames: any = Object.keys(localStorage);\n    let message = `Enter the name of map to load.\\n`+\n    `Maps available in localStorage: ${mapNames}\\n`+\n    `Be aware item processing is not working fully yet.`;\n    let mapName = \"map00\";\n    console.log(mapNames);\n    let result = window.prompt(message, mapNames);\n    let squaresStringified = localStorage[result];\n\n    console.log(squaresStringified);\n    let squaresLoaded = JSON.parse(squaresStringified);\n    this.loadSquaresIntoService(squaresLoaded);\n\n    let entitiesWithinTheMap = squaresLoaded.filter(square => square.entity).map(square => square.entity);\n    console.log('Entities Within The Map:', entitiesWithinTheMap);\n\n    function makeInstanceOfAWeapon(weaponRecord): Item {\n      return new L30();\n    }\n\n    function processEquipmentForEntityRecord(entityRecord): any {\n      if(entityRecord.equipment && entityRecord.equipment.hands) {\n        entityRecord.equipment.hands = makeInstanceOfAWeapon(entityRecord.equipment.hands)\n      }\n      if(entityRecord.inventory) {\n        entityRecord.inventory.map(itemRecord => makeInstanceOfAWeapon(itemRecord));\n      }\n      return entityRecord;\n    }\n\n    let entitiesProcessed = entitiesWithinTheMap.\n          map(entity => processEquipmentForEntityRecord(entity)).\n          map(entityRecord => new Entity(entityRecord));\n\n    console.log('ALIVE ENTITIES?', entitiesProcessed)\n    this.loadEntitiesIntoService(entitiesProcessed);///\n    GameActions.setSquaresAccordingToEntities();\n    GameActions.processInterface();\n  };\n\n  loadSquaresIntoService = (squaresLoaded) => {\n    SquaresService.squares.forEach((square, index) => {\n      let targetSquare = square;\n      let sourceSquare = squaresLoaded[index];\n      targetSquare.squareType = (sourceSquare && sourceSquare.squareType) || 'floor';\n    });\n  };\n\n  loadEntitiesIntoService = (entities: Entity[]) => {\n    EntitiesService.entities = entities;\n  };\n\n  loadBuiltInMap = () => {\n    this.loadSquaresIntoService(intro);\n  };\n\n  loadPredefinedEntitities = () => {// TODO: Save and load entities together with the map?\n    this.loadEntitiesIntoService(characterDefinitions);\n  };\n}\n\nexport const GameModel = new GameModelClass();\n","import { GameModel, GameModelClass } from \"services/GameModelService\";\nimport { GameState } from \"./GameState\";\n\nimport { SquaresService, Square } from \"services/SquaresService\";\nimport { EntitiesService, Entity } from \"services/EntitiesService\";\nimport * as Helpers from \"helpers\";\n\n/**\n * @description Assorted methods required to run the game logic\n */\nclass GameLogicClass {\n  model: GameModelClass;\n\n  constructor() {\n    this.model = GameModel;\n  }\n\n  run = () => {\n    console.log(\"Running Game Logic\");\n    console.log(GameModel.entities);\n  };\n\n  calculateNextInterfaceState = (previousState: GameState) => {\n    let nextState = previousState;\n    let { entities, selected } = nextState;\n    entities.forEach((entity) => {\n      if (entity === selected) SquaresService.markAvailableDestinationsForSelectedEntity(selected);\n    });\n\n    return nextState;\n  };\n\n  /**\n   * Calculate WHAT EXACTLY? This should probably go into GameLogic\n   * @param previousState\n   */\n\n  calculeteNextGameStateAfterProcessingAGivenEntity(\n      previousState: GameState,\n      givenEntity: Entity\n    ): GameState{\n    if(givenEntity.actionPoints === 0) return previousState;\n    let nextState: GameState = previousState;\n    let { entities } = nextState;\n    this.processAnEntity(givenEntity);\n    nextState.enemiesAlive = this.calculateNumberOfAliveEnemies(entities);\n    nextState.friendsAlive = this.calculateNumberOfAliveFriends(entities);\n    return nextState;\n  }\n\n  processAnEntity(entity) { // Entity processing function\n    console.log('start procesing', entity);\n    EntitiesService.moveEntityRandomly(entity);\n    EntitiesService.moveEntityIntoChosenDestination(entity);\n    EntitiesService.stopShootingWhenForbidden(entity);\n    if (EntitiesService.isEntityTargettingSomethingAlive(entity)) {\n      EntitiesService.fireAShot(entity);\n    }\n    EntitiesService.ceaseFireNextTickIfNoAliveTargets(entity);\n\n    entity.bleedExternally();\n\n    EntitiesService.stopBreathingForKilledEntity(entity);\n\n    SquaresService.markAvailableDestinationsForSelectedEntity(entity);\n    console.log('end procesing', entity)\n    // SquaresService.castLightsFromFriendlyEntity(entity);\n  }\n\n  calculateNumberOfAliveFriends(entities: Entity[]):number {\n    return entities.filter(entity => entity.isFriendly && entity.isAlive).length;\n  }\n\n  calculateNumberOfAliveEnemies(entities: Entity[]):number {\n    let amountOfAliveEnemies = 0;\n    entities.forEach((entity) => {\n      if(entity.isFriendly) {\n        return;\n      } else if(entity.isAlive) {\n        amountOfAliveEnemies++;\n      }\n    });\n\n    return amountOfAliveEnemies;\n  }\n\n  syncSquaresWithEntities = (previousState) => {\n    let squares: Square[] = Helpers.newCopyOfArray(previousState.squares);\n    /*\n    Reattach new squares array to the SquaresService\n    This might actually be not-needed, as elements of that array are objects\n    and are referenced in both arrays, so unless we're adding new squares,\n    everything should work without re-attaching\n    */\n    SquaresService.squares = squares;\n    let entities: Entity[] = EntitiesService.entities;\n    if (entities.length) {\n      Helpers.resetGivenFieldsOnACollection(squares, \"entity\", \"entities\");\n    }\n    entities.forEach((entity) => {\n      SquaresService.setEntityWithinApropriateSquare(entity);\n    });\n\n    return { squares, entities };\n  };\n\n  deselectAllEntities = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"active\");\n    Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\", \"isAvailableDestination\");\n  };\n\n  ceaseFire = () => {\n    Helpers.resetGivenFieldsOnACollection(GameModel.entities, \"isShooting\");\n  };\n}\n\nexport const GameLogic = new GameLogicClass();\nexport default GameLogic;\n","import { Entity, Square, EntitiesService, SquaresService } from \"services\";\nimport GameLogic from \"./GameLogicService\";\n\n/**\n * @description Interface of GameState used in Game Component as state\n *\n */\nexport interface GameState {\n  entities: Entity[];\n  squares: Square[];\n  selected: Entity;\n  targeted: Square;\n  targetedSquareNumber: number;\n\n  arenaSize: number;\n  squareSize: number;\n  enemiesAlive: number;\n  friendsAlive: number;\n\n  isAutoLoopOn: boolean;\n  isBoardRotated: boolean;\n  isEditorOn: boolean;\n}\n\nexport class GameState implements GameState{\n  constructor() {\n    Object.assign(this,\n      {\n        entities: EntitiesService.entities,\n        squares: SquaresService.squares,\n        selected: EntitiesService.selected,\n        targeted: null,\n        targetedSquareNumber: null,\n\n        arenaSize: 10,\n        squareSize: 40,\n        enemiesAlive: GameLogic.calculateNumberOfAliveEnemies(EntitiesService.entities),\n        friendsAlive: GameLogic.calculateNumberOfAliveFriends(EntitiesService.entities),\n\n        isAutoLoopOn: false,\n        isBoardRotated: false,\n        isEditorOn: false,\n      }\n    );\n  }\n}\n","/** This file contains most of the click-handling logic for the Game */\n/* Handling of particular events is delegated to proper services */\n\nimport * as Helpers from \"helpers\";\nimport { Entity, EntitiesService, SquaresService, GameLogic, Position } from \"services\";\nimport { GameState } from \"services/GameLogicService\";\n\nlet component = null;\n/**\n * @description Class with methods designed to operate on Game Component state.\n * @requires Game component to be passed to constructor.\n * @example let gameActions = new GameActionsClass(this); // run inside the GameComponent\n */\nexport class GameActionsClassForGameComponent {\n  constructor(that) {\n    component = that;\n  }\n\n  entitiesProcessingLoopIntervalHandle = null;\n\n  toggleEditorMode = () => {\n    if (!component.state.isEditorOn) {\n      Helpers.resetGivenFieldsOnACollection(component.state.squares, \"blood\", \"entity\");\n      component.setState((prevState) => {\n        return { entities: [], isEditorOn: true };\n      });\n    } else {\n      component.setState((prevState) => {\n        return { squares: SquaresService.squares, entities: EntitiesService.entities, isEditorOn: false };\n      });\n    }\n  };\n\n  zoomIn() {\n    component.setState((prevState) => {\n      return { squareSize: prevState.squareSize + 5 };\n    });\n  }\n\n  zoomOut() {\n    component.setState((prevState) => {\n      return { squareSize: prevState.squareSize - 5 };\n    });\n  }\n\n  get isTurnInProgress() {return this.entitiesProcessingLoopIntervalHandle};\n\n  loop = () => {\n    console.debug('Attempting loop')\n    if(this.isTurnInProgress) {\n      setTimeout(this.loop, 1000);\n      return;\n    };\n    console.debug('Executing nextStep')\n    this.nextStep();\n    if (component.state.isAutoLoopOn) {\n      console.debug('Scheduling next loop step in 1s');\n      setTimeout(this.loop, 1000);\n    }\n  };\n\n  nextTick = () => {\n    component.setState({ isAutoLoopOn: false });\n    this.nextStep();// TODO should not be run if processing loop is in progress\n  };\n\n  nextStep() {\n    component.stepNumber++;\n    console.info('Starting processing turn #', component.stepNumber)\n    EntitiesService.refillActionPointsForAllEntities();\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, 'targetPosition', 'isShooting');\n    Helpers.resetGivenFieldsOnACollection(SquaresService.squares, 'isAttacked');\n    this.processEntities();\n  }\n\n  processEntities() {\n    this.drawAggro();\n    // EntitiesService.moveEntities();\n    this.entitiesProcessingLoopIntervalHandle = setInterval(\n      () => this.processNextUnprocessedEntity(),\n      100\n    );\n  }\n\n  processNextUnprocessedEntity() {\n    let entitiesForProcessing = EntitiesService.entities.filter(\n      entity =>\n        (!entity.isFriendly && entity.isAlive) &&\n        (entity.actionPoints > 0)\n    );\n    if(entitiesForProcessing.length) {\n      let entityForThisTurn = entitiesForProcessing[0];\n      this.setNewStateAfterProcessingChosenEntity(entityForThisTurn)\n    } else {// all are processed\n      clearInterval(this.entitiesProcessingLoopIntervalHandle);\n      this.entitiesProcessingLoopIntervalHandle = null;\n      console.log('All entities processed.')\n    }\n  }\n\n  setNewStateAfterProcessingChosenEntity(entity) {\n    component.setState(\n      (prevState) => GameLogic.calculeteNextGameStateAfterProcessingAGivenEntity(prevState, entity),\n      () => this.setSquaresAccordingToEntities()\n    );\n    this.processInterface();\n  }\n\n  executeActions = () => {\n    component.setState(\n      (prevState) => GameLogic.calculeteNextGameStateAfterProcessingAGivenEntity(prevState, prevState.selected),\n      () => this.setSquaresAccordingToEntities()\n    );\n    this.processInterface();\n  }\n\n  processInterface() {\n    component.setState(\n      (prevState) => GameLogic.calculateNextInterfaceState(prevState),\n      () => this.setSquaresAccordingToEntities()\n    );\n  }\n\n  /** Sets entities within apropriate squares, based on the value of their `position` field\n   * This might actually be not-needed, if movement of entities is reflected in their respectable squares\n   * Also: entities are no longer rendered within `Square` component\n   */\n  setSquaresAccordingToEntities() {\n    component.setState((prevState) => GameLogic.syncSquaresWithEntities(prevState));\n  }\n\n  handleClickV2 = (squareIndex: number) => {\n    component.setState(\n      (state: GameState) => {\n        let { squares, entities, selected, targeted, isEditorOn, targetedSquareNumber: selectedSquareNumber } = state;\n        let previousTargeted = targeted;\n        targeted = squares[squareIndex];\n        selectedSquareNumber = squareIndex;\n        const doubleClick = () => previousTargeted === targeted;\n        SquaresService.markSquareAtIndexAsTargeted(squareIndex);\n\n        if (isEditorOn) {\n          switch (targeted.squareType) {\n            case \"floor\":\n              targeted.squareType = \"wall\";\n              break;\n            case \"wall\":\n              targeted.squareType = \"nothing\";\n              break;\n            case \"nothing\":\n              targeted.squareType = \"monster-filter\";\n              break;\n            case \"monster-filter\":\n              targeted.squareType = \"floor\";\n              break;\n          }\n        }\n\n        /** Setting move destination while clicking on empty square */\n        if (doubleClick() && targeted.isAvailableDestination) {\n          selected.setMoveDestinationSquareByNumber(squareIndex);\n          delete selected.targetPosition;\n          delete selected.isShooting;\n          Helpers.resetGivenFieldsOnACollection(squares,'isAttacked')\n        }\n\n        /** To be able to deselect */\n        if (doubleClick() || selected) {\n          if (!selected && targeted.entity) {\n            // Selecting\n            selected = EntitiesService.selectEntityFromGivenSquare(selected, targeted);\n            //targeted = undefined;\n          } else if (Helpers.isSelectedTargeted(selected, targeted)) {\n            // Deselecting if not selecting\n            /* // DISABLE DOUBLECLICK DESELECT\n            GameLogic.deselectAllEntities();\n            selected = undefined;\n            // */\n          }\n        }\n\n        // setting attack\n        if (doubleClick() && selected && targeted.entity && selected !== targeted.entity) {\n          let targetSquarePosition = SquaresService.getSquarePositionFromIndex(squareIndex);\n          selected.attackPosition(targetSquarePosition);\n          SquaresService.markSquareAtIndexAsAttacked(squareIndex);\n          delete selected.moveDestination;\n          delete selected.isShooting;\n          Helpers.resetGivenFieldsOnACollection(squares, 'isChosenDestination');\n        }\n\n        return { squares, entities, selected, targeted, targetedSquareNumber: selectedSquareNumber };\n      },\n      () => this.processInterface()\n    );\n  };\n\n  drawAggro() {\n    EntitiesService.entities.forEach((entity)=>{\n      if(entity.isFriendly) return;\n      entity.isShooting = false;\n      this.aggro(entity);\n    })\n  }\n\n  aggro = (entity: Entity) => {\n    // let actor = EntitiesService.findEntityById(name);\n    let position = entity.position;\n    let closeEntities = this.findEntitiesThatAreClose(position);\n    let entitiesToAttack = closeEntities.filter(closeEntity => closeEntity.hp > 0);\n    if(entitiesToAttack.length) {\n      let firstAmongThem = entitiesToAttack[0];\n      entity.attackPosition(firstAmongThem.position);\n    }\n  }\n\n  findEntitiesThatAreClose(position: Position){\n    let {x, y} = position;\n    let entities: Entity[] = [];\n    for (let j = y - 1; j <= y + 1; j++) {\n      if (j < 0 || j >= SquaresService.arenaSize) {\n        continue;\n      }\n      for (let i = x - 1; i <= x + 1; i++) {\n        if (i < 0 || i >= SquaresService.arenaSize || (i === x && j === y)) {\n          continue;\n        }\n        let newlyFoundEntities = EntitiesService.getEntitiesAtGivenPosition({x: i, y: j})\n        entities = entities.concat(newlyFoundEntities);\n      }\n    }\n\n    return entities;\n  }\n\n  nuke = (dmg: number) => {\n    component.setState(\n      (state) => {\n        let { entities } = state;\n\n        entities.forEach((entity) => {\n          entity.hp = entity.hp - dmg;\n        });\n\n        return { entities };\n      },\n      () => {\n        this.processEntities();\n      }\n    );\n  };\n\n  toggleRotateBoard = () => {\n    component.setState({ isBoardRotated: !component.state.isBoardRotated });\n  };\n\n  switchAutoLoop = () => {\n    component.setState(\n      (previousState: GameState) => {\n        let isAutoLoopOn = !previousState.isAutoLoopOn\n        console.info('Switching auto loop to', isAutoLoopOn);\n        return { isAutoLoopOn };\n      },\n      () => {\n        if (component.state.isAutoLoopOn) {\n          this.loop();\n        }\n      }\n    );\n  };\n\n  onInventoryClick = (entity: Entity, itemName: string) => {\n    component.setState((prevState) => {\n      let entities = [].concat(prevState.entities);\n      EntitiesService.entities = entities;\n      let entityId = EntitiesService.getEntityId(entity);\n      let actualEntity = EntitiesService.findEntityById(entityId);\n      //let actualItem = EntitiesService.findItemOnEntity(actualEntity, itemName);\n\n      if (actualEntity.equipment.hands && actualEntity.equipment.hands.name === itemName) {\n        actualEntity.unEquipFromHands();\n      } else {\n        actualEntity.equipInHands(itemName);\n      }\n\n      return { entities };\n    });\n    console.log(entity, itemName);\n  };\n\n  handleDeselectAllEntities = () => {\n    component.setState(\n      (state) => {\n        let { squares, entities, selected } = state;\n\n        GameLogic.deselectAllEntities();\n        selected = undefined;\n\n        return { squares, entities, selected };\n      },\n      () => {\n        //this.processEntities();\n      }\n    );\n  };\n\n  ceaseFire = () => {\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"isShooting\");\n    this.processInterface();\n  };\n}\n","import React from \"react\";\nimport { LinearDisplay, InventoryList } from \"components\";\nimport { Entity, Item, InventoryItem, EntitiesService } from \"services\";\nimport * as Helpers from \"helpers\";\nimport \"./EntityCard.scss\";\n\ninterface EntityCardProps {\n  entity: Entity;\n  onInventoryClick?(entity: Entity, itemName: string);\n  onEntityClick?(entityName: string);\n  processInterface?: Function;\n}\n\nexport class EntityCard extends React.Component<EntityCardProps> {\n  renderCount = 0;\n  handleInventoryClick = (itemName: string): void => {\n    this.props.onInventoryClick(this.props.entity, itemName);\n  };\n\n  onDrop = (itemName: string) => {//TODO: Take this outside of the component, duuuh.\n    let { entity } = this.props;\n    if (entity.equipment.hands && entity.equipment.hands.name === itemName) {\n      entity.unEquipFromHands();\n      entity.isShooting = false;\n    }\n    let item: InventoryItem = entity.takeFromInventory(itemName);\n    //debugger;\n    if(item instanceof Item){\n      console.log(\"Dropping Item\")\n      entity.square.addItem(item);\n    } else if (item instanceof Entity){\n      console.log(\"Dropping Entity\")\n      EntitiesService.addEntity(item);\n      entity.square.entity = item;\n      item.position = {...entity.position};\n    }\n\n    this.props.processInterface();\n  };\n\n  onReload = (itemName: string) => {\n    let { entity } = this.props;\n    if (entity.equipment.hands && entity.equipment.hands.name === itemName) {\n      entity.isShooting = false;\n    }\n    this.props.processInterface();\n  };\n\n  get distanceToTarget(): number {\n    let { entity } = this.props;\n    if (!entity.targetPosition) return null;\n    return Number(\n      Helpers.calculateDistance(\n        entity.targetPosition.x - entity.position.x,\n        entity.targetPosition.y - entity.position.y\n      ).toFixed(2)\n    );\n  };\n\n  render() {\n    let { entity } = this.props;\n    if (!entity) return null;\n    // FIXME: Below should be separated into several sub-components\n    // Each sub-component should receive flat data (position, hp, ...)\n\n    let className = \"entity-card\";\n    if (entity.active) {\n      className += \" entity-card--active\";\n    }\n\n    if (entity.isFriendly) {\n      className += \" entity-card--friendly\";\n    }\n\n    if (entity.isDead) {\n      className += \" entity-card--dead\";\n    }\n\n    let inHands = entity.equipment && entity.equipment.hands;\n    let inHandsArray = inHands && [inHands];\n    let bleedingText\n    let bleedingReductionText;\n    if(entity.bleedingReductionPerTurn) {\n      bleedingReductionText = <span className=\"bleeding-info__reduction\">(-{entity.bleedingReductionPerTurn}<small className=\"bleeding-info__reduction__unit\">/Turn</small>)</span>;\n    }\n    if(entity.bleeding) {\n      bleedingText = <span className=\"bleeding-info\">Bleeding: {entity.bleeding} {bleedingReductionText}</span>\n    }\n\n    return (\n      <div className={className}>\n\n        <button\n          className=\"inventory-list__drop-button\"\n          onClick={() => this.props.onEntityClick(entity.name)}\n        >\n          Pick up\n        </button>\n\n        <div>\n          <div className=\"entity-card__portrait\">{entity.icon}</div>\n        </div>\n        <strong title=\"Name\">{entity.name}</strong>\n        <br />\n        <small className=\"entity-data__rank\">Private</small>\n        <div>\n          <LinearDisplay className=\"full\" label=\"AP\" current={entity.actionPoints} max={entity.maxActionPoints} />\n          <LinearDisplay className =\"full\" label=\"HP\" current={entity.hp} max={entity.maxHp} />\n          {bleedingText}\n          <br/>\n          <br />\n          <span title=\"Location\" className=\"entity-data__location\">\n            LOC: {entity.position.x}, {entity.position.y}\n          </span>\n          <span title=\"Distance to target\" hidden={!entity.targetPosition} className=\"entity-data__distance-to-target\">\n            DIST: { this.distanceToTarget }\n          </span>\n          <span title=\"Target location\" hidden={!entity.targetPosition} className=\"entity-data__target-position\">\n            TRGT: {entity.targetPosition && entity.targetPosition.x}, {entity.targetPosition && entity.targetPosition.y}\n          </span>\n          <br />\n        </div>\n        <InventoryList\n          label=\"Equipped\"\n          title=\"In hands\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          onReload={this.onReload}\n          inventory={inHandsArray}\n          processInterface={() => this.props.processInterface()}\n        />\n        <InventoryList\n          label=\"Inventory\"\n          title=\"In backpack\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          onReload={this.onReload}\n          inventory={entity.inventory}\n          processInterface={() => this.props.processInterface()}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { SquaresService, Entity } from \"services\";\nimport { HpBar, ShootingVisualization, EmojiMapper } from \"components\";\nimport * as Helpers from \"helpers\";\nimport \"./EntityPawn.scss\";\n\ninterface EntityPawnProps {\n  entity: Entity;\n}\n\nexport class EntityPawn extends React.Component<EntityPawnProps> {\n  randomTime = `${(Math.random() + 0.5).toFixed(2)}s`;\n\n  render() {\n    let { entity } = this.props;\n    let square = SquaresService.getSquareFromPosition(entity.position.x, entity.position.y);\n\n    let classNameBase = \"entity-pawn__icon\";\n    let className = `${classNameBase}`;\n    let classessFromFlags = Helpers.turnFlagsIntoClasses(entity, classNameBase);\n    classessFromFlags += Helpers.turnFlagsIntoClasses(square, classNameBase);\n    className += ` ${classessFromFlags} `;\n    let fof = entity.isFriendly ? 'friendly' : 'hostile';\n    let color = entity.isFriendly ? 'green' : 'red';\n    let zIndex = entity.isShooting ? 5 : 1;\n    let animationBreathing = entity.isBreathing ? `breathing ${this.randomTime} alternate infinite linear` : \"none\";\n\n    let boardPadding = 10;\n    let squareMargin = 2;\n    return (\n      <div\n        className=\"entity-pawn\"\n        key={entity.name}\n        style={{\n          left: `calc(${boardPadding + 3}px + ${entity.position.x * squareMargin * 2}px + ${entity.position.x}em)`,\n          top: `calc(${boardPadding + 3}px + ${entity.position.y * squareMargin * 2}px + ${entity.position.y}em)`,\n          zIndex: zIndex,\n        }}\n      >\n        <div\n          className={`entity-pawn__health-display ` + fof}\n        >\n\n          <HpBar\n            current={entity.hp}\n            max={entity.maxHp}\n            color={color}\n          />\n        </div>\n\n        <div\n          className={className}\n          style={{\n            animation: animationBreathing,\n          }}\n        >\n          <EmojiMapper emoji={entity.icon} />\n        </div>\n        <ShootingVisualization entity={entity} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport * as Helpers from \"helpers\";\nimport \"./EmojiMapper.scss\";\n\ninterface EmojiMapperProps {\n  emoji: string;\n}\n\n/**\n * @description Maps emojis to pictures with pre-picked versions of them\n */\nexport class EmojiMapper extends React.Component<EmojiMapperProps> {\n\n  emojiMap = {\n    \"🐙\": \"octopus\",\n    \"🦑\": \"squid\",\n    \"🕷️\": \"spider\",\n    \"🦟\": \"mosquito\",\n    \"🐜\": \"ant\",\n    \"🦠\": \"microbe\",\n    \"🧑‍🚀\": \"astronaut\",\n    \"🤖\": \"robot\",\n    \"🛢️\": \"oildrum\"\n  }\n\n\n  render() {\n    let { emoji } = this.props;\n    let emojiMappedTo = this.emojiMap[emoji];\n    let output = <></>;\n    if(emojiMappedTo){\n      output = <div className={\"emoji emoji-\"+ emojiMappedTo}></div>\n    } else {\n      output = <div>{emoji}.</div>\n    }\n\n    return (\n      <>{output}</>\n    );\n  }\n}\n","import React from \"react\";\n// services\nimport { SquaresService, EntitiesService } from \"services\";\nimport { Entity, Square, Position, Item } from \"services\";\n// components\nimport { EntityCard, InventoryList } from \"components\";\n// others\nimport { structures } from \"resources\";\nimport * as Helpers from \"helpers\";\nimport GameStyles from \"./Game.module.scss\";\n\ninterface TargetedSquareInfoProps {\n  className: string;\n  squareNumber: number;\n  squares: Square[];\n  selected: Entity;\n  targeted: Square;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  processInterface: Function;\n}\n\n// TODO: Refactor, does it really need all this logic.\nexport default class TargetedSquareInfo extends React.Component<TargetedSquareInfoProps> {\n  boxSerialNumber: number = 0;\n\n  onItemClick = (itemName: string): void => {\n    let { selected, targeted, squareNumber } = this.props;\n    let targetedSquarePosition = SquaresService.getSquarePositionFromIndex(squareNumber);\n    if (selected && targeted &&\n      selected.position.x === targetedSquarePosition.x &&\n      selected.position.y === targetedSquarePosition.y\n      ) {\n      let item = targeted.takeFromInventory(itemName);\n      if (!item) {\n        item = targeted.entity;\n        let square = SquaresService.getSquareFromPosition(targetedSquarePosition.x, targetedSquarePosition.y);\n        square.entity = null;\n        EntitiesService.removeEntity(item as Entity);// TODO: Take this out of the component\n      }\n      selected.addToInventory(item);\n    }\n    this.props.processInterface();\n  };\n\n  onMoveClick(selected: Entity, targetedSquarePosition: Position): void {\n    let targetedSquare: Square = SquaresService.getSquareFromPosition(targetedSquarePosition.x, targetedSquarePosition.y);\n    selected.setMoveDestinationPosition(targetedSquarePosition);\n    targetedSquare.isChosenDestination = true;\n    this.props.processInterface();\n  }\n\n  onAttackClick(selected: Entity, targetedSquarePosition: Position): void {\n    selected.attackPosition(targetedSquarePosition);\n    this.props.processInterface();\n  }\n\n  onAddStructureClick(targetedSquarePosition: Position, structureType: string): void {\n    let box = Object.assign({}, structures[structureType]);\n    let targetPosition = Object.assign({}, targetedSquarePosition);\n    box.position = targetPosition;\n    box.name += this.boxSerialNumber++;\n    let square = SquaresService.getSquareFromPosition(targetedSquarePosition.x, targetedSquarePosition.y);\n\n    let newStructure = new Entity(box);\n\n    // TODO: FIXME: Stop forcing types, make a new list for scenery items.\n    square.entity = newStructure;\n    EntitiesService.entities.push(newStructure);\n\n    //square.addToInventory(newStructure as Item);\n\n\n    this.props.processInterface();\n  }\n\n  render() {\n    let { targeted, selected, squareNumber } = this.props;\n\n    if (!targeted) {\n      return null;\n    }\n\n    let targetedSquarePosition = SquaresService.getSquarePositionFromIndex(squareNumber);\n\n    let entityInfo = [];\n    let distanceInfo;\n    let positionInfo;\n    let bloodInfo;\n    let availableActions = [];\n    let items;\n\n    let editorButtons = (\n      <div>\n        <button onClick={() => this.onAddStructureClick(targetedSquarePosition, \"box\")} className={GameStyles.button}>\n          Add box\n        </button>\n        <button\n          onClick={() => this.onAddStructureClick(targetedSquarePosition, \"redBarrel\")}\n          className={GameStyles.button}\n        >\n          Add barrel\n        </button>\n      </div>\n    );\n    \n    if (targeted.entities && targeted.entities.length){\n      targeted.entities.forEach(i => {\n        if (selected !== i) {\n          entityInfo.push(\n            <EntityCard\n              onEntityClick={this.onItemClick}\n              onInventoryClick={this.props.onInventoryClick}\n              entity={i}\n              processInterface={() => this.props.processInterface()}\n            />\n          );\n        }\n      });\n    }\n    \n\n    if (targeted.items) {\n      items = (\n        <InventoryList\n          label=\"Items in this location\"\n          title=\"On the floor\"\n          onClick={this.onItemClick}\n          onDrop={null}\n          onReload={null}\n          inventory={targeted.items}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (selected) {\n      let distanceToSelected = Helpers.calculateDistance(\n        targetedSquarePosition.x - selected.position.x,\n        targetedSquarePosition.y - selected.position.y\n      );\n\n      distanceInfo = <li>Distance to selected: {distanceToSelected.toFixed(2)}</li>;\n\n      if (distanceToSelected !== 0) {\n        if (targeted.isAvailableDestination) {\n          availableActions[0] = (\n            <button key=\"move\" onClick={() => this.onMoveClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Move\n            </button>\n          );\n        }\n        if (targeted.entity) {\n          availableActions[1] = (\n            <button key=\"attack\" onClick={() => this.onAttackClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Attack\n            </button>\n          );\n        }\n      }\n    }\n\n    if (targetedSquarePosition) {\n      positionInfo = (\n        <li>\n          Position: [ {targetedSquarePosition.x}, {targetedSquarePosition.y} ]{\" \"}\n        </li>\n      );\n    }\n\n    if (targeted.blood) {\n      bloodInfo = <li>Blood amount: {targeted.blood}</li>;\n    }\n\n    return (\n      <div className={this.props.className}>\n        <strong className={GameStyles.targeted__label}>Target square Info</strong>\n        <div>{entityInfo}</div>\n        <div>{availableActions}</div>\n        <ul>\n          {positionInfo}\n          {distanceInfo}\n          {bloodInfo}\n          {items}\n          {editorButtons}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { ReactElement } from \"react\";\n// services\nimport { Entity } from \"services\";\n// components\nimport { EntityCard } from \"components/EntityCard\";\n// others\nimport GameStyles from \"./Game.module.scss\";\n\ninterface SelectedEntityInfoProperties {\n  selected: Entity;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  handleDeselectAllEntities: () => void;\n  processInterface: Function;\n}\n\n// TODO: Change this into HOC, as it doesn't really need half of it's props for itself\nexport default class SelectedEntityInfo extends React.Component<SelectedEntityInfoProperties> {\n  render(): ReactElement {\n    if (!this.props.selected) {\n      return null;\n    }\n\n    return (\n      <div className={GameStyles.selected}>\n        <strong className={GameStyles.selected__label}>Selected entity </strong>\n        <div>\n          <EntityCard\n            onInventoryClick={this.props.onInventoryClick}\n            entity={this.props.selected}\n            processInterface={() => this.props.processInterface()}\n          />\n        </div>\n        <button onClick={this.props.handleDeselectAllEntities} className={GameStyles.button}>\n          {\" \"}\n          Deselect\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\n// services\nimport { EntitiesService, SquaresService, GameModel, GameActionsClassForGameComponent, GameState, Entity } from \"services\";\n\n// components\nimport { Board, MessageBox, Controls } from \"components\";\nimport TargetedSquareInfo from \"./TargetedSquareInfo\";\nimport SelectedEntityInfo from \"./SelectedEntityInfo\";\n\n// others\nimport styles from \"./Game.module.scss\";\n\nlet GameActions = null;\n\n/** Game composes all the parts of the interface together */\nexport class Game extends React.PureComponent<void, GameState> {\n  renderCounter: number = 0;\n  stepNumber: number = 0;\n\n  constructor(props: void) {\n    super(props);\n\n    GameModel.loadBuiltInMap();\n    GameModel.loadPredefinedEntitities();\n    EntitiesService.setSelected(EntitiesService.findEntityById(\"Lazer Blady\"), true);\n\n    this.state = new GameState();\n\n    GameActions = new GameActionsClassForGameComponent(this);\n    console.log('Initial state dump:', this.state);\n  }\n\n  componentDidMount() {\n    this.startIfAutoLoopIsOn();\n  }\n\n  startIfAutoLoopIsOn(){\n    if(this.state.isAutoLoopOn){\n      GameActions.loop();\n    }\n  }\n\n  calculateFriendlyActionPoints(): number{\n    let startValue = 0;\n    let apAdder = (previousValue: number, entity: Entity): number => {\n      let result = previousValue + entity.actionPoints;\n      return result;\n    };\n    return EntitiesService.entities.filter(entity => entity.isFriendly).reduce(\n      apAdder, // takes a previous value and an array element (entity), returns number (next value)\n      startValue // start value for only the first iteration\n    );\n  }\n\n  render() {\n    // console.log(\"Rendering Game. #\", this.renderCounter++);\n    return (\n      <div className={styles.game}>\n        <div className={styles.game__board}>\n          <Board\n            squares={this.state.squares}\n            entities={this.state.entities}\n            onClick={(i) => GameActions.handleClickV2(i)}\n            size={this.state.arenaSize}\n            isRotated={this.state.isBoardRotated}\n            style={{fontSize: `${this.state.squareSize}px`}}\n          />\n          <Controls\n            keys={['W', 'S', 'A', 'D']}\n            onKeyPress={e => e}\n          ></Controls>\n        </div>\n\n        <div className={styles.game__info}>\n          <div className={styles.actions}>\n            <div className={styles.action_row}>\n              <button onClick={GameActions.toggleEditorMode}>\n                Editor Mode\n              </button>\n              <button onClick={GameModel.saveMap}>\n                Save Map\n              </button>\n              <button onClick={()=> GameModel.loadMap(GameActions)}>\n                Load Map\n              </button>\n            </div>\n\n            <div className={styles.action_row}>\n              <button onClick={GameActions.toggleRotateBoard}>\n                Rotate Board\n              </button>\n              <button onClick={GameActions.zoomIn}>\n                Zoom In (+)\n              </button>\n              <button onClick={GameActions.zoomOut}>\n                Zoom Out (-)\n              </button>\n            </div>\n            <div className={styles.action_row}>\n              <button onClick={() => GameActions.nuke(40)} className={styles[\"button-nuke\"]}>\n                Nuke All\n              </button>\n              <button onClick={GameActions.ceaseFire}>\n                Cease Fire\n              </button>\n              <button onClick={GameActions.executeActions} className={styles.execute_actions}>\n                Execute Actions\n              </button>\n            </div>\n\n            <div className={styles.action_row}>\n              <span className={styles[\"step-counter\"]}>Tick: {this.stepNumber}</span>\n\n              <label className={` ${styles.button} ${styles[\"auto-cycle\"]}`}>\n                <input type=\"checkbox\" checked={this.state.isAutoLoopOn} onChange={GameActions.switchAutoLoop} />\n                <span>Auto Cycle</span>\n              </label>\n\n              <button onClick={GameActions.nextTick} className={styles.button + ' '+ styles.next_tick}>\n                Next Tick\n              </button>\n\n            </div>\n\n            <div className={styles.action_row}>\n            <span>\n                Enemies alive: {this.state.enemiesAlive} <br/>\n                Friends alive: {this.state.friendsAlive} <br/>\n                {this.state.enemiesAlive && !this.state.friendsAlive ? 'YOU LOST':'' }\n                {this.state.friendsAlive && !this.state.enemiesAlive ? 'YOU WON':'' }\n              </span>\n              &nbsp;\n              <p className=\"instructions\">\n\n              </p>\n              <span>Friends actions points: {this.calculateFriendlyActionPoints()} </span>\n\n            </div>\n          </div>\n          <div className={styles[\"interaction-container\"]}>\n            <SelectedEntityInfo\n              selected={this.state.selected}\n              handleDeselectAllEntities={GameActions.handleDeselectAllEntities}\n              onInventoryClick={GameActions.onInventoryClick}\n              processInterface={() => GameActions.processInterface()}\n            />\n\n            <TargetedSquareInfo\n              className={styles.targeted}\n              squareNumber={this.state.targetedSquareNumber}\n              squares={this.state.squares}\n              selected={this.state.selected}\n              targeted={this.state.targeted}\n              onInventoryClick={GameActions.onInventoryClick}\n              processInterface={() => GameActions.processInterface()}\n            />\n            <div></div>\n          </div>\n          <MessageBox />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\n\ninterface BloodProps {\n  bloodAmount: number; // receives amount of blood ONLY\n}\n\n/**\n * @description\n * Visualises blood by adding red background\n * and a little number in the corner.\n *\n * @param bloodAmount - number representing the amount of blood.\n */\nclass Blood extends React.PureComponent<BloodProps> {\n  render() {\n    let { bloodAmount } = this.props;\n    if(bloodAmount < 0) {\n      console.error('Blood amount negative.');\n      return;\n    }\n\n    let bloodDrops = [];\n    let i = bloodAmount;\n    let marginForDropsInPercent = 0;\n    let mfd = marginForDropsInPercent;\n    let dropSizeVariance = 3;\n    let dsv = dropSizeVariance;\n\n\n    while(i--) {\n      bloodDrops.push(\n        <span className=\"blood__drop\" style={{\n          position: 'absolute',\n          fontSize: `${1 + Math.random() * dsv}em`,\n          left: `calc(${mfd + Math.random() * (100-2*mfd)}% - 0.4em)`,\n          top: `calc(${mfd + Math.random() * (100-2*mfd)}% - 0.5em)`,\n        }}>o</span>\n      );\n    }\n\n    return (\n      <div\n        className=\"square__blood\"\n        style={{\n          background: `rgba(255, 0, 0, 0)`,//${(bloodAmount / 50).toFixed(2)})`,\n          position: 'relative'\n        }}\n      >\n        {bloodDrops}\n        <span className=\"blood__text\">\n          {bloodAmount}\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default Blood;\n","import React from \"react\";\nimport { Entity, Item } from \"services\";\n\ninterface ItemsProps {\n  items: Item[];\n  itemsNumber: number; // here to trigger update when list length changes\n}\n// FIXME: I have a strange feeling this doesn't update when contents of items list change but not the number of elements\n/**\n * @description\n * Displays icons of items on the square, as well as little number in the corner.\n * @param itemsNumber - number of items on the square\n * @param items - array of items on the square\n */\nclass Items extends React.PureComponent<ItemsProps> {\n  itemsIcons = [];\n\n  render() {\n    let { items, itemsNumber } = this.props;\n\n    if (!items) return null;\n\n    items.forEach((item) => {\n      let entity = item as Entity;\n      if (entity.icon) {\n        this.itemsIcons.push(<div className=\"square__item-icon\">{entity.icon}</div>);\n      }\n    });\n\n    return (\n      <div className=\"square__items\">\n        <div className=\"square__items-icons\">{this.itemsIcons}</div>\n        <div className=\"square__items-number\">{itemsNumber}</div>\n      </div>\n    );\n  }\n}\n\nexport default Items;\n","import React, { ReactElement } from \"react\";\n// services\nimport { Item } from \"services\";\n// components\nimport Blood from \"./Blood\";\nimport Items from \"./Items\";\n// others\nimport \"./Square.scss\";\n\n// TODO: This should really take less props\ninterface SquareProps {\n  squareId: number;\n  className?: string;\n  onClick: (squareIndex: number) => void;\n  blood: number;\n  items: Item[]; // collection of objects\n  itemsNumber: number; // here to trigger update when list length changes\n}\n\n/**\n * @description Displays a square with blood and items on it.\n * @param squareId - unique numerical id\n * @param className - string with CSS clasess\n * @param onClick - callback to call when square is clicked\n * @param blood - amount of blood\n * @param items - array of items\n * @param itemsNumber - numberof items\n */\nexport class SquareComponent extends React.PureComponent<SquareProps> {\n  onClick = () => {\n    this.props.onClick(this.props.squareId);\n  };\n\n  render() {\n    // console.log(\"Render Square\", this.props.squareId);\n    // TODO: Extract into separate component\n    function cuboid(classPrefix:string):ReactElement {\n      let i = 6;\n      let cuboidFaces: ReactElement[] = [];\n\n      while(i--){\n        cuboidFaces.push(<div key={i} className={`${classPrefix}__cuboid-face`}></div>);\n      }\n\n      return <div className={`${classPrefix}__cuboid`}>\n        {cuboidFaces}\n      </div>\n    }\n\n    return (\n      <button className={this.props.className} onClick={this.onClick}>\n        <Blood bloodAmount={this.props.blood} />\n        <Items items={this.props.items} itemsNumber={this.props.itemsNumber} />\n        <div className=\"square__content\">&nbsp;</div>\n        {cuboid('square')}\n      </button>\n    );\n  }\n}\n\n","import React from \"react\";\nimport \"./LinearDisplay.scss\";\n\ninterface LinearDisplayProps {\n  className?: string;\n  current: number;\n  max: number;\n  title?: string;\n  label?: string;\n}\n\nexport function LinearDisplay(props: LinearDisplayProps) {\n  let className = `linear-display ${props.className || \"\"}`;\n  let percentage = ~~((props.current * 100) / props.max);\n  let overload = percentage > 100;\n  let negative = percentage < 0;\n  if (overload) {\n    percentage = 100;\n    className += \" linear-display--overloaded\";\n  }\n  if (negative) {\n    percentage = 0;\n  }\n  let progressStyle = {\n    width: `${percentage}%`,\n  };\n  let title = props.title || `${props.current}/${props.max}`;\n\n  let amount = props.current;\n\n  let divider = 1;\n  if (props.max >= 40 && props.max < 100) {\n    divider = 5;\n  } else if (props.max >= 100) {\n    divider = 10;\n  }\n\n  amount = amount / divider;\n\n  let gridSize = 100 / amount;\n\n  let color = `rgba(200,200,200,0.4)`;\n  color = `black`;\n  let progressGridStyle = {\n    backgroundSize: `${gridSize}% 100%`,\n    backgroundImage: `\n      linear-gradient(to left, ${color} 1px, transparent 1px)\n    `,\n  };\n\n  Object.assign(progressStyle, progressGridStyle);\n\n  return (\n    <div className={className}>\n      <div className=\"linear-display__label\">{props.label}:&nbsp;</div>\n      <div className=\"linear-display__bar-container\" title={title}>\n        <div className=\"linear-display__bar-progress\" style={progressStyle}>\n          <span className=\"linear-display__bar-progress-text\">\n            {props.current}\n            {overload ? \"/\" + props.max : \"\"}&nbsp;\n          </span>\n        </div>\n      </div>\n      <div>&nbsp;</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./HudPanel.scss\";\n\ninterface HudPanelProps {\n  title: string;\n  children: JSX.Element;\n}\n\nexport class HudPanel extends React.Component<HudPanelProps> {\n\n    render() {\n        return <div className=\"hud-panel\">\n            <div className=\"hud-panel__title\">{this.props.title}</div>\n            <div className=\"hud-panel__content\">{this.props.children}</div>\n        </div>;\n    }\n}","import React from \"react\";\n//import \"./Cell.scss\";\n\ninterface CellProps {\n}\n\ninterface CellState {\n}\n\nexport class Cell extends React.PureComponent<CellProps, CellState> {\n\n  state = {}\n\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //   }\n  // }\n\n  render() {\n    //console.log(`Rendering [${this.props.children}]`);\n    return <div className=\"cell\">{this.props.children}</div>\n  }\n}","import React from \"react\";\nimport { Cell } from \"./Cell\";\nimport \"./Grid.scss\";\n\ninterface GridProps {\n  width: number;\n  height: number;\n  startAt: [number, number];\n}\n\ninterface GridState {\n}\n\nexport class Grid extends React.Component<GridProps, GridState> {\n\n  constructor(props) {\n    super(props);\n  }\n\n  renderGrid() {\n    let rows = [];\n    for(let y = 0; y <= this.props.height; y++) {\n      let sourceY = this.props.startAt[1] + y;\n      let currentRow = [];\n\n      for(let x = 0; x <= this.props.width; x++) {\n        let sourceX = this.props.startAt[0] + x;\n        let currentCell = <Cell key={`$key_${sourceX}_${sourceY}`}>{sourceX}, {sourceY}</Cell>\n        currentRow.push(currentCell);\n      }\n      rows.push(<div className=\"row\"  key={`$key_X_${sourceY}`}>{currentRow}</div>);\n    }\n    return <div className=\"grid\">\n      {rows}\n    </div>;\n  }\n\n  render() {\n    return this.renderGrid();\n  }\n}","import React from \"react\";\nimport \"./Controls.scss\";\n\ninterface ControlsProps {\n    keys: string[],\n    onKeyPress: Function,\n}\n\ninterface ControlsState {\n    w: boolean,\n    s: boolean,\n    a: boolean,\n    d: boolean,\n}\n\nexport class Controls extends React.Component<ControlsProps, ControlsState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            w: false,\n            s: false,\n            a: false,\n            d: false,\n        }\n    }\n\n    componentDidMount(){\n        document.addEventListener(\"keydown\", (e) => this.onKeyDown(e), false);\n        document.addEventListener(\"keyup\", (e) => this.onKeyUp(e), false);\n    }\n\n    onKeyDown(event) {\n        console.log(event)\n        switch(event.keyCode) {\n            case 87: // W\n                this.setState({w: true});\n                this.props.onKeyPress('w');\n                break;\n            case 83: // S\n                this.setState({s: true});\n                this.props.onKeyPress('s');\n                break;\n            case 65: // A\n                this.setState({a: true});\n                this.props.onKeyPress('a');\n                break;\n            case 68: // D\n                this.setState({d: true});\n                this.props.onKeyPress('d');\n                break;\n        }\n    }\n\n    onKeyUp(event) {\n        console.log(event)\n        switch(event.keyCode) {\n            case 87: // W\n                this.setState({w: false});\n                break;\n            case 83: // S\n                this.setState({s: false});\n                break;\n            case 65: // A\n                this.setState({a: false});\n                break;\n            case 68: // D\n                this.setState({d: false});\n                break;\n        }\n    }\n\n    render() {\n        return <div className=\"controls\">\n            [<span className={`${this.state.w ? 'pressed' : ''} key` }>W</span>]\n            [<span className={`${this.state.s ? 'pressed' : ''} key` }>S</span>]\n            [<span className={`${this.state.a ? 'pressed' : ''} key` }>A</span>]\n            [<span className={`${this.state.d ? 'pressed' : ''} key` }>D</span>]\n        </div>;\n    }\n}","import React from \"react\";\n// services\nimport \"./MessageBox.scss\";\nimport { MessageService } from \"services\";\n\nexport class MessageBox extends React.Component {\n  messages = MessageService.messages;\n  messageNumber;\n\n  shouldComponentUpdate() {\n    // don't update if there are no new messages since last render\n    return this.messages.length !== this.messageNumber;\n  }\n\n  renderMessage = (message: string, number: number) => {\n    return (\n      <li key={`msg${number}`}>\n        Message #[{number}]: {message}\n      </li>\n    );\n  };\n\n  render() {\n    if (!this.messages.length) return null;\n    let RenderedMessages = this.messages.map((message, number) => this.renderMessage(message, number));\n    // remember the number of messages rendered\n    this.messageNumber = this.messages.length;\n    return (\n      <ul className=\"messages\" id=\"messages\">\n        {RenderedMessages}\n      </ul>\n    );\n  }\n\n  scrollElement() {\n    window.requestAnimationFrame(() => {\n      var element = document.getElementById(\"messages\");\n      element.scrollTop = element.scrollHeight;\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.messages.length) this.scrollElement();\n  }\n}\n","import React from \"react\";\nimport { Item, RangedWeapon } from \"services\";\nimport { LinearDisplay } from \"components/LinearDisplay\";\n\ninterface InventoryItemProps {\n  item: Item;\n  onDrop(itemName: string);\n  onReload(itemName: string);\n  onClick(itemName: string);\n  processInterface: Function;\n}\n\nexport function InventoryItem(props: InventoryItemProps) {\n  let { item } = props;\n  let reloadButton;\n  let dropButton;\n  let ammoCounter;\n\n  if (props.onDrop) {\n    dropButton = (\n      <button\n        className=\"inventory-list__drop-button\"\n        onClick={() => {\n          props.onDrop(item.name);\n        }}\n      >\n        Drop\n      </button>\n    );\n  }\n\n  if (item instanceof RangedWeapon) {\n    let weapon = item as RangedWeapon;\n\n    if (weapon.reload) {\n      // has reload capability\n      let className = \" inventory-list__reload-button \";\n\n      if (weapon.rounds === 0 || weapon.rounds === \"empty\") {\n        className += \" inventory-list__reload-button--empty \";\n      } else if (weapon.rounds < weapon.maxRounds) {\n        className += \" inventory-list__reload-button--partial \";\n      }\n      reloadButton = (\n        <button\n          className={className}\n          onClick={() => {\n            weapon.reload();\n            props.onReload && props.onReload(item.name);\n            props.processInterface();\n          }}\n        >\n          Reload\n        </button>\n      );\n    } else {\n      reloadButton = null;\n    }\n\n    ammoCounter = weapon.reload ? (\n      <LinearDisplay className=\"full\" label=\"Rounds\" current={weapon.rounds} max={weapon.maxRounds} />\n    ) : null;\n  }\n\n  return (\n    <div key={item.name}>\n      <div onClick={() => props.onClick(item.name)} key={item.name} className=\"inventory-list__item\">\n        <span>{item.name}</span>\n        <div>{ammoCounter}</div>\n      </div>\n      {reloadButton}\n      {dropButton}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./InventoryList.scss\";\nimport { Item } from \"services\";\nimport { InventoryItem } from \"components/InventoryItem\";\n\ninterface InventoryListProps {\n  className?: string;\n  label: string;\n  title: string;\n  onClick(itemName: string);\n  onDrop(itemName: string);\n  onReload(itemName: string);\n  inventory: Item[]; //\n  processInterface: Function;\n}\n\nexport function InventoryList(props: InventoryListProps) {\n  const className = `inventory-list ${props.className || \"\"}`;\n\n  if (!props.inventory) {\n    return null;\n  }\n\n  const inventoryItems = props.inventory.map((item) => (\n    <InventoryItem\n      key={`i${item.name}`}\n      item={item}\n      onClick={props.onClick}\n      onDrop={props.onDrop}\n      onReload={props.onReload}\n      processInterface={props.processInterface}\n    />\n  ));\n\n  return (\n    <div className={className}>\n      <div className=\"inventory-list__label\">\n        {props.label}\n        :&nbsp;\n      </div>\n      <div className=\"inventory-list__items\" title={props.title}>\n        {inventoryItems}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./HpBar.scss\";\n\ninterface HpBarProps {\n    current: number;\n    max: number;\n    color: string;\n}\n\nexport class HpBar extends React.Component<HpBarProps> {\n\n    render() {\n        if(this.props.current <= 0) return null;\n        let percentage = ~~((this.props.current * 100) / this.props.max);\n        let progressStyle = {\n            width: `${percentage}%`,\n            backgroundColor: this.props.color\n        };\n        return(\n            <div className=\"hpbar\">\n                <div className=\"hpbar__indicator\" style={progressStyle}>\n\n                </div>\n                <span className=\"hpbar__text\">\n                        {this.props.current}\n                </span>\n            </div>\n        );\n    }\n}","import * as Helpers from \"helpers\";\nimport React, { ReactElement } from \"react\";\n\nexport function ShootingVisualization(props): ReactElement {\n  let { entity } = props;\n\n  let calcNewAangle = Helpers.calculateAngle;\n  let targetCoords = entity.targetPosition;\n  let projectileNumber = 5;\n  let projectiles = [];\n  let localId = `Entity${entity.icon}`;\n  let uniqueShootingAnimationId = `shooting-animation-${localId}-ap-${entity.actionPoints}`;\n  let customStyle = \"\";\n  let commonStyles = \"\";\n\n  if (\n    targetCoords &&\n    entity.position &&\n    entity.hasWeapon &&\n    entity.isShooting &&\n    (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\n  ) {\n    if (targetCoords) {\n      let distanceToTargetXInUnits = (targetCoords.x - entity.position.x);\n      let distanceToTargetYInUnits = (targetCoords.y - entity.position.y);\n\n      let actualDistanceInUnits = Helpers.calculateDistance(distanceToTargetXInUnits, distanceToTargetYInUnits);\n      let weaponType = entity && entity.equipment && entity.equipment.hands && entity.equipment.hands.type;\n      let angle = calcNewAangle(distanceToTargetXInUnits, distanceToTargetYInUnits);\n      commonStyles = `\n      @keyframes fading${uniqueShootingAnimationId} {\n        0%  {opacity: 1;}\n        95% {opacity: 1;}\n        100%  {opacity: 0;}\n      }\n\n      .fading-after-1s-for-${uniqueShootingAnimationId} {\n        animation: fading${uniqueShootingAnimationId} 1s linear normal forwards 1;\n      }\n      `;\n\n      if (weaponType === \"lazer\") {\n        // TODO: perhaps call to `visualizeShooting(from,to,weaponType)`\n        let className = `projectile${localId}_beam`;\n        let projectile = \"\";\n        const distanceWhereBeamBegins = 20;//in pixels\n        //actualDistance = actualDistance - distanceWhereBeamBegins;\n        // do above within template\n        customStyle = `\n          @keyframes pulsing${localId} {\n            0%  {opacity: 0.1;}\n            100%  {opacity: 1;}\n          }\n\n          @keyframes elongating${localId} {\n            0%  { width: calc(${actualDistanceInUnits}em + ${actualDistanceInUnits} * 4px - 20px); }\n            100%  {width: calc(${actualDistanceInUnits}em + ${actualDistanceInUnits} * 4px - 20px); }\n          }\n\n          @keyframes swiping${localId} {\n            0%  {transform: rotate(${angle + 90 -1}deg) translateX(${distanceWhereBeamBegins}px);}\n            50%  {transform: rotate(${angle + 90 + 1}deg) translateX(${distanceWhereBeamBegins}px);}\n            100%  {transform: rotate(${angle + 90 - 1}deg) translateX(${distanceWhereBeamBegins}px);}\n          }\n\n          .${className} {\n            width: ${actualDistanceInUnits}em;\n            height: 3px;\n            border-radius: 5px;\n            background: #F00;\n            position: absolute;\n            top: 0.5em;\n            left: 0.5em;\n            transform: rotate(${angle + 90}deg);/* overriden by swiping keyframes */\n            transform-origin: left 0px;\n            animation: pulsing${localId} 0.1s ease infinite,\n            elongating${localId} 0.7s ease alternate infinite,\n            swiping${localId} 1s ease alternate infinite;\n            box-shadow: 0 0 5px 5px white;\n            z-index: 10;\n          }\n          `;\n        projectiles.push(\n          <div key={className} className={className}>\n            {projectile}\n          </div>\n        );\n      } else {\n        customStyle = `\n          @keyframes shooting${localId} {\n            0%   {transform: translate(0,0) rotate(${angle}deg) scaleY(0.3)}\n            100% {transform: translate(\n              ${36 * (targetCoords.x - entity.position.x)}px,\n              ${36 * (targetCoords.y - entity.position.y)}px\n            ) rotate(${angle}deg) scaleY(2)}\n          }\n          `;\n\n        while (projectileNumber--) {\n          customStyle += `\n          .projectile${localId}_${projectileNumber} {\n            transform: rotate(${angle}deg);\n            animation: shooting${localId} 0.8s linear infinite;\n            animation-delay: ${projectileNumber - 1 * 0.3}s;\n          }`;\n        }\n        let projectile = entity.isShooting ? \"|\" : \"\";\n\n        projectileNumber = 3;\n\n        while (projectileNumber--) {\n          let className = `projectile projectile${localId}_${projectileNumber}`;\n          projectiles.push(\n            <div key={className} className={className}>\n              {projectile}\n            </div>\n          );\n        }\n      }\n    }\n  }\n  let finalClassName = `shooting-visualization fading-after-1s-for-${uniqueShootingAnimationId}`;\n  return (\n    <div className={finalClassName}>\n      <style>{customStyle + commonStyles}</style>\n      {projectiles}\n    </div>\n  );\n}\n","import React from \"react\";\r\nimport \"./DragScrollArea.scss\";\r\n\r\ninterface DragScrollAreaProps {\r\n  children: JSX.Element;\r\n}\r\n\r\ninterface DragScrollAreaState {}\r\n\r\nexport class DragScrollArea extends\r\n  React.Component<DragScrollAreaProps, DragScrollAreaState> {\r\n  areaReference;\r\n  scroll = {\r\n    x: 0,\r\n    y: 0,\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.areaReference = React.createRef();\r\n  }\r\n\r\n  scrollRelativeXY(deltaX: number, deltaY: number) {\r\n    this.scroll.x -= deltaX;\r\n    this.scroll.y -= deltaY;\r\n\r\n    if(this.scroll.x <= 0) {\r\n      this.scroll.x = 0;\r\n    }\r\n    if(this.scroll.y <= 0) {\r\n      this.scroll.y = 0;\r\n    }\r\n\r\n    this.executeScroll();\r\n  }\r\n\r\n  onMouseDown = (e) => {\r\n    if(e.button === 2) {\r\n      document.addEventListener('mouseup', this.onMouseUp);\r\n      document.addEventListener('mousemove', this.onMouseMove);\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  onMouseMove = (e) => {\r\n    this.scrollRelativeXY(e.movementX, e.movementY);\r\n  }\r\n\r\n  onMouseUp = (e) => {\r\n    document.removeEventListener('mouseup', this.onMouseUp);\r\n    document.removeEventListener('mousemove', this.onMouseMove);\r\n    e.preventDefault();\r\n  }\r\n\r\n  executeScroll() {\r\n    this.areaReference.current.scroll({\r\n      top: this.scroll.y,\r\n      left: this.scroll.x,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <div\r\n      className=\"drag-scroll-area drag-scroll-area-external\"\r\n      ref={this.areaReference}\r\n      onMouseDown={(e) => this.onMouseDown(e)}\r\n      onContextMenu={(e) => e.preventDefault()}\r\n    >\r\n      <div className=\"drag-scroll-area drag-scroll-area-internal\">\r\n        {\r\n          this.props.children\r\n        }\r\n      </div>\r\n    </div>;\r\n  }\r\n}","import React from \"react\";\nimport { HudPanel, Grid, Controls } from \"components\";\nimport \"./BlastZone.scss\";\nimport { DragScrollArea } from \"components/DragScrollArea\";\n\ninterface BlastZoneState {\n  gridX: number,\n  gridY: number,\n}\nexport class BlastZone extends React.Component<void, BlastZoneState> {\n  constructor(props: void) {\n    super(props);\n    this.state = {\n      gridX: 0,\n      gridY: 0,\n    }\n  }\n  componentDidMount() {\n  }\n\n  onControlPress(key) {\n    let deltaX = 0;\n    let deltaY = 0;\n    switch(key) {\n      case \"w\":\n        deltaY = -1;\n        break;\n      case \"s\":\n        deltaY = 1;\n        break;\n\n      case \"a\":\n        deltaX = -1;\n        break;\n      case \"d\":\n        deltaX = 1;\n        break;\n    }\n\n    console.log(key);\n    this.setState(prevState => {\n      return {\n        gridX: prevState.gridX + deltaX,\n        gridY: prevState.gridY + deltaY\n      };\n    })\n  }\n\n  render() {\n\n    const controls = <Controls\n      keys={['W', 'S', 'A', 'D']}\n      onKeyPress={(e) => this.onControlPress(e)}\n      ></Controls>\n    const console = <></>;\n    const statusIndicators = <></>;\n\n    return <div className=\"blast-zone\">\n      <div className=\"top-row\">\n        <HudPanel title=\"Controls\">\n          {controls}\n        </HudPanel>\n        <HudPanel title=\"Console\">\n          {console}\n        </HudPanel>\n        <HudPanel title=\"Status Indicators\">\n          {statusIndicators}\n        </HudPanel>\n      </div>\n      <div className=\"mid-row\">\n        <HudPanel title=\"Tactical Grid\">\n          <DragScrollArea>\n            <Grid width={100} height={100} startAt={[this.state.gridX,this.state.gridY]}></Grid>\n          </DragScrollArea>\n        </HudPanel>\n      </div>\n\n      <div className=\"bottom-row\">\n        <HudPanel title=\"OhWell\">\n          <span>:)</span>\n        </HudPanel>\n      </div>\n    </div>;\n  }\n}","import React from \"react\";\nimport { Game } from \"./components\";\nimport { BlastZone }  from \"screens/BlastZone\";\nimport \"App.scss\";\n\ninterface AppState {\n  loadedScene: string\n}\nexport default class App extends React.Component<void, AppState> {\n\n  scenes:{} = {\n    BlastZone,\n    Game,\n  }\n  SelectedScene = null;\n  constructor(props: void) {\n    super(props);\n    this.state = {\n      loadedScene: 'Game'\n    }\n  }\n  componentDidMount() {\n  }\n\n  handleChange = (e) => {\n    // e.target.value;\n    console.log(e)\n    console.log(e.target)\n    console.log(e.target.value)\n    const sceneToLoad = e.target.value;\n    this.setState(prevState => {return {loadedScene: sceneToLoad}});\n  }\n\n  render() {\n    let SelectedScene = this.scenes[this.state.loadedScene];\n    return <div className=\"app\">\n\n      <div className=\"meta-bar\">\n\n        <div className=\"app-name\">\n          <span className=\"be\">B</span>lood and <span className=\"be\">B</span>u<span className=\"el\">ll</span>ets\n        </div>\n\n        <div className=\"screen-switch\">\n          <span>Select screen: </span>\n          <select value={this.state.loadedScene} onChange={(e)=>this.handleChange(e)}>\n            <option value=\"BlastZone\">BlastZone</option>\n            <option value=\"Game\">Game</option>\n          </select>\n        </div>\n\n      </div>\n\n      <SelectedScene/>\n\n    </div>\n  }\n}","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./style.scss\";\n\n// Rendering the top-level Game component\n// render(<Game />, document.getElementById(\"root\"));\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}