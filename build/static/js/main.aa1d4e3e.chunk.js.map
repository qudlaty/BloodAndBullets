{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/EntityCard/LinearDisplay.js","components/EntityCard/EntityCard.js","components/EntitiesList/EntitiesList.js","components/Game/EntitiesValues.js","components/Game/ProcessingSquares.js","components/Game/ProcessingEntities.js","components/Game/Game.js","index.js"],"names":["Square","renderCounter","nextProps","nextState","JSON","stringify","this","props","className","localId","squareId","active","icon","isBreathing","isShooting","randomTime","Math","random","toFixed","animationBreathing","targetCoords","targetPosition","projectileNumber","projectiles","customStyle","position","x","y","distanceToTargetX","distanceToTargetY","actualDistance","sqrt","pow","weaponType","angle","atan","PI","calcNewAangle","push","key","projectile","onClick","blood","style","animation","React","Component","Board","handleClick","bind","i","console","log","rowId","colId","square","squares","entity","rowNumber","colNumber","inventory","cellId","rows","Array","size","fill","map","row","number","cells","cell","renderSquare","PureComponent","LinearDisplay","percentage","current","max","overload","progressStyle","width","title","label","EntityCard","renderCount","lifeSigns","isFriendly","name","clear","display","textAlign","hp","maxHp","rounds","maxRounds","ListOfEntities","entitiesFriendly","entities","filter","obj","entitiesUnfriendly","age","equipment","head","damage","hasWeapon","arenaSize","getSquare","targetSquareIndex","setEntityWithinASquare","target","getNumberWithinBoundaries","value","min","getRandomIntInclusive","floor","getEntityId","findEntityById","id","moveEntityRandomly","oldPositionX","oldPositionY","newSquare","Game","stepNumber","loop","processEntities","state","autoLoop","setTimeout","nextTurn","setState","handleBoardClick","deselectAllEntities","forEach","previousState","localCopyOfPreviousState","parse","selected","setSelected","selectedEntity","ProcessingEntities","nuke","dmg","localCopyOfEntities","toggleRotateBoard","isBoardRotated","switchAutoLoop","EntitiesValues","ProcessingSquares","moveEntities","entityIsShootingProperly","fireAShot","applyEffectsOfBleeding","stopBreathingForKilledEntities","JR","OP","isBleeding","amount","potentialTargetEntity","targetEntity","ceaseFire","damageApplied","checkAmmoAndCalculateDamageApplied","getEntitiesAtGivenPosition","applyDamageToTargetEntity","ceaseFireNextTurnIfTargetIsKilled","prevState","calculateNextGameState","setSquaresAccordingToEntities","selectedInEntities","boardClassName","type","checked","onChange","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa1d4e3e.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Square.scss\";\r\n\r\nclass Square extends React.Component {\r\n  /*\r\n    We use PureComponent, so it compares new props with previous props,\r\n    and only re-renders when props changed.\r\n   */\r\n  renderCounter = 0\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if(JSON.stringify(nextProps) === JSON.stringify(this.props)) {\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    this.renderCounter++;\r\n    //console.log(\"Rendering Square\", this.renderCounter, this.props);\r\n\r\n    let className = \"square\";\r\n    let localId = `Sq${this.props.squareId}`;\r\n\r\n    if(this.props.active) {\r\n      className += \" active\";\r\n    }\r\n    if(this.props.icon){\r\n      if(this.props.isBreathing) {\r\n        className += \" breathing\";\r\n      } else {\r\n        className += \" dead\";\r\n      }\r\n      if(this.props.isShooting) {\r\n        className += \" shooting\";\r\n      }\r\n    }\r\n\r\n    let randomTime = `${(Math.random()+0.5).toFixed(2)}s`\r\n    let animationBreathing = this.props.isBreathing ?\r\n        `breathing ${randomTime} alternate infinite linear` : 'none';\r\n\r\n    let targetCoords = this.props.targetPosition;\r\n    let projectileNumber = 5;\r\n    let projectiles = [];\r\n    let customStyle = \"\";\r\n\r\n    let calcNewAangle = function(x, y){\r\n      let angle;\r\n      if(y >= 0) {\r\n        angle = - Math.atan(\r\n          x/y\r\n        ) * (180/Math.PI);\r\n      } else if(y < 0) {\r\n        angle = (180/Math.PI) *\r\n          (\r\n            Math.atan(\r\n              x/-y\r\n            ) + Math.PI\r\n          )\r\n      }\r\n      return angle;\r\n    }\r\n\r\n    if((this.props.targetPosition && this.props.position && this.props.isShooting) &&\r\n      (this.props.targetPosition.x !== this.props.position.x ||\r\n      this.props.targetPosition.y !== this.props.position.y)) {\r\n\r\n      if(targetCoords) {\r\n\r\n        let distanceToTargetX = 38*(targetCoords.x-this.props.position.x);\r\n        let distanceToTargetY = 38*(targetCoords.y-this.props.position.y);\r\n        let actualDistance = Math.sqrt(Math.pow(distanceToTargetX, 2) + Math.pow(distanceToTargetY, 2));\r\n        if(this.props.weaponType === 'Lazer') {\r\n\r\n          let className=`projectile${localId}_beam`;\r\n          let projectile= \"\";\r\n          let angle = calcNewAangle(distanceToTargetX, distanceToTargetY);\r\n          customStyle = `\r\n            @keyframes pulsing${localId} {\r\n              0%  {opacity: 0.1;}\r\n              100%  {opacity: 1;}\r\n            }\r\n\r\n            @keyframes elongating${localId} {\r\n              0%  {width: ${actualDistance - 20};}\r\n              100%  {width: ${actualDistance + 20};}\r\n            }\r\n\r\n            .${className} {\r\n              width: ${actualDistance}px;\r\n              height: 3px;\r\n              border-radius: 5px;\r\n              background: #F00;\r\n              position: absolute;\r\n              top: 16px;\r\n              left: 16px;\r\n\r\n              transform: rotate(${angle + 90}deg);\r\n              transform-origin: left 0px;\r\n              animation: pulsing${localId} 0.1s linear infinite,\r\n              elongating${localId} 1s linear alternate infinite;\r\n              box-shadow: 0 0 5px 5px white;\r\n              z-index: 10;\r\n            }\r\n\r\n            `;\r\n\r\n          projectiles.push(<div key={className} className={className}>{projectile}</div>);\r\n        }else {\r\n\r\n          customStyle = `\r\n            @keyframes shooting${localId} {\r\n              0%   {transform: scale(1);}\r\n              100% {transform: translate(\r\n                ${36*(targetCoords.x-this.props.position.x)}px,\r\n                ${36*(targetCoords.y-this.props.position.y)}px\r\n              )}\r\n            }\r\n\r\n            `;\r\n\r\n          while(projectileNumber--) {\r\n            customStyle += `\r\n            .projectile${localId}_${projectileNumber} {\r\n              position: absolute;\r\n              top: 5px;\r\n              left: 0px;\r\n              width: 100%;\r\n              height: 100%;\r\n              line-height: 34px;\r\n              font-size: 17px;\r\n              animation: shooting${localId} 0.5s linear infinite;\r\n              animation-delay: ${projectileNumber  * 0.5}s;\r\n              color: white;\r\n            }`;\r\n          };\r\n          let projectile = this.props.isShooting ? \"*\" : \"\";\r\n\r\n          projectileNumber = 5;\r\n\r\n          while(projectileNumber--) {\r\n            let className=`projectile projectile${localId}_${projectileNumber}`\r\n            projectiles.push(<div key={className} className={className}>{projectile}</div>);\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <button className={className} onClick={() => this.props.onClick(this.props.squareId)}>\r\n        <div className=\"blood\">{this.props.blood}</div>\r\n        <div className=\"content\" style={{\r\n          animation: animationBreathing\r\n        }}>{this.props.icon}</div>\r\n        <style>\r\n            {customStyle}\r\n        </style>\r\n        {projectiles}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from '../Square';\r\nimport './Board.scss';\r\n\r\nexport default class Board extends React.PureComponent {\r\n  renderCounter = 0\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(i) {\r\n    console.log(\"Handles Click on Board\", i);\r\n    this.props.onClick(i);\r\n  }\r\n\r\n  renderSquare(i, rowId, colId) {\r\n    /*\r\n    We pass one and the same function to all the Squares when rendering,\r\n    so they do not detect getting a new fat-arrow function as a change of props.\r\n\r\n    This is CRUCIAL to only rerender squares with changed values.\r\n\r\n    Additionally, we need to ensure that Unchanged squares have the same values of objects passed down here.\r\n    */\r\n    let square = this.props.squares[i];\r\n    let entity = this.props.squares[i] && this.props.squares[i].entity;\r\n    return (\r\n      <Square\r\n        key={i}\r\n        squareId={i}\r\n        rowNumber={rowId}\r\n        colNumber={colId}\r\n\r\n        onClick={this.handleClick}\r\n\r\n        icon={entity && entity.icon}\r\n        active={entity && entity.active}\r\n        isBreathing={entity && entity.isBreathing}\r\n\r\n        blood={square && square.blood}\r\n\r\n        isShooting={entity && entity.isShooting}\r\n        weaponType={entity && entity.inventory && entity.inventory[0]}\r\n\r\n        position={entity && entity.position}\r\n        targetPosition={entity && entity.targetPosition}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // console.log(\"Rendering Board. #\", this.renderCounter++);\r\n\r\n    // Initial values for the Board\r\n    let cellId=0;\r\n    let rowId=0;\r\n    let colId;\r\n\r\n    let rows = Array(this.props.size).fill(null).map((row, number) => {\r\n      colId = 0;\r\n      let cells = Array(this.props.size).fill(null).map((cell, number) => {\r\n        return this.renderSquare(cellId++, rowId, colId++);\r\n      });\r\n      return (\r\n        <div key={rowId++} className=\"board-row\">\r\n          {cells}\r\n        </div>\r\n      );\r\n    });\r\n\r\n    let className = \"board \" + this.props.className;\r\n    return (\r\n      <div className={className}>\r\n        {rows}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './LinearDisplay.scss';\nexport default function LinearDisplay(props) {\n  let className=`linear-display ${props.className || ''}`\n  let percentage = ~~(props.current * 100 / props.max);\n  let overload = percentage > 100;\n  if(overload) {\n    percentage = 100;\n    className += \" overload \";\n  }\n\n  let progressStyle = {\n    width: `${percentage}%`,\n  }\n  let title = props.title || `${props.current}/${props.max}`;\n  return (\n    <div className={className}>\n      <div className=\"linear-display__label\">{props.label}:&nbsp;</div>\n      <div className=\"linear-display__bar-container\"\n        title={title}\n      >\n        <div className=\"linear-display__bar-progress\" style={progressStyle}>\n          <span className=\"linear-display__bar-progress-text\">{props.current}{overload ? '/'+props.max : ''}&nbsp;</span>\n        </div>\n      </div>\n      <div>&nbsp;</div>\n    </div>\n  );\n}\n","import React from 'react';\r\nimport LinearDisplay from './LinearDisplay';\r\n\r\nimport './EntityCard.scss';\r\n\r\nclass EntityCard extends React.Component {\r\n  renderCount = 0\r\n\r\n  render() {\r\n    // console.log(\"Rendering EntityView. #\", this.renderCount++);\r\n    let { entity } = this.props;\r\n    /*\r\n      FIXME: Below should be separated into several sub-components\r\n      Each sub-component should receive flat data (position, hp, ...)\r\n     */\r\n    let className = \" entity \";\r\n    if(entity.active) {\r\n      className+=\" active \";\r\n    }\r\n\r\n    let { isBreathing, isFriendly } = entity;\r\n    let fof = isFriendly ? ' friendly ' : ' unfriendly ';\r\n    let lifeSigns = isBreathing ? \" ALIVE \" : \" DEAD \";\r\n    className += fof;\r\n    className += lifeSigns;\r\n    return (\r\n\r\n      <div className={className}>\r\n        <div>\r\n          <div className=\"position\" title=\"Position\">\r\n            <span> {entity.position.x} {entity.position.y} </span>\r\n          </div>\r\n\r\n          <div className=\"portrait\">\r\n            {entity.icon}\r\n          </div>\r\n        </div>\r\n        <strong title=\"Name\">{entity.name}</strong>\r\n        <br />\r\n        {` `}{lifeSigns}\r\n        <br />\r\n\r\n        <div style={{\r\n          clear: \"both\",\r\n          display: \"inline-block\",\r\n          textAlign: \"right\",\r\n        }}>\r\n          <LinearDisplay label=\"HP\" current={entity.hp} max={entity.maxHp} /><br/>\r\n          <LinearDisplay label=\"Rounds\" current={entity.rounds} max={entity.maxRounds} />\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EntityCard;\r\n","import React from 'react';\nimport EntityCard from '../EntityCard';\nimport './EntitiesList.scss';\n\nexport default class ListOfEntities extends React.Component {\n  renderCounter = 0\n  render() {\n    // console.log(\"Rendering EntitiesList #\", this.renderCounter++);\n    \n    let entitiesFriendly =\n    this.props.entities.filter(entity=>entity.isFriendly).map(obj => {\n      return (\n        <EntityCard entity={obj} key={obj.name}/>\n      )\n    });\n\n    let entitiesUnfriendly =\n    this.props.entities.filter(entity=>!entity.isFriendly).map(obj => {\n      return (\n        <EntityCard entity={obj} key={obj.name}/>\n      )\n    });\n\n    return (\n      <>\n        <h4 className=\"list-of-entities__header\">List of Entities:</h4>\n        <div className=\"list-of-entities\">\n            {entitiesFriendly}\n        </div>\n        <div className=\"list-of-entities\">\n            {entitiesUnfriendly}\n        </div>\n      </>\n    );\n  }\n}\n","const entities = [\r\n  {\r\n    name: \"John Rambo\", age: 40, hp: 95, maxHp: 100,\r\n    icon: \"😠\",\r\n    isBreathing: true,\r\n    isFriendly: true,\r\n    position: {x:8, y:8},\r\n    inventory: ['KA-BAR', 'M16'],\r\n    equipment: {head: 'Red Bandana'},\r\n    damage: 1, rounds: 10, maxRounds: 15, hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Ellen Replay\", age: 30, hp: 50, maxHp: 65,\r\n    icon: \"👩\",\r\n    isBreathing: true,\r\n    isFriendly: true,\r\n    position: {x:1, y:8},\r\n    inventory: ['Lazer', 'Motion Detector'],\r\n    equipment: {head: 'Afro'},\r\n    damage: 1, rounds: 10, maxRounds: 10, hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Lazer Blady\", age: 60, hp: 75, maxHp: 100,\r\n    icon: \"🧑🏻\",\r\n    isBreathing: true,\r\n    isFriendly: true,\r\n    position: {x:4, y:8},\r\n    inventory: ['Lazer'],\r\n    equipment: {},\r\n    damage: 10, rounds: 3, maxRounds: 3, hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Octo\", age: 8, hp: 288, maxHp: 300,\r\n    icon: \"🐙\",\r\n    isBreathing: true,\r\n    position: {x:8, y:2},\r\n  },\r\n  {\r\n    name: \"Squid\", age: 5, hp: 55, maxHp: 55,\r\n    icon: \"🦑\",\r\n    isBreathing: true,\r\n    position: {x:5, y:5},\r\n  },\r\n  {\r\n    name: \"Ant\", age: 1, hp: 35, maxHp: 40,\r\n    icon: \"🐜\",\r\n    isBreathing: true,\r\n    position: {x:7, y:6},\r\n  },\r\n  {\r\n    name: \"Spider\", age: 1, hp: 60, maxHp: 50,\r\n    icon: \"🕷️\",\r\n    isBreathing: true,\r\n    position: {x:9, y:3},\r\n  },\r\n  {\r\n    name: \"Mosquito\", age: 1, hp: 12, maxHp: 20,\r\n    icon: \"🦟\",\r\n    isBreathing: true,\r\n    position: {x:2, y:7},\r\n  },\r\n  {\r\n    name: \"Microbe\", age: 1, hp: 1, maxHp: 5,\r\n    icon: \"🦠\",\r\n    isBreathing: true,\r\n    position: {x:3, y:5},\r\n  },\r\n\r\n];\r\n\r\nexport default entities;\r\n","const arenaSize = 10;\n\nexport function getSquare (squares, x, y) {\n  return squares[targetSquareIndex(x, y, arenaSize)];\n}\n\nexport function setSquare(squares, x, y, value) {\n  squares[targetSquareIndex(x, y)] = value;\n}\n\nexport function targetSquareIndex(x, y) {\n  return y * arenaSize + x;\n}\n\nexport function setEntityWithinASquare(squares, x, y, entity) {\n  let target = targetSquareIndex(x, y);\n  if(!squares[target]) {\n    squares[target] = {};\n  }\n  squares[target].entity = entity;\n}\n\nexport function addBlood(square, amount) {\n  if(!square) return;\n  if(!square.blood) {\n    square.blood = 1;\n  } else {\n    square.blood++;\n  }\n}\n","import { getSquare, setEntityWithinASquare } from './ProcessingSquares';\n\nconst arenaSize = 10;\n\nfunction getNumberWithinBoundaries(value, min, max) {\n  if( value < min) value = min;\n  if( value > max) value = max;\n  return value;\n}\n\nfunction getRandomIntInclusive(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function getEntityId(entity) {\n  return entity.name;\n}\n\nexport function findEntityById(entities, id) {\n  let result = entities.filter((entity) => entity.name === id)[0];\n  //console.log(\"found entity:\", result);\n  return result;\n}\n\nexport function moveEntityRandomly(squares, entity) {\n  if(!entity.isBreathing) return;\n  // modifies entity in-place\n  let oldPositionX = entity.position.x;\n  let oldPositionY = entity.position.y;\n\n  entity.position.x = entity.position.x + getRandomIntInclusive(-1,1);\n  entity.position.y = entity.position.y + getRandomIntInclusive(-1,1);\n\n  entity.position.x = getNumberWithinBoundaries(entity.position.x, 0, arenaSize-1);\n  entity.position.y = getNumberWithinBoundaries(entity.position.y, 0, arenaSize-1);\n\n  let newSquare = getSquare(squares, entity.position.x, entity.position.y);\n\n  if (newSquare && newSquare.entity) {\n    entity.position.x = oldPositionX;\n    entity.position.y = oldPositionY;\n  }\n\n  if(\n    oldPositionX !== entity.position.x ||\n    oldPositionY !== entity.position.y\n  ) {\n    setEntityWithinASquare(squares, oldPositionX, oldPositionY, null);\n  }\n\n  // NO RETURN AS IT'S MODIFIED IN-PLACE return entity;\n  // WHICH IS A BAD HABIT, BUT OH SO COMFY.\n}\n","import React from 'react';\r\nimport Board from '../Board';\r\nimport EntitiesList from '../EntitiesList';\r\nimport EntitiesValues from './EntitiesValues';\r\n\r\nimport * as ProcessingEntities from './ProcessingEntities';\r\nimport * as ProcessingSquares from './ProcessingSquares';\r\n\r\nimport './Game.scss';\r\n\r\nexport default class Game extends React.PureComponent {\r\n  renderCounter = 0\r\n  stepNumber = 0\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Initial value of game state\r\n    this.state = {\r\n      selected: null,\r\n      arenaSize: 10,\r\n      isBoardRotated: false,\r\n      entities: EntitiesValues,\r\n      squares: [],\r\n      autoLoop: true,\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.loop();\r\n  }\r\n\r\n  setSquaresAccordingToEntities() {\r\n    this.setState((previousState)=>{\r\n\r\n      let squares = JSON.parse(JSON.stringify(previousState.squares));\r\n      previousState.entities.forEach((entity)=>{\r\n        ProcessingSquares.setEntityWithinASquare(\r\n          squares, entity.position.x, entity.position.y, entity\r\n        );\r\n      });\r\n\r\n      return {squares};\r\n\r\n    });\r\n  }\r\n\r\n\r\n  calculateNextGameState(previousState) {\r\n    let nextState = JSON.parse(JSON.stringify(previousState));\r\n    let { entities, squares } = nextState;\r\n\r\n    this.moveEntities(entities, squares);\r\n\r\n    entities.forEach(entity => {\r\n      // this check should probably occur upon target verification\r\n      if(this.entityIsShootingProperly(entity)) {\r\n        // We are shooting and not targetting ourselves\r\n        this.fireAShot(entities, entity);\r\n      }\r\n\r\n      entity = this.applyEffectsOfBleeding(entity, squares);\r\n      entity = this.stopBreathingForKilledEntities(entity);\r\n\r\n    });\r\n\r\n    return nextState;\r\n  }\r\n\r\n  moveEntities(entities, squares) {\r\n    let JR = ProcessingEntities.findEntityById(entities, \"John Rambo\");\r\n    let OP = ProcessingEntities.findEntityById(entities, \"Squid\");\r\n    ProcessingEntities.moveEntityRandomly(squares, JR);\r\n    ProcessingEntities.moveEntityRandomly(squares, OP);\r\n  }\r\n\r\n  stopBreathingForKilledEntities(entity) {\r\n    if(entity && entity.hp <= 0){\r\n      entity.isBreathing = false;\r\n      entity.hp = 0;\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  applyEffectsOfBleeding(entity, squares) {\r\n    if(entity.isBleeding && entity.hp > 0) {\r\n      entity.hp -= 1;\r\n      let square = ProcessingSquares.getSquare(squares, entity.position.x, entity.position.y);\r\n      ProcessingSquares.addBlood(square, 1);\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  entityIsShootingProperly(entity) {\r\n    return entity.isShooting && entity.targetPosition && (\r\n      entity.targetPosition.x !== entity.position.x ||\r\n      entity.targetPosition.y !== entity.position.y\r\n    );\r\n  }\r\n\r\n  getEntitiesAtGivenPosition(entities, targetPosition) {\r\n    return entities.filter((potentialTargetEntity) => {\r\n      return (\r\n        potentialTargetEntity.position.x === targetPosition.x &&\r\n        potentialTargetEntity.position.y === targetPosition.y\r\n      );\r\n    });\r\n  }\r\n\r\n  applyDamageToTargetEntity(targetEntity, damage) {\r\n    if(damage) {\r\n      targetEntity.hp -= damage;\r\n      targetEntity.isBleeding = true;\r\n    }\r\n  }\r\n\r\n  ceaseFireNextTurnIfTargetIsKilled(entity, targetEntity) {\r\n    if(targetEntity.hp < 0) {\r\n      //entity.isShooting = false;\r\n      entity.ceaseFire = true;\r\n    }\r\n  }\r\n\r\n  checkAmmoAndCalculateDamageApplied(entity) {\r\n    let damageApplied = 0;\r\n    if(entity.rounds !== \"empty\" && entity.rounds > 0) {// if we still have ammo\r\n      entity.rounds--;\r\n      damageApplied = entity.damage;\r\n    }\r\n    if(entity.rounds === 0) {\r\n      entity.rounds = \"empty\";\r\n    } else if(entity.rounds === \"empty\") {\r\n      // when ordered to shoot with \"empty\" magazine state, load ammo instead\r\n      entity.rounds = entity.maxRounds;\r\n      entity.isShooting = false;\r\n      entity.damageApplied = 0;\r\n    }\r\n    return damageApplied;\r\n  }\r\n\r\n  fireAShot(entities, entity) {\r\n    if(entity.ceaseFire) {\r\n      entity.isShooting = false;\r\n      entity.ceaseFire = false;\r\n      return;\r\n    }\r\n    let damageApplied = this.checkAmmoAndCalculateDamageApplied(entity);\r\n    let targetEntities =\r\n      this.getEntitiesAtGivenPosition(entities, entity.targetPosition);\r\n    targetEntities.forEach((targetEntity) => {\r\n      this.applyDamageToTargetEntity(targetEntity, damageApplied);\r\n      this.ceaseFireNextTurnIfTargetIsKilled(entity, targetEntity);\r\n    });\r\n  }\r\n\r\n  processEntities() {\r\n    this.setState(\r\n      prevState => this.calculateNextGameState(prevState),\r\n      () => this.setSquaresAccordingToEntities()\r\n    );\r\n  }\r\n\r\n  loop = () => {\r\n    this.stepNumber++;\r\n\r\n    this.processEntities();\r\n\r\n    if(this.state.autoLoop) {\r\n      setTimeout(this.loop, 1000);\r\n    }\r\n  }\r\n\r\n  nextTurn = () => {\r\n    this.setState({autoLoop: false});\r\n    this.loop();\r\n  }\r\n\r\n  setSelected(entities, selected, value) {\r\n    let selectedInEntities = ProcessingEntities.findEntityById(\r\n      entities,\r\n      ProcessingEntities.getEntityId(selected)\r\n    );\r\n    if(value) {\r\n      selected.active = value;\r\n    } else {\r\n      selected = null;\r\n      console.log(\"Nullified:\", selected);\r\n    }\r\n    selectedInEntities.active = value;\r\n    return selected;\r\n  }\r\n\r\n  handleBoardClick = (i) => {\r\n    //console.log(\"CLICKED \", i);\r\n    const deselectAllEntities = (entities) => {\r\n      entities.forEach((entity) => { entity.active = false; });\r\n    };\r\n\r\n\r\n    /* this should contain mostly function calls */\r\n\r\n\r\n    this.setState((previousState) => {\r\n      let localCopyOfPreviousState = JSON.parse(JSON.stringify(previousState));\r\n      let { entities, squares, selected } = localCopyOfPreviousState;\r\n\r\n      if(squares[i] && squares[i].entity) {// clicked an entity\r\n        if(selected && !squares[i].entity.isFriendly) {\r\n          // that is hostile, while we already have one selected\r\n          if(selected.name === previousState.squares[i].entity.name) {\r\n            // second click on a hostile entity deselects it\r\n            selected = this.setSelected(entities, selected, false);\r\n            console.log(selected);\r\n          } else {// clicked a non-selected hostile entity - attack\r\n            let selectedEntity = ProcessingEntities.findEntityById(\r\n              entities,\r\n              ProcessingEntities.getEntityId(selected)\r\n            );\r\n            selectedEntity.targetPosition =\r\n              previousState.squares[i].entity.position;\r\n\r\n            selectedEntity.isShooting = true;\r\n          }\r\n\r\n        } else {// clicked entity is friendly - select it\r\n          deselectAllEntities(entities);\r\n          selected = squares[i].entity;\r\n          this.setSelected(entities, selected, true);\r\n        }\r\n\r\n      } else {// clicked an empty square\r\n        /* Deselecting and stopping fire on all entities */\r\n        deselectAllEntities(entities);\r\n        entities.forEach(entity => {\r\n          entity.isShooting = false;\r\n        })\r\n        selected = null;\r\n      }\r\n\r\n      return {entities, squares, selected}\r\n    }, ()=> {\r\n      this.processEntities();\r\n    });\r\n\r\n  }\r\n\r\n  nuke = (dmg) => {\r\n    //console.log(\"Nuking\")\r\n    this.setState( (state) => {\r\n      let localCopyOfEntities = JSON.parse(JSON.stringify(state.entities));\r\n      localCopyOfEntities.forEach(entity => {\r\n        entity.hp = entity.hp - dmg;\r\n      });\r\n      return {entities: localCopyOfEntities}\r\n    }, () => {\r\n      this.processEntities();\r\n    });\r\n  }\r\n\r\n  toggleRotateBoard = () => {\r\n    this.setState({isBoardRotated: !this.state.isBoardRotated});\r\n  }\r\n\r\n  switchAutoLoop = () => {\r\n    this.setState((previousState) => {\r\n      return {autoLoop: !previousState.autoLoop};\r\n    },()=>{\r\n      if(this.state.autoLoop) {\r\n        this.loop();\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let boardClassName = this.state.isBoardRotated ? \"rotated-board\" : \"\";\r\n    //console.log(\"Rendering Game. #\", this.renderCounter++);\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={this.state.squares}\r\n            onClick={(i) => this.handleBoardClick(i)}\r\n            size={this.state.arenaSize}\r\n            className={boardClassName}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"game-info\">\r\n\r\n          <span className=\"selected\">Selected: {this.state.selected && this.state.selected.name}</span>\r\n          <button\r\n            onClick={\r\n              ()=>{\r\n                this.nuke(40);\r\n              }\r\n            }\r\n            className=\"button button-nuke\"\r\n          >Nuke All</button>\r\n          <button onClick={this.toggleRotateBoard} className=\"button\">Rotate Board</button>\r\n          <button onClick={this.nextTurn} className=\"button\">Next Step</button>\r\n          <span className=\"step-counter\">Turn: {this.stepNumber}</span>\r\n          <label className=\"auto-cycle button\">\r\n            <input type=\"checkbox\" checked={this.state.autoLoop ? 'checked' : ''} onChange={this.switchAutoLoop}/>\r\n            <span>Auto Cycle</span>\r\n          </label>\r\n          <ul>\r\n            <li>Click Ellen Replay on the board, to select her.</li>\r\n            <li>Click a target to shoot it.</li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"game-list\">\r\n          <EntitiesList\r\n            entities={this.state.entities}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\nimport { render } from 'react-dom';\nimport Game from './components/Game';\n\nimport './style.scss';\n\nrender(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}