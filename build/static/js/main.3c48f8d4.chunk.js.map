{"version":3,"sources":["components/Game/Game.module.scss","components/Board/Board.module.scss","helpers/Helpers.ts","services/EntitiesService/EntityFeatures.ts","services/EntitiesService/EntityClass.ts","services/SquaresService/SquareClass.ts","services/SquaresService/SquaresService.ts","services/EntitiesService/EntitiesService.ts","services/ItemService/ItemClasses.ts","services/MessageService/MessageService.ts","resources/ItemDefinitions.ts","resources/CharacterDefinitions.ts","services/GameModelService/GameModelService.ts","services/GameLogicService/GameLogicService.ts","components/Square/Blood.tsx","components/Square/Items.tsx","components/Square/Square.tsx","components/EntityPawn/HpBar.tsx","components/EntityPawn/ShootingVisualization.tsx","components/EntityPawn/EntityPawn.tsx","components/Board/Board.tsx","components/EntityCard/LinearDisplay.tsx","components/EntityCard/InventoryItem.tsx","components/EntityCard/InventoryList.tsx","components/EntityCard/EntityCard.tsx","resources/StructureDefinitions.ts","components/Game/TargetedSquareInfo.tsx","components/Game/SelectedEntityInfo.tsx","components/Game/MessageBox.tsx","components/Game/GameActions.tsx","components/Game/Game.tsx","index.js"],"names":["module","exports","resetGivenFieldsOnACollection","collection","fieldNames","forEach","item","fieldName","undefined","getNumberWithinBoundaries","value","min","max","getRandomIntInclusive","Math","floor","random","calculateAngle","x","y","angle","atan","PI","calculateDistance","sqrt","pow","isSelectedTargeted","selected","targeted","entity","name","turnFlagsIntoClasses","flags","classNameBase","flagsToClassess","active","isAvailableDestination","isChosenDestination","isBreathing","isDead","isShooting","isTargeted","isLit","isInTwilightZone","className","Object","keys","key","getCssClassesForAGivenSquare","square","squareClassName","squareType","derivedCtor","Identifiable","icon","Positionable","position","SquaresService","getSquare","this","Movable","moveDestination","squareIndex","setMoveDestinationPosition","targetSquarePosition","targetPosition","targetSquare","Helpers","squares","MessageService","send","Mortal","hp","maxHp","Bleedable","bleeding","bleedingReductionPerTurn","bloodReleased","isAlive","bleed","addBlood","Breathing","isSupposedToBeBreathing","Combative","ceaseFire","hasWeapon","targetedSquarePosition","HavingInventory","inventory","itemName","actualItemIndex","findIndex","splice","push","Entity","isFriendly","props","assign","equipment","unEquipFromHands","takeFromInventory","hands","Weapon","baseCtor","getOwnPropertyNames","prototype","defineProperty","getOwnPropertyDescriptor","Square","addToInventory","arenaSize","i","initializeSquareIfEmpty","targetSquareIndex","setEntityWithinASquare","amount","blood","j","setSquare","EntitiesService","entities","id","filter","oldPositionX","oldPositionY","newSquare","potentialTargetEntity","selectedInEntities","findEntityById","getEntityId","console","log","damageApplied","weapon","isAbleToFire","fire","rounds","checkAmmoAndCalculateDamageApplied","getEntitiesAtGivenPosition","targetEntity","applyDamageToTargetEntity","ceaseFireNextTickIfTargetIsKilled","damage","chosenDestinationSquare","moveEntityIntoChosenDestination","moveEntityRandomly","causesBleeding","range","RangedWeapon","maxRounds","Rifle","type","Lazer","messages","message","M16","M40","L30","characterDefinitions","age","map","entry","GameModel","saveMap","squaresProcessedForSave","JSON","parse","stringify","squaresStringified","result","window","prompt","localStorage","loadMap","mapNames","squaresLoaded","loadMapIntoBoard","index","sourceSquare","loadEntities","loadBuiltInMap","tutorial_map_00","loadPredefinedEntitities","GameLogic","model","run","calculateNextInterfaceState","previousState","nextState","markAvailableDestinationsForSelectedEntity","syncSquaresWithEntities","array","concat","length","setEntityWithinApropriateSquare","deselectAllEntities","moveEntities","isEntityShootingProperly","fireAShot","bleedExternally","stopBreathingForKilledEntity","enemiesAlive","calculateNumberOfAliveEnemies","amountOfAliveEnemies","Blood","bloodAmount","style","background","toFixed","React","PureComponent","Items","itemsIcons","items","itemsNumber","SquareComponent","onClick","squareId","classPrefix","cuboidFaces","cuboid","HpBar","percentage","current","progressStyle","width","backgroundColor","color","Component","ShootingVisualization","calcNewAangle","targetCoords","projectileNumber","projectiles","localId","customStyle","distanceToTargetX","distanceToTargetY","actualDistance","weaponType","projectile","EntityPawn","randomTime","classessFromFlags","fof","zIndex","animationBreathing","left","squareDistance","top","animation","Board","handleClick","EntityPawns","BoardSquares","colId","cellId","rowId","Array","size","fill","row","number","cells","cell","renderSquare","styles","board","isRotated","LinearDisplay","overload","title","divider","progressGridStyle","backgroundSize","backgroundImage","label","InventoryItem","reloadButton","dropButton","ammoCounter","onDrop","reload","onReload","processInterface","InventoryList","inventoryItems","EntityCard","renderCount","handleInventoryClick","onInventoryClick","addItem","inHands","inHandsArray","clear","display","textAlign","structures","box","redBarrel","TargetedSquareInfo","boxSerialNumber","onItemClick","squareNumber","targetedSquare","attackPosition","structureType","newStructure","entityInfo","distanceInfo","positionInfo","bloodInfo","availableActions","editorButtons","onAddStructureClick","GameStyles","button","distanceToSelected","onMoveClick","onAttackClick","targeted__label","SelectedEntityInfo","selected__label","handleDeselectAllEntities","MessageBox","messageNumber","renderMessage","RenderedMessages","requestAnimationFrame","element","document","getElementById","scrollTop","scrollHeight","scrollElement","component","GameActionsClass","that","toggleEditorMode","state","isEditorOn","setState","prevState","loop","stepNumber","drawAggro","processEntities","autoLoop","setTimeout","nextTick","handleClickV2","selectedSquareNumber","targetedSquareNumber","previousTargeted","doubleClick","markSquareAsTargeted","setMoveDestinationSquare","selectEntityFromGivenSquare","aggro","actor","entitiesToAttack","findEntitiesThatAreClose","firstAmongThem","nuke","dmg","toggleRotateBoard","isBoardRotated","switchAutoLoop","entityId","actualEntity","equipInHands","calculateNextGameState","setSquaresAccordingToEntities","newlyFoundEntities","GameActions","Game","renderCounter","game","status","game__board","game__info","actions","checked","onChange","render"],"mappings":"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","file":"static/js/main.3c48f8d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"Game_game__229bL\",\"game__board\":\"Game_game__board__1KMto\",\"game__info\":\"Game_game__info__3kjt8\",\"game__list\":\"Game_game__list__yMHF0\",\"status\":\"Game_status__21KP9\",\"button\":\"Game_button__1_Ze4\",\"button-nuke\":\"Game_button-nuke__xGjPs\",\"actions\":\"Game_actions__2-VcJ\",\"interaction-container\":\"Game_interaction-container__3RZ7s\",\"selected\":\"Game_selected__ZRNAo\",\"targeted\":\"Game_targeted__3gJqr\",\"selected__label\":\"Game_selected__label__2d30g\",\"targeted__label\":\"Game_targeted__label__328kg\",\"step-counter\":\"Game_step-counter__hrmzE\",\"auto-cycle\":\"Game_auto-cycle__1cp6W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__1AthT\",\"board__row\":\"Board_board__row__1piKV\",\"board--rotated\":\"Board_board--rotated__be1H9\"};","import { Entity } from \"../services/EntitiesService\";\r\nimport { Square } from \"../services/SquaresService\";\r\n\r\n/** @description\r\n * Takes a collection and a list of strings describing object keys.\r\n * Sets all given fields on a collection to `undefined`\r\n */\r\nexport function resetGivenFieldsOnACollection(collection, ...fieldNames) {\r\n  collection.forEach((item) => {\r\n    fieldNames.forEach((fieldName) => {\r\n      item && (item[fieldName] = undefined);\r\n    });\r\n  });\r\n}\r\n\r\n/** @description Takes a number and fits it within given boundaries, then returns it */\r\nexport function getNumberWithinBoundaries(value: number, min: number, max: number): number {\r\n  if (value < min) value = min;\r\n  if (value > max) value = max;\r\n  return value;\r\n}\r\n\r\n/** @description Returns a random integer between min and max */\r\nexport function getRandomIntInclusive(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/** @description Returns angle (in degrees) of a given vector */\r\nexport function calculateAngle(x: number, y: number): number {\r\n  let angle: number;\r\n  if (y >= 0) {\r\n    angle = -Math.atan(x / y) * (180 / Math.PI);\r\n  } else if (y < 0) {\r\n    angle = (180 / Math.PI) * (Math.atan(x / -y) + Math.PI);\r\n  }\r\n  return angle;\r\n}\r\n\r\n/** @description Pitagorean distance between 0,0 and given coords */\r\nexport function calculateDistance(x: number, y: number): number {\r\n  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\r\n}\r\n\r\n/** @description Mixing classess together */\r\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\r\n  // see https://www.typescriptlang.org/docs/handbook/mixins.html\r\n  baseCtors.forEach((baseCtor) => {\r\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\r\n      Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));\r\n    });\r\n  });\r\n}\r\n\r\n/** @description Checking if selected entity is on a targeted square */\r\nexport function isSelectedTargeted(selected: Entity, targeted: Square): boolean {\r\n  if (selected && targeted && targeted.entity && selected.name === targeted.entity.name) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * @description\r\n * Adding classess apropriate to the flags passed in by props\r\n * @param classNameBase - if given, it is added in front of the classname with \"--\"\r\n * Eg: classNameBase--class-from-flag\r\n */\r\nexport function turnFlagsIntoClasses(flags: object, classNameBase?: string) {\r\n  const flagsToClassess = {\r\n    active: \"active\",\r\n    isAvailableDestination: \"is-available-destination\",\r\n    isChosenDestination: \"is-chosen-destination\",\r\n    isBreathing: \"breathing\",\r\n    isDead: \"dead\",\r\n    isShooting: \"shooting\",\r\n    isTargeted: \"targeted\",\r\n    isLit: \"is-lit\",\r\n    isInTwilightZone: \"is-in-twilight-zone\",\r\n  };\r\n\r\n  let className = \"\";\r\n\r\n  if (classNameBase) {\r\n    classNameBase += \"--\";\r\n  } else {\r\n    classNameBase = \"\";\r\n  }\r\n\r\n  Object.keys(flagsToClassess).forEach((key) => {\r\n    if (flags[key]) {\r\n      className += ` ${classNameBase}${flagsToClassess[key]}`;\r\n    }\r\n  });\r\n  return className;\r\n}\r\n\r\n/**\r\n * @description\r\n * Creates a new array containing all the elements from a given array\r\n * @param array array to shallow-copy\r\n * @yields a new copy of the array\r\n */\r\nexport function newCopyOfArray(array: any[]) {\r\n  return [].concat(array);\r\n}\r\n\r\n/**\r\n * @description\r\n * Returns a string with set of CSS classes\r\n * based on the flags found in the given square.\r\n * @param square a square to style\r\n * @yields string with all classess applicable for the given square\r\n */\r\nexport function getCssClassesForAGivenSquare(square: Square): string {\r\n  let squareClassNameBase = \"square\";\r\n  let squareClassName = `${squareClassNameBase} ${square.squareType}`;\r\n  squareClassName += turnFlagsIntoClasses(square, squareClassNameBase);\r\n  if (square.entity) {\r\n    squareClassName += turnFlagsIntoClasses(square.entity, squareClassNameBase);\r\n  }\r\n  return squareClassName;\r\n}\r\n","import { Item, Weapon, Square } from \"..\";\nimport { SquaresService, MessageService } from \"..\";\nimport * as Helpers from \"../../helpers\";\n\n/** Position on a grid */\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport class Identifiable {\n  name: string = \"An Entity\";\n  icon: string = \"E\";\n}\n\nexport class Positionable {\n  position: Position = { x: undefined, y: undefined };\n\n  get square(): Square {\n    let square = SquaresService.getSquare(this.position.x, this.position.y);\n    return square;\n  }\n}\n\nexport class Movable extends Identifiable {\n  moveDestination: Position;\n\n  setMoveDestinationSquare(squareIndex: number) {\n    this.setMoveDestinationPosition(SquaresService.targetSquarePosition(squareIndex));\n  }\n\n  setMoveDestinationPosition(targetPosition: Position) {\n    let targetSquare = SquaresService.getSquare(targetPosition.x, targetPosition.y);\n    if (!targetSquare.entity || targetSquare.entity.isDead) {\n      this.moveDestination = targetPosition;\n      Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\");\n      targetSquare.isChosenDestination = true;\n    } else {\n      MessageService.send(`${this.name} can't move into square (${targetPosition.x}, ${targetPosition.y})`);\n    }\n  }\n}\n\nexport class Mortal extends Positionable {\n  hp: number = 100;\n  maxHp: number = 100;\n  get isDead(): boolean {\n    return this.hp <= 0;\n  }\n  get isAlive(): boolean {\n    return this.hp > 0;\n  }\n}\n\nexport class Bleedable extends Mortal {\n  bleeding: number;\n  bleedingReductionPerTurn: number = 1;\n  bleed(): number {\n    let entity = this;\n    let bloodReleased = 0;\n    if (entity.bleeding && entity.isAlive) {\n      bloodReleased = entity.bleeding;\n      entity.hp -= bloodReleased;\n      entity.bleeding -= entity.bleedingReductionPerTurn;\n    }\n    return bloodReleased;\n  }\n\n  bleedExternally() {\n    if (!this.bleeding) return;\n    let entity = this;\n    let bloodReleased = this.bleed();\n    let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\n    SquaresService.addBlood(square, bloodReleased);\n  }\n}\n\nexport class Breathing extends Mortal {\n  isSupposedToBeBreathing: boolean = undefined;\n  get isBreathing(): boolean {\n    return this.isAlive && this.isSupposedToBeBreathing;\n  }\n  set isBreathing(value: boolean) {\n    this.isSupposedToBeBreathing = value;\n  }\n}\n\nexport class Combative extends Identifiable {\n  targetPosition: Position;\n  isShooting?: boolean;\n  ceaseFire?: boolean;\n  hasWeapon?: boolean;\n  attackPosition(targetedSquarePosition: Position) {\n    if (this.hasWeapon) {\n      this.targetPosition = targetedSquarePosition;\n      this.isShooting = true;\n    } else {\n      MessageService.send(`${this.name} can't shoot - no weapon equipped`);\n    }\n  }\n}\n\nexport class HavingInventory {\n  inventory: Item[];\n  takeFromInventory(itemName: string): Item {\n    let actualItemIndex = this.inventory.findIndex((item) => item.name === itemName);\n    let actualItem = this.inventory.splice(actualItemIndex, 1)[0];\n\n    return actualItem;\n  }\n  addToInventory(item: Item) {\n    if (!this.inventory) {\n      this.inventory = [];\n    }\n    this.inventory.push(item);\n  }\n}\n\nexport class HavingEquipment extends HavingInventory {\n  equipment: any;\n  hasWeapon?: boolean;\n\n  equipInHands(itemName: string) {\n    this.unEquipFromHands();\n    let item = this.takeFromInventory(itemName);\n    this.equipment.hands = item;\n    if (item instanceof Weapon) {\n      this.hasWeapon = true;\n    } else {\n      this.hasWeapon = false;\n    }\n  }\n\n  unEquipFromHands() {\n    if (this.equipment.hands) {\n      this.inventory.push(this.equipment.hands);\n      this.equipment.hands = null;\n      this.hasWeapon = false;\n    }\n  }\n}\n","import { applyMixins } from \"../../helpers\";\nimport {\n  Identifiable,\n  Positionable,\n  Mortal,\n  Bleedable,\n  Movable,\n  Breathing,\n  Combative,\n  HavingInventory,\n  HavingEquipment,\n} from \".\";\n\nexport class Entity {\n  // Extended by mixins below\n  constructor(...props) {\n    Object.assign(this, ...props);\n  }\n  isFriendly?: boolean;\n  active?: boolean;\n}\n\n/************************************************************/\n/* Always update both lists */\n\nexport interface Entity\n  extends Identifiable,\n    Positionable,\n    Mortal,\n    Bleedable,\n    Movable,\n    Breathing,\n    Combative,\n    HavingInventory,\n    HavingEquipment {}\napplyMixins(Entity, [\n  Identifiable,\n  Positionable,\n  Mortal,\n  Bleedable,\n  Movable,\n  Breathing,\n  Combative,\n  HavingInventory,\n  HavingEquipment,\n]);\n\n/************************************************************/\n","import { Item } from \"../ItemService\";\nimport { Entity, HavingInventory } from \"../EntitiesService\";\n\nexport interface Square {\n  entity?: Entity;\n  blood?: number;\n  squareType: string;\n  isAvailableDestination?: boolean;\n  isChosenDestination?: boolean;\n  isTargeted?: boolean;\n  isLit?: boolean;\n  isInTwilightZone?: boolean;\n  addItem(item: Item): void;\n}\n\nexport class Square extends HavingInventory implements Square {\n  public squareType: string = \"nothing\";\n  addItem(item: Item) {\n    this.addToInventory(item);\n  }\n  get items() {\n    return this.inventory;\n  }\n}\n","import * as Helpers from \"../../helpers/Helpers\";\r\nimport { Square } from \"./SquareClass\";\r\nimport { Entity, Position } from \"../EntitiesService\";\r\n\r\nclass SquaresServiceClass {\r\n  arenaSize: number = 10;\r\n\r\n  squares: Square[] = [];\r\n\r\n  constructor() {\r\n    let i = this.arenaSize * this.arenaSize;\r\n    while (i-- !== 0) {\r\n      this.initializeSquareIfEmpty(i);\r\n    }\r\n  }\r\n\r\n  getSquare(x: number, y: number): Square {\r\n    return this.squares[this.targetSquareIndex(x, y)];\r\n  }\r\n\r\n  setSquare(x: number, y: number, value): void {\r\n    this.squares[this.targetSquareIndex(x, y)] = value;\r\n  }\r\n\r\n  targetSquareIndex(x: number, y: number): number {\r\n    return y * this.arenaSize + x;\r\n  }\r\n\r\n  targetSquarePosition(squareIndex: number): Position {\r\n    let x: number, y: number;\r\n    y = Math.floor(squareIndex / this.arenaSize);\r\n    x = squareIndex % this.arenaSize;\r\n    return { x, y };\r\n  }\r\n\r\n  setEntityWithinApropriateSquare(entity: Entity): void {\r\n    this.setEntityWithinASquare(entity.position.x, entity.position.y, entity);\r\n  }\r\n\r\n  setEntityWithinASquare(x: number, y: number, entity: Entity) {\r\n    let squareIndex: number = this.targetSquareIndex(x, y);\r\n    this.initializeSquareIfEmpty(squareIndex);\r\n    this.squares[squareIndex].entity = entity;\r\n  }\r\n\r\n  addBlood(square: Square, amount: number) {\r\n    if (!square.blood) {\r\n      square.blood = amount;\r\n    } else {\r\n      square.blood += amount;\r\n    }\r\n  }\r\n\r\n  markSquareAsTargeted(squareIndex: number): void {\r\n    Helpers.resetGivenFieldsOnACollection(this.squares, \"isTargeted\");\r\n    this.initializeSquareIfEmpty(squareIndex);\r\n    this.squares[squareIndex].isTargeted = true;\r\n  }\r\n\r\n  initializeSquareIfEmpty(squareIndex: number) {\r\n    if (!this.squares[squareIndex]) {\r\n      this.squares[squareIndex] = new Square();\r\n    }\r\n  }\r\n\r\n  markAvailableDestinationsForSelectedEntity(entity: Entity): void {\r\n    if (entity.active) {\r\n      let { x, y } = entity.position;\r\n\r\n      Helpers.resetGivenFieldsOnACollection(this.squares, \"isAvailableDestination\");\r\n\r\n      for (let j = y - 1; j <= y + 1; j++) {\r\n        if (j < 0 || j >= this.arenaSize) {\r\n          continue;\r\n        }\r\n        for (let i = x - 1; i <= x + 1; i++) {\r\n          if (i < 0 || i >= this.arenaSize || (i === x && j === y)) {\r\n            continue;\r\n          }\r\n\r\n          let square: Square = this.getSquare(i, j);\r\n          if (square.squareType === \"floor\") {\r\n            square.isAvailableDestination = true;\r\n          }\r\n\r\n          this.setSquare(i, j, square);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  lightAllSquares(): void {\r\n    this.squares.forEach((square) => (square.isLit = true));\r\n  }\r\n  castLightsFromFriendlyEntity(entity: Entity): void {\r\n    if (entity.isFriendly) {\r\n      let { x, y } = entity.position;\r\n\r\n      for (let j = y - 2; j <= y + 2; j++) {\r\n        if (j < 0 || j >= this.arenaSize) {\r\n          continue;\r\n        }\r\n        for (let i = x - 2; i <= x + 2; i++) {\r\n          if (i < 0 || i >= this.arenaSize) {\r\n            continue;\r\n          }\r\n\r\n          let square: Square = this.getSquare(i, j);\r\n\r\n          square.isInTwilightZone = true;\r\n          this.setSquare(i, j, square);\r\n        }\r\n      }\r\n\r\n      for (let j = y - 1; j <= y + 1; j++) {\r\n        if (j < 0 || j >= this.arenaSize) {\r\n          continue;\r\n        }\r\n        for (let i = x - 1; i <= x + 1; i++) {\r\n          if (i < 0 || i >= this.arenaSize) {\r\n            continue;\r\n          }\r\n\r\n          let square: Square = this.getSquare(i, j);\r\n\r\n          square.isLit = true;\r\n          this.setSquare(i, j, square);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const SquaresService = new SquaresServiceClass();\r\n","import { Entity, Position, HavingInventory } from \".\";\r\nimport { SquaresService, Square } from \"../SquaresService\";\r\nimport * as Helpers from \"../../helpers/Helpers\";\r\nimport { RangedWeapon } from \"../\";\r\nconst arenaSize: number = 10;\r\n\r\nclass EntitiesServiceClass {\r\n  entities: Entity[];\r\n  selected: Entity;\r\n\r\n  getEntityId(entity: Entity): string {\r\n    return entity.name;\r\n  }\r\n\r\n  findEntityById(id: string): Entity {\r\n    let result: Entity = this.entities.filter((entity) => entity.name === id)[0];\r\n    return result;\r\n  }\r\n\r\n  findItemOnEntity(entity: HavingInventory, id: string) {\r\n    let result = entity.inventory.filter((item) => item.name === id)[0];\r\n    return result;\r\n  }\r\n\r\n  moveEntityRandomly(entity: Entity) {\r\n    if (entity.isDead) return;\r\n\r\n    let oldPositionX = entity.position.x;\r\n    let oldPositionY = entity.position.y;\r\n\r\n    entity.position.x = entity.position.x + Helpers.getRandomIntInclusive(-1, 1);\r\n    entity.position.y = entity.position.y + Helpers.getRandomIntInclusive(-1, 1);\r\n\r\n    entity.position.x = Helpers.getNumberWithinBoundaries(entity.position.x, 0, arenaSize - 1);\r\n    entity.position.y = Helpers.getNumberWithinBoundaries(entity.position.y, 0, arenaSize - 1);\r\n\r\n    let newSquare = SquaresService.getSquare(entity.position.x, entity.position.y);\r\n\r\n    if ((newSquare && newSquare.entity) || (newSquare && newSquare.squareType !== \"floor\")) {\r\n      // if square occupiec, reverse the move\r\n      entity.position.x = oldPositionX;\r\n      entity.position.y = oldPositionY;\r\n    }\r\n  }\r\n\r\n  stopBreathingForKilledEntity(entity: Entity): Entity {\r\n    if (entity && entity.hp <= 0) {\r\n      entity.isBreathing = false;\r\n      entity.isShooting = false;\r\n      entity.hp = 0;\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  getEntitiesAtGivenPosition(targetPosition: Position): Entity[] {\r\n    return this.entities.filter((potentialTargetEntity: Entity): boolean => {\r\n      return (\r\n        potentialTargetEntity.position.x === targetPosition.x && potentialTargetEntity.position.y === targetPosition.y\r\n      );\r\n    });\r\n  }\r\n\r\n  selectEntityFromGivenSquare(selected: Entity, targeted: Square): Entity {\r\n    if (selected && targeted && targeted.entity) {\r\n      selected.active = false;\r\n    }\r\n    if (targeted && targeted.entity) {\r\n      selected = targeted.entity;\r\n      selected.active = true;\r\n    }\r\n\r\n    return selected;\r\n  }\r\n\r\n  setSelected(selected: Entity, value: boolean): Entity {\r\n    let selectedInEntities = this.findEntityById(this.getEntityId(selected));\r\n    if (value) {\r\n      selected.active = value;\r\n    } else {\r\n      selected = null;\r\n      console.log(\"Nullified:\", selected);\r\n    }\r\n    selectedInEntities.active = value;\r\n    return selected;\r\n  }\r\n\r\n  checkAmmoAndCalculateDamageApplied(entity: Entity): number {\r\n    let damageApplied: number = 0;\r\n    let weapon: RangedWeapon = entity.equipment && entity.equipment.hands;\r\n\r\n    if (!weapon) return 0;\r\n\r\n    if (weapon.isAbleToFire) {\r\n      damageApplied = weapon.fire();\r\n    } else {\r\n      weapon.rounds = \"empty\";\r\n      entity.isShooting = false;\r\n    }\r\n\r\n    return damageApplied;\r\n  }\r\n\r\n  fireAShot(entity: Entity) {\r\n    if (entity.ceaseFire) {\r\n      entity.isShooting = false;\r\n      entity.ceaseFire = false;\r\n      return;\r\n    }\r\n    let damageApplied = this.checkAmmoAndCalculateDamageApplied(entity);\r\n    let targetEntities = this.getEntitiesAtGivenPosition(entity.targetPosition);\r\n    targetEntities.forEach((targetEntity) => {\r\n      this.applyDamageToTargetEntity(targetEntity, damageApplied);\r\n      this.ceaseFireNextTickIfTargetIsKilled(entity, targetEntity);\r\n    });\r\n  }\r\n\r\n  applyDamageToTargetEntity(targetEntity: Entity, damage: number) {\r\n    if (damage) {\r\n      targetEntity.hp -= damage;\r\n      targetEntity.bleeding = 5;\r\n    }\r\n  }\r\n\r\n  ceaseFireNextTickIfTargetIsKilled(entity: Entity, targetEntity: Entity): void {\r\n    if (targetEntity.hp < 0) {\r\n      entity.ceaseFire = true;\r\n    }\r\n  }\r\n\r\n  isEntityShootingProperly(entity: Entity): boolean {\r\n    return (\r\n      entity.isShooting &&\r\n      entity.targetPosition &&\r\n      (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\r\n    );\r\n  }\r\n\r\n  applyEffectsOfBleeding(entity: Entity): Entity {\r\n    // TODO: move to a \"bleed\" method\r\n    if (entity.bleeding && entity.hp > 0) {\r\n      entity.hp -= entity.bleeding;\r\n      let square: Square = SquaresService.getSquare(entity.position.x, entity.position.y);\r\n      SquaresService.addBlood(square, entity.bleeding);\r\n      entity.bleeding -= entity.bleedingReductionPerTurn;\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  moveEntityIntoChosenDestination(entity: Entity): Entity {\r\n    if (!entity.isDead && entity.moveDestination) {\r\n      let chosenDestinationSquare: Square = SquaresService.getSquare(\r\n        entity.moveDestination.x,\r\n        entity.moveDestination.y\r\n      );\r\n\r\n      entity.position = entity.moveDestination;\r\n      delete entity.moveDestination;\r\n      chosenDestinationSquare.isChosenDestination = undefined;\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  setMoveDestinationOnASelectedEntity(selected: Entity, targetedSquarePosition: Position): void {\r\n    selected.moveDestination = targetedSquarePosition;\r\n  }\r\n\r\n  moveEntities(): void {\r\n    this.entities.forEach((entity) => this.moveEntityIntoChosenDestination(entity));\r\n    // let OP: Entity = this.findEntityById(\"Squid\");\r\n    // let OC: Entity = this.findEntityById(\"Octo\");\r\n    // //this.moveEntityRandomly(JR);\r\n    // this.moveEntityRandomly(OP);\r\n    // this.moveEntityRandomly(OC);\r\n    this.entities.filter(entity => !entity.isFriendly).forEach((entity) => {\r\n      this.moveEntityRandomly(entity);\r\n    });\r\n  }\r\n}\r\n\r\nexport const EntitiesService = new EntitiesServiceClass();\r\n","export class Item {\r\n  name: string = \"\";\r\n}\r\n\r\nexport class Weapon extends Item {\r\n  causesBleeding = 0;\r\n  range = 0;\r\n  damage = 0;\r\n}\r\n\r\nexport class RangedWeapon extends Weapon {\r\n  rounds: number | any = 0;\r\n  maxRounds = 5;\r\n\r\n  fire() {\r\n    this.rounds--;\r\n    console.log(\"Firing ranged weapon. Damage: \", this.damage);\r\n    return this.damage;\r\n  }\r\n\r\n  get isAbleToFire() {\r\n    return this.rounds > 0;\r\n  }\r\n\r\n  reload() {\r\n    this.rounds = this.maxRounds;\r\n  }\r\n}\r\n\r\n// TODO: Should add kinetic/thermal damage\r\nexport class Rifle extends RangedWeapon {\r\n  type = \"projectile\";\r\n  range = 4;\r\n  damage = 1;\r\n  causesBleeding = 2;\r\n}\r\n\r\nexport class Lazer extends RangedWeapon {\r\n  type = \"lazer\";\r\n  range = 6;\r\n  damage = 5;\r\n  causesBleeding = 0;\r\n}\r\n","class MessageServiceClass {\r\n  messages: string[] = [];\r\n  send(message: string) {\r\n    this.messages.push(message);\r\n  }\r\n}\r\n\r\nexport const MessageService = new MessageServiceClass();\r\n\r\nexport default MessageService;\r\n","import { Rifle, Lazer } from \"../services\";\r\n\r\nexport class M16 extends Rifle {\r\n  name = \"M16\";\r\n  rounds = 15;\r\n  maxRounds = 20;\r\n  damage = 2;\r\n}\r\n\r\nexport class M40 extends Rifle {\r\n  name = \"M41A Pulse Rifle\";\r\n  rounds = 40;\r\n  maxRounds = 40;\r\n  damage = 1;\r\n}\r\n\r\nexport class L30 extends Lazer {\r\n  name = \"Assault Lazer Cannon\";\r\n  rounds = 30;\r\n  maxRounds = 30;\r\n  damage = 3;\r\n}\r\n","import { M16, M40, L30 } from \"./ItemDefinitions\";\r\nimport { Entity } from \"../services\";\r\n\r\nexport const entitiesInitialValues = [\r\n  {\r\n    name: \"Lazer Blady\",\r\n    age: 60,\r\n    hp: 75,\r\n    maxHp: 100,\r\n    icon: \"🧑🏻\",\r\n    isBreathing: true,\r\n    isFriendly: true,\r\n    hasWeapon: true,\r\n    position: { x: 4, y: 8 },\r\n    inventory: [new M16()],\r\n    equipment: {hands: new L30()},\r\n  },\r\n  {\r\n    name: \"Robot\",\r\n    age: 1,\r\n    hp: 50,\r\n    maxHp: 50,\r\n    icon: \"🤖\",\r\n    isBreathing: false,\r\n    position: { x: 3, y: 5 },\r\n    equipment: {hands: new L30()},\r\n    inventory: [],\r\n    hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Octo\",\r\n    age: 8,\r\n    hp: 200,\r\n    maxHp: 200,\r\n    icon: \"🐙\",\r\n    isBreathing: true,\r\n    position: { x: 8, y: 2 },\r\n    bleedingReductionPerTurn: 0,\r\n    bleeding: 1,\r\n    equipment: {hands: new L30()},\r\n    inventory: [],\r\n    hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Squid\",\r\n    age: 5,\r\n    hp: 100,\r\n    maxHp: 100,\r\n    icon: \"🦑\",\r\n    isBreathing: true,\r\n    position: { x: 5, y: 5 },\r\n    equipment: {hands: new M40()},\r\n    inventory: [],\r\n    hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Ant\",\r\n    age: 1,\r\n    hp: 45,\r\n    maxHp: 50,\r\n    icon: \"🐜\",\r\n    isBreathing: true,\r\n    position: { x: 7, y: 6 },\r\n    equipment: {hands: new M40()},\r\n    inventory: [],\r\n    hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Henry The Spider\",\r\n    age: 1,\r\n    hp: 100,\r\n    maxHp: 150,\r\n    icon: \"🕷️\",\r\n    isBreathing: true,\r\n    position: { x: 9, y: 3 },\r\n    bleedingReductionPerTurn: 1,\r\n    equipment: {hands: new L30()},\r\n    inventory: [],\r\n    hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Mosquito\",\r\n    age: 1,\r\n    hp: 12,\r\n    maxHp: 20,\r\n    icon: \"🦟\",\r\n    isBreathing: true,\r\n    position: { x: 2, y: 7 },\r\n    equipment: {hands: new M16()},\r\n    inventory: [],\r\n    hasWeapon: true,\r\n  },\r\n  {\r\n    name: \"Microbe\",\r\n    age: 1,\r\n    hp: 1,\r\n    maxHp: 5,\r\n    icon: \"🦠\",\r\n    isBreathing: true,\r\n    position: { x: 1, y: 5 },\r\n    equipment: {hands: new L30()},\r\n    inventory: [],\r\n    hasWeapon: true,\r\n  },\r\n];\r\n\r\nexport const characterDefinitions = entitiesInitialValues.map((entry) => new Entity(entry));\r\nexport default characterDefinitions;\r\n","import { SquaresService, Square } from \"../SquaresService\";\r\nimport { EntitiesService } from \"../EntitiesService\";\r\nimport tutorial_map_00 from \"../../resources/maps/tutorial_map_00.json\"; // yes, it's a resource named with snake_case\r\nimport { characterDefinitions } from \"../../resources/CharacterDefinitions\";\r\nimport { Entity } from \"../EntitiesService\";\r\n\r\nclass GameModelClass {\r\n  entities;\r\n  squares;\r\n  selected;\r\n\r\n  constructor() {\r\n    this.entities = EntitiesService.entities;\r\n    this.squares = SquaresService.squares;\r\n  }\r\n\r\n  saveMap = () => {\r\n    let squares: Square[] = JSON.parse(JSON.stringify(SquaresService.squares));\r\n    let squaresProcessedForSave = squares.map((square) => {\r\n      //let newSquare = { squareType: square.squareType, entity: square.entity };\r\n\r\n      return square;\r\n    });\r\n    let squaresStringified = JSON.stringify(squaresProcessedForSave);\r\n    console.log(squaresStringified);\r\n    let message = \"Enter the name of saved map.\";\r\n    let mapName = \"map00\";\r\n\r\n    let result = window.prompt(message, mapName);\r\n\r\n    localStorage[result] = squaresStringified;\r\n  };\r\n\r\n  loadMap = () => {\r\n    let mapNames = Object.keys(localStorage);\r\n    let message = `Enter the name of map to load. ${mapNames}`;\r\n    let mapName = \"map00\";\r\n    let result = window.prompt(message, mapName);\r\n    let squaresStringified = localStorage[result];\r\n\r\n    console.log(squaresStringified);\r\n    let squaresLoaded = JSON.parse(squaresStringified);\r\n    this.loadMapIntoBoard(squaresLoaded);\r\n  };\r\n\r\n  loadMapIntoBoard = (squaresLoaded) => {\r\n    SquaresService.squares.forEach((square, index) => {\r\n      let targetSquare = square;\r\n      let sourceSquare = squaresLoaded[index];\r\n      targetSquare.squareType = sourceSquare.squareType;\r\n    });\r\n  };\r\n\r\n  loadEntities = (entities: Entity[]) => {\r\n    EntitiesService.entities = entities;\r\n  };\r\n\r\n  loadBuiltInMap = () => {\r\n    this.loadMapIntoBoard(tutorial_map_00);\r\n  };\r\n\r\n  loadPredefinedEntitities = () => {\r\n    this.loadEntities(characterDefinitions);\r\n  };\r\n}\r\n\r\nexport const GameModel = new GameModelClass();\r\n\r\nexport default GameModel;\r\n","import { GameModel } from \"../GameModelService\";\r\nimport { SquaresService, Square } from \"../SquaresService\";\r\nimport { EntitiesService } from \"../EntitiesService\";\r\nimport { Entity } from \"../EntitiesService\";\r\nimport * as Helpers from \"../../helpers\";\r\n\r\nimport { GameState } from \"../../components/Game/GameState\";\r\nclass GameLogicClass {\r\n  model;\r\n\r\n  constructor() {\r\n    this.model = GameModel;\r\n  }\r\n\r\n  run = () => {\r\n    console.log(\"Running Game Logic\");\r\n    console.log(GameModel.entities);\r\n  };\r\n\r\n  calculateNextInterfaceState = (previousState: GameState) => {\r\n    let nextState = previousState;\r\n    let { entities, selected } = nextState;\r\n    entities.forEach((entity) => {\r\n      if (entity === selected) SquaresService.markAvailableDestinationsForSelectedEntity(selected);\r\n    });\r\n\r\n    return nextState;\r\n  };\r\n\r\n  /**\r\n   * Calculate WHAT EXACTLY? This should probably go into GameLogic\r\n   * @param previousState\r\n   */\r\n  calculateNextGameState(previousState: GameState) {\r\n    let nextState: GameState = previousState;\r\n    let { entities } = nextState;\r\n\r\n    EntitiesService.moveEntities();\r\n    //Helpers.resetGivenFieldsOnACollection(squares, \"isLit\", \"isInTwilightZone\");\r\n    //SquaresService.lightAllSquares();\r\n    entities.forEach((entity) => {\r\n      if (EntitiesService.isEntityShootingProperly(entity)) {\r\n        EntitiesService.fireAShot(entity);\r\n      }\r\n      entity.bleedExternally();\r\n\r\n      EntitiesService.stopBreathingForKilledEntity(entity);\r\n\r\n      SquaresService.markAvailableDestinationsForSelectedEntity(entity);\r\n      // SquaresService.castLightsFromFriendlyEntity(entity);\r\n    });\r\n\r\n    nextState.enemiesAlive = this.calculateNumberOfAliveEnemies(entities);\r\n    console.log(nextState.enemiesAlive);\r\n    return nextState;\r\n  }\r\n\r\n  calculateNumberOfAliveEnemies(entities: Entity[]):number {\r\n    let amountOfAliveEnemies = 0;\r\n    entities.forEach((entity) => {\r\n      if(entity.isFriendly) {\r\n        return;\r\n      } else if(entity.hp > 0) {\r\n        amountOfAliveEnemies++;\r\n      }\r\n    });\r\n\r\n    return amountOfAliveEnemies;\r\n  }\r\n\r\n  syncSquaresWithEntities = (previousState) => {\r\n    let squares: Square[] = Helpers.newCopyOfArray(previousState.squares);\r\n    /*\r\n    Reattach new squares array to the SquaresService\r\n    This might actually be not-needed, as elements of that array are objects\r\n    and are referenced in both arrays, so unless we're adding new squares,\r\n    everything should work without re-attaching\r\n    */\r\n    SquaresService.squares = squares;\r\n    let entities: Entity[] = previousState.entities;\r\n    if (entities.length) {\r\n      Helpers.resetGivenFieldsOnACollection(squares, \"entity\");\r\n    }\r\n    entities.forEach((entity) => {\r\n      SquaresService.setEntityWithinApropriateSquare(entity);\r\n    });\r\n\r\n    return { squares };\r\n  };\r\n\r\n  deselectAllEntities = () => {\r\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"active\");\r\n    Helpers.resetGivenFieldsOnACollection(SquaresService.squares, \"isChosenDestination\", \"isAvailableDestination\");\r\n  };\r\n\r\n  ceaseFire = () => {\r\n    Helpers.resetGivenFieldsOnACollection(GameModel.entities, \"isShooting\");\r\n  };\r\n}\r\n\r\nexport const GameLogic = new GameLogicClass();\r\nexport default GameLogic;\r\n","import React from \"react\";\r\n\r\ninterface BloodProps {\r\n  bloodAmount: number; // receives amount of blood ONLY\r\n}\r\n\r\n/**\r\n * @description\r\n * Visualises blood by adding red background\r\n * and a little number in the corner.\r\n *\r\n * @param bloodAmount - number representing the amount of blood.\r\n */\r\nclass Blood extends React.PureComponent<BloodProps> {\r\n  render() {\r\n    let { bloodAmount } = this.props;\r\n\r\n    return (\r\n      <div\r\n        className=\"square__blood\"\r\n        style={{\r\n          background: `rgba(255, 0, 0, ${(bloodAmount / 50).toFixed(2)})`,\r\n        }}\r\n      >\r\n        {bloodAmount}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Blood;\r\n","import React from \"react\";\nimport { Entity, Item } from \"../../services\";\n\ninterface ItemsProps {\n  items: Item[];\n  itemsNumber: number; // here to trigger update when list length changes\n}\n// FIXME: I have a strange feeling this doesn't update when contents of items list change but not the number of elements\n/**\n * @description\n * Displays icons of items on the square, as well as little number in the corner.\n * @param itemsNumber - number of items on the square\n * @param items - array of items on the square\n */\nclass Items extends React.PureComponent<ItemsProps> {\n  itemsIcons = [];\n\n  render() {\n    let { items, itemsNumber } = this.props;\n\n    if (!items) return null;\n\n    items.forEach((item) => {\n      let entity = item as Entity;\n      if (entity.icon) {\n        this.itemsIcons.push(<div className=\"square__item-icon\">{entity.icon}</div>);\n      }\n    });\n\n    return (\n      <div className=\"square__items\">\n        <div className=\"square__items-icons\">{this.itemsIcons}</div>\n        <div className=\"square__items-number\">{itemsNumber}</div>\n      </div>\n    );\n  }\n}\n\nexport default Items;\n","import React, { ReactElement } from \"react\";\n// services\nimport { Item } from \"../../services\";\n// components\nimport Blood from \"../Square/Blood\";\nimport Items from \"../Square/Items\";\n// others\nimport \"./Square.scss\";\n\n// TODO: This should really take less props\ninterface SquareProps {\n  squareId: number;\n  className?: string;\n  onClick: (squareIndex: number) => void;\n  blood: number;\n  items: Item[]; // collection of objects\n  itemsNumber: number; // here to trigger update when list length changes\n}\n\n/**\n * @description Displays a square with blood and items on it.\n * @param squareId - unique numerical id\n * @param className - string with CSS clasess\n * @param onClick - callback to call when square is clicked\n * @param blood - amount of blood\n * @param items - array of items\n * @param itemsNumber - numberof items\n */\nclass SquareComponent extends React.PureComponent<SquareProps> {\n  onClick = () => {\n    this.props.onClick(this.props.squareId);\n  };\n\n  render() {\n    // console.log(\"Render Square\", this.props.squareId);\n    // TODO: Extract into separate component\n    function cuboid(classPrefix:string):ReactElement {\n      let i = 6;\n      let cuboidFaces: ReactElement[] = [];\n\n      while(i--){\n        cuboidFaces.push(<div key={i} className={`${classPrefix}__cuboid-face`}></div>);\n      }\n\n      return <div className={`${classPrefix}__cuboid`}>\n        {cuboidFaces}\n      </div>\n    }\n\n    return (\n      <button className={this.props.className} onClick={this.onClick}>\n        <Blood bloodAmount={this.props.blood} />\n        <Items items={this.props.items} itemsNumber={this.props.itemsNumber} />\n        <div className=\"square__content\">&nbsp;</div>\n        {cuboid('square')}\n      </button>\n    );\n  }\n}\n\nexport default SquareComponent;\n","import { timeStamp } from \"console\";\r\nimport React from \"react\";\r\nimport \"./HpBar.scss\";\r\n\r\ninterface HpBarProps {\r\n    current: number;\r\n    max: number;\r\n    color: string;\r\n}\r\n\r\nexport default class HpBar extends React.Component<HpBarProps> {\r\n\r\n    render() {\r\n        let percentage = ~~((this.props.current * 100) / this.props.max);\r\n        let progressStyle = {\r\n            width: `${percentage}%`,\r\n            backgroundColor: this.props.color\r\n        };\r\n        return(\r\n            <div className=\"hpbar\">\r\n                <div className=\"hpbar__indicator\" style={progressStyle}>\r\n\r\n                </div>\r\n                <span className=\"hpbar__text\">\r\n                        {this.props.current}\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as Helpers from \"../../helpers\";\r\nimport React, { ReactElement } from \"react\";\r\n\r\nexport default function ShootingVisualization(props): ReactElement {\r\n  const DISTANCE_BETWEEN_TILES = 38;\r\n  let { entity } = props;\r\n\r\n  let calcNewAangle = Helpers.calculateAngle;\r\n  let targetCoords = entity.targetPosition;\r\n  let projectileNumber = 5;\r\n  let projectiles = [];\r\n  let localId = `Entity${entity.icon}`;\r\n  let customStyle = \"\";\r\n\r\n  if (\r\n    targetCoords &&\r\n    entity.position &&\r\n    entity.hasWeapon &&\r\n    entity.isShooting &&\r\n    (entity.targetPosition.x !== entity.position.x || entity.targetPosition.y !== entity.position.y)\r\n  ) {\r\n    if (targetCoords) {\r\n      let distanceToTargetX = DISTANCE_BETWEEN_TILES * (targetCoords.x - entity.position.x);\r\n      let distanceToTargetY = DISTANCE_BETWEEN_TILES * (targetCoords.y - entity.position.y);\r\n\r\n      let actualDistance = Helpers.calculateDistance(distanceToTargetX, distanceToTargetY);\r\n      let weaponType = entity && entity.equipment && entity.equipment.hands && entity.equipment.hands.type;\r\n      let angle = calcNewAangle(distanceToTargetX, distanceToTargetY);\r\n\r\n      if (weaponType === \"lazer\") {\r\n        // TODO: perhaps call to `visualizeShooting(from,to,weaponType)`\r\n        let className = `projectile${localId}_beam`;\r\n        let projectile = \"\";\r\n        const distanceWhereBeamBegins = 20;//in pixels\r\n        actualDistance = actualDistance - distanceWhereBeamBegins;\r\n        customStyle = `\r\n          @keyframes pulsing${localId} {\r\n            0%  {opacity: 0.1;}\r\n            100%  {opacity: 1;}\r\n          }\r\n\r\n          @keyframes elongating${localId} {\r\n            0%  {width: ${actualDistance - 20};}\r\n            100%  {width: ${actualDistance + 20};}\r\n          }\r\n\r\n          @keyframes swiping${localId} {\r\n            0%  {transform: rotate(${angle + 90 -1}deg) translateX(${distanceWhereBeamBegins}px);}\r\n            50%  {transform: rotate(${angle + 90 + 1}deg) translateX(${distanceWhereBeamBegins}px);}\r\n            100%  {transform: rotate(${angle + 90 - 1}deg) translateX(${distanceWhereBeamBegins}px);}\r\n          }\r\n\r\n          .${className} {\r\n            width: ${actualDistance}px;\r\n            height: 3px;\r\n            border-radius: 5px;\r\n            background: #F00;\r\n            position: absolute;\r\n            top: 13px;\r\n            left: 13px;\r\n            transform: rotate(${angle + 90}deg);/* overriden by swiping keyframes */\r\n            transform-origin: left 0px;\r\n            animation: pulsing${localId} 0.1s ease infinite,\r\n            elongating${localId} 0.7s ease alternate infinite,\r\n            swiping${localId} 1s ease alternate infinite;\r\n            box-shadow: 0 0 5px 5px white;\r\n            z-index: 10;\r\n          }\r\n          `;\r\n        projectiles.push(\r\n          <div key={className} className={className}>\r\n            {projectile}\r\n          </div>\r\n        );\r\n      } else {\r\n        customStyle = `\r\n          @keyframes shooting${localId} {\r\n            0%   {transform: translate(0,0) rotate(${angle}deg) scaleY(0.3)}\r\n            100% {transform: translate(\r\n              ${36 * (targetCoords.x - entity.position.x)}px,\r\n              ${36 * (targetCoords.y - entity.position.y)}px\r\n            ) rotate(${angle}deg) scaleY(2)}\r\n          }\r\n          `;\r\n\r\n        while (projectileNumber--) {\r\n          customStyle += `\r\n          .projectile${localId}_${projectileNumber} {\r\n            transform: rotate(${angle}deg);\r\n            animation: shooting${localId} 0.8s linear infinite;\r\n            animation-delay: ${projectileNumber - 1 * 0.3}s;\r\n          }`;\r\n        }\r\n        let projectile = entity.isShooting ? \"|\" : \"\";\r\n\r\n        projectileNumber = 3;\r\n\r\n        while (projectileNumber--) {\r\n          let className = `projectile projectile${localId}_${projectileNumber}`;\r\n          projectiles.push(\r\n            <div key={className} className={className}>\r\n              {projectile}\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"shooting-visualization\">\r\n      <style>{customStyle}</style>\r\n      {projectiles}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { SquaresService } from \"../../services\";\r\nimport { Entity } from \"../../services/EntitiesService\";\r\nimport HpBar from \"./HpBar\";\r\nimport ShootingVisualization from \"./ShootingVisualization\";\r\nimport * as Helpers from \"../../helpers\";\r\nimport \"./EntityPawn.scss\";\r\n\r\ninterface EntityPawnProps {\r\n  entity: Entity;\r\n}\r\n\r\nexport default class EntityPawn extends React.Component<EntityPawnProps> {\r\n  randomTime = `${(Math.random() + 0.5).toFixed(2)}s`;\r\n\r\n  render() {\r\n    let { entity } = this.props;\r\n    let square = SquaresService.getSquare(entity.position.x, entity.position.y);\r\n    const squareDistance = 38;\r\n\r\n    let classNameBase = \"entity-pawn__icon\";\r\n    let className = `${classNameBase}`;\r\n    let classessFromFlags = Helpers.turnFlagsIntoClasses(entity, classNameBase);\r\n    classessFromFlags += Helpers.turnFlagsIntoClasses(square, classNameBase);\r\n    className += ` ${classessFromFlags} `;\r\n    let fof = entity.isFriendly ? 'friendly' : 'hostile';\r\n    let color = entity.isFriendly ? 'green' : 'red';\r\n    let zIndex = entity.isShooting ? 5 : 1;\r\n    let animationBreathing = entity.isBreathing ? `breathing ${this.randomTime} alternate infinite linear` : \"none\";\r\n\r\n    return (\r\n      <div\r\n        className=\"entity-pawn\"\r\n        key={entity.name}\r\n        style={{\r\n          left: squareDistance / 2 - 4 + squareDistance * entity.position.x,\r\n          top: squareDistance / 2 - 4 + squareDistance * entity.position.y,\r\n          zIndex: zIndex,\r\n        }}\r\n      >\r\n        <div\r\n          className={`entity-pawn__health-display ` + fof}\r\n        >\r\n\r\n          <HpBar\r\n            current={entity.hp}\r\n            max={entity.maxHp}\r\n            color={color}\r\n          />\r\n        </div>\r\n\r\n        <div\r\n          className={className}\r\n          style={{\r\n            animation: animationBreathing,\r\n          }}\r\n        >\r\n          {entity.icon}\r\n        </div>\r\n        <ShootingVisualization entity={entity} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { ReactElement } from \"react\";\n\nimport SquareComponent from \"../Square\";\nimport EntityPawnComponent from \"../EntityPawn\";\nimport * as Helpers from \"../../helpers\";\nimport { Entity } from \"../../services/EntitiesService\";\nimport { Square } from \"../../services/SquaresService\";\n\nimport styles from \"./Board.module.scss\";\n\ninterface BoardProps {\n  onClick(i: number): void;\n  squares: Square[]; // updated every tick\n  entities: Entity[]; // updated every tick\n  size: number;\n  isRotated: boolean;\n}\n/**\n * @description Board component renders Squares and EntityPawns\n */\nexport default class Board extends React.Component<BoardProps> {\n  handleClick = (i: number) => {\n    console.log(\"Handles Click on Board\", i);\n    this.props.onClick(i);\n  };\n\n  renderSquare(i: number, rowId: number, colId: number) {\n    let square = this.props.squares[i];\n\n    return (\n      <SquareComponent // is a pureComponent\n        key={`r${rowId}_c${i}`}\n        squareId={i}\n        className={Helpers.getCssClassesForAGivenSquare(square)}\n        onClick={this.handleClick}\n        blood={square.blood} // number\n        items={square.items} // list of objects\n        itemsNumber={square.items && square.items.length}\n      ></SquareComponent>\n    );\n  }\n\n  EntityPawns = (): ReactElement[] => this.props.entities.map((entity) => <EntityPawnComponent key={entity.name} entity={entity} />);\n\n  BoardSquares = () => {\n    let cellId: number = 0;\n    let rowId: number = 0;\n    let colId: number;\n\n    let rowsOfSquares = Array(this.props.size)\n      .fill(null)\n      .map((row, number) => {\n        colId = 0;\n        let cells = Array(this.props.size)\n          .fill(null)\n          .map((cell, number) => {\n            return this.renderSquare(cellId++, rowId, colId++);\n          });\n        return (\n          <div key={rowId++} className={styles[\"board__row\"]}>\n            {cells}\n          </div>\n        );\n      });\n\n    return rowsOfSquares;\n  }; // Board Squares\n\n  render() {\n    let className: string = styles.board;\n    if (this.props.isRotated) {\n      className += ` ${styles[\"board--rotated\"]} board--rotated`;\n    }\n    return (\n      <div className={className}>\n        {this.BoardSquares()}\n        {this.EntityPawns()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\r\nimport \"./LinearDisplay.scss\";\r\n\r\ninterface LinearDisplayProps {\r\n  className?: string;\r\n  current: number;\r\n  max: number;\r\n  title?: string;\r\n  label?: string;\r\n}\r\n\r\nexport default function LinearDisplay(props: LinearDisplayProps) {\r\n  let className = `linear-display ${props.className || \"\"}`;\r\n  let percentage = ~~((props.current * 100) / props.max);\r\n  let overload = percentage > 100;\r\n  if (overload) {\r\n    percentage = 100;\r\n    className += \" linear-display--overloaded\";\r\n  }\r\n\r\n  let progressStyle = {\r\n    width: `${percentage}%`,\r\n  };\r\n  let title = props.title || `${props.current}/${props.max}`;\r\n\r\n  let amount = props.current;\r\n\r\n  let divider = 1;\r\n  if (props.max >= 40 && props.max < 100) {\r\n    divider = 5;\r\n  } else if (props.max >= 100) {\r\n    divider = 10;\r\n  }\r\n\r\n  amount = amount / divider;\r\n\r\n  let gridSize = 100 / amount;\r\n\r\n  let color = `rgba(200,200,200,0.4)`;\r\n  color = `black`;\r\n  let progressGridStyle = {\r\n    backgroundSize: `${gridSize}% 100%`,\r\n    backgroundImage: `\r\n      linear-gradient(to left, ${color} 1px, transparent 1px)\r\n    `,\r\n  };\r\n\r\n  Object.assign(progressStyle, progressGridStyle);\r\n\r\n  return (\r\n    <div className={className}>\r\n      <div className=\"linear-display__label\">{props.label}:&nbsp;</div>\r\n      <div className=\"linear-display__bar-container\" title={title}>\r\n        <div className=\"linear-display__bar-progress\" style={progressStyle}>\r\n          <span className=\"linear-display__bar-progress-text\">\r\n            {props.current}\r\n            {overload ? \"/\" + props.max : \"\"}&nbsp;\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div>&nbsp;</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { Item, RangedWeapon } from \"../../services\";\nimport LinearDisplay from \"./LinearDisplay\";\n\ninterface InventoryItemProps {\n  item: Item;\n  onDrop(itemName: string);\n  onReload(itemName: string);\n  onClick(itemName: string);\n  processInterface: Function;\n}\n\nexport default function InventoryItem(props: InventoryItemProps) {\n  let { item } = props;\n  let reloadButton;\n  let dropButton;\n  let ammoCounter;\n\n  if (props.onDrop) {\n    dropButton = (\n      <button\n        className=\"inventory-list__drop-button\"\n        onClick={() => {\n          props.onDrop(item.name);\n        }}\n      >\n        Drop\n      </button>\n    );\n  }\n\n  if (item instanceof RangedWeapon) {\n    let weapon = item as RangedWeapon;\n\n    if (weapon.reload) {\n      // has reload capability\n      let className = \" inventory-list__reload-button \";\n\n      if (weapon.rounds === 0 || weapon.rounds === \"empty\") {\n        className += \" inventory-list__reload-button--empty \";\n      } else if (weapon.rounds < weapon.maxRounds) {\n        className += \" inventory-list__reload-button--partial \";\n      }\n      reloadButton = (\n        <button\n          className={className}\n          onClick={() => {\n            weapon.reload();\n            props.onReload && props.onReload(item.name);\n            props.processInterface();\n          }}\n        >\n          Reload\n        </button>\n      );\n    } else {\n      reloadButton = null;\n    }\n\n    ammoCounter = weapon.reload ? (\n      <LinearDisplay label=\"Rounds\" current={weapon.rounds} max={weapon.maxRounds} />\n    ) : null;\n  }\n\n  return (\n    <div key={item.name}>\n      <div onClick={() => props.onClick(item.name)} key={item.name} className=\"inventory-list__item\">\n        <span>{item.name}</span>\n        <div>{ammoCounter}</div>\n      </div>\n      {reloadButton}\n      {dropButton}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./InventoryList.scss\";\nimport { Item } from \"../../services\";\nimport InventoryItem from \"./InventoryItem\";\n\ninterface InventoryListProps {\n  className?: string;\n  label: string;\n  title: string;\n  onClick(itemName: string);\n  onDrop(itemName: string);\n  onReload(itemName: string);\n  inventory: Item[]; //\n  processInterface: Function;\n}\n\nexport default function InventoryList(props: InventoryListProps) {\n  const className = `inventory-list ${props.className || \"\"}`;\n\n  if (!props.inventory) {\n    return null;\n  }\n\n  const inventoryItems = props.inventory.map((item) => (\n    <InventoryItem\n      key={`i${item.name}`}\n      item={item}\n      onClick={props.onClick}\n      onDrop={props.onDrop}\n      onReload={props.onReload}\n      processInterface={props.processInterface}\n    />\n  ));\n\n  return (\n    <div className={className}>\n      <div className=\"inventory-list__label\">\n        {props.label}\n        :&nbsp;\n      </div>\n      <div className=\"inventory-list__items\" title={props.title}>\n        {inventoryItems}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport LinearDisplay from \"./LinearDisplay\";\nimport InventoryList from \"./InventoryList\";\nimport \"./EntityCard.scss\";\nimport { Entity, Item } from \"../../services\";\n\ninterface EntityCardProps {\n  entity: Entity;\n  onInventoryClick?(entity: Entity, itemName: string);\n  processInterface?: Function;\n}\n\nclass EntityCard extends React.Component<EntityCardProps> {\n  renderCount = 0;\n  handleInventoryClick = (itemName: string): void => {\n    this.props.onInventoryClick(this.props.entity, itemName);\n  };\n\n  onDrop = (itemName: string) => {\n    let { entity } = this.props;\n    if (entity.equipment.hands && entity.equipment.hands.name === itemName) {\n      entity.unEquipFromHands();\n      entity.isShooting = false;\n    }\n    let item: Item = entity.takeFromInventory(itemName);\n    entity.square.addItem(item);\n    this.props.processInterface();\n  };\n\n  onReload = (itemName: string) => {\n    let { entity } = this.props;\n    if (entity.equipment.hands && entity.equipment.hands.name === itemName) {\n      entity.isShooting = false;\n    }\n    this.props.processInterface();\n  };\n\n  render() {\n    let { entity } = this.props;\n    if (!entity) return null;\n    // FIXME: Below should be separated into several sub-components\n    // Each sub-component should receive flat data (position, hp, ...)\n\n    let className = \"entity-card\";\n    if (entity.active) {\n      className += \" entity-card--active\";\n    }\n\n    if (entity.isFriendly) {\n      className += \" entity-card--friendly\";\n    }\n\n    if (entity.isDead) {\n      className += \" entity-card--dead\";\n    }\n\n    let inHands = entity.equipment && entity.equipment.hands;\n    let inHandsArray = inHands && [inHands];\n\n    return (\n      <div className={className}>\n        <div>\n          <div className=\"entity-card__position\" title=\"Position\">\n            <span>\n              {\" \"}\n              {entity.position.x} {entity.position.y}{\" \"}\n            </span>\n          </div>\n\n          <div className=\"entity-card__portrait\">{entity.icon}</div>\n        </div>\n        <strong title=\"Name\">{entity.name}</strong>\n        <br />\n        <div\n          style={{\n            clear: \"both\",\n            display: \"inline-block\",\n            textAlign: \"right\",\n          }}\n        >\n          <LinearDisplay label=\"HP\" current={entity.hp} max={entity.maxHp} />\n          <br />\n        </div>\n        <InventoryList\n          label=\"Equipped\"\n          title=\"In hands\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          onReload={this.onReload}\n          inventory={inHandsArray}\n          processInterface={() => this.props.processInterface()}\n        />\n        <InventoryList\n          label=\"Inventory\"\n          title=\"In backpack\"\n          onClick={this.handleInventoryClick}\n          onDrop={this.onDrop}\n          onReload={this.onReload}\n          inventory={entity.inventory}\n          processInterface={() => this.props.processInterface()}\n        />\n      </div>\n    );\n  }\n}\n\nexport default EntityCard;\n","export const structures = {\r\n  box: {\r\n    name: \"box\",\r\n    icon: \"📦\",\r\n    hp: 50,\r\n    maxHp: 70,\r\n    isBreathing: false,\r\n    position: { x: 4, y: 5 },\r\n  },\r\n  redBarrel: {\r\n    name: \"redBarrel\",\r\n    icon: \"🛢️\",\r\n    hp: 50,\r\n    maxHp: 70,\r\n    isBreathing: false,\r\n    position: { x: 4, y: 5 },\r\n  },\r\n};\r\n","import React from \"react\";\n// services\nimport { SquaresService } from \"../../services\";\nimport { Entity, Square, Position, Item } from \"../../services\";\n// components\nimport EntityCard from \"../EntityCard/EntityCard\";\nimport InventoryList from \"../EntityCard/InventoryList\";\n// others\nimport { structures } from \"../../resources\";\nimport * as Helpers from \"../../helpers\";\nimport GameStyles from \"./Game.module.scss\";\n\ninterface TargetedSquareInfoProps {\n  className: string;\n  squareNumber: number;\n  squares: Square[];\n  selected: Entity;\n  targeted: Square;\n  onInventoryClick(entity: Entity, itemName: string): void;\n  processInterface: Function;\n}\n\n// TODO: Refactor, does it really need all this logic.\nexport default class TargetedSquareInfo extends React.Component<TargetedSquareInfoProps> {\n  boxSerialNumber: number = 0;\n\n  onItemClick = (itemName: string): void => {\n    let { selected, targeted, squareNumber } = this.props;\n    let targetedSquarePosition = SquaresService.targetSquarePosition(squareNumber);\n    if (selected && targeted &&\n      selected.position.x == targetedSquarePosition.x &&\n      selected.position.y == targetedSquarePosition.y\n      ) {\n      let item = targeted.takeFromInventory(itemName);\n      selected.addToInventory(item);\n    }\n    this.props.processInterface();\n  };\n\n  onMoveClick(selected: Entity, targetedSquarePosition: Position): void {\n    let targetedSquare: Square = SquaresService.getSquare(targetedSquarePosition.x, targetedSquarePosition.y);\n    selected.setMoveDestinationPosition(targetedSquarePosition);\n    targetedSquare.isChosenDestination = true;\n    this.props.processInterface();\n  }\n\n  onAttackClick(selected: Entity, targetedSquarePosition: Position): void {\n    selected.attackPosition(targetedSquarePosition);\n    this.props.processInterface();\n  }\n\n  onAddStructureClick(targetedSquarePosition: Position, structureType: string): void {\n    let box = Object.assign({}, structures[structureType]);\n    let targetPosition = Object.assign({}, targetedSquarePosition);\n    box.position = targetPosition;\n    box.name += this.boxSerialNumber++;\n    let newStructure = new Entity(box);\n    let square = SquaresService.getSquare(targetedSquarePosition.x, targetedSquarePosition.y);\n    square.entity = newStructure;\n    square.addToInventory(newStructure as Item); // TODO: FIXME: Stop forcing types, make a new list for scenery items.\n    //EntitiesService.entities.push(newBox);\n    this.props.processInterface();\n  }\n\n  render() {\n    let { targeted, selected, squareNumber } = this.props;\n\n    if (!targeted) {\n      return null;\n    }\n\n    let targetedSquarePosition = SquaresService.targetSquarePosition(squareNumber);\n\n    let entityInfo;\n    let distanceInfo;\n    let positionInfo;\n    let bloodInfo;\n    let availableActions = [];\n    let items;\n\n    let editorButtons = (\n      <div>\n        <button onClick={() => this.onAddStructureClick(targetedSquarePosition, \"box\")} className={GameStyles.button}>\n          Add box\n        </button>\n        <button\n          onClick={() => this.onAddStructureClick(targetedSquarePosition, \"redBarrel\")}\n          className={GameStyles.button}\n        >\n          Add barrel\n        </button>\n      </div>\n    );\n\n    if (targeted.entity && !Helpers.isSelectedTargeted(selected, targeted)) {\n      entityInfo = (\n        <EntityCard\n          onInventoryClick={this.props.onInventoryClick}\n          entity={targeted.entity}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (targeted.items) {\n      items = (\n        <InventoryList\n          label=\"Items in this location\"\n          title=\"On the floor\"\n          onClick={this.onItemClick}\n          onDrop={null}\n          onReload={null}\n          inventory={targeted.items}\n          processInterface={() => this.props.processInterface()}\n        />\n      );\n    }\n\n    if (selected) {\n      let distanceToSelected = Helpers.calculateDistance(\n        targetedSquarePosition.x - selected.position.x,\n        targetedSquarePosition.y - selected.position.y\n      );\n\n      distanceInfo = <li>Distance to selected: {distanceToSelected.toFixed(2)}</li>;\n\n      if (distanceToSelected !== 0) {\n        if (targeted.isAvailableDestination) {\n          availableActions[0] = (\n            <button key=\"move\" onClick={() => this.onMoveClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Move\n            </button>\n          );\n        }\n        if (targeted.entity) {\n          availableActions[1] = (\n            <button key=\"attack\" onClick={() => this.onAttackClick(selected, targetedSquarePosition)} className={GameStyles.button}>\n              Attack\n            </button>\n          );\n        }\n      }\n    }\n\n    if (targetedSquarePosition) {\n      positionInfo = (\n        <li>\n          Position: [ {targetedSquarePosition.x}, {targetedSquarePosition.y} ]{\" \"}\n        </li>\n      );\n    }\n\n    if (targeted.blood) {\n      bloodInfo = <li>Blood amount: {targeted.blood}</li>;\n    }\n\n    return (\n      <div className={this.props.className}>\n        <strong className={GameStyles.targeted__label}>Target square Info</strong>\n        <div>{entityInfo}</div>\n        <div>{availableActions}</div>\n        <ul>\n          {positionInfo}\n          {distanceInfo}\n          {bloodInfo}\n          {items}\n          {editorButtons}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React, { ReactElement } from \"react\";\r\n// services\r\nimport { Entity } from \"../../services\";\r\n// components\r\nimport EntityCard from \"../EntityCard/EntityCard\";\r\n// others\r\nimport GameStyles from \"./Game.module.scss\";\r\n\r\ninterface SelectedEntityInfoProperties {\r\n  selected: Entity;\r\n  onInventoryClick(entity: Entity, itemName: string): void;\r\n  handleDeselectAllEntities: () => void;\r\n  processInterface: Function;\r\n}\r\n\r\n// TODO: Change this into HOC, as it doesn't really need half of it's props for itself\r\nexport default class SelectedEntityInfo extends React.Component<SelectedEntityInfoProperties> {\r\n  render(): ReactElement {\r\n    if (!this.props.selected) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div className={GameStyles.selected}>\r\n        <strong className={GameStyles.selected__label}>Selected entity </strong>\r\n        <div>\r\n          <EntityCard\r\n            onInventoryClick={this.props.onInventoryClick}\r\n            entity={this.props.selected}\r\n            processInterface={() => this.props.processInterface()}\r\n          />\r\n        </div>\r\n        <button onClick={this.props.handleDeselectAllEntities} className={GameStyles.button}>\r\n          {\" \"}\r\n          Deselect\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n// services\r\nimport { MessageService } from \"../../services\";\r\n\r\nexport class MessageBox extends React.Component {\r\n  messages = MessageService.messages;\r\n  messageNumber;\r\n\r\n  shouldComponentUpdate() {\r\n    // don't update if there are no new messages since last render\r\n    return this.messages.length !== this.messageNumber;\r\n  }\r\n\r\n  renderMessage = (message: string, number: number) => {\r\n    return (\r\n      <li key={`msg${number}`}>\r\n        Message #[{number}]: {message}\r\n      </li>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    if (!this.messages.length) return null;\r\n    let RenderedMessages = this.messages.map((message, number) => this.renderMessage(message, number));\r\n    // remember the number of messages rendered\r\n    this.messageNumber = this.messages.length;\r\n    return (\r\n      <ul className=\"messages\" id=\"messages\">\r\n        {RenderedMessages}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  scrollElement() {\r\n    window.requestAnimationFrame(() => {\r\n      var element = document.getElementById(\"messages\");\r\n      element.scrollTop = element.scrollHeight;\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.messages.length) this.scrollElement();\r\n  }\r\n}\r\n","/** This file contains most of the click-handling logic for the Game */\r\n/* Handling of particular events is delegated to proper services */\r\n\r\nimport * as Helpers from \"../../helpers\";\r\nimport { Entity, EntitiesService, SquaresService, GameLogic, Position } from \"../../services\";\r\n\r\nlet component = null;\r\nexport class GameActionsClass {\r\n  constructor(that) {\r\n    component = that;\r\n  }\r\n  toggleEditorMode = () => {\r\n    if (!component.state.isEditorOn) {\r\n      Helpers.resetGivenFieldsOnACollection(component.state.squares, \"blood\", \"entity\");\r\n      component.setState((prevState) => {\r\n        return { entities: [], isEditorOn: true };\r\n      });\r\n    } else {\r\n      component.setState((prevState) => {\r\n        return { squares: SquaresService.squares, entities: EntitiesService.entities, isEditorOn: false };\r\n      });\r\n    }\r\n  };\r\n\r\n  loop = () => {\r\n    component.stepNumber++;\r\n    this.drawAggro();\r\n    this.processEntities();\r\n    if (component.state.autoLoop) {\r\n      setTimeout(this.loop, 1000);\r\n    }\r\n  };\r\n\r\n  processEntities() {\r\n    component.setState(\r\n      (prevState) => GameLogic.calculateNextGameState(prevState),\r\n      () => this.setSquaresAccordingToEntities()\r\n    );\r\n  }\r\n\r\n  processInterface() {\r\n    component.setState(\r\n      (prevState) => GameLogic.calculateNextInterfaceState(prevState),\r\n      () => this.setSquaresAccordingToEntities()\r\n    );\r\n  }\r\n\r\n  /** Sets entities within apropriate squares, based on the value of their `position` field\r\n   * This might actually be not-needed, if movement of entities is reflected in their respectable squares\r\n   * Also: entities are no longer rendered within `Square` component\r\n   */\r\n  setSquaresAccordingToEntities() {\r\n    component.setState((prevState) => GameLogic.syncSquaresWithEntities(prevState));\r\n  }\r\n\r\n  nextTick = () => {\r\n    component.setState({ autoLoop: false });\r\n    this.loop();\r\n  };\r\n\r\n  handleClickV2 = (squareIndex: number) => {\r\n    component.setState(\r\n      (state) => {\r\n        let { squares, entities, selected, targeted, isEditorOn, targetedSquareNumber: selectedSquareNumber } = state;\r\n        let previousTargeted = targeted;\r\n        targeted = squares[squareIndex];\r\n        selectedSquareNumber = squareIndex;\r\n        const doubleClick = () => previousTargeted === targeted;\r\n        SquaresService.markSquareAsTargeted(squareIndex);\r\n\r\n        if (isEditorOn) {\r\n          switch (targeted.squareType) {\r\n            case \"floor\":\r\n              targeted.squareType = \"wall\";\r\n              break;\r\n            case \"wall\":\r\n              targeted.squareType = \"nothing\";\r\n              break;\r\n            case \"nothing\":\r\n            default:\r\n              targeted.squareType = \"floor\";\r\n          }\r\n        }\r\n\r\n        /** Setting move destination while clicking on empty square */\r\n        if (doubleClick() && targeted.isAvailableDestination) {\r\n          selected.setMoveDestinationSquare(squareIndex);\r\n        }\r\n\r\n        /** To be able to deselect */\r\n        if (doubleClick() || selected) {\r\n          if (!selected && targeted.entity) {\r\n            // Selecting\r\n            selected = EntitiesService.selectEntityFromGivenSquare(selected, targeted);\r\n            //targeted = undefined;\r\n          } else if (Helpers.isSelectedTargeted(selected, targeted)) {\r\n            // Deselecting if not selecting\r\n            /* // DISABLE DOUBLECLICK DESELECT\r\n            GameLogic.deselectAllEntities();\r\n            selected = undefined;\r\n            // */\r\n          }\r\n        }\r\n\r\n        // setting attack\r\n        if (doubleClick() && selected && targeted.entity && selected !== targeted.entity) {\r\n          selected.attackPosition(SquaresService.targetSquarePosition(squareIndex));\r\n        }\r\n\r\n        return { squares, entities, selected, targeted, targetedSquareNumber: selectedSquareNumber };\r\n      },\r\n      () => this.processInterface()\r\n    );\r\n  };\r\n\r\n  drawAggro() {\r\n    EntitiesService.entities.forEach((entity)=>{\r\n      if(entity.isFriendly) return;\r\n      entity.isShooting = false;\r\n      this.aggro(entity.name);\r\n    })\r\n  }\r\n\r\n  aggro = (name) => {\r\n    let actor = EntitiesService.findEntityById(name);\r\n    let position = actor.position;\r\n    let closeEntities = this.findEntitiesThatAreClose(position);\r\n    let entitiesToAttack = closeEntities.filter(entity => entity.hp > 0);\r\n    if(entitiesToAttack.length) {\r\n      let firstAmongThem = entitiesToAttack[0];\r\n      actor.attackPosition(firstAmongThem.position);\r\n    }\r\n  }\r\n\r\n  findEntitiesThatAreClose(position: Position){\r\n    let {x, y} = position;\r\n    let entities: Entity[] = [];\r\n    for (let j = y - 1; j <= y + 1; j++) {\r\n      if (j < 0 || j >= SquaresService.arenaSize) {\r\n        continue;\r\n      }\r\n      for (let i = x - 1; i <= x + 1; i++) {\r\n        if (i < 0 || i >= SquaresService.arenaSize || (i === x && j === y)) {\r\n          continue;\r\n        }\r\n        let newlyFoundEntities = EntitiesService.getEntitiesAtGivenPosition({x: i, y: j})\r\n        entities = entities.concat(newlyFoundEntities);\r\n      }\r\n    }\r\n\r\n    return entities;\r\n  }\r\n\r\n  nuke = (dmg: number) => {\r\n    component.setState(\r\n      (state) => {\r\n        let { entities } = state;\r\n\r\n        entities.forEach((entity) => {\r\n          entity.hp = entity.hp - dmg;\r\n        });\r\n\r\n        return { entities };\r\n      },\r\n      () => {\r\n        this.processEntities();\r\n      }\r\n    );\r\n  };\r\n\r\n  toggleRotateBoard = () => {\r\n    component.setState({ isBoardRotated: !component.state.isBoardRotated });\r\n  };\r\n\r\n  switchAutoLoop = () => {\r\n    component.setState(\r\n      (previousState) => {\r\n        return { autoLoop: !previousState.autoLoop };\r\n      },\r\n      () => {\r\n        if (component.state.autoLoop) {\r\n          this.loop();\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  onInventoryClick = (entity: Entity, itemName: string) => {\r\n    component.setState((prevState) => {\r\n      let entities = [].concat(prevState.entities);\r\n      EntitiesService.entities = entities;\r\n      let entityId = EntitiesService.getEntityId(entity);\r\n      let actualEntity = EntitiesService.findEntityById(entityId);\r\n      //let actualItem = EntitiesService.findItemOnEntity(actualEntity, itemName);\r\n\r\n      if (actualEntity.equipment.hands && actualEntity.equipment.hands.name === itemName) {\r\n        actualEntity.unEquipFromHands();\r\n      } else {\r\n        actualEntity.equipInHands(itemName);\r\n      }\r\n\r\n      return { entities };\r\n    });\r\n    console.log(entity, itemName);\r\n  };\r\n\r\n  handleDeselectAllEntities = () => {\r\n    component.setState(\r\n      (state) => {\r\n        let { squares, entities, selected } = state;\r\n\r\n        GameLogic.deselectAllEntities();\r\n        selected = undefined;\r\n\r\n        return { squares, entities, selected };\r\n      },\r\n      () => {\r\n        //this.processEntities();\r\n      }\r\n    );\r\n  };\r\n\r\n  ceaseFire = () => {\r\n    Helpers.resetGivenFieldsOnACollection(EntitiesService.entities, \"isShooting\");\r\n    this.processInterface();\r\n  };\r\n}\r\n","import React from \"react\";\r\n//import * as dat from \"dat.gui\";\r\n\r\n// services\r\nimport { EntitiesService, SquaresService, GameModel } from \"../../services\";\r\n\r\n// components\r\nimport Board from \"../Board\";\r\nimport EntitiesList from \"../EntitiesList\";\r\nimport TargetedSquareInfo from \"./TargetedSquareInfo\";\r\nimport SelectedEntityInfo from \"./SelectedEntityInfo\";\r\nimport { MessageBox } from \"./MessageBox\";\r\n\r\n// others\r\nimport { GameState } from \"./GameState\";\r\nimport { GameActionsClass } from \"./GameActions\";\r\nimport styles from \"./Game.module.scss\";\r\n\r\nlet GameActions = null;\r\n\r\n/** Game composes all the parts of the interface */\r\nexport default class Game extends React.PureComponent<void, GameState> {\r\n  renderCounter: number = 0;\r\n  stepNumber: number = 0;\r\n  //dat;\r\n\r\n  constructor(props: void) {\r\n    super(props);\r\n\r\n    GameModel.loadBuiltInMap();\r\n    GameModel.loadPredefinedEntitities();\r\n    //this.dat = new dat.GUI();\r\n    this.state = {\r\n      entities: EntitiesService.entities,\r\n      squares: SquaresService.squares,\r\n\r\n      selected: EntitiesService.findEntityById(\"Lazer Blady\"),\r\n      targeted: null,\r\n      targetedSquareNumber: null,\r\n      enemiesAlive: null,\r\n      arenaSize: 10,\r\n      autoLoop: true,\r\n      isBoardRotated: true,\r\n      isEditorOn: false,\r\n    };\r\n    this.state.selected.active = true;\r\n    GameActions = new GameActionsClass(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    GameActions.loop();\r\n  }\r\n\r\n  render() {\r\n    // console.log(\"Rendering Game. #\", this.renderCounter++);\r\n    return (\r\n      <div className={styles.game}>\r\n        <div className={styles.status}>\r\n          Enemies to kill: {this.state.enemiesAlive}<br></br>\r\n          {this.state.enemiesAlive ? '' : \" Great Job. YOU WON.\" }\r\n          {this.state.selected.isAlive ? '' : \" Damn. YOU DIED.\" }\r\n\r\n        </div>\r\n        <p>\r\n          L2P: Click friendly entity on the map, twice. Then click a target square to move, or target entity to attack.\r\n        </p>\r\n        <div className={styles.game__board}>\r\n          <Board\r\n            squares={this.state.squares}\r\n            entities={this.state.entities}\r\n            onClick={(i) => GameActions.handleClickV2(i)}\r\n            size={this.state.arenaSize}\r\n            isRotated={this.state.isBoardRotated}\r\n          />\r\n        </div>\r\n\r\n        <div className={styles.game__info}>\r\n          <div className={styles.actions}>\r\n            <button onClick={GameActions.toggleEditorMode} className={styles.button}>\r\n              Editor Mode\r\n            </button>\r\n            <button onClick={GameModel.saveMap} className={styles.button}>\r\n              Save Map\r\n            </button>\r\n            <button onClick={GameModel.loadMap} className={styles.button}>\r\n              Load Map\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                GameActions.nuke(40);\r\n              }}\r\n              className={`${styles.button} ${styles[\"button-nuke\"]}`}\r\n            >\r\n              Nuke All\r\n            </button>\r\n            <button onClick={GameActions.ceaseFire} className={styles.button}>\r\n              Cease Fire\r\n            </button>\r\n\r\n            <button onClick={GameActions.toggleRotateBoard} className={styles.button}>\r\n              Rotate Board\r\n            </button>\r\n            <button onClick={GameActions.nextTick} className={styles.button}>\r\n              Next Tick\r\n            </button>\r\n\r\n            <span className={styles[\"step-counter\"]}>Tick: {this.stepNumber}</span>\r\n\r\n            <label className={` ${styles.button} ${styles[\"auto-cycle\"]}`}>\r\n              <input type=\"checkbox\" checked={this.state.autoLoop} onChange={GameActions.switchAutoLoop} />\r\n              <span>Auto Cycle</span>\r\n            </label>\r\n          </div>\r\n          <div className={styles[\"interaction-container\"]}>\r\n            <SelectedEntityInfo\r\n              selected={this.state.selected}\r\n              handleDeselectAllEntities={GameActions.handleDeselectAllEntities}\r\n              onInventoryClick={GameActions.onInventoryClick}\r\n              processInterface={() => GameActions.processInterface()}\r\n            />\r\n\r\n            <TargetedSquareInfo\r\n              className={styles.targeted}\r\n              squareNumber={this.state.targetedSquareNumber}\r\n              squares={this.state.squares}\r\n              selected={this.state.selected}\r\n              targeted={this.state.targeted}\r\n              onInventoryClick={GameActions.onInventoryClick}\r\n              processInterface={() => GameActions.processInterface()}\r\n            />\r\n            <div></div>\r\n          </div>\r\n          <MessageBox />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport Game from \"./components/Game\";\r\n\r\nimport \"./style.scss\";\r\n\r\n// Rendering the top-level Game component\r\nrender(<Game />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}