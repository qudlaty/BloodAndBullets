{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/EntityView/EntityView.js","components/EntitiesList/EntitiesList.js","components/Game/EntitiesValues.js","components/Game/Game.js","index.js"],"names":["Square","className","localId","this","props","squareId","active","value","isBreathing","isShooting","randomTime","Math","random","toFixed","animationBreathing","targetCoords","targetPosition","projectileNumber","projectiles","customStyle","position","x","y","distanceToTargetX","distanceToTargetY","actualDistance","sqrt","pow","weaponType","angle","atan","PI","calcNewAangle","push","key","projectile","onClick","style","animation","React","PureComponent","Board","renderCounter","handleClick","bind","i","console","log","rowId","colId","squares","inventory","rowNumber","colNumber","cellId","rows","Array","size","fill","map","row","number","cells","cell","renderSquare","EntityView","renderCount","entity","lifeSigns","title","name","age","hp","maxHp","rounds","maxRounds","max","percent","Component","ListOfEntities","entities","obj","equipment","head","damage","hasWeapon","Game","stepNumber","switchAutoLoop","setState","previousState","autoLoop","state","loop","selected","arenaSize","isBoardRotated","EntitiesValues","getSquare","setSquare","toggleRotateBoard","JSON","parse","stringify","forEach","targetSquareIndex","localCopyOfPreviousState","JR","moveEntityRandomly","processEntities","setTimeout","oldPositionX","oldPositionY","floor","localCopyOfEntities","filter","potentialTargetEntity","targetEntity","setSquaresAccordingToEntities","id","selectedInEntities","findEntityById","getEntityId","setSelected","selectedEntity","dmg","boardClassName","handleBoardClick","nuke","type","onChange","render","document","getElementById"],"mappings":"oVAsJeA,G,uLA9IH,IAAD,OAGHC,EAAY,SACZC,EAAO,YAAQC,KAAKC,MAAMC,UAE3BF,KAAKC,MAAME,SACZL,GAAa,WAEZE,KAAKC,MAAMG,QACTJ,KAAKC,MAAMI,YACZP,GAAa,aAEbA,GAAa,QAEZE,KAAKC,MAAMK,aACZR,GAAa,cAIjB,IAAIS,EAAU,WAAOC,KAAKC,SAAS,IAAKC,QAAQ,GAAlC,KACVC,EAAqBX,KAAKC,MAAMI,YAAX,oBACRE,EADQ,uBAC0B,OAE/CK,EAAeZ,KAAKC,MAAMY,eAC1BC,EAAmB,EACnBC,EAAc,GACdC,EAAc,GAmBlB,GAAIhB,KAAKC,MAAMY,gBAAkBb,KAAKC,MAAMgB,UAAYjB,KAAKC,MAAMK,aAChEN,KAAKC,MAAMY,eAAeK,IAAMlB,KAAKC,MAAMgB,SAASC,GACrDlB,KAAKC,MAAMY,eAAeM,IAAMnB,KAAKC,MAAMgB,SAASE,IAEjDP,EAAc,CAEf,IAAIQ,EAAoB,IAAIR,EAAaM,EAAElB,KAAKC,MAAMgB,SAASC,GAC3DG,EAAoB,IAAIT,EAAaO,EAAEnB,KAAKC,MAAMgB,SAASE,GAC3DG,EAAiBd,KAAKe,KAAKf,KAAKgB,IAAIJ,EAAmB,GAAKZ,KAAKgB,IAAIH,EAAmB,IAI5F,GAHAC,GAAkC,GAGL,UAA1BtB,KAAKC,MAAMwB,WAAwB,CAEpC,IAAI3B,EAAU,aAAD,OAAcC,EAAd,SAET2B,EAjCU,SAASR,EAAGC,GAC9B,IAAIO,EAaJ,OAZGP,GAAK,EACNO,GAAUlB,KAAKmB,KACbT,EAAEC,IACC,IAAIX,KAAKoB,IACPT,EAAI,IACXO,EAAS,IAAIlB,KAAKoB,IAEdpB,KAAKmB,KACHT,GAAGC,GACDX,KAAKoB,KAGRF,EAmBSG,CAAcT,EAAmBC,GAC7CL,EAAW,0CACWjB,EADX,mHAMND,EANM,oCAOEwB,EAPF,0OAeaI,EAAQ,GAfrB,6FAiBa3B,EAjBb,mIAwBXgB,EAAYe,KAAK,yBAAKC,IAAKjC,EAAWA,UAAWA,GA1BjC,SA2BZ,CAaJ,IAXAkB,EAAW,2CACYjB,EADZ,qHAIH,IAAIa,EAAaM,EAAElB,KAAKC,MAAMgB,SAASC,GAJpC,gCAKH,IAAIN,EAAaO,EAAEnB,KAAKC,MAAMgB,SAASE,GALpC,uDAWLL,KACJE,GAAW,mCACEjB,EADF,YACae,EADb,iQASYf,EATZ,kEAU8B,GAApBe,EAVV,kDAcb,IAAIkB,EAAahC,KAAKC,MAAMK,WAAa,IAAM,GAI/C,IAFAQ,EAAmB,EAEbA,KAAoB,CACxB,IAAIhB,EAAU,wBAAD,OAAyBC,EAAzB,YAAoCe,GACjDC,EAAYe,KAAK,yBAAKC,IAAKjC,EAAWA,UAAWA,GAAYkC,MAMrE,OACE,4BAAQlC,UAAWA,EAAWmC,QAAS,kBAAM,EAAKhC,MAAMgC,QAAQ,EAAKhC,MAAMC,YACzE,yBAAKJ,UAAU,UAAUoC,MAAO,CAC9BC,UAAWxB,IACTX,KAAKC,MAAMG,OACf,+BACKY,GAEJD,O,GA7IYqB,IAAMC,gBCCNC,G,kBAGnB,WAAYrC,GAAQ,IAAD,8BACjB,4CAAMA,KAHRsC,cAAgB,EAId,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,yEAKPC,GACVC,QAAQC,IAAI,yBAA0BF,GACtC1C,KAAKC,MAAMgC,QAAQS,K,mCAGRA,EAAGG,EAAOC,GASrB,OACE,kBAAC,EAAD,CACE5C,SAAUwC,EACVzB,SAAUjB,KAAKC,MAAM8C,QAAQL,IAAM1C,KAAKC,MAAM8C,QAAQL,GAAGzB,SACzDb,MAAOJ,KAAKC,MAAM8C,QAAQL,IAAM1C,KAAKC,MAAM8C,QAAQL,GAAGtC,MACtDD,OAAQH,KAAKC,MAAM8C,QAAQL,IAAM1C,KAAKC,MAAM8C,QAAQL,GAAGvC,OACvDE,YAAaL,KAAKC,MAAM8C,QAAQL,IAAM1C,KAAKC,MAAM8C,QAAQL,GAAGrC,YAC5DC,WAAYN,KAAKC,MAAM8C,QAAQL,IAAM1C,KAAKC,MAAM8C,QAAQL,GAAGpC,WAC3DO,eAAgBb,KAAKC,MAAM8C,QAAQL,IAAM1C,KAAKC,MAAM8C,QAAQL,GAAG7B,eAC/DoB,QAASjC,KAAKwC,YACdf,WAAYzB,KAAKC,MAAM8C,QAAQL,IAAM1C,KAAKC,MAAM8C,QAAQL,GAAGM,WAAahD,KAAKC,MAAM8C,QAAQL,GAAGM,UAAU,GACxGjB,IAAKW,EAELO,UAAWJ,EACXK,UAAWJ,M,+BAKP,IAMJA,EANG,OAIHK,EAAO,EACPN,EAAM,EAGNO,EAAOC,MAAMrD,KAAKC,MAAMqD,MAAMC,KAAK,MAAMC,KAAI,SAACC,EAAKC,GACrDZ,EAAQ,EACR,IAAIa,EAAQN,MAAM,EAAKpD,MAAMqD,MAAMC,KAAK,MAAMC,KAAI,SAACI,EAAMF,GACvD,OAAO,EAAKG,aAAaV,IAAUN,EAAOC,QAE5C,OACE,yBAAKf,IAAKc,IAAS/C,UAAU,aAC1B6D,MAKH7D,EAAY,SAAWE,KAAKC,MAAMH,UACtC,OACE,yBAAKA,UAAWA,GACbsD,O,GAhE0BhB,IAAMC,gBCmD1ByB,G,uNAjDbC,YAAc,E,wEASZ,IAAIjE,EAAY,SACbE,KAAKC,MAAM+D,OAAO7D,SACnBL,GAAW,WATN,IAYDkE,EAAWhE,KAAKC,MAAhB+D,OAOFC,EALkBD,EAAhB3D,YAKwB,QAAU,OACxC,OAEE,yBAAKP,UAAWA,GACd,yBAAKA,UAAU,WAAWoE,MAAM,YAC9B,kCAAQF,EAAO/C,SAASC,EAAxB,KAA6BlB,KAAKC,MAAM+D,OAAO/C,SAASE,EAAxD,MAEF,yBAAKrB,UAAU,YACZE,KAAKC,MAAM+D,OAAO5D,OAErB,4BAAQ8D,MAAM,QAAQlE,KAAKC,MAAM+D,OAAOG,MACxC,wBAAID,MAAM,OAAV,KAAmBlE,KAAKC,MAAM+D,OAAOI,IAArC,KARF,IASQH,EACN,6BACA,qCAAWjE,KAAKC,MAAM+D,OAAOK,GAA7B,IAAkCrE,KAAKC,MAAM+D,OAAOM,OACpD,0CAAgBtE,KAAKC,MAAM+D,OAAOO,OAAlC,MAA6CvE,KAAKC,MAAM+D,OAAOQ,WAC/D,8BACEN,MAAM,KACNO,IAAKzE,KAAKC,MAAM+D,OAAOM,MACvBlE,MAAOJ,KAAKC,MAAM+D,OAAOK,GACzBK,WAAmC,IAAvB1E,KAAKC,MAAM+D,OAAOK,GAAWrE,KAAKC,MAAM+D,OAAOM,c,GA1C5ClC,IAAMuC,YCDVC,G,iNACnBrC,cAAgB,E,wEAGd,IAAIsC,EAAW7E,KAAKC,MAAM4E,SAASrB,KAAI,SAAAsB,GACrC,OACE,kBAAC,EAAD,CAAYd,OAAQc,EAAK/C,IAAK+C,EAAIX,UAGtC,OACE,yBAAKrE,UAAU,kBAAf,qBACqB+E,O,GAXiBzC,IAAMuC,YCiBnCE,EArBE,CACf,CACE5D,SAAU,CAACC,EAAE,EAAGC,EAAE,GAAIf,MAAO,eAAM+D,KAAM,aAAcC,IAAK,GAAIC,GAAI,GAAIC,MAAO,IAC/EtB,UAAW,CAAC,SAAU,OAAQ+B,UAAW,CAACC,KAAM,eAAgB3E,aAAa,EAC7E4E,OAAQ,EAAGV,OAAQ,GAAIC,UAAW,GAAIU,WAAW,GAEnD,CACEjE,SAAU,CAACC,EAAE,EAAGC,EAAE,GAAIf,MAAO,eAAM+D,KAAM,eAAgBC,IAAK,GAAIC,GAAI,GAAIC,MAAO,GACjFtB,UAAW,CAAC,QAAS,mBAAoB+B,UAAW,CAACC,KAAM,QAAS3E,aAAa,EACjF4E,OAAQ,EAAGV,OAAQ,GAAIC,UAAW,GAAIU,WAAW,GAEnD,CACEjE,SAAU,CAACC,EAAE,EAAGC,EAAE,GAAIf,MAAO,2BAAQ+D,KAAM,cAAeC,IAAK,GAAIC,GAAI,GAAIC,MAAO,IAClFtB,UAAW,CAAC,SAAU+B,UAAW,GAAI1E,aAAa,EAClD4E,OAAQ,GAAIV,OAAQ,EAAGC,UAAW,EAAGU,WAAW,GAElD,CAACjE,SAAU,CAACC,EAAE,EAAGC,EAAE,GAAIf,MAAO,eAAM+D,KAAM,OAAQC,IAAK,EAAGC,GAAI,IAAKC,MAAO,IAAMtB,UAAW,GAAI+B,UAAW,GAAI1E,aAAa,GAC3H,CAACY,SAAU,CAACC,EAAE,EAAGC,EAAE,GAAIf,MAAO,eAAM+D,KAAM,QAASC,IAAK,EAAGC,GAAI,GAAIC,MAAO,IAAKtB,UAAW,GAAI+B,UAAW,GAAI1E,aAAa,ICXvG8E,G,kBAUnB,WAAYlF,GAAQ,IAAD,8BACjB,4CAAMA,KALRsC,cAAgB,EAIG,EAHnB6C,WAAa,EAGM,EAwOnBC,eAAiB,WACf,EAAKC,UAAS,SAACC,GACb,MAAO,CAACC,UAAWD,EAAcC,aACjC,WACG,EAAKC,MAAMD,UACZ,EAAKE,WAzOT,EAAKD,MAAQ,CACXE,SAAU,KACVC,UAAW,GACXC,gBAAgB,EAChBhB,SAAUiB,EACV/C,QAAS,GACTyC,UAAU,GAGZ,EAAKE,KAAO,EAAKA,KAAKjD,KAAV,gBACZ,EAAKsD,UAAY,EAAKA,UAAUtD,KAAf,gBACjB,EAAKuD,UAAY,EAAKA,UAAUvD,KAAf,gBACjB,EAAKwD,kBAAoB,EAAKA,kBAAkBxD,KAAvB,gBAhBR,E,iFAoBjBzC,KAAK0F,S,sDAG0B,IAAD,OAC9B1F,KAAKsF,UAAS,SAACC,GACb,IAAIxC,EAAUmD,KAAKC,MAAMD,KAAKE,UAAUb,EAAcxC,UAOtD,OAJAwC,EAAcV,SAASwB,SAAQ,SAACrC,GAC9B,EAAKgC,UAAUjD,EAASiB,EAAO/C,SAASC,EAAG8C,EAAO/C,SAASE,EAAG6C,MAGzD,CAACjB,gB,gCAIFA,EAAS7B,EAAGC,GACpB,OAAO4B,EAAQ/C,KAAKsG,kBAAkBpF,EAAGC,M,gCAGjC4B,EAAS7B,EAAGC,EAAGf,GACvB2C,EAAQ/C,KAAKsG,kBAAkBpF,EAAGC,IAAMf,I,wCAGxBc,EAAGC,GACnB,OAAOA,EAAInB,KAAKyF,MAAMG,UAAY1E,I,6BAG5B,IAAD,OACLlB,KAAKoF,aACLpF,KAAKsF,UAAU,SAACC,GAEd,IAAIgB,EAA2BL,KAAKC,MAAMD,KAAKE,UAAUb,IACnDV,EAAsB0B,EAAtB1B,SAAU9B,EAAYwD,EAAZxD,QAEZyD,EAAK3B,EAAS,GAOlB,OANG2B,EAAGnG,aAGJ,EAAKoG,mBAAmB1D,EAASyD,GAG5B,CAAC3B,SAAUA,EAAU9B,QAASA,MAGvC/C,KAAK0G,kBACF1G,KAAKyF,MAAMD,UACZmB,WAAW3G,KAAK0F,KAAM,O,yCAIP3C,EAASiB,GAE1B,IAAI4C,EAAe5C,EAAO/C,SAASC,EAC/B2F,EAAe7C,EAAO/C,SAASE,EAEnC6C,EAAO/C,SAASC,EAAI8C,EAAO/C,SAASC,EACjCV,KAAKsG,MAAoB,EAAdtG,KAAKC,UAChBD,KAAKsG,MAAoB,EAAdtG,KAAKC,UACnBuD,EAAO/C,SAASE,EAAI6C,EAAO/C,SAASE,EACjCX,KAAKsG,MAAoB,EAAdtG,KAAKC,UAChBD,KAAKsG,MAAoB,EAAdtG,KAAKC,UAEhBuD,EAAO/C,SAASC,EAAI,IAAG8C,EAAO/C,SAASC,EAAI,GAC3C8C,EAAO/C,SAASE,EAAI,IAAG6C,EAAO/C,SAASE,EAAI,GAC3C6C,EAAO/C,SAASC,EAAIlB,KAAKyF,MAAMG,UAAY,IAAG5B,EAAO/C,SAASC,EAAIlB,KAAKyF,MAAMG,UAAY,GACzF5B,EAAO/C,SAASE,EAAInB,KAAKyF,MAAMG,UAAY,IAAG5B,EAAO/C,SAASE,EAAInB,KAAKyF,MAAMG,UAAY,GAE5E5F,KAAK+F,UAAUhD,EAASiB,EAAO/C,SAASC,EAAG8C,EAAO/C,SAASE,KAGzE6C,EAAO/C,SAASC,EAAI0F,EACpB5C,EAAO/C,SAASE,EAAI0F,GAIpBD,IAAiB5C,EAAO/C,SAASC,GACjC2F,IAAiB7C,EAAO/C,SAASE,GAEjCnB,KAAKgG,UAAUjD,EAAS6D,EAAcC,EAAc,Q,wCAOtC,IAAD,OAEf7G,KAAKsF,UAAS,SAACG,GACb,IAAIsB,EAAsBb,KAAKC,MAAMD,KAAKE,UAAUX,EAAMZ,WAiC1D,OAhCAkC,EAAoBV,SAAQ,SAAArC,GAEvBA,EAAO1D,YAAc0D,EAAOnD,iBAC7BmD,EAAOnD,eAAeK,IAAM8C,EAAO/C,SAASC,GAC5C8C,EAAOnD,eAAeM,IAAM6C,EAAO/C,SAASE,KAErB,IAApB6C,EAAOO,WACRP,EAAO1D,YAAa,EACpB0D,EAAOO,OAASP,EAAOQ,WAKJuC,EAAoBC,QAAO,SAACC,GAC/C,OAAOA,EAAsBhG,SAASC,IAAM8C,EAAOnD,eAAeK,GAClE+F,EAAsBhG,SAASE,IAAM6C,EAAOnD,eAAeM,KAG9CkF,SAAQ,SAACa,GACtBA,EAAa7C,IAAML,EAAOiB,OACvBiC,EAAa7C,IAAM,IACpBL,EAAO1D,YAAa,OAKvB0D,EAAOK,IAAM,IACdL,EAAOK,GAAK,EACZL,EAAO3D,aAAc,MAIlB,CAACwE,SAAUkC,MAElB,WACE,EAAKI,qC,kCAMCnD,GACV,OAAOA,EAAOG,O,qCAGDU,EAAUuC,GAGvB,OAFavC,EAASmC,QAAO,SAAChD,GAAD,OAAYA,EAAOG,OAASiD,KAAI,K,kCAKnDvC,EAAUc,EAAUvF,GAC9B,IAAIiH,EAAqBrH,KAAKsH,eAAezC,EAAU7E,KAAKuH,YAAY5B,IAQxE,OAPGvF,EACDuF,EAASxF,OAASC,GAElBuF,EAAW,KACXhD,QAAQC,IAAI,aAAc+C,IAE5B0B,EAAmBlH,OAASC,EACrBuF,I,uCAGQjD,GAAI,IAAD,OAElB1C,KAAKsF,UAAS,SAACC,GACb,IAAIgB,EAA2BL,KAAKC,MAAMD,KAAKE,UAAUb,IACnDV,EAAgC0B,EAAhC1B,SAAU9B,EAAsBwD,EAAtBxD,QAAS4C,EAAaY,EAAbZ,SAEzB,GAAG5C,EAAQL,GACT,GAAGiD,EACD,GAAGA,EAASxB,OAASoB,EAAcxC,QAAQL,GAAGyB,KAC5CwB,EAAW,EAAK6B,YAAY3C,EAAUc,GAAU,GAChDhD,QAAQC,IAAI+C,OACP,CACL,IAAI8B,EAAiB,EAAKH,eAAezC,EAAU,EAAK0C,YAAY5B,IACpE8B,EAAe5G,eAAiB0E,EAAcxC,QAAQL,GAAGzB,SACtDwG,EAAevC,YAChBuC,EAAenH,YAAa,QAIhCqF,EAAW5C,EAAQL,GACnB,EAAK8E,YAAY3C,EAAUc,GAAU,QAKvCd,EAASwB,SAAQ,SAACrC,GAChBA,EAAO7D,QAAS,KAElB0E,EAASwB,SAAQ,SAAArC,GACfA,EAAO1D,YAAa,KAEtBqF,EAAW,KAGb,MAAO,CAACd,WAAU9B,UAAS4C,eAC1B,WACD,EAAKe,uB,2BAKJgB,GAAK,IAAD,OAEP1H,KAAKsF,UAAU,SAACG,GACd,IAAIsB,EAAsBb,KAAKC,MAAMD,KAAKE,UAAUX,EAAMZ,WAI1D,OAHAkC,EAAoBV,SAAQ,SAAArC,GAC1BA,EAAOK,GAAKL,EAAOK,GAAKqD,KAEnB,CAAC7C,SAAUkC,MACjB,WACD,EAAKL,uB,0CAMP1G,KAAKsF,SAAS,CAACO,gBAAiB7F,KAAKyF,MAAMI,mB,+BAanC,IAAD,OACH8B,EAAiB3H,KAAKyF,MAAMI,eAAiB,gBAAkB,GAEnE,OACE,yBAAK/F,UAAU,QACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CACEiD,QAAS/C,KAAKyF,MAAM1C,QACpBd,QAAS,SAACS,GAAD,OAAO,EAAKkF,iBAAiBlF,IACtCY,KAAMtD,KAAKyF,MAAMG,UACjB9F,UAAW6H,IAEb,kBAAC,EAAD,CACE9C,SAAU7E,KAAKyF,MAAMZ,WAEvB,yBAAK/E,UAAU,gBAAgBE,KAAKoF,aAEtC,yBAAKtF,UAAU,aACb,0BAAMA,UAAU,YAAhB,aAAsCE,KAAKyF,MAAME,UAAY3F,KAAKyF,MAAME,SAASxB,MACjF,4BACElC,QACE,WACE,EAAK4F,KAAK,KAGd/H,UAAU,sBANZ,YAQA,4BAAQmC,QAASjC,KAAKiG,kBAAmBnG,UAAU,UAAnD,gBACA,4BAAQmC,QAASjC,KAAK0F,KAAM5F,UAAU,UAAtC,aACA,+BAAO,2BAAOgI,KAAK,WAAWC,SAAU/H,KAAKqF,iBAA7C,UACA,4BACE,+EACA,kE,GA5RsBjD,IAAMC,gB,MCAxC2F,iBAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.0049e85d.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Square.scss\";\r\n\r\nclass Square extends React.PureComponent {\r\n  /*\r\n    We use PureComponent, so it compares new props with previous props,\r\n    and only re-renders when props changed.\r\n   */\r\n  render() {\r\n\r\n    // console.log(\"Rendering Square\");\r\n    let className = \"square\";\r\n    let localId = `Sq${this.props.squareId}`;\r\n\r\n    if(this.props.active) {\r\n      className += \" active\";\r\n    }\r\n    if(this.props.value){\r\n      if(this.props.isBreathing) {\r\n        className += \" breathing\";\r\n      } else {\r\n        className += \" dead\";\r\n      }\r\n      if(this.props.isShooting) {\r\n        className += \" shooting\";\r\n      }\r\n    }\r\n\r\n    let randomTime = `${(Math.random()+0.5).toFixed(2)}s`\r\n    let animationBreathing = this.props.isBreathing ?\r\n        `breathing ${randomTime} alternate infinite` : 'none';\r\n\r\n    let targetCoords = this.props.targetPosition;\r\n    let projectileNumber = 5;\r\n    let projectiles = [];\r\n    let customStyle = \"\";\r\n\r\n    let calcNewAangle = function(x, y){\r\n      let angle;\r\n      if(y >= 0) {\r\n        angle = - Math.atan(\r\n          x/y\r\n        ) * (180/Math.PI);\r\n      }else if(y < 0) {\r\n        angle = (180/Math.PI) *\r\n          (\r\n            Math.atan(\r\n              x/-y\r\n            ) + Math.PI\r\n          )\r\n      }\r\n      return angle;\r\n    }\r\n\r\n    if((this.props.targetPosition && this.props.position && this.props.isShooting) &&\r\n      (this.props.targetPosition.x !== this.props.position.x ||\r\n      this.props.targetPosition.y !== this.props.position.y)) {\r\n\r\n      if(targetCoords) {\r\n\r\n        let distanceToTargetX = 35*(targetCoords.x-this.props.position.x);\r\n        let distanceToTargetY = 35*(targetCoords.y-this.props.position.y);\r\n        let actualDistance = Math.sqrt(Math.pow(distanceToTargetX, 2) + Math.pow(distanceToTargetY, 2));\r\n        actualDistance = actualDistance + 16;\r\n        //console.log(actualDistance);\r\n\r\n        if(this.props.weaponType === 'Lazer') {\r\n\r\n          let className=`projectile${localId}_beam`;\r\n          let projectile= \"\";\r\n          let angle = calcNewAangle(distanceToTargetX, distanceToTargetY);\r\n          customStyle = `\r\n            @keyframes pulsing${localId} {\r\n              0%  {opacity: 0.1;}\r\n              100%  {opacity: 1;}\r\n            }\r\n\r\n            .${className} {\r\n              width: ${actualDistance}px;\r\n              height: 3px;\r\n              border-radius: 5px;\r\n              background: #F00;\r\n              position: absolute;\r\n              top: 16px;\r\n              left: 16px;\r\n\r\n              transform: rotate(${angle + 90}deg);\r\n              transform-origin: left 0px;\r\n              animation: pulsing${localId} 0.1s linear infinite;\r\n              box-shadow: 0 0 5px 5px white;\r\n              z-index: 10;\r\n            }\r\n\r\n            `;\r\n\r\n          projectiles.push(<div key={className} className={className}>{projectile}</div>);\r\n        }else {\r\n\r\n          customStyle = `\r\n            @keyframes shooting${localId} {\r\n              0%   {transform: scale(1);}\r\n              100% {transform: translate(\r\n                ${36*(targetCoords.x-this.props.position.x)}px,\r\n                ${36*(targetCoords.y-this.props.position.y)}px\r\n              )}\r\n            }\r\n\r\n            `;\r\n\r\n          while(projectileNumber--) {\r\n            customStyle += `\r\n            .projectile${localId}_${projectileNumber} {\r\n              position: absolute;\r\n              top: 5px;\r\n              left: 0px;\r\n              width: 100%;\r\n              height: 100%;\r\n              line-height: 34px;\r\n              font-size: 17px;\r\n              animation: shooting${localId} 0.5s linear infinite;\r\n              animation-delay: ${projectileNumber  * 0.5}s;\r\n              color: white;\r\n            }`;\r\n          };\r\n          let projectile = this.props.isShooting ? \"*\" : \"\";\r\n\r\n          projectileNumber = 5;\r\n\r\n          while(projectileNumber--) {\r\n            let className=`projectile projectile${localId}_${projectileNumber}`\r\n            projectiles.push(<div key={className} className={className}>{projectile}</div>);\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <button className={className} onClick={() => this.props.onClick(this.props.squareId)}>\r\n        <div className=\"content\" style={{\r\n          animation: animationBreathing\r\n        }}>{this.props.value}</div>\r\n        <style>\r\n            {customStyle}\r\n        </style>\r\n        {projectiles}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from '../Square';\r\nimport './Board.scss';\r\n\r\nexport default class Board extends React.PureComponent {\r\n  renderCounter = 0\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(i) {\r\n    console.log(\"Handles Click on Board\", i);\r\n    this.props.onClick(i);\r\n  }\r\n\r\n  renderSquare(i, rowId, colId) {\r\n    /*\r\n    We pass one and the same function to all the Squares when rendering,\r\n    so they do not detect getting a new fat-arrow function as a change of props.\r\n\r\n    This is CRUCIAL to only rerender squares with changed values.\r\n\r\n     */\r\n\r\n    return (\r\n      <Square\r\n        squareId={i}\r\n        position={this.props.squares[i] && this.props.squares[i].position}\r\n        value={this.props.squares[i] && this.props.squares[i].value}\r\n        active={this.props.squares[i] && this.props.squares[i].active}\r\n        isBreathing={this.props.squares[i] && this.props.squares[i].isBreathing}\r\n        isShooting={this.props.squares[i] && this.props.squares[i].isShooting}\r\n        targetPosition={this.props.squares[i] && this.props.squares[i].targetPosition}\r\n        onClick={this.handleClick}\r\n        weaponType={this.props.squares[i] && this.props.squares[i].inventory && this.props.squares[i].inventory[0]}\r\n        key={i}\r\n\r\n        rowNumber={rowId}\r\n        colNumber={colId}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // console.log(\"Rendering Board. #\", this.renderCounter++);\r\n\r\n    // Initial values for the Board\r\n    let cellId=0;\r\n    let rowId=0;\r\n    let colId;\r\n\r\n    let rows = Array(this.props.size).fill(null).map((row, number) => {\r\n      colId = 0;\r\n      let cells = Array(this.props.size).fill(null).map((cell, number) => {\r\n        return this.renderSquare(cellId++, rowId, colId++);\r\n      });\r\n      return (\r\n        <div key={rowId++} className=\"board-row\">\r\n          {cells}\r\n        </div>\r\n      );\r\n    });\r\n\r\n    let className = \"board \" + this.props.className;\r\n    return (\r\n      <div className={className}>\r\n        {rows}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './ProgressBar.scss';\nimport './EntityView.scss';\n\n\nclass EntityView extends React.Component {\n  renderCount = 0\n\n  render() {\n    // console.log(\"Rendering EntityView. #\", this.renderCount++);\n\n    /*\n      FIXME: Below should be separated into several sub-components\n      Each sub-component should receive flat data (position, hp, ...)\n     */\n    let className = \"entity\";\n    if(this.props.entity.active) {\n      className+=\" active\";\n    }\n\n    let { entity } = this.props;\n    // let { position, value, age, name, hp, maxHp, isBreathing, active } = entity;\n    let { isBreathing } = entity;\n    // let { x, y } = position;\n    // console.log(this.props)\n    // console.log(entity)\n    // console.log(isBreathing)\n    let lifeSigns = isBreathing ? \"ALIVE\" : \"DEAD\";\n    return (\n\n      <div className={className}>\n        <div className=\"position\" title=\"Position\">\n          <span>[{entity.position.x}, {this.props.entity.position.y}]</span>\n        </div>\n        <div className=\"portrait\">\n          {this.props.entity.value}\n        </div>\n        <strong title=\"Name\">{this.props.entity.name}</strong>\n        <em title=\"Age\"> ({this.props.entity.age})</em>\n        {` `}{lifeSigns}\n        <br />\n        <span>HP: {this.props.entity.hp}/{this.props.entity.maxHp}</span>\n        <span> Rounds: {this.props.entity.rounds} / {this.props.entity.maxRounds}</span>\n        <progress\n          title=\"HP\"\n          max={this.props.entity.maxHp}\n          value={this.props.entity.hp}\n          percent={~~(this.props.entity.hp * 100 / this.props.entity.maxHp)}\n        >\n        </progress>\n      </div>\n    );\n  }\n}\n\nexport default EntityView;\n","import React from 'react';\nimport EntityView from '../EntityView';\nimport './EntitiesList.scss';\n\nexport default class ListOfEntities extends React.Component {\n  renderCounter = 0\n  render() {\n    // console.log(\"Rendering EntitiesList #\", this.renderCounter++);\n    var entities = this.props.entities.map(obj => {\n      return (\n        <EntityView entity={obj} key={obj.name}/>\n      )\n    });\n    return (\n      <div className=\"listOfEntities\">\n        List of Entities: {entities}\n      </div>\n    );\n  }\n}\n","const entities = [\r\n  {\r\n    position: {x:0, y:0}, value: \"😠\", name: \"John Rambo\", age: 40, hp: 95, maxHp: 100,\r\n    inventory: ['KA-BAR', 'M16'], equipment: {head: 'Red Bandana'}, isBreathing: true,\r\n    damage: 1, rounds: 10, maxRounds: 15, hasWeapon: true,\r\n  },\r\n  {\r\n    position: {x:0, y:1}, value: \"👩\", name: \"Ellen Ripley\", age: 30, hp: 50, maxHp: 65,\r\n    inventory: ['Lazer', 'Motion Detector'], equipment: {head: 'Afro'}, isBreathing: true,\r\n    damage: 1, rounds: 10, maxRounds: 10, hasWeapon: true,\r\n  },\r\n  {\r\n    position: {x:4, y:8}, value: \"🧑🏻\", name: \"Lazer Blady\", age: 60, hp: 75, maxHp: 100,\r\n    inventory: ['Lazer'], equipment: {}, isBreathing: true,\r\n    damage: 10, rounds: 3, maxRounds: 3, hasWeapon: true,\r\n  },\r\n  {position: {x:8, y:8}, value: \"🐙\", name: \"Octo\", age: 8, hp: 888, maxHp: 1000, inventory: [], equipment: {}, isBreathing: true,},\r\n  {position: {x:5, y:5}, value: \"🦑\", name: \"Squid\", age: 5, hp: 55, maxHp: 100, inventory: [], equipment: {}, isBreathing: true,},\r\n\r\n];\r\n\r\nexport default entities;\r\n","import React from 'react';\r\nimport Board from '../Board';\r\nimport EntitiesList from '../EntitiesList';\r\nimport EntitiesValues from './EntitiesValues';\r\nimport './Game.scss';\r\n\r\nexport default class Game extends React.PureComponent {\r\n  /*\r\n    We have `state.entities` and we have `squares`,\r\n    both of which are representing the actual state of the game.\r\n    Perhaps we should keep squares within the state.\r\n  */\r\n  renderCounter = 0\r\n  stepNumber = 0\r\n  //squares = Array(5*5).fill(null)\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Initial value of game state\r\n    this.state = {\r\n      selected: null,\r\n      arenaSize: 10,\r\n      isBoardRotated: false,\r\n      entities: EntitiesValues,\r\n      squares: [],\r\n      autoLoop: true,\r\n    }\r\n\r\n    this.loop = this.loop.bind(this);\r\n    this.getSquare = this.getSquare.bind(this);\r\n    this.setSquare = this.setSquare.bind(this);\r\n    this.toggleRotateBoard = this.toggleRotateBoard.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.loop();\r\n  }\r\n\r\n  setSquaresAccordingToEntities() {\r\n    this.setState((previousState)=>{\r\n      let squares = JSON.parse(JSON.stringify(previousState.squares));\r\n      //let squares = previousState.squares;\r\n\r\n      previousState.entities.forEach((entity)=>{\r\n        this.setSquare(squares, entity.position.x, entity.position.y, entity);\r\n      });\r\n\r\n      return {squares};\r\n    });\r\n  }\r\n\r\n  getSquare(squares, x, y) {\r\n    return squares[this.targetSquareIndex(x, y)];\r\n  }\r\n\r\n  setSquare(squares, x, y, value) {\r\n    squares[this.targetSquareIndex(x, y)] = value;\r\n  }\r\n\r\n  targetSquareIndex(x, y) {\r\n    return y * this.state.arenaSize + x;\r\n  }\r\n\r\n  loop() {\r\n    this.stepNumber++;\r\n    this.setState( (previousState) => {\r\n      // new copy of entities based on up-to-date state\r\n      let localCopyOfPreviousState = JSON.parse(JSON.stringify(previousState));\r\n      let { entities, squares } = localCopyOfPreviousState;\r\n\r\n      let JR = entities[0];// a reference to JR\r\n      if(JR.isBreathing){\r\n        // John Rambo AI\r\n        // changing the original JR entity within entities array\r\n        this.moveEntityRandomly(squares, JR);\r\n      }\r\n      //console.log(entities);\r\n      return {entities: entities, squares: squares};\r\n    });\r\n\r\n    this.processEntities();\r\n    if(this.state.autoLoop) {\r\n      setTimeout(this.loop, 1000);\r\n    }\r\n  }\r\n\r\n  moveEntityRandomly(squares, entity) {\r\n    // modifies entity in-place\r\n    let oldPositionX = entity.position.x;\r\n    let oldPositionY = entity.position.y;\r\n\r\n    entity.position.x = entity.position.x +\r\n      (Math.floor(Math.random()*2)) -\r\n      (Math.floor(Math.random()*2));\r\n    entity.position.y = entity.position.y +\r\n      (Math.floor(Math.random()*2)) -\r\n      (Math.floor(Math.random()*2));\r\n\r\n    if(entity.position.x < 0) entity.position.x = 0;\r\n    if(entity.position.y < 0) entity.position.y = 0;\r\n    if(entity.position.x > this.state.arenaSize - 1) entity.position.x = this.state.arenaSize - 1;\r\n    if(entity.position.y > this.state.arenaSize - 1) entity.position.y = this.state.arenaSize - 1;\r\n\r\n    let newSquare = this.getSquare(squares, entity.position.x, entity.position.y);\r\n\r\n    if (newSquare) {\r\n      entity.position.x = oldPositionX;\r\n      entity.position.y = oldPositionY;\r\n    }\r\n\r\n    if(\r\n      oldPositionX !== entity.position.x ||\r\n      oldPositionY !== entity.position.y\r\n    ) {\r\n      this.setSquare(squares, oldPositionX, oldPositionY, null);\r\n    }\r\n\r\n    // NO RETURN AS IT'S MODIFIED IN-PLACE return entity;\r\n    // WHICH IS A BAD HABIT, BUT OH SO COMFY.\r\n  }\r\n\r\n  processEntities(){\r\n    //console.log(\"Processing entities\");\r\n    this.setState((state) => {\r\n      let localCopyOfEntities = JSON.parse(JSON.stringify(state.entities));\r\n      localCopyOfEntities.forEach(entity => {\r\n\r\n        if(entity.isShooting && entity.targetPosition && (\r\n          entity.targetPosition.x !== entity.position.x ||\r\n          entity.targetPosition.y !== entity.position.y\r\n        )) {\r\n          if(entity.rounds-- === 0) {\r\n            entity.isShooting = false;\r\n            entity.rounds = entity.maxRounds;\r\n          }\r\n          /*\r\n          Searching for such an entity that its position is equal to our target position.\r\n          */\r\n          let targetEntities = localCopyOfEntities.filter((potentialTargetEntity) => {\r\n            return potentialTargetEntity.position.x === entity.targetPosition.x &&\r\n            potentialTargetEntity.position.y === entity.targetPosition.y\r\n          });\r\n          //console.log(targetEntities);\r\n          targetEntities.forEach((targetEntity) => {\r\n            targetEntity.hp -= entity.damage;\r\n            if(targetEntity.hp <= 0) {\r\n              entity.isShooting = false;\r\n            }\r\n          });\r\n        }\r\n\r\n        if(entity.hp <= 0){\r\n          entity.hp = 0;\r\n          entity.isBreathing = false;\r\n        }\r\n\r\n      });\r\n      return {entities: localCopyOfEntities}\r\n    },\r\n      () => {\r\n        this.setSquaresAccordingToEntities();\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  getEntityId(entity) {\r\n    return entity.name;\r\n  }\r\n\r\n  findEntityById(entities, id) {\r\n    let result = entities.filter((entity) => entity.name === id)[0];\r\n    //console.log(\"found entity:\", result);\r\n    return result;\r\n  }\r\n\r\n  setSelected(entities, selected, value) {\r\n    let selectedInEntities = this.findEntityById(entities, this.getEntityId(selected));\r\n    if(value) {\r\n      selected.active = value;\r\n    } else {\r\n      selected = null;\r\n      console.log(\"Nullified:\", selected);\r\n    }\r\n    selectedInEntities.active = value;\r\n    return selected;\r\n  }\r\n\r\n  handleBoardClick(i) {\r\n    //console.log(\"CLICKED \", i);\r\n    this.setState((previousState) => {\r\n      let localCopyOfPreviousState = JSON.parse(JSON.stringify(previousState));\r\n      let { entities, squares, selected } = localCopyOfPreviousState;\r\n\r\n      if(squares[i]) {\r\n        if(selected) {\r\n          if(selected.name === previousState.squares[i].name) {\r\n            selected = this.setSelected(entities, selected, false);\r\n            console.log(selected);\r\n          } else {\r\n            let selectedEntity = this.findEntityById(entities, this.getEntityId(selected));\r\n            selectedEntity.targetPosition = previousState.squares[i].position;\r\n            if(selectedEntity.hasWeapon ) {\r\n              selectedEntity.isShooting = true;\r\n            }\r\n          }\r\n        } else {\r\n          selected = squares[i];\r\n          this.setSelected(entities, selected, true);\r\n        }\r\n\r\n      } else {\r\n        /* Deselecting and stopping fire on all entities */\r\n        entities.forEach((entity) => {\r\n          entity.active = false;\r\n        });\r\n        entities.forEach(entity => {\r\n          entity.isShooting = false;\r\n        })\r\n        selected = null;\r\n      }\r\n\r\n      return {entities, squares, selected}\r\n    }, ()=> {\r\n      this.processEntities();\r\n    });\r\n\r\n  }\r\n\r\n  nuke(dmg){\r\n    //console.log(\"Nuking\")\r\n    this.setState( (state) => {\r\n      let localCopyOfEntities = JSON.parse(JSON.stringify(state.entities));\r\n      localCopyOfEntities.forEach(entity => {\r\n        entity.hp = entity.hp - dmg;\r\n      });\r\n      return {entities: localCopyOfEntities}\r\n    }, () => {\r\n      this.processEntities();\r\n    });\r\n  }\r\n\r\n\r\n  toggleRotateBoard(){\r\n    this.setState({isBoardRotated: !this.state.isBoardRotated});\r\n  }\r\n\r\n  switchAutoLoop = () => {\r\n    this.setState((previousState) => {\r\n      return {autoLoop: !previousState.autoLoop};\r\n    },()=>{\r\n      if(this.state.autoLoop) {\r\n        this.loop();\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let boardClassName = this.state.isBoardRotated ? \"rotated-board\" : \"\";\r\n    //console.log(\"Rendering Game. #\", this.renderCounter++);\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={this.state.squares}\r\n            onClick={(i) => this.handleBoardClick(i)}\r\n            size={this.state.arenaSize}\r\n            className={boardClassName}\r\n          />\r\n          <EntitiesList\r\n            entities={this.state.entities}\r\n          />\r\n          <div className=\"step-counter\">{this.stepNumber}</div>\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <span className=\"selected\">Selected: {this.state.selected && this.state.selected.name}</span>\r\n          <button\r\n            onClick={\r\n              ()=>{\r\n                this.nuke(40);\r\n              }\r\n            }\r\n            className=\"button button-nuke\"\r\n          >Nuke All</button>\r\n          <button onClick={this.toggleRotateBoard} className=\"button\">Rotate Board</button>\r\n          <button onClick={this.loop} className=\"button\">Next Step</button>\r\n          <label><input type=\"checkbox\" onChange={this.switchAutoLoop}/> Auto </label>\r\n          <ul>\r\n            <li>Click Ellen Ripley on the board, to select her.</li>\r\n            <li>Click a target to shoot it.</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import React from 'react';\nimport { render } from 'react-dom';\nimport Game from './components/Game';\n\nimport './style.scss';\n\nrender(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}